{"version":3,"file":"kite.min.js","sources":["../../node_modules/grunt-requirejs/node_modules/almond/almond.js","../../../assert/js/assert.js","../../../phet-core/js/core.js","../../../phet-core/js/phetAllocation.js","../../js/kite.js","../../../dot/js/dot.js","../../../phet-core/js/extend.js","../../../phet-core/js/inherit.js","../../../phet-core/js/Poolable.js","../../../dot/js/Util.js","../../../dot/js/Vector2.js","../../../dot/js/Bounds2.js","../../../dot/js/Ray2.js","../../js/segments/Segment.js","../../js/segments/Line.js","../../js/segments/Arc.js","../../js/util/Subpath.js","../../js/../parser/svgPath.js","../../js/util/LineStyles.js","../../../dot/js/Vector4.js","../../../dot/js/Vector3.js","../../../dot/js/Matrix4.js","../../../dot/js/Matrix3.js","../../js/segments/Quadratic.js","../../js/segments/Cubic.js","../../../dot/js/Transform3.js","../../js/segments/EllipticalArc.js","../../js/Shape.js","../../js/main.js","../../../dot/js/Bounds3.js","../../../dot/js/Complex.js","../../../dot/js/ConvexHull2.js","../../../dot/js/Dimension2.js","../../../dot/js/EigenvalueDecomposition.js","../../../dot/js/LinearFunction.js","../../../dot/js/LUDecomposition.js","../../../phet-core/js/isArray.js","../../../dot/js/SingularValueDecomposition.js","../../../dot/js/QRDecomposition.js","../../../dot/js/Matrix.js","../../../axon/js/axon.js","../../../axon/js/Property.js","../../../dot/js/ObservableBounds2.js","../../../dot/js/ObservableMatrix3.js","../../../dot/js/ObservableVector2.js","../../../dot/js/Permutation.js","../../../dot/js/Quaternion.js","../../../dot/js/Ray3.js","../../../dot/js/Rectangle.js","../../../dot/js/Transform4.js","../../../dot/js/main.js","../../../phet-core/js/collect.js","../../../phet-core/js/escapeHTML.js","../../../phet-core/js/inheritPrototype.js","../../../phet-core/js/loadScript.js","../../../phet-core/js/platform.js","../../../phet-core/js/profiler.js","../../../phet-core/js/main.js","../../js/production-config.js"],"names":[],"mappings":"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KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,OAAA,IAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,OAAA,GAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,OAAA,IAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,OAAA,IAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,OAAA,GAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,OAAA,IAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,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A,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAA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","sourcesContent":["\nvar requirejs, require, define;\n(function (undef) {\n  var main, req, makeMap, handlers, defined = {}, waiting = {}, config = {}, defining = {}, hasOwn = Object.prototype.hasOwnProperty, aps = [].slice;\n  function hasProp(obj, prop) {\n    return hasOwn.call(obj, prop);\n  }\n  function normalize(name, baseName) {\n    var nameParts, nameSegment, mapValue, foundMap, foundI, foundStarMap, starI, i, j, part, baseParts = baseName && baseName.split('/'), map = config.map, starMap = map && map['*'] || {};\n    if (name && name.charAt(0) === '.') {\n      if (baseName) {\n        baseParts = baseParts.slice(0, baseParts.length - 1);\n        name = baseParts.concat(name.split('/'));\n        for (i = 0; i < name.length; i += 1) {\n          part = name[i];\n          if (part === '.') {\n            name.splice(i, 1);\n            i -= 1;\n          } else if (part === '..') {\n            if (i === 1 && (name[2] === '..' || name[0] === '..')) {\n              break;\n            } else if (i > 0) {\n              name.splice(i - 1, 2);\n              i -= 2;\n            }\n          }\n        }\n        name = name.join('/');\n      } else if (name.indexOf('./') === 0) {\n        name = name.substring(2);\n      }\n    }\n    if ((baseParts || starMap) && map) {\n      nameParts = name.split('/');\n      for (i = nameParts.length; i > 0; i -= 1) {\n        nameSegment = nameParts.slice(0, i).join('/');\n        if (baseParts) {\n          for (j = baseParts.length; j > 0; j -= 1) {\n            mapValue = map[baseParts.slice(0, j).join('/')];\n            if (mapValue) {\n              mapValue = mapValue[nameSegment];\n              if (mapValue) {\n                foundMap = mapValue;\n                foundI = i;\n                break;\n              }\n            }\n          }\n        }\n        if (foundMap) {\n          break;\n        }\n        if (!foundStarMap && starMap && starMap[nameSegment]) {\n          foundStarMap = starMap[nameSegment];\n          starI = i;\n        }\n      }\n      if (!foundMap && foundStarMap) {\n        foundMap = foundStarMap;\n        foundI = starI;\n      }\n      if (foundMap) {\n        nameParts.splice(0, foundI, foundMap);\n        name = nameParts.join('/');\n      }\n    }\n    return name;\n  }\n  function makeRequire(relName, forceSync) {\n    return function () {\n      return req.apply(undef, aps.call(arguments, 0).concat([\n        relName,\n        forceSync\n      ]));\n    };\n  }\n  function makeNormalize(relName) {\n    return function (name) {\n      return normalize(name, relName);\n    };\n  }\n  function makeLoad(depName) {\n    return function (value) {\n      defined[depName] = value;\n    };\n  }\n  function callDep(name) {\n    if (hasProp(waiting, name)) {\n      var args = waiting[name];\n      delete waiting[name];\n      defining[name] = true;\n      main.apply(undef, args);\n    }\n    if (!hasProp(defined, name) && !hasProp(defining, name)) {\n      throw new Error('No ' + name);\n    }\n    return defined[name];\n  }\n  function splitPrefix(name) {\n    var prefix, index = name ? name.indexOf('!') : -1;\n    if (index > -1) {\n      prefix = name.substring(0, index);\n      name = name.substring(index + 1, name.length);\n    }\n    return [\n      prefix,\n      name\n    ];\n  }\n  makeMap = function (name, relName) {\n    var plugin, parts = splitPrefix(name), prefix = parts[0];\n    name = parts[1];\n    if (prefix) {\n      prefix = normalize(prefix, relName);\n      plugin = callDep(prefix);\n    }\n    if (prefix) {\n      if (plugin && plugin.normalize) {\n        name = plugin.normalize(name, makeNormalize(relName));\n      } else {\n        name = normalize(name, relName);\n      }\n    } else {\n      name = normalize(name, relName);\n      parts = splitPrefix(name);\n      prefix = parts[0];\n      name = parts[1];\n      if (prefix) {\n        plugin = callDep(prefix);\n      }\n    }\n    return {\n      f: prefix ? prefix + '!' + name : name,\n      n: name,\n      pr: prefix,\n      p: plugin\n    };\n  };\n  function makeConfig(name) {\n    return function () {\n      return config && config.config && config.config[name] || {};\n    };\n  }\n  handlers = {\n    require: function (name) {\n      return makeRequire(name);\n    },\n    exports: function (name) {\n      var e = defined[name];\n      if (typeof e !== 'undefined') {\n        return e;\n      } else {\n        return defined[name] = {};\n      }\n    },\n    module: function (name) {\n      return {\n        id: name,\n        uri: '',\n        exports: defined[name],\n        config: makeConfig(name)\n      };\n    }\n  };\n  main = function (name, deps, callback, relName) {\n    var cjsModule, depName, ret, map, i, args = [], usingExports;\n    relName = relName || name;\n    if (typeof callback === 'function') {\n      deps = !deps.length && callback.length ? [\n        'require',\n        'exports',\n        'module'\n      ] : deps;\n      for (i = 0; i < deps.length; i += 1) {\n        map = makeMap(deps[i], relName);\n        depName = map.f;\n        if (depName === 'require') {\n          args[i] = handlers.require(name);\n        } else if (depName === 'exports') {\n          args[i] = handlers.exports(name);\n          usingExports = true;\n        } else if (depName === 'module') {\n          cjsModule = args[i] = handlers.module(name);\n        } else if (hasProp(defined, depName) || hasProp(waiting, depName) || hasProp(defining, depName)) {\n          args[i] = callDep(depName);\n        } else if (map.p) {\n          map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});\n          args[i] = defined[depName];\n        } else {\n          throw new Error(name + ' missing ' + depName);\n        }\n      }\n      ret = callback.apply(defined[name], args);\n      if (name) {\n        if (cjsModule && cjsModule.exports !== undef && cjsModule.exports !== defined[name]) {\n          defined[name] = cjsModule.exports;\n        } else if (ret !== undef || !usingExports) {\n          defined[name] = ret;\n        }\n      }\n    } else if (name) {\n      defined[name] = callback;\n    }\n  };\n  requirejs = require = req = function (deps, callback, relName, forceSync, alt) {\n    if (typeof deps === 'string') {\n      if (handlers[deps]) {\n        return handlers[deps](callback);\n      }\n      return callDep(makeMap(deps, callback).f);\n    } else if (!deps.splice) {\n      config = deps;\n      if (callback.splice) {\n        deps = callback;\n        callback = relName;\n        relName = null;\n      } else {\n        deps = undef;\n      }\n    }\n    callback = callback || function () {\n    };\n    if (typeof relName === 'function') {\n      relName = forceSync;\n      forceSync = alt;\n    }\n    if (forceSync) {\n      main(undef, deps, callback, relName);\n    } else {\n      setTimeout(function () {\n        main(undef, deps, callback, relName);\n      }, 4);\n    }\n    return req;\n  };\n  req.config = function (cfg) {\n    config = cfg;\n    if (config.deps) {\n      req(config.deps, config.callback);\n    }\n    return req;\n  };\n  requirejs._defined = defined;\n  define = function (name, deps, callback) {\n    if (!deps.splice) {\n      callback = deps;\n      deps = [];\n    }\n    if (!hasProp(defined, name) && !hasProp(waiting, name)) {\n      waiting[name] = [\n        name,\n        deps,\n        callback\n      ];\n    }\n  };\n  define.amd = { jQuery: true };\n}());\ndefine(\"almond\", function(){});\n","\ndefine('ASSERT/assert',[],function () {\n  'use strict';\n  return function assert(name, excludeByDefault) {\n    var hasName = 'assert.' + name;\n    var flagDefined = window.has && window.has(hasName) !== undefined;\n    var skipAssert = flagDefined ? !window.has(hasName) : excludeByDefault;\n    if (skipAssert) {\n      return null;\n    } else {\n      return function (predicate, message) {\n        var result = typeof predicate === 'function' ? predicate() : predicate;\n        if (!result) {\n          if (window.navigator && window.navigator.appName === 'Microsoft Internet Explorer') {\n            try {\n              throw new Error();\n            } catch (e) {\n              message = message + ', stack=\\n' + e.stack;\n            }\n          }\n          throw new Error('Assertion failed: ' + message);\n        }\n      };\n    }\n  };\n});","\ndefine('PHET_CORE/core',['require','ASSERT/assert','ASSERT/assert'],function (require) {\n  'use strict';\n  window.assert = window.assert || require('ASSERT/assert')('basic');\n  window.assertSlow = window.assertSlow || require('ASSERT/assert')('slow', true);\n  return {};\n});","\ndefine('PHET_CORE/phetAllocation',['require','PHET_CORE/core'],function (require) {\n  'use strict';\n  var core = require('PHET_CORE/core');\n  var phetAllocation = core.phetAllocation = function phetAllocation(name) {\n      if (window.alloc) {\n        var stack;\n        try {\n          throw new Error();\n        } catch (e) {\n          stack = e.stack;\n        }\n        if (!window.alloc[name]) {\n          window.alloc[name] = {\n            count: 0,\n            stacks: {}\n          };\n        }\n        var log = window.alloc[name];\n        log.count++;\n        if (!log.stacks[stack]) {\n          log.stacks[stack] = 1;\n        } else {\n          log.stacks[stack] += 1;\n        }\n        log.report = function () {\n          var stacks = Object.keys(log.stacks);\n          stacks = _.sortBy(stacks, function (key) {\n            return log.stacks[key];\n          });\n          _.each(stacks, function (stack) {\n            console.log(log.stacks[stack] + ': ' + stack);\n          });\n        };\n      }\n    };\n  return phetAllocation;\n});","\ndefine('KITE/kite',['require','ASSERT/assert','ASSERT/assert','PHET_CORE/phetAllocation'],function (require) {\n  'use strict';\n  window.assert = window.assert || require('ASSERT/assert')('basic');\n  window.assertSlow = window.assertSlow || require('ASSERT/assert')('slow', true);\n  window.phetAllocation = require('PHET_CORE/phetAllocation');\n  var kite = {};\n  return kite;\n});","\ndefine('DOT/dot',['require','ASSERT/assert','ASSERT/assert','PHET_CORE/phetAllocation'],function (require) {\n  'use strict';\n  window.assert = window.assert || require('ASSERT/assert')('basic');\n  window.assertSlow = window.assertSlow || require('ASSERT/assert')('slow', true);\n  window.phetAllocation = require('PHET_CORE/phetAllocation');\n  var dot = function dot() {\n    switch (arguments.length) {\n    case 2:\n      return new dot.Vector2(arguments[0], arguments[1]);\n    case 3:\n      return new dot.Vector3(arguments[0], arguments[1], arguments[2]);\n    case 4:\n      return new dot.Vector4(arguments[0], arguments[1], arguments[2], arguments[3]);\n    default:\n      throw new Error('dot takes 2-4 arguments');\n    }\n  };\n  dot.FastArray = window.Float64Array ? window.Float64Array : window.Array;\n  return dot;\n});","\ndefine('PHET_CORE/extend',['require','PHET_CORE/core'],function (require) {\n  'use strict';\n  var core = require('PHET_CORE/core');\n  var extend = core.extend = function extend(obj) {\n      _.each(Array.prototype.slice.call(arguments, 1), function (source) {\n        if (source) {\n          for (var prop in source) {\n            Object.defineProperty(obj, prop, Object.getOwnPropertyDescriptor(source, prop));\n          }\n        }\n      });\n      return obj;\n    };\n  return extend;\n});","\ndefine('PHET_CORE/inherit',['require','PHET_CORE/core','PHET_CORE/extend'],function (require) {\n  'use strict';\n  var core = require('PHET_CORE/core');\n  var extend = require('PHET_CORE/extend');\n  var inherit = core.inherit = function inherit(supertype, subtype, prototypeProperties, staticProperties) {\n      null;\n      function F() {\n      }\n      F.prototype = supertype.prototype;\n      subtype.prototype = extend(new F(), { constructor: subtype }, prototypeProperties);\n      extend(subtype, staticProperties);\n      return subtype;\n    };\n  return inherit;\n});","\ndefine('PHET_CORE/Poolable',['require','PHET_CORE/core','PHET_CORE/extend'],function (require) {\n  'use strict';\n  var core = require('PHET_CORE/core');\n  var extend = require('PHET_CORE/extend');\n  var Poolable = core.Poolable = function Poolable(type, options) {\n      var proto = type.prototype;\n      options = extend({\n        maxPoolSize: 50,\n        initialSize: 0\n      }, options);\n      var pool = type.pool = [];\n      if (options.defaultFactory) {\n        type.dirtyFromPool = function () {\n          if (pool.length) {\n            return pool.pop();\n          } else {\n            return options.defaultFactory();\n          }\n        };\n        type.fillPool = function (n) {\n          while (pool.length < n) {\n            pool.push(options.defaultFactory());\n          }\n        };\n        type.fillPool(options.initialSize);\n      }\n      if (options.constructorDuplicateFactory) {\n        type.createFromPool = options.constructorDuplicateFactory(pool);\n      }\n      proto.freeToPool = function () {\n        if (pool.length < options.maxPoolSize) {\n          pool.push(this);\n        }\n      };\n    };\n  return Poolable;\n});","\ndefine('DOT/Util',['require','DOT/dot'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  dot.Util = {\n    testAssert: function () {\n      return 'assert.dot: ' + (null ? 'true' : 'false');\n    },\n    clamp: function (value, min, max) {\n      if (value < min) {\n        return min;\n      } else if (value > max) {\n        return max;\n      } else {\n        return value;\n      }\n    },\n    moduloBetweenDown: function (value, min, max) {\n      null;\n      var divisor = max - min;\n      var partial = (value - min) % divisor;\n      if (partial < 0) {\n        partial += divisor;\n      }\n      return partial + min;\n    },\n    moduloBetweenUp: function (value, min, max) {\n      return -Util.moduloBetweenDown(-value, -max, -min);\n    },\n    rangeInclusive: function (a, b) {\n      if (b < a) {\n        return [];\n      }\n      var result = new Array(b - a + 1);\n      for (var i = a; i <= b; i++) {\n        result[i - a] = i;\n      }\n      return result;\n    },\n    rangeExclusive: function (a, b) {\n      return Util.rangeInclusive(a + 1, b - 1);\n    },\n    toRadians: function (degrees) {\n      return Math.PI * degrees / 180;\n    },\n    toDegrees: function (radians) {\n      return 180 * radians / Math.PI;\n    },\n    lineLineIntersection: function (p1, p2, p3, p4) {\n      var x12 = p1.x - p2.x;\n      var x34 = p3.x - p4.x;\n      var y12 = p1.y - p2.y;\n      var y34 = p3.y - p4.y;\n      var denom = x12 * y34 - y12 * x34;\n      var a = p1.x * p2.y - p1.y * p2.x;\n      var b = p3.x * p4.y - p3.y * p4.x;\n      return new dot.Vector2((a * x34 - x12 * b) / denom, (a * y34 - y12 * b) / denom);\n    },\n    sphereRayIntersection: function (radius, ray, epsilon) {\n      epsilon = epsilon === undefined ? 0.00001 : epsilon;\n      var center = new dot.Vector3();\n      var rayDir = ray.dir;\n      var pos = ray.pos;\n      var centerToRay = pos.minus(center);\n      var tmp = rayDir.dot(centerToRay);\n      var centerToRayDistSq = centerToRay.magnitudeSquared();\n      var det = 4 * tmp * tmp - 4 * (centerToRayDistSq - radius * radius);\n      if (det < epsilon) {\n        return null;\n      }\n      var base = rayDir.dot(center) - rayDir.dot(pos);\n      var sqt = Math.sqrt(det) / 2;\n      var ta = base - sqt;\n      var tb = base + sqt;\n      if (tb < epsilon) {\n        return null;\n      }\n      var hitPositionB = ray.pointAtDistance(tb);\n      var normalB = hitPositionB.minus(center).normalized();\n      if (ta < epsilon) {\n        return {\n          distance: tb,\n          hitPoint: hitPositionB,\n          normal: normalB.negated(),\n          fromOutside: false\n        };\n      } else {\n        var hitPositionA = ray.pointAtDistance(ta);\n        var normalA = hitPositionA.minus(center).normalized();\n        return {\n          distance: ta,\n          hitPoint: hitPositionA,\n          normal: normalA,\n          fromOutside: true\n        };\n      }\n    },\n    solveQuadraticRootsReal: function (a, b, c) {\n      var epsilon = 10000000;\n      if (a === 0 || Math.abs(b / a) > epsilon || Math.abs(c / a) > epsilon) {\n        return [-c / b];\n      }\n      var discriminant = b * b - 4 * a * c;\n      if (discriminant < 0) {\n        return [];\n      }\n      var sqrt = Math.sqrt(discriminant);\n      return [\n        (-b - sqrt) / (2 * a),\n        (-b + sqrt) / (2 * a)\n      ];\n    },\n    solveCubicRootsReal: function (a, b, c, d) {\n      var epsilon = 10000000;\n      if (a === 0 || Math.abs(b / a) > epsilon || Math.abs(c / a) > epsilon || Math.abs(d / a) > epsilon) {\n        return Util.solveQuadraticRootsReal(b, c, d);\n      }\n      if (d === 0 || Math.abs(a / d) > epsilon || Math.abs(b / d) > epsilon || Math.abs(c / d) > epsilon) {\n        return Util.solveQuadraticRootsReal(a, b, c);\n      }\n      b /= a;\n      c /= a;\n      d /= a;\n      var q = (3 * c - b * b) / 9;\n      var r = (-(27 * d) + b * (9 * c - 2 * (b * b))) / 54;\n      var discriminant = q * q * q + r * r;\n      var b3 = b / 3;\n      if (discriminant > 0) {\n        var dsqrt = Math.sqrt(discriminant);\n        return [Util.cubeRoot(r + dsqrt) + Util.cubeRoot(r - dsqrt) - b3];\n      }\n      if (discriminant === 0) {\n        var rsqrt = Util.cubeRoot(r);\n        var doubleRoot = b3 - rsqrt;\n        return [\n          -b3 + 2 * rsqrt,\n          doubleRoot,\n          doubleRoot\n        ];\n      } else {\n        var qX = -q * q * q;\n        qX = Math.acos(r / Math.sqrt(qX));\n        var rr = 2 * Math.sqrt(-q);\n        return [\n          -b3 + rr * Math.cos(qX / 3),\n          -b3 + rr * Math.cos((qX + 2 * Math.PI) / 3),\n          -b3 + rr * Math.cos((qX + 4 * Math.PI) / 3)\n        ];\n      }\n    },\n    cubeRoot: function (x) {\n      return x >= 0 ? Math.pow(x, 1 / 3) : -Math.pow(-x, 1 / 3);\n    },\n    linear: function (a1, a2, b1, b2, a3) {\n      return (b2 - b1) / (a2 - a1) * (a3 - a1) + b1;\n    },\n    toFixed: function (number, decimalPlaces) {\n      var multiplier = Math.pow(10, decimalPlaces);\n      var value = Math.round(number * multiplier) / multiplier;\n      return value.toFixed(decimalPlaces);\n    },\n    toFixedNumber: function (number, decimalPlaces) {\n      return parseFloat(Util.toFixed(number, decimalPlaces));\n    },\n    isInteger: function (number) {\n      return Math.floor(number) === number;\n    },\n    lineSegmentIntersection: function (x1, y1, x2, y2, x3, y3, x4, y4) {\n      var numA = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);\n      var numB = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);\n      var denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);\n      if (denom === 0) {\n        return null;\n      } else {\n        var ua = numA / denom;\n        var ub = numB / denom;\n        if (!(ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1)) {\n          return null;\n        } else {\n          var x = x1 + ua * (x2 - x1);\n          var y = y1 + ua * (y2 - y1);\n          return new dot.Vector2(x, y);\n        }\n      }\n    },\n    distToSegmentSquared: function (point, a, b) {\n      var segmentLength = a.distanceSquared(b);\n      if (segmentLength === 0) {\n        return point.distanceSquared(a);\n      }\n      var t = ((point.x - a.x) * (b.x - a.x) + (point.y - a.y) * (b.y - a.y)) / segmentLength;\n      return t < 0 ? point.distanceSquared(a) : t > 1 ? point.distanceSquared(b) : point.distanceSquared(new dot.Vector2(a.x + t * (b.x - a.x), a.y + t * (b.y - a.y)));\n    },\n    distToSegment: function (point, a, b) {\n      return Math.sqrt(this.distToSegmentSquared(point, a, b));\n    },\n    arePointsCollinear: function (a, b, c, epsilon) {\n      if (epsilon === undefined) {\n        epsilon = 0;\n      }\n      return Util.triangleArea(a, b, c) <= epsilon;\n    },\n    triangleArea: function (a, b, c) {\n      return Math.abs(Util.triangleAreaSigned(a, b, c));\n    },\n    triangleAreaSigned: function (a, b, c) {\n      return a.x * (b.y - c.y) + b.x * (c.y - a.y) + c.x * (a.y - b.y);\n    },\n    log10: function (val) {\n      return Math.log(val) / Math.LN10;\n    }\n  };\n  var Util = dot.Util;\n  dot.testAssert = Util.testAssert;\n  dot.clamp = Util.clamp;\n  dot.moduloBetweenDown = Util.moduloBetweenDown;\n  dot.moduloBetweenUp = Util.moduloBetweenUp;\n  dot.rangeInclusive = Util.rangeInclusive;\n  dot.rangeExclusive = Util.rangeExclusive;\n  dot.toRadians = Util.toRadians;\n  dot.toDegrees = Util.toDegrees;\n  dot.lineLineIntersection = Util.lineLineIntersection;\n  dot.sphereRayIntersection = Util.sphereRayIntersection;\n  dot.solveQuadraticRootsReal = Util.solveQuadraticRootsReal;\n  dot.solveCubicRootsReal = Util.solveCubicRootsReal;\n  dot.cubeRoot = Util.cubeRoot;\n  dot.linear = Util.linear;\n  return Util;\n});","\ndefine('DOT/Vector2',['require','DOT/dot','PHET_CORE/inherit','PHET_CORE/Poolable','DOT/Util'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  var inherit = require('PHET_CORE/inherit');\n  var Poolable = require('PHET_CORE/Poolable');\n  require('DOT/Util');\n  dot.Vector2 = function Vector2(x, y) {\n    this.x = x || 0;\n    this.y = y || 0;\n    null;\n    null;\n    phetAllocation && phetAllocation('Vector2');\n  };\n  var Vector2 = dot.Vector2;\n  Vector2.createPolar = function (magnitude, angle) {\n    return new Vector2().setPolar(magnitude, angle);\n  };\n  Vector2.prototype = {\n    constructor: Vector2,\n    isVector2: true,\n    dimension: 2,\n    magnitude: function () {\n      return Math.sqrt(this.magnitudeSquared());\n    },\n    magnitudeSquared: function () {\n      return this.x * this.x + this.y * this.y;\n    },\n    distance: function (point) {\n      return Math.sqrt(this.distanceSquared(point));\n    },\n    distanceXY: function (x, y) {\n      var dx = this.x - x;\n      var dy = this.y - y;\n      return Math.sqrt(dx * dx + dy * dy);\n    },\n    distanceSquared: function (point) {\n      var dx = this.x - point.x;\n      var dy = this.y - point.y;\n      return dx * dx + dy * dy;\n    },\n    distanceSquaredXY: function (x, y) {\n      var dx = this.x - x;\n      var dy = this.y - y;\n      return dx * dx + dy * dy;\n    },\n    dot: function (v) {\n      return this.x * v.x + this.y * v.y;\n    },\n    dotXY: function (vx, vy) {\n      return this.x * vx + this.y * vy;\n    },\n    equals: function (other) {\n      return this.x === other.x && this.y === other.y;\n    },\n    equalsEpsilon: function (other, epsilon) {\n      if (!epsilon) {\n        epsilon = 0;\n      }\n      return Math.max(Math.abs(this.x - other.x), Math.abs(this.y - other.y)) <= epsilon;\n    },\n    isFinite: function () {\n      return isFinite(this.x) && isFinite(this.y);\n    },\n    copy: function (vector) {\n      if (vector) {\n        return vector.set(this);\n      } else {\n        return new Vector2(this.x, this.y);\n      }\n    },\n    crossScalar: function (v) {\n      return this.x * v.y - this.y * v.x;\n    },\n    normalized: function () {\n      var mag = this.magnitude();\n      if (mag === 0) {\n        throw new Error('Cannot normalize a zero-magnitude vector');\n      } else {\n        return new Vector2(this.x / mag, this.y / mag);\n      }\n    },\n    timesScalar: function (scalar) {\n      return new Vector2(this.x * scalar, this.y * scalar);\n    },\n    times: function (scalar) {\n      null;\n      return this.timesScalar(scalar);\n    },\n    componentTimes: function (v) {\n      return new Vector2(this.x * v.x, this.y * v.y);\n    },\n    plus: function (v) {\n      return new Vector2(this.x + v.x, this.y + v.y);\n    },\n    plusXY: function (x, y) {\n      return new Vector2(this.x + x, this.y + y);\n    },\n    plusScalar: function (scalar) {\n      return new Vector2(this.x + scalar, this.y + scalar);\n    },\n    minus: function (v) {\n      return new Vector2(this.x - v.x, this.y - v.y);\n    },\n    minusXY: function (x, y) {\n      return new Vector2(this.x - x, this.y - y);\n    },\n    minusScalar: function (scalar) {\n      return new Vector2(this.x - scalar, this.y - scalar);\n    },\n    dividedScalar: function (scalar) {\n      return new Vector2(this.x / scalar, this.y / scalar);\n    },\n    negated: function () {\n      return new Vector2(-this.x, -this.y);\n    },\n    angle: function () {\n      return Math.atan2(this.y, this.x);\n    },\n    perpendicular: function () {\n      return new Vector2(this.y, -this.x);\n    },\n    angleBetween: function (v) {\n      var thisMagnitude = this.magnitude();\n      var vMagnitude = v.magnitude();\n      return Math.acos(dot.clamp((this.x * v.x + this.y * v.y) / (thisMagnitude * vMagnitude), -1, 1));\n    },\n    rotated: function (angle) {\n      var newAngle = this.angle() + angle;\n      var mag = this.magnitude();\n      return new Vector2(mag * Math.cos(newAngle), mag * Math.sin(newAngle));\n    },\n    blend: function (vector, ratio) {\n      return new Vector2(this.x + (vector.x - this.x) * ratio, this.y + (vector.y - this.y) * ratio);\n    },\n    average: function (vector) {\n      return this.blend(vector, 0.5);\n    },\n    toString: function () {\n      return 'Vector2(' + this.x + ', ' + this.y + ')';\n    },\n    toVector3: function () {\n      return new dot.Vector3(this.x, this.y);\n    },\n    setXY: function (x, y) {\n      this.x = x;\n      this.y = y;\n      return this;\n    },\n    setX: function (x) {\n      this.x = x;\n      return this;\n    },\n    setY: function (y) {\n      this.y = y;\n      return this;\n    },\n    set: function (v) {\n      return this.setXY(v.x, v.y);\n    },\n    setMagnitude: function (m) {\n      var scale = m / this.magnitude();\n      return this.multiplyScalar(scale);\n    },\n    add: function (v) {\n      return this.setXY(this.x + v.x, this.y + v.y);\n    },\n    addXY: function (x, y) {\n      return this.setXY(this.x + x, this.y + y);\n    },\n    addScalar: function (scalar) {\n      return this.setXY(this.x + scalar, this.y + scalar);\n    },\n    subtract: function (v) {\n      return this.setXY(this.x - v.x, this.y - v.y);\n    },\n    subtractScalar: function (scalar) {\n      return this.setXY(this.x - scalar, this.y - scalar);\n    },\n    multiplyScalar: function (scalar) {\n      return this.setXY(this.x * scalar, this.y * scalar);\n    },\n    multiply: function (scalar) {\n      null;\n      return this.multiplyScalar(scalar);\n    },\n    componentMultiply: function (v) {\n      return this.setXY(this.x * v.x, this.y * v.y);\n    },\n    divideScalar: function (scalar) {\n      return this.setXY(this.x / scalar, this.y / scalar);\n    },\n    negate: function () {\n      return this.setXY(-this.x, -this.y);\n    },\n    normalize: function () {\n      var mag = this.magnitude();\n      if (mag === 0) {\n        throw new Error('Cannot normalize a zero-magnitude vector');\n      } else {\n        return this.divideScalar(mag);\n      }\n    },\n    setPolar: function (magnitude, angle) {\n      return this.setXY(magnitude * Math.cos(angle), magnitude * Math.sin(angle));\n    }\n  };\n  Poolable(Vector2, {\n    defaultFactory: function () {\n      return new Vector2();\n    },\n    constructorDuplicateFactory: function (pool) {\n      return function (x, y) {\n        if (pool.length) {\n          return pool.pop().setXY(x, y);\n        } else {\n          return new Vector2(x, y);\n        }\n      };\n    }\n  });\n  Vector2.Immutable = function ImmutableVector2(x, y) {\n    Vector2.call(this, x, y);\n  };\n  var Immutable = Vector2.Immutable;\n  inherit(Vector2, Immutable);\n  Immutable.mutableOverrideHelper = function (mutableFunctionName) {\n    Immutable.prototype[mutableFunctionName] = function () {\n      throw new Error('Cannot call mutable method \\'' + mutableFunctionName + '\\' on immutable Vector2');\n    };\n  };\n  Immutable.mutableOverrideHelper('setXY');\n  Immutable.mutableOverrideHelper('setX');\n  Immutable.mutableOverrideHelper('setY');\n  Vector2.ZERO = new Immutable(0, 0);\n  Vector2.X_UNIT = new Immutable(1, 0);\n  Vector2.Y_UNIT = new Immutable(0, 1);\n  return Vector2;\n});","\ndefine('DOT/Bounds2',['require','DOT/dot','PHET_CORE/Poolable','DOT/Vector2'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  var Poolable = require('PHET_CORE/Poolable');\n  require('DOT/Vector2');\n  dot.Bounds2 = function Bounds2(minX, minY, maxX, maxY) {\n    null;\n    this.minX = minX;\n    this.minY = minY;\n    this.maxX = maxX;\n    this.maxY = maxY;\n    phetAllocation && phetAllocation('Bounds2');\n  };\n  var Bounds2 = dot.Bounds2;\n  Bounds2.prototype = {\n    constructor: Bounds2,\n    isBounds: true,\n    dimension: 2,\n    getWidth: function () {\n      return this.maxX - this.minX;\n    },\n    get width() {\n      return this.getWidth();\n    },\n    getHeight: function () {\n      return this.maxY - this.minY;\n    },\n    get height() {\n      return this.getHeight();\n    },\n    getX: function () {\n      return this.minX;\n    },\n    get x() {\n      return this.getX();\n    },\n    getY: function () {\n      return this.minY;\n    },\n    get y() {\n      return this.getY();\n    },\n    getMinX: function () {\n      return this.minX;\n    },\n    get left() {\n      return this.minX;\n    },\n    getMinY: function () {\n      return this.minY;\n    },\n    get top() {\n      return this.minY;\n    },\n    getMaxX: function () {\n      return this.maxX;\n    },\n    get right() {\n      return this.maxX;\n    },\n    getMaxY: function () {\n      return this.maxY;\n    },\n    get bottom() {\n      return this.maxY;\n    },\n    getCenterX: function () {\n      return (this.maxX + this.minX) / 2;\n    },\n    get centerX() {\n      return this.getCenterX();\n    },\n    getCenterY: function () {\n      return (this.maxY + this.minY) / 2;\n    },\n    get centerY() {\n      return this.getCenterY();\n    },\n    getUpperLeft: function () {\n      return new dot.Vector2(this.minX, this.minY);\n    },\n    get upperLeft() {\n      return this.getUpperLeft();\n    },\n    getUpperCenter: function () {\n      return new dot.Vector2(this.getCenterX(), this.minY);\n    },\n    get upperCenter() {\n      return this.getUpperCenter();\n    },\n    getUpperRight: function () {\n      return new dot.Vector2(this.maxX, this.minY);\n    },\n    get upperRight() {\n      return this.getUpperRight();\n    },\n    getCenterLeft: function () {\n      return new dot.Vector2(this.minX, this.getCenterY);\n    },\n    get centerLeft() {\n      return this.getCenterLeft();\n    },\n    getCenter: function () {\n      return new dot.Vector2(this.getCenterX(), this.getCenterY());\n    },\n    get center() {\n      return this.getCenter();\n    },\n    getCenterRight: function () {\n      return new dot.Vector2(this.maxX, this.getCenterY);\n    },\n    get centerRight() {\n      return this.getCenterRight();\n    },\n    getLowerLeft: function () {\n      return new dot.Vector2(this.minX, this.maxY);\n    },\n    get lowerLeft() {\n      return this.getLowerLeft();\n    },\n    getLowerCenter: function () {\n      return new dot.Vector2(this.getCenterX(), this.maxY);\n    },\n    get lowerCenter() {\n      return this.getLowerCenter();\n    },\n    getLowerRight: function () {\n      return new dot.Vector2(this.maxX, this.maxY);\n    },\n    get lowerRight() {\n      return this.getLowerRight();\n    },\n    isEmpty: function () {\n      return this.getWidth() < 0 || this.getHeight() < 0;\n    },\n    isFinite: function () {\n      return isFinite(this.minX) && isFinite(this.minY) && isFinite(this.maxX) && isFinite(this.maxY);\n    },\n    isValid: function () {\n      return !this.isEmpty() && this.isFinite();\n    },\n    containsCoordinates: function (x, y) {\n      return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;\n    },\n    containsPoint: function (point) {\n      return this.containsCoordinates(point.x, point.y);\n    },\n    containsBounds: function (bounds) {\n      return this.minX <= bounds.minX && this.maxX >= bounds.maxX && this.minY <= bounds.minY && this.maxY >= bounds.maxY;\n    },\n    intersectsBounds: function (bounds) {\n      return !this.intersection(bounds).isEmpty();\n    },\n    minimumDistanceToPointSquared: function (point) {\n      var closeX = point.x < this.minX ? this.minX : point.x > this.maxX ? this.maxX : null;\n      var closeY = point.y < this.minY ? this.minY : point.y > this.maxY ? this.maxY : null;\n      var d;\n      if (closeX === null && closeY === null) {\n        return 0;\n      } else if (closeX === null) {\n        d = closeY - point.y;\n        return d * d;\n      } else if (closeY === null) {\n        d = closeX - point.x;\n        return d * d;\n      } else {\n        var dx = closeX - point.x;\n        var dy = closeY - point.y;\n        return dx * dx + dy * dy;\n      }\n    },\n    maximumDistanceToPointSquared: function (point) {\n      var x = point.x > this.getCenterX() ? this.minX : this.maxX;\n      var y = point.y > this.getCenterY() ? this.minY : this.maxY;\n      x -= point.x;\n      y -= point.y;\n      return x * x + y * y;\n    },\n    toString: function () {\n      return '[x:(' + this.minX + ',' + this.maxX + '),y:(' + this.minY + ',' + this.maxY + ')]';\n    },\n    equals: function (other) {\n      return this.minX === other.minX && this.minY === other.minY && this.maxX === other.maxX && this.maxY === other.maxY;\n    },\n    equalsEpsilon: function (other, epsilon) {\n      epsilon = epsilon || 0;\n      var thisFinite = this.isFinite();\n      var otherFinite = other.isFinite();\n      if (thisFinite && otherFinite) {\n        return Math.abs(this.minX - other.minX) < epsilon && Math.abs(this.minY - other.minY) < epsilon && Math.abs(this.maxX - other.maxX) < epsilon && Math.abs(this.maxY - other.maxY) < epsilon;\n      } else if (thisFinite !== otherFinite) {\n        return false;\n      } else if (this === other) {\n        return true;\n      } else {\n        return (isFinite(this.minX + other.minX) ? Math.abs(this.minX - other.minX) < epsilon : this.minX === other.minX) && (isFinite(this.minY + other.minY) ? Math.abs(this.minY - other.minY) < epsilon : this.minY === other.minY) && (isFinite(this.maxX + other.maxX) ? Math.abs(this.maxX - other.maxX) < epsilon : this.maxX === other.maxX) && (isFinite(this.maxY + other.maxY) ? Math.abs(this.maxY - other.maxY) < epsilon : this.maxY === other.maxY);\n      }\n    },\n    copy: function (bounds) {\n      if (bounds) {\n        return bounds.set(this);\n      } else {\n        return new Bounds2(this.minX, this.minY, this.maxX, this.maxY);\n      }\n    },\n    union: function (bounds) {\n      return new Bounds2(Math.min(this.minX, bounds.minX), Math.min(this.minY, bounds.minY), Math.max(this.maxX, bounds.maxX), Math.max(this.maxY, bounds.maxY));\n    },\n    intersection: function (bounds) {\n      return new Bounds2(Math.max(this.minX, bounds.minX), Math.max(this.minY, bounds.minY), Math.min(this.maxX, bounds.maxX), Math.min(this.maxY, bounds.maxY));\n    },\n    withCoordinates: function (x, y) {\n      return new Bounds2(Math.min(this.minX, x), Math.min(this.minY, y), Math.max(this.maxX, x), Math.max(this.maxY, y));\n    },\n    withPoint: function (point) {\n      return this.withCoordinates(point.x, point.y);\n    },\n    withMinX: function (minX) {\n      return new Bounds2(minX, this.minY, this.maxX, this.maxY);\n    },\n    withMinY: function (minY) {\n      return new Bounds2(this.minX, minY, this.maxX, this.maxY);\n    },\n    withMaxX: function (maxX) {\n      return new Bounds2(this.minX, this.minY, maxX, this.maxY);\n    },\n    withMaxY: function (maxY) {\n      return new Bounds2(this.minX, this.minY, this.maxX, maxY);\n    },\n    roundedOut: function () {\n      return new Bounds2(Math.floor(this.minX), Math.floor(this.minY), Math.ceil(this.maxX), Math.ceil(this.maxY));\n    },\n    roundedIn: function () {\n      return new Bounds2(Math.ceil(this.minX), Math.ceil(this.minY), Math.floor(this.maxX), Math.floor(this.maxY));\n    },\n    transformed: function (matrix) {\n      return this.copy().transform(matrix);\n    },\n    dilated: function (d) {\n      return new Bounds2(this.minX - d, this.minY - d, this.maxX + d, this.maxY + d);\n    },\n    dilatedX: function (x) {\n      return new Bounds2(this.minX - x, this.minY, this.maxX + x, this.maxY);\n    },\n    dilatedY: function (y) {\n      return new Bounds2(this.minX, this.minY - y, this.maxX, this.maxY + y);\n    },\n    dilatedXY: function (x, y) {\n      return new Bounds2(this.minX - x, this.minY - y, this.maxX + x, this.maxY + y);\n    },\n    eroded: function (d) {\n      return this.dilated(-d);\n    },\n    erodedX: function (x) {\n      return this.dilatedX(-x);\n    },\n    erodedY: function (y) {\n      return this.dilatedY(-y);\n    },\n    erodedXY: function (x, y) {\n      return this.dilatedXY(-x, -y);\n    },\n    shiftedX: function (x) {\n      return new Bounds2(this.minX + x, this.minY, this.maxX + x, this.maxY);\n    },\n    shiftedY: function (y) {\n      return new Bounds2(this.minX, this.minY + y, this.maxX, this.maxY + y);\n    },\n    shifted: function (x, y) {\n      return new Bounds2(this.minX + x, this.minY + y, this.maxX + x, this.maxY + y);\n    },\n    setMinMax: function (minX, minY, maxX, maxY) {\n      this.minX = minX;\n      this.minY = minY;\n      this.maxX = maxX;\n      this.maxY = maxY;\n      return this;\n    },\n    setMinX: function (minX) {\n      this.minX = minX;\n      return this;\n    },\n    setMinY: function (minY) {\n      this.minY = minY;\n      return this;\n    },\n    setMaxX: function (maxX) {\n      this.maxX = maxX;\n      return this;\n    },\n    setMaxY: function (maxY) {\n      this.maxY = maxY;\n      return this;\n    },\n    set: function (bounds) {\n      return this.setMinMax(bounds.minX, bounds.minY, bounds.maxX, bounds.maxY);\n    },\n    includeBounds: function (bounds) {\n      return this.setMinMax(Math.min(this.minX, bounds.minX), Math.min(this.minY, bounds.minY), Math.max(this.maxX, bounds.maxX), Math.max(this.maxY, bounds.maxY));\n    },\n    constrainBounds: function (bounds) {\n      return this.setMinMax(Math.max(this.minX, bounds.minX), Math.max(this.minY, bounds.minY), Math.min(this.maxX, bounds.maxX), Math.min(this.maxY, bounds.maxY));\n    },\n    addCoordinates: function (x, y) {\n      return this.setMinMax(Math.min(this.minX, x), Math.min(this.minY, y), Math.max(this.maxX, x), Math.max(this.maxY, y));\n    },\n    addPoint: function (point) {\n      return this.addCoordinates(point.x, point.y);\n    },\n    roundOut: function () {\n      return this.setMinMax(Math.floor(this.minX), Math.floor(this.minY), Math.ceil(this.maxX), Math.ceil(this.maxY));\n    },\n    roundIn: function () {\n      return this.setMinMax(Math.ceil(this.minX), Math.ceil(this.minY), Math.floor(this.maxX), Math.floor(this.maxY));\n    },\n    transform: function (matrix) {\n      if (this.isEmpty()) {\n        return this;\n      }\n      if (matrix.isIdentity()) {\n        return this;\n      }\n      var minX = Number.POSITIVE_INFINITY;\n      var minY = Number.POSITIVE_INFINITY;\n      var maxX = Number.NEGATIVE_INFINITY;\n      var maxY = Number.NEGATIVE_INFINITY;\n      var vector = new dot.Vector2();\n      function withIt(vector) {\n        minX = Math.min(minX, vector.x);\n        minY = Math.min(minY, vector.y);\n        maxX = Math.max(maxX, vector.x);\n        maxY = Math.max(maxY, vector.y);\n      }\n      withIt(matrix.multiplyVector2(vector.setXY(this.minX, this.minY)));\n      withIt(matrix.multiplyVector2(vector.setXY(this.minX, this.maxY)));\n      withIt(matrix.multiplyVector2(vector.setXY(this.maxX, this.minY)));\n      withIt(matrix.multiplyVector2(vector.setXY(this.maxX, this.maxY)));\n      return this.setMinMax(minX, minY, maxX, maxY);\n    },\n    dilate: function (d) {\n      return this.setMinMax(this.minX - d, this.minY - d, this.maxX + d, this.maxY + d);\n    },\n    dilateX: function (x) {\n      return this.setMinMax(this.minX - x, this.minY, this.maxX + x, this.maxY);\n    },\n    dilateY: function (y) {\n      return this.setMinMax(this.minX, this.minY - y, this.maxX, this.maxY + y);\n    },\n    dilateXY: function (x, y) {\n      return this.setMinMax(this.minX - x, this.minY - y, this.maxX + x, this.maxY + y);\n    },\n    erode: function (d) {\n      return this.dilate(-d);\n    },\n    erodeX: function (x) {\n      return this.dilateX(-x);\n    },\n    erodeY: function (y) {\n      return this.dilateY(-y);\n    },\n    erodeXY: function (x, y) {\n      return this.dilateXY(-x, -y);\n    },\n    shiftX: function (x) {\n      return this.setMinMax(this.minX + x, this.minY, this.maxX + x, this.maxY);\n    },\n    shiftY: function (y) {\n      return this.setMinMax(this.minX, this.minY + y, this.maxX, this.maxY + y);\n    },\n    shift: function (x, y) {\n      return this.setMinMax(this.minX + x, this.minY + y, this.maxX + x, this.maxY + y);\n    },\n    getClosestPoint: function (x, y, result) {\n      if (result) {\n        result.setXY(x, y);\n      } else {\n        result = new dot.Vector2(x, y);\n      }\n      if (result.x < this.minX) {\n        result.x = this.minX;\n      }\n      if (result.x > this.maxX) {\n        result.x = this.maxX;\n      }\n      if (result.y < this.minY) {\n        result.y = this.minY;\n      }\n      if (result.y > this.maxY) {\n        result.y = this.maxY;\n      }\n      return result;\n    }\n  };\n  Bounds2.rect = function (x, y, width, height) {\n    return new Bounds2(x, y, x + width, y + height);\n  };\n  Bounds2.point = function (x, y) {\n    if (x instanceof dot.Vector2) {\n      var p = x;\n      return new Bounds2(p.x, p.y, p.x, p.y);\n    } else {\n      return new Bounds2(x, y, x, y);\n    }\n  };\n  Poolable(Bounds2, {\n    defaultFactory: function () {\n      return Bounds2.NOTHING.copy();\n    },\n    constructorDuplicateFactory: function (pool) {\n      return function (minX, minY, maxX, maxY) {\n        if (pool.length) {\n          return pool.pop().setMinMax(minX, minY, maxX, maxY);\n        } else {\n          return new Bounds2(minX, minY, maxX, maxY);\n        }\n      };\n    }\n  });\n  Bounds2.EVERYTHING = new Bounds2(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n  Bounds2.NOTHING = new Bounds2(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n  return Bounds2;\n});","\ndefine('DOT/Ray2',['require','DOT/dot'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  dot.Ray2 = function Ray2(pos, dir) {\n    this.pos = pos;\n    this.dir = dir;\n    null;\n    phetAllocation && phetAllocation('Ray2');\n  };\n  var Ray2 = dot.Ray2;\n  Ray2.prototype = {\n    constructor: Ray2,\n    shifted: function (distance) {\n      return new Ray2(this.pointAtDistance(distance), this.dir);\n    },\n    pointAtDistance: function (distance) {\n      return this.pos.plus(this.dir.timesScalar(distance));\n    },\n    toString: function () {\n      return this.pos.toString() + ' => ' + this.dir.toString();\n    }\n  };\n  return Ray2;\n});","\ndefine('KITE/segments/Segment',['require','KITE/kite','DOT/Util','DOT/Bounds2'],function (require) {\n  'use strict';\n  var kite = require('KITE/kite');\n  var DotUtil = require('DOT/Util');\n  var Bounds2 = require('DOT/Bounds2');\n  kite.Segment = function Segment() {\n  };\n  var Segment = kite.Segment;\n  Segment.prototype = {\n    constructor: Segment,\n    subdivisions: function (tList) {\n      var right = this;\n      var result = [];\n      for (var i = 0; i < tList.length; i++) {\n        var t = tList[i];\n        var arr = right.subdivided(t);\n        null;\n        result.push(arr[0]);\n        right = arr[1];\n        for (var j = i + 1; j < tList.length; j++) {\n          tList[j] = DotUtil.linear(t, 1, 0, 1, tList[j]);\n        }\n      }\n      result.push(right);\n      return result;\n    },\n    subdividedIntoMonotone: function () {\n      return this.subdivisions(this.getInteriorExtremaTs());\n    }\n  };\n  Segment.closestToPoint = function (segments, point, threshold) {\n    var thresholdSquared = threshold * threshold;\n    var items = [];\n    var bestList = [];\n    var bestDistanceSquared = Number.POSITIVE_INFINITY;\n    var thresholdOk = false;\n    _.each(segments, function (segment) {\n      if (segment.explicitClosestToPoint) {\n        var infos = segment.explicitClosestToPoint(point);\n        _.each(infos, function (info) {\n          if (info.distanceSquared < bestDistanceSquared) {\n            bestList = [info];\n            bestDistanceSquared = info.distanceSquared;\n          } else if (info.distanceSquared === bestDistanceSquared) {\n            bestList.push(info);\n          }\n        });\n      } else {\n        var ts = [0].concat(segment.getInteriorExtremaTs()).concat([1]);\n        for (var i = 0; i < ts.length - 1; i++) {\n          var ta = ts[i];\n          var tb = ts[i + 1];\n          var pa = segment.positionAt(ta);\n          var pb = segment.positionAt(tb);\n          var bounds = Bounds2.point(pa).addPoint(pb);\n          var minDistanceSquared = bounds.minimumDistanceToPointSquared(point);\n          if (minDistanceSquared <= bestDistanceSquared) {\n            var maxDistanceSquared = bounds.maximumDistanceToPointSquared(point);\n            if (maxDistanceSquared < bestDistanceSquared) {\n              bestDistanceSquared = maxDistanceSquared;\n              bestList = [];\n            }\n            items.push({\n              ta: ta,\n              tb: tb,\n              pa: pa,\n              pb: pb,\n              segment: segment,\n              bounds: bounds,\n              min: minDistanceSquared,\n              max: maxDistanceSquared\n            });\n          }\n        }\n      }\n    });\n    while (items.length && !thresholdOk) {\n      var curItems = items;\n      items = [];\n      thresholdOk = true;\n      _.each(curItems, function (item) {\n        if (item.minDistanceSquared > bestDistanceSquared) {\n          return;\n        }\n        if (thresholdOk && item.pa.distanceSquared(item.pb) > thresholdSquared) {\n          thresholdOk = false;\n        }\n        var tmid = (item.ta + item.tb) / 2;\n        var pmid = item.segment.positionAt(tmid);\n        var boundsA = Bounds2.point(item.pa).addPoint(pmid);\n        var boundsB = Bounds2.point(item.pb).addPoint(pmid);\n        var minA = boundsA.minimumDistanceToPointSquared(point);\n        var minB = boundsB.minimumDistanceToPointSquared(point);\n        if (minA <= bestDistanceSquared) {\n          var maxA = boundsA.maximumDistanceToPointSquared(point);\n          if (maxA < bestDistanceSquared) {\n            bestDistanceSquared = maxA;\n            bestList = [];\n          }\n          items.push({\n            ta: item.ta,\n            tb: tmid,\n            pa: item.pa,\n            pb: pmid,\n            segment: item.segment,\n            bounds: boundsA,\n            min: minA,\n            max: maxA\n          });\n        }\n        if (minB <= bestDistanceSquared) {\n          var maxB = boundsB.maximumDistanceToPointSquared(point);\n          if (maxB < bestDistanceSquared) {\n            bestDistanceSquared = maxB;\n            bestList = [];\n          }\n          items.push({\n            ta: tmid,\n            tb: item.tb,\n            pa: pmid,\n            pb: item.pb,\n            segment: item.segment,\n            bounds: boundsB,\n            min: minB,\n            max: maxB\n          });\n        }\n      });\n    }\n    _.each(items, function (item) {\n      var t = (item.ta + item.tb) / 2;\n      var closestPoint = item.segment.positionAt(t);\n      bestList.push({\n        segment: item.segment,\n        t: t,\n        closestPoint: closestPoint,\n        distanceSquared: point.distanceSquared(closestPoint)\n      });\n    });\n    return bestList;\n  };\n  return Segment;\n});","\ndefine('KITE/segments/Line',['require','PHET_CORE/inherit','DOT/Bounds2','DOT/Util','DOT/Util','KITE/segments/Segment'],function (require) {\n  'use strict';\n  var inherit = require('PHET_CORE/inherit');\n  var Bounds2 = require('DOT/Bounds2');\n  var Util = require('DOT/Util');\n  var lineLineIntersection = require('DOT/Util').lineLineIntersection;\n  var Segment = require('KITE/segments/Segment');\n  Segment.Line = function Line(start, end) {\n    this._start = start;\n    this._end = end;\n    this._tangent = undefined;\n    this._bounds = undefined;\n  };\n  inherit(Segment, Segment.Line, {\n    getStart: function () {\n      return this._start;\n    },\n    get start() {\n      return this._start;\n    },\n    getEnd: function () {\n      return this._end;\n    },\n    get end() {\n      return this._end;\n    },\n    getStartTangent: function () {\n      if (this._tangent === undefined) {\n        this._tangent = this._end.minus(this._start).normalized();\n      }\n      return this._tangent;\n    },\n    get startTangent() {\n      return this.getStartTangent();\n    },\n    getEndTangent: function () {\n      return this.getStartTangent();\n    },\n    get endTangent() {\n      return this.getEndTangent();\n    },\n    getBounds: function () {\n      if (this._bounds === undefined) {\n        this._bounds = Bounds2.dirtyFromPool().addPoint(this._start).addPoint(this._end);\n      }\n      return this._bounds;\n    },\n    get bounds() {\n      return this.getBounds();\n    },\n    getNondegenerateSegments: function () {\n      if (this._start.equals(this._end)) {\n        return [];\n      } else {\n        return [this];\n      }\n    },\n    positionAt: function (t) {\n      return this._start.plus(this._end.minus(this._start).times(t));\n    },\n    tangentAt: function (t) {\n      return this.getStartTangent();\n    },\n    curvatureAt: function (t) {\n      return 0;\n    },\n    getSVGPathFragment: function () {\n      return 'L ' + this._end.x + ' ' + this._end.y;\n    },\n    strokeLeft: function (lineWidth) {\n      var offset = this.getEndTangent().perpendicular().negated().times(lineWidth / 2);\n      return [new Segment.Line(this._start.plus(offset), this._end.plus(offset))];\n    },\n    strokeRight: function (lineWidth) {\n      var offset = this.getStartTangent().perpendicular().times(lineWidth / 2);\n      return [new Segment.Line(this._end.plus(offset), this._start.plus(offset))];\n    },\n    getInteriorExtremaTs: function () {\n      return [];\n    },\n    subdivided: function (t) {\n      var pt = this.positionAt(t);\n      return [\n        new Segment.Line(this._start, pt),\n        new Segment.Line(pt, this._end)\n      ];\n    },\n    intersectsBounds: function (bounds) {\n      throw new Error('Segment.Line.intersectsBounds unimplemented');\n    },\n    intersection: function (ray) {\n      var result = [];\n      var start = this._start;\n      var end = this._end;\n      var intersection = lineLineIntersection(start, end, ray.pos, ray.pos.plus(ray.dir));\n      if (!isFinite(intersection.x) || !isFinite(intersection.y)) {\n        return result;\n      }\n      if (start.x !== end.x && (start.x > end.x ? intersection.x >= start.x || intersection.x < end.x : intersection.x <= start.x || intersection.x > end.x)) {\n        return result;\n      }\n      if (start.y !== end.y && (start.y > end.y ? intersection.y >= start.y || intersection.y < end.y : intersection.y <= start.y || intersection.y > end.y)) {\n        return result;\n      }\n      var t = intersection.minus(ray.pos).dot(ray.dir);\n      if (t < 0) {\n        return result;\n      }\n      var diff = end.minus(start);\n      var perp = diff.perpendicular();\n      result.push({\n        distance: t,\n        point: ray.pointAtDistance(t),\n        normal: perp.dot(ray.dir) > 0 ? perp.negated() : perp,\n        wind: ray.dir.perpendicular().dot(diff) < 0 ? 1 : -1\n      });\n      return result;\n    },\n    windingIntersection: function (ray) {\n      var hits = this.intersection(ray);\n      if (hits.length) {\n        return hits[0].wind;\n      } else {\n        return 0;\n      }\n    },\n    writeToContext: function (context) {\n      context.lineTo(this._end.x, this._end.y);\n    },\n    transformed: function (matrix) {\n      return new Segment.Line(matrix.timesVector2(this._start), matrix.timesVector2(this._end));\n    },\n    explicitClosestToPoint: function (point) {\n      var diff = this._end.minus(this._start);\n      var t = point.minus(this._start).dot(diff) / diff.magnitudeSquared();\n      t = Util.clamp(t, 0, 1);\n      var closestPoint = this.positionAt(t);\n      return [{\n          segment: this,\n          t: t,\n          closestPoint: closestPoint,\n          distanceSquared: point.distanceSquared(closestPoint)\n        }];\n    },\n    reparameterized: function (a, b) {\n      return new Segment.Line(this.positionAt(b), this.positionAt(a + b));\n    }\n  });\n  return Segment.Line;\n});","\ndefine('KITE/segments/Arc',['require','PHET_CORE/inherit','DOT/Vector2','DOT/Bounds2','DOT/Util','KITE/segments/Segment'],function (require) {\n  'use strict';\n  var inherit = require('PHET_CORE/inherit');\n  var Vector2 = require('DOT/Vector2');\n  var Bounds2 = require('DOT/Bounds2');\n  var DotUtil = require('DOT/Util');\n  var Segment = require('KITE/segments/Segment');\n  Segment.Arc = function Arc(center, radius, startAngle, endAngle, anticlockwise) {\n    if (radius < 0) {\n      radius = -radius;\n      startAngle += Math.PI;\n      endAngle += Math.PI;\n    }\n    this._center = center;\n    this._radius = radius;\n    this._startAngle = startAngle;\n    this._endAngle = endAngle;\n    this._anticlockwise = anticlockwise;\n    this._start = undefined;\n    this._end = undefined;\n    this._startTangent = undefined;\n    this._endTangent = undefined;\n    this._actualEndAngle = undefined;\n    this._isFullPerimeter = undefined;\n    this._angleDifference = undefined;\n    null;\n    null;\n  };\n  inherit(Segment, Segment.Arc, {\n    getCenter: function () {\n      return this._center;\n    },\n    get center() {\n      return this.getCenter();\n    },\n    getRadius: function () {\n      return this._radius;\n    },\n    get radius() {\n      return this.getRadius();\n    },\n    getStartAngle: function () {\n      return this._startAngle;\n    },\n    get startAngle() {\n      return this.getStartAngle();\n    },\n    getEndAngle: function () {\n      return this._endAngle;\n    },\n    get endAngle() {\n      return this.getEndAngle();\n    },\n    getAnticlockwise: function () {\n      return this._anticlockwise;\n    },\n    get anticlockwise() {\n      return this.getAnticlockwise();\n    },\n    getStart: function () {\n      if (this._start === undefined) {\n        this._start = this.positionAtAngle(this._startAngle);\n      }\n      return this._start;\n    },\n    get start() {\n      return this.getStart();\n    },\n    getEnd: function () {\n      if (this._end === undefined) {\n        this._end = this.positionAtAngle(this._endAngle);\n      }\n      return this._end;\n    },\n    get end() {\n      return this.getEnd();\n    },\n    getStartTangent: function () {\n      if (this._startTangent === undefined) {\n        this._startTangent = this.tangentAtAngle(this._startAngle);\n      }\n      return this._startTangent;\n    },\n    get startTangent() {\n      return this.getStartTangent();\n    },\n    getEndTangent: function () {\n      if (this._endTangent === undefined) {\n        this._endTangent = this.tangentAtAngle(this._endAngle);\n      }\n      return this._endTangent;\n    },\n    get endTangent() {\n      return this.getEndTangent();\n    },\n    getActualEndAngle: function () {\n      if (this._actualEndAngle === undefined) {\n        if (this._anticlockwise) {\n          if (this._startAngle > this._endAngle) {\n            this._actualEndAngle = this._endAngle;\n          } else if (this._startAngle < this._endAngle) {\n            this._actualEndAngle = this._endAngle - 2 * Math.PI;\n          } else {\n            this._actualEndAngle = this._startAngle;\n          }\n        } else {\n          if (this._startAngle < this._endAngle) {\n            this._actualEndAngle = this._endAngle;\n          } else if (this._startAngle > this._endAngle) {\n            this._actualEndAngle = this._endAngle + Math.PI * 2;\n          } else {\n            this._actualEndAngle = this._startAngle;\n          }\n        }\n      }\n      return this._actualEndAngle;\n    },\n    get actualEndAngle() {\n      return this.getActualEndAngle();\n    },\n    getIsFullPerimeter: function () {\n      if (this._isFullPerimeter === undefined) {\n        this._isFullPerimeter = !this._anticlockwise && this._endAngle - this._startAngle >= Math.PI * 2 || this._anticlockwise && this._startAngle - this._endAngle >= Math.PI * 2;\n      }\n      return this._isFullPerimeter;\n    },\n    get isFullPerimeter() {\n      return this.getIsFullPerimeter();\n    },\n    getAngleDifference: function () {\n      if (this._angleDifference === undefined) {\n        this._angleDifference = this._anticlockwise ? this._startAngle - this._endAngle : this._endAngle - this._startAngle;\n        if (this._angleDifference < 0) {\n          this._angleDifference += Math.PI * 2;\n        }\n        null;\n      }\n      return this._angleDifference;\n    },\n    get angleDifference() {\n      return this.getAngleDifference();\n    },\n    getBounds: function () {\n      if (this._bounds === undefined) {\n        this._bounds = Bounds2.NOTHING.copy().withPoint(this.getStart()).withPoint(this.getEnd());\n        if (this._startAngle !== this._endAngle) {\n          this.includeBoundsAtAngle(0);\n          this.includeBoundsAtAngle(Math.PI / 2);\n          this.includeBoundsAtAngle(Math.PI);\n          this.includeBoundsAtAngle(3 * Math.PI / 2);\n        }\n      }\n      return this._bounds;\n    },\n    get bounds() {\n      return this.getBounds();\n    },\n    getNondegenerateSegments: function () {\n      if (this._radius <= 0 || this._startAngle === this._endAngle) {\n        return [];\n      } else {\n        return [this];\n      }\n    },\n    includeBoundsAtAngle: function (angle) {\n      if (this.containsAngle(angle)) {\n        this._bounds = this._bounds.withPoint(this._center.plus(Vector2.createPolar(this._radius, angle)));\n      }\n    },\n    mapAngle: function (angle) {\n      return this._startAngle > this.getActualEndAngle() ? DotUtil.moduloBetweenUp(angle, this._startAngle - 2 * Math.PI, this._startAngle) : DotUtil.moduloBetweenDown(angle, this._startAngle, this._startAngle + 2 * Math.PI);\n    },\n    tAtAngle: function (angle) {\n      return (this.mapAngle(angle) - this._startAngle) / (this.getActualEndAngle() - this._startAngle);\n    },\n    angleAt: function (t) {\n      return this._startAngle + (this.getActualEndAngle() - this._startAngle) * t;\n    },\n    positionAt: function (t) {\n      return this.positionAtAngle(this.angleAt(t));\n    },\n    tangentAt: function (t) {\n      return this.tangentAtAngle(this.angleAt(t));\n    },\n    curvatureAt: function (t) {\n      return (this._anticlockwise ? -1 : 1) / this._radius;\n    },\n    positionAtAngle: function (angle) {\n      return this._center.plus(Vector2.createPolar(this._radius, angle));\n    },\n    tangentAtAngle: function (angle) {\n      var normal = Vector2.createPolar(1, angle);\n      return this._anticlockwise ? normal.perpendicular() : normal.perpendicular().negated();\n    },\n    containsAngle: function (angle) {\n      var normalizedAngle = this._anticlockwise ? angle - this._endAngle : angle - this._startAngle;\n      var positiveMinAngle = DotUtil.moduloBetweenDown(normalizedAngle, 0, Math.PI * 2);\n      return positiveMinAngle <= this.angleDifference;\n    },\n    getSVGPathFragment: function () {\n      var epsilon = 0.01;\n      var sweepFlag = this._anticlockwise ? '0' : '1';\n      var largeArcFlag;\n      if (this.angleDifference < Math.PI * 2 - epsilon) {\n        largeArcFlag = this.angleDifference < Math.PI ? '0' : '1';\n        return 'A ' + this._radius + ' ' + this._radius + ' 0 ' + largeArcFlag + ' ' + sweepFlag + ' ' + this.end.x + ' ' + this.end.y;\n      } else {\n        var splitOppositeAngle = (this._startAngle + this._endAngle) / 2;\n        var splitPoint = this._center.plus(Vector2.createPolar(this._radius, splitOppositeAngle));\n        largeArcFlag = '0';\n        var firstArc = 'A ' + this._radius + ' ' + this._radius + ' 0 ' + largeArcFlag + ' ' + sweepFlag + ' ' + splitPoint.x + ' ' + splitPoint.y;\n        var secondArc = 'A ' + this._radius + ' ' + this._radius + ' 0 ' + largeArcFlag + ' ' + sweepFlag + ' ' + this.end.x + ' ' + this.end.y;\n        return firstArc + ' ' + secondArc;\n      }\n    },\n    strokeLeft: function (lineWidth) {\n      return [new Segment.Arc(this._center, this._radius + (this._anticlockwise ? 1 : -1) * lineWidth / 2, this._startAngle, this._endAngle, this._anticlockwise)];\n    },\n    strokeRight: function (lineWidth) {\n      return [new Segment.Arc(this._center, this._radius + (this._anticlockwise ? -1 : 1) * lineWidth / 2, this._endAngle, this._startAngle, !this._anticlockwise)];\n    },\n    getInteriorExtremaTs: function () {\n      var that = this;\n      var result = [];\n      _.each([\n        0,\n        Math.PI / 2,\n        Math.PI,\n        3 * Math.PI / 2\n      ], function (angle) {\n        if (that.containsAngle(angle)) {\n          var t = that.tAtAngle(angle);\n          var epsilon = 1e-10;\n          if (t > epsilon && t < 1 - epsilon) {\n            result.push(t);\n          }\n        }\n      });\n      return result.sort();\n    },\n    subdivided: function (t) {\n      var angle0 = this.angleAt(0);\n      var angleT = this.angleAt(t);\n      var angle1 = this.angleAt(1);\n      return [\n        new Segment.Arc(this._center, this._radius, angle0, angleT, this._anticlockwise),\n        new Segment.Arc(this._center, this._radius, angleT, angle1, this._anticlockwise)\n      ];\n    },\n    intersectsBounds: function (bounds) {\n      throw new Error('Segment.intersectsBounds unimplemented!');\n    },\n    intersection: function (ray) {\n      var result = [];\n      var epsilon = 0;\n      var centerToRay = ray.pos.minus(this._center);\n      var tmp = ray.dir.dot(centerToRay);\n      var centerToRayDistSq = centerToRay.magnitudeSquared();\n      var discriminant = 4 * tmp * tmp - 4 * (centerToRayDistSq - this._radius * this._radius);\n      if (discriminant < epsilon) {\n        return result;\n      }\n      var base = ray.dir.dot(this._center) - ray.dir.dot(ray.pos);\n      var sqt = Math.sqrt(discriminant) / 2;\n      var ta = base - sqt;\n      var tb = base + sqt;\n      if (tb < epsilon) {\n        return result;\n      }\n      var pointB = ray.pointAtDistance(tb);\n      var normalB = pointB.minus(this._center).normalized();\n      if (ta < epsilon) {\n        if (this.containsAngle(normalB.angle())) {\n          result.push({\n            distance: tb,\n            point: pointB,\n            normal: normalB.negated(),\n            wind: this._anticlockwise ? -1 : 1\n          });\n        }\n      } else {\n        var pointA = ray.pointAtDistance(ta);\n        var normalA = pointA.minus(this._center).normalized();\n        if (this.containsAngle(normalA.angle())) {\n          result.push({\n            distance: ta,\n            point: pointA,\n            normal: normalA,\n            wind: this._anticlockwise ? 1 : -1\n          });\n        }\n        if (this.containsAngle(normalB.angle())) {\n          result.push({\n            distance: tb,\n            point: pointB,\n            normal: normalB.negated(),\n            wind: this._anticlockwise ? -1 : 1\n          });\n        }\n      }\n      return result;\n    },\n    windingIntersection: function (ray) {\n      var wind = 0;\n      var hits = this.intersection(ray);\n      _.each(hits, function (hit) {\n        wind += hit.wind;\n      });\n      return wind;\n    },\n    writeToContext: function (context) {\n      context.arc(this._center.x, this._center.y, this._radius, this._startAngle, this._endAngle, this._anticlockwise);\n    },\n    transformed: function (matrix) {\n      var startAngle = matrix.timesVector2(Vector2.createPolar(1, this._startAngle)).minus(matrix.timesVector2(Vector2.ZERO)).angle();\n      var endAngle = matrix.timesVector2(Vector2.createPolar(1, this._endAngle)).minus(matrix.timesVector2(Vector2.ZERO)).angle();\n      var anticlockwise = matrix.getDeterminant() >= 0 ? this._anticlockwise : !this._anticlockwise;\n      if (Math.abs(this._endAngle - this._startAngle) === Math.PI * 2) {\n        endAngle = anticlockwise ? startAngle - Math.PI * 2 : startAngle + Math.PI * 2;\n      }\n      var scaleVector = matrix.getScaleVector();\n      if (scaleVector.x !== scaleVector.y) {\n        var radiusX = scaleVector.x * this._radius;\n        var radiusY = scaleVector.y * this._radius;\n        return new Segment.EllipticalArc(matrix.timesVector2(this._center), radiusX, radiusY, 0, startAngle, endAngle, anticlockwise);\n      } else {\n        var radius = scaleVector.x * this._radius;\n        return new Segment.Arc(matrix.timesVector2(this._center), radius, startAngle, endAngle, anticlockwise);\n      }\n    }\n  });\n  return Segment.Arc;\n});","\ndefine('KITE/util/Subpath',['require','DOT/Bounds2','DOT/Util','KITE/kite','KITE/segments/Line','KITE/segments/Arc'],function (require) {\n  'use strict';\n  var Bounds2 = require('DOT/Bounds2');\n  var lineLineIntersection = require('DOT/Util').lineLineIntersection;\n  var kite = require('KITE/kite');\n  require('KITE/segments/Line');\n  require('KITE/segments/Arc');\n  kite.Subpath = function Subpath(segments, points, closed) {\n    this.segments = segments || [];\n    this.points = points || (segments && segments.length ? _.map(segments, function (segment) {\n      return segment.start;\n    }).concat(segments[segments.length - 1].end) : []);\n    this.closed = !!closed;\n    this._strokedSubpaths = null;\n    this._strokedSubpathsComputed = false;\n    this._strokedStyles = null;\n    var bounds = this.bounds = Bounds2.NOTHING.copy();\n    _.each(this.segments, function (segment) {\n      bounds.includeBounds(segment.bounds);\n    });\n  };\n  var Subpath = kite.Subpath;\n  Subpath.prototype = {\n    copy: function () {\n      return new Subpath(this.segments.slice(0), this.points.slice(0), this.closed);\n    },\n    invalidate: function () {\n      this._strokedSubpathsComputed = false;\n    },\n    addPoint: function (point) {\n      this.points.push(point);\n      return this;\n    },\n    addSegmentDirectly: function (segment) {\n      null;\n      null;\n      null;\n      null;\n      null;\n      this.segments.push(segment);\n      this.invalidate();\n      this.bounds.includeBounds(segment.getBounds());\n      return this;\n    },\n    addSegment: function (segment) {\n      var subpath = this;\n      _.each(segment.getNondegenerateSegments(), function (segment) {\n        subpath.addSegmentDirectly(segment);\n      });\n      return this;\n    },\n    close: function () {\n      this.closed = true;\n    },\n    getLength: function () {\n      return this.points.length;\n    },\n    getFirstPoint: function () {\n      return _.first(this.points);\n    },\n    getLastPoint: function () {\n      return _.last(this.points);\n    },\n    getFirstSegment: function () {\n      return _.first(this.segments);\n    },\n    getLastSegment: function () {\n      return _.last(this.segments);\n    },\n    isDrawable: function () {\n      return this.segments.length > 0;\n    },\n    isClosed: function () {\n      return this.closed;\n    },\n    hasClosingSegment: function () {\n      return !this.getFirstPoint().equalsEpsilon(this.getLastPoint(), 1e-9);\n    },\n    getClosingSegment: function () {\n      null;\n      return new kite.Segment.Line(this.getLastPoint(), this.getFirstPoint());\n    },\n    writeToContext: function (context) {\n      if (this.isDrawable()) {\n        var startPoint = this.getFirstSegment().start;\n        context.moveTo(startPoint.x, startPoint.y);\n        var len = this.segments.length;\n        for (var i = 0; i < len; i++) {\n          this.segments[i].writeToContext(context);\n        }\n        if (this.closed) {\n          context.closePath();\n        }\n      }\n    },\n    transformed: function (matrix) {\n      return new Subpath(_.map(this.segments, function (segment) {\n        return segment.transformed(matrix);\n      }), _.map(this.points, function (point) {\n        return matrix.timesVector2(point);\n      }), this.closed);\n    },\n    stroked: function (lineStyles) {\n      if (!this.isDrawable()) {\n        return [];\n      }\n      if (lineStyles === undefined) {\n        lineStyles = new kite.LineStyles();\n      }\n      if (this._strokedSubpathsComputed && this._strokedStyles.equals(lineStyles)) {\n        return this._strokedSubpaths;\n      }\n      var lineWidth = lineStyles.lineWidth;\n      function join(center, fromTangent, toTangent) {\n        var fromPoint = center.plus(fromTangent.perpendicular().negated().times(lineWidth / 2));\n        var toPoint = center.plus(toTangent.perpendicular().negated().times(lineWidth / 2));\n        var bevel = fromPoint.equals(toPoint) ? [] : [new kite.Segment.Line(fromPoint, toPoint)];\n        if (fromTangent.perpendicular().dot(toTangent) > 0) {\n          switch (lineStyles.lineJoin) {\n          case 'round':\n            var fromAngle = fromTangent.angle() + Math.PI / 2;\n            var toAngle = toTangent.angle() + Math.PI / 2;\n            return [new kite.Segment.Arc(center, lineWidth / 2, fromAngle, toAngle, true)];\n          case 'miter':\n            var theta = fromTangent.angleBetween(toTangent.negated());\n            if (1 / Math.sin(theta / 2) <= lineStyles.miterLimit && theta < Math.PI - 0.00001) {\n              var miterPoint = lineLineIntersection(fromPoint, fromPoint.plus(fromTangent), toPoint, toPoint.plus(toTangent));\n              return [\n                new kite.Segment.Line(fromPoint, miterPoint),\n                new kite.Segment.Line(miterPoint, toPoint)\n              ];\n            } else {\n              return bevel;\n            }\n            break;\n          case 'bevel':\n            return bevel;\n          }\n        } else {\n          return bevel;\n        }\n      }\n      function cap(center, tangent) {\n        var fromPoint = center.plus(tangent.perpendicular().times(-lineWidth / 2));\n        var toPoint = center.plus(tangent.perpendicular().times(lineWidth / 2));\n        switch (lineStyles.lineCap) {\n        case 'butt':\n          return [new kite.Segment.Line(fromPoint, toPoint)];\n        case 'round':\n          var tangentAngle = tangent.angle();\n          return [new kite.Segment.Arc(center, lineWidth / 2, tangentAngle + Math.PI / 2, tangentAngle - Math.PI / 2, true)];\n        case 'square':\n          var toLeft = tangent.perpendicular().negated().times(lineWidth / 2);\n          var toRight = tangent.perpendicular().times(lineWidth / 2);\n          var toFront = tangent.times(lineWidth / 2);\n          var left = center.plus(toLeft).plus(toFront);\n          var right = center.plus(toRight).plus(toFront);\n          return [\n            new kite.Segment.Line(fromPoint, left),\n            new kite.Segment.Line(left, right),\n            new kite.Segment.Line(right, toPoint)\n          ];\n        }\n      }\n      var i;\n      var leftSegments = [];\n      var rightSegments = [];\n      var firstSegment = this.getFirstSegment();\n      var lastSegment = this.getLastSegment();\n      function addLeftSegments(segments) {\n        leftSegments = leftSegments.concat(segments);\n      }\n      function addRightSegments(segments) {\n        rightSegments = rightSegments.concat(segments);\n      }\n      var alreadyClosed = lastSegment.end.equals(firstSegment.start);\n      var closingSegment = alreadyClosed ? null : new kite.Segment.Line(this.segments[this.segments.length - 1].end, this.segments[0].start);\n      for (i = 0; i < this.segments.length; i++) {\n        if (i > 0) {\n          addLeftSegments(join(this.segments[i].start, this.segments[i - 1].endTangent, this.segments[i].startTangent, true));\n        }\n        addLeftSegments(this.segments[i].strokeLeft(lineWidth));\n      }\n      for (i = this.segments.length - 1; i >= 0; i--) {\n        if (i < this.segments.length - 1) {\n          addRightSegments(join(this.segments[i].end, this.segments[i + 1].startTangent.negated(), this.segments[i].endTangent.negated(), false));\n        }\n        addRightSegments(this.segments[i].strokeRight(lineWidth));\n      }\n      var subpaths;\n      if (this.closed) {\n        if (alreadyClosed) {\n          addLeftSegments(join(lastSegment.end, lastSegment.endTangent, firstSegment.startTangent));\n          addRightSegments(join(lastSegment.end, firstSegment.startTangent.negated(), lastSegment.endTangent.negated()));\n        } else {\n          addLeftSegments(join(closingSegment.start, lastSegment.endTangent, closingSegment.startTangent));\n          addLeftSegments(closingSegment.strokeLeft(lineWidth));\n          addLeftSegments(join(closingSegment.end, closingSegment.endTangent, firstSegment.startTangent));\n          addRightSegments(join(closingSegment.end, firstSegment.startTangent.negated(), closingSegment.endTangent.negated()));\n          addRightSegments(closingSegment.strokeRight(lineWidth));\n          addRightSegments(join(closingSegment.start, closingSegment.startTangent.negated(), lastSegment.endTangent.negated()));\n        }\n        subpaths = [\n          new Subpath(leftSegments, null, true),\n          new Subpath(rightSegments, null, true)\n        ];\n      } else {\n        subpaths = [new Subpath(leftSegments.concat(cap(lastSegment.end, lastSegment.endTangent)).concat(rightSegments).concat(cap(firstSegment.start, firstSegment.startTangent.negated())), null, true)];\n      }\n      this._strokedSubpaths = subpaths;\n      this._strokedSubpathsComputed = true;\n      this._strokedStyles = new kite.LineStyles(lineStyles);\n      return subpaths;\n    }\n  };\n  return kite.Subpath;\n});","\ndefine('KITE/../parser/svgPath',['require','KITE/kite'],function (require) {\n  var kite = require('KITE/kite');\n  function quote(s) {\n    return '\"' + s.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"').replace(/\\x08/g, '\\\\b').replace(/\\t/g, '\\\\t').replace(/\\n/g, '\\\\n').replace(/\\f/g, '\\\\f').replace(/\\r/g, '\\\\r').replace(/[\\x00-\\x07\\x0B\\x0E-\\x1F\\x80-\\uFFFF]/g, escape) + '\"';\n  }\n  kite.svgPath = {\n    parse: function (input, startRule) {\n      var parseFunctions = {\n          'svgPath': parse_svgPath,\n          'movetoDrawtoCommandGroups': parse_movetoDrawtoCommandGroups,\n          'movetoDrawtoCommandGroup': parse_movetoDrawtoCommandGroup,\n          'drawtoCommands': parse_drawtoCommands,\n          'drawtoCommand': parse_drawtoCommand,\n          'moveto': parse_moveto,\n          'movetoArgumentSequence': parse_movetoArgumentSequence,\n          'closepath': parse_closepath,\n          'lineto': parse_lineto,\n          'linetoArgumentSequence': parse_linetoArgumentSequence,\n          'horizontalLineto': parse_horizontalLineto,\n          'horizontalLinetoArgumentSequence': parse_horizontalLinetoArgumentSequence,\n          'verticalLineto': parse_verticalLineto,\n          'verticalLinetoArgumentSequence': parse_verticalLinetoArgumentSequence,\n          'curveto': parse_curveto,\n          'curvetoArgumentSequence': parse_curvetoArgumentSequence,\n          'curvetoArgument': parse_curvetoArgument,\n          'smoothCurveto': parse_smoothCurveto,\n          'smoothCurvetoArgumentSequence': parse_smoothCurvetoArgumentSequence,\n          'smoothCurvetoArgument': parse_smoothCurvetoArgument,\n          'quadraticBezierCurveto': parse_quadraticBezierCurveto,\n          'quadraticBezierCurvetoArgumentSequence': parse_quadraticBezierCurvetoArgumentSequence,\n          'quadraticBezierCurvetoArgument': parse_quadraticBezierCurvetoArgument,\n          'smoothQuadraticBezierCurveto': parse_smoothQuadraticBezierCurveto,\n          'smoothQuadraticBezierCurvetoArgumentSequence': parse_smoothQuadraticBezierCurvetoArgumentSequence,\n          'ellipticalArc': parse_ellipticalArc,\n          'ellipticalArcArgumentSequence': parse_ellipticalArcArgumentSequence,\n          'ellipticalArcArgument': parse_ellipticalArcArgument,\n          'coordinatePair': parse_coordinatePair,\n          'nonnegativeNumber': parse_nonnegativeNumber,\n          'number': parse_number,\n          'flag': parse_flag,\n          'commaWsp': parse_commaWsp,\n          'comma': parse_comma,\n          'floatingPointConstant': parse_floatingPointConstant,\n          'fractionalConstant': parse_fractionalConstant,\n          'exponent': parse_exponent,\n          'sign': parse_sign,\n          'digitSequence': parse_digitSequence,\n          'digit': parse_digit,\n          'wsp': parse_wsp\n        };\n      if (startRule !== undefined) {\n        if (parseFunctions[startRule] === undefined) {\n          throw new Error('Invalid rule name: ' + quote(startRule) + '.');\n        }\n      } else {\n        startRule = 'svgPath';\n      }\n      var pos = 0;\n      var reportFailures = 0;\n      var rightmostFailuresPos = 0;\n      var rightmostFailuresExpected = [];\n      function padLeft(input, padding, length) {\n        var result = input;\n        var padLength = length - input.length;\n        for (var i = 0; i < padLength; i++) {\n          result = padding + result;\n        }\n        return result;\n      }\n      function escape(ch) {\n        var charCode = ch.charCodeAt(0);\n        var escapeChar;\n        var length;\n        if (charCode <= 255) {\n          escapeChar = 'x';\n          length = 2;\n        } else {\n          escapeChar = 'u';\n          length = 4;\n        }\n        return '\\\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);\n      }\n      function matchFailed(failure) {\n        if (pos < rightmostFailuresPos) {\n          return;\n        }\n        if (pos > rightmostFailuresPos) {\n          rightmostFailuresPos = pos;\n          rightmostFailuresExpected = [];\n        }\n        rightmostFailuresExpected.push(failure);\n      }\n      function parse_svgPath() {\n        var result0, result1, result2, result3;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = [];\n        result1 = parse_wsp();\n        while (result1 !== null) {\n          result0.push(result1);\n          result1 = parse_wsp();\n        }\n        if (result0 !== null) {\n          result1 = parse_movetoDrawtoCommandGroups();\n          result1 = result1 !== null ? result1 : '';\n          if (result1 !== null) {\n            result2 = [];\n            result3 = parse_wsp();\n            while (result3 !== null) {\n              result2.push(result3);\n              result3 = parse_wsp();\n            }\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, path) {\n            return path ? path : [];\n          }(pos0, result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_movetoDrawtoCommandGroups() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_movetoDrawtoCommandGroup();\n        if (result0 !== null) {\n          result1 = [];\n          result2 = parse_wsp();\n          while (result2 !== null) {\n            result1.push(result2);\n            result2 = parse_wsp();\n          }\n          if (result1 !== null) {\n            result2 = parse_movetoDrawtoCommandGroups();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, a, b) {\n            return a.concat(b);\n          }(pos0, result0[0], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          result0 = parse_movetoDrawtoCommandGroup();\n          if (result0 !== null) {\n            result0 = function (offset, a) {\n              return a;\n            }(pos0, result0);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_movetoDrawtoCommandGroup() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_moveto();\n        if (result0 !== null) {\n          result1 = [];\n          result2 = parse_wsp();\n          while (result2 !== null) {\n            result1.push(result2);\n            result2 = parse_wsp();\n          }\n          if (result1 !== null) {\n            result2 = parse_drawtoCommands();\n            result2 = result2 !== null ? result2 : '';\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, m, c) {\n            return c.length ? m.concat(c) : m;\n          }(pos0, result0[0], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_drawtoCommands() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_drawtoCommand();\n        if (result0 !== null) {\n          result1 = [];\n          result2 = parse_wsp();\n          while (result2 !== null) {\n            result1.push(result2);\n            result2 = parse_wsp();\n          }\n          if (result1 !== null) {\n            result2 = parse_drawtoCommands();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, cmd, cmds) {\n            return cmd.concat(cmds);\n          }(pos0, result0[0], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          result0 = parse_drawtoCommand();\n          if (result0 !== null) {\n            result0 = function (offset, cmd) {\n              return cmd;\n            }(pos0, result0);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_drawtoCommand() {\n        var result0;\n        result0 = parse_closepath();\n        if (result0 === null) {\n          result0 = parse_lineto();\n          if (result0 === null) {\n            result0 = parse_horizontalLineto();\n            if (result0 === null) {\n              result0 = parse_verticalLineto();\n              if (result0 === null) {\n                result0 = parse_curveto();\n                if (result0 === null) {\n                  result0 = parse_smoothCurveto();\n                  if (result0 === null) {\n                    result0 = parse_quadraticBezierCurveto();\n                    if (result0 === null) {\n                      result0 = parse_smoothQuadraticBezierCurveto();\n                      if (result0 === null) {\n                        result0 = parse_ellipticalArc();\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        return result0;\n      }\n      function parse_moveto() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 77) {\n          result0 = 'M';\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed('\"M\"');\n          }\n        }\n        if (result0 !== null) {\n          result1 = [];\n          result2 = parse_wsp();\n          while (result2 !== null) {\n            result1.push(result2);\n            result2 = parse_wsp();\n          }\n          if (result1 !== null) {\n            result2 = parse_movetoArgumentSequence();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, args) {\n            return createMoveTo(args, false);\n          }(pos0, result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          if (input.charCodeAt(pos) === 109) {\n            result0 = 'm';\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed('\"m\"');\n            }\n          }\n          if (result0 !== null) {\n            result1 = [];\n            result2 = parse_wsp();\n            while (result2 !== null) {\n              result1.push(result2);\n              result2 = parse_wsp();\n            }\n            if (result1 !== null) {\n              result2 = parse_movetoArgumentSequence();\n              if (result2 !== null) {\n                result0 = [\n                  result0,\n                  result1,\n                  result2\n                ];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = function (offset, args) {\n              return createMoveTo(args, true);\n            }(pos0, result0[2]);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_movetoArgumentSequence() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_coordinatePair();\n        if (result0 !== null) {\n          result1 = parse_commaWsp();\n          result1 = result1 !== null ? result1 : '';\n          if (result1 !== null) {\n            result2 = parse_linetoArgumentSequence();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, pair, list) {\n            return [pair].concat(list);\n          }(pos0, result0[0], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          result0 = parse_coordinatePair();\n          if (result0 !== null) {\n            result0 = function (offset, pair) {\n              return [pair];\n            }(pos0, result0);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_closepath() {\n        var result0;\n        var pos0;\n        pos0 = pos;\n        if (input.charCodeAt(pos) === 90) {\n          result0 = 'Z';\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed('\"Z\"');\n          }\n        }\n        if (result0 === null) {\n          if (input.charCodeAt(pos) === 122) {\n            result0 = 'z';\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed('\"z\"');\n            }\n          }\n        }\n        if (result0 !== null) {\n          result0 = function (offset, command) {\n            return { cmd: 'close' };\n          }(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_lineto() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 76) {\n          result0 = 'L';\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed('\"L\"');\n          }\n        }\n        if (result0 !== null) {\n          result1 = [];\n          result2 = parse_wsp();\n          while (result2 !== null) {\n            result1.push(result2);\n            result2 = parse_wsp();\n          }\n          if (result1 !== null) {\n            result2 = parse_linetoArgumentSequence();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, args) {\n            return args.map(function (arg) {\n              return {\n                cmd: 'lineTo',\n                args: [\n                  arg.x,\n                  arg.y\n                ]\n              };\n            });\n          }(pos0, result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          if (input.charCodeAt(pos) === 108) {\n            result0 = 'l';\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed('\"l\"');\n            }\n          }\n          if (result0 !== null) {\n            result1 = [];\n            result2 = parse_wsp();\n            while (result2 !== null) {\n              result1.push(result2);\n              result2 = parse_wsp();\n            }\n            if (result1 !== null) {\n              result2 = parse_linetoArgumentSequence();\n              if (result2 !== null) {\n                result0 = [\n                  result0,\n                  result1,\n                  result2\n                ];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = function (offset, args) {\n              return args.map(function (arg) {\n                return {\n                  cmd: 'lineToRelative',\n                  args: [\n                    arg.x,\n                    arg.y\n                  ]\n                };\n              });\n            }(pos0, result0[2]);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_linetoArgumentSequence() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_coordinatePair();\n        if (result0 !== null) {\n          result1 = parse_commaWsp();\n          result1 = result1 !== null ? result1 : '';\n          if (result1 !== null) {\n            result2 = parse_linetoArgumentSequence();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, a, b) {\n            return [a].concat(b);\n          }(pos0, result0[0], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          result0 = parse_coordinatePair();\n          if (result0 !== null) {\n            result0 = function (offset, a) {\n              return [a];\n            }(pos0, result0);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_horizontalLineto() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 72) {\n          result0 = 'H';\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed('\"H\"');\n          }\n        }\n        if (result0 !== null) {\n          result1 = [];\n          result2 = parse_wsp();\n          while (result2 !== null) {\n            result1.push(result2);\n            result2 = parse_wsp();\n          }\n          if (result1 !== null) {\n            result2 = parse_horizontalLinetoArgumentSequence();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, args) {\n            return args.map(function (arg) {\n              return {\n                cmd: 'horizontalLineTo',\n                args: [arg]\n              };\n            });\n          }(pos0, result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          if (input.charCodeAt(pos) === 104) {\n            result0 = 'h';\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed('\"h\"');\n            }\n          }\n          if (result0 !== null) {\n            result1 = [];\n            result2 = parse_wsp();\n            while (result2 !== null) {\n              result1.push(result2);\n              result2 = parse_wsp();\n            }\n            if (result1 !== null) {\n              result2 = parse_horizontalLinetoArgumentSequence();\n              if (result2 !== null) {\n                result0 = [\n                  result0,\n                  result1,\n                  result2\n                ];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = function (offset, args) {\n              return args.map(function (arg) {\n                return {\n                  cmd: 'horizontalLineToRelative',\n                  args: [arg]\n                };\n              });\n            }(pos0, result0[2]);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_horizontalLinetoArgumentSequence() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_number();\n        if (result0 !== null) {\n          result1 = parse_commaWsp();\n          result1 = result1 !== null ? result1 : '';\n          if (result1 !== null) {\n            result2 = parse_horizontalLinetoArgumentSequence();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, a, b) {\n            return [a].concat(b);\n          }(pos0, result0[0], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          result0 = parse_number();\n          if (result0 !== null) {\n            result0 = function (offset, a) {\n              return [a];\n            }(pos0, result0);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_verticalLineto() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 86) {\n          result0 = 'V';\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed('\"V\"');\n          }\n        }\n        if (result0 !== null) {\n          result1 = [];\n          result2 = parse_wsp();\n          while (result2 !== null) {\n            result1.push(result2);\n            result2 = parse_wsp();\n          }\n          if (result1 !== null) {\n            result2 = parse_verticalLinetoArgumentSequence();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, args) {\n            return args.map(function (arg) {\n              return {\n                cmd: 'verticalLineTo',\n                args: [arg]\n              };\n            });\n          }(pos0, result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          if (input.charCodeAt(pos) === 118) {\n            result0 = 'v';\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed('\"v\"');\n            }\n          }\n          if (result0 !== null) {\n            result1 = [];\n            result2 = parse_wsp();\n            while (result2 !== null) {\n              result1.push(result2);\n              result2 = parse_wsp();\n            }\n            if (result1 !== null) {\n              result2 = parse_verticalLinetoArgumentSequence();\n              if (result2 !== null) {\n                result0 = [\n                  result0,\n                  result1,\n                  result2\n                ];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = function (offset, args) {\n              return args.map(function (arg) {\n                return {\n                  cmd: 'verticalLineToRelative',\n                  args: [arg]\n                };\n              });\n            }(pos0, result0[2]);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_verticalLinetoArgumentSequence() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_number();\n        if (result0 !== null) {\n          result1 = parse_commaWsp();\n          result1 = result1 !== null ? result1 : '';\n          if (result1 !== null) {\n            result2 = parse_verticalLinetoArgumentSequence();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, a, b) {\n            return [a].concat(b);\n          }(pos0, result0[0], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          result0 = parse_number();\n          if (result0 !== null) {\n            result0 = function (offset, a) {\n              return [a];\n            }(pos0, result0);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_curveto() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 67) {\n          result0 = 'C';\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed('\"C\"');\n          }\n        }\n        if (result0 !== null) {\n          result1 = [];\n          result2 = parse_wsp();\n          while (result2 !== null) {\n            result1.push(result2);\n            result2 = parse_wsp();\n          }\n          if (result1 !== null) {\n            result2 = parse_curvetoArgumentSequence();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, args) {\n            return args.map(function (arg) {\n              return {\n                cmd: 'cubicCurveTo',\n                args: arg\n              };\n            });\n          }(pos0, result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          if (input.charCodeAt(pos) === 99) {\n            result0 = 'c';\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed('\"c\"');\n            }\n          }\n          if (result0 !== null) {\n            result1 = [];\n            result2 = parse_wsp();\n            while (result2 !== null) {\n              result1.push(result2);\n              result2 = parse_wsp();\n            }\n            if (result1 !== null) {\n              result2 = parse_curvetoArgumentSequence();\n              if (result2 !== null) {\n                result0 = [\n                  result0,\n                  result1,\n                  result2\n                ];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = function (offset, args) {\n              return args.map(function (arg) {\n                return {\n                  cmd: 'cubicCurveToRelative',\n                  args: arg\n                };\n              });\n            }(pos0, result0[2]);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_curvetoArgumentSequence() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_curvetoArgument();\n        if (result0 !== null) {\n          result1 = parse_commaWsp();\n          result1 = result1 !== null ? result1 : '';\n          if (result1 !== null) {\n            result2 = parse_curvetoArgumentSequence();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, a, list) {\n            return [a].concat(list);\n          }(pos0, result0[0], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          result0 = parse_curvetoArgument();\n          if (result0 !== null) {\n            result0 = function (offset, a) {\n              return [a];\n            }(pos0, result0);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_curvetoArgument() {\n        var result0, result1, result2, result3, result4;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_coordinatePair();\n        if (result0 !== null) {\n          result1 = parse_commaWsp();\n          result1 = result1 !== null ? result1 : '';\n          if (result1 !== null) {\n            result2 = parse_coordinatePair();\n            if (result2 !== null) {\n              result3 = parse_commaWsp();\n              result3 = result3 !== null ? result3 : '';\n              if (result3 !== null) {\n                result4 = parse_coordinatePair();\n                if (result4 !== null) {\n                  result0 = [\n                    result0,\n                    result1,\n                    result2,\n                    result3,\n                    result4\n                  ];\n                } else {\n                  result0 = null;\n                  pos = pos1;\n                }\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, a, b, c) {\n            return [\n              a.x,\n              a.y,\n              b.x,\n              b.y,\n              c.x,\n              c.y\n            ];\n          }(pos0, result0[0], result0[2], result0[4]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_smoothCurveto() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 83) {\n          result0 = 'S';\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed('\"S\"');\n          }\n        }\n        if (result0 !== null) {\n          result1 = [];\n          result2 = parse_wsp();\n          while (result2 !== null) {\n            result1.push(result2);\n            result2 = parse_wsp();\n          }\n          if (result1 !== null) {\n            result2 = parse_smoothCurvetoArgumentSequence();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, args) {\n            return args.map(function (arg) {\n              return {\n                cmd: 'smoothCubicCurveTo',\n                args: arg\n              };\n            });\n          }(pos0, result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          if (input.charCodeAt(pos) === 115) {\n            result0 = 's';\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed('\"s\"');\n            }\n          }\n          if (result0 !== null) {\n            result1 = [];\n            result2 = parse_wsp();\n            while (result2 !== null) {\n              result1.push(result2);\n              result2 = parse_wsp();\n            }\n            if (result1 !== null) {\n              result2 = parse_smoothCurvetoArgumentSequence();\n              if (result2 !== null) {\n                result0 = [\n                  result0,\n                  result1,\n                  result2\n                ];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = function (offset, args) {\n              return args.map(function (arg) {\n                return {\n                  cmd: 'smoothCubicCurveToRelative',\n                  args: arg\n                };\n              });\n            }(pos0, result0[2]);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_smoothCurvetoArgumentSequence() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_smoothCurvetoArgument();\n        if (result0 !== null) {\n          result1 = parse_commaWsp();\n          result1 = result1 !== null ? result1 : '';\n          if (result1 !== null) {\n            result2 = parse_smoothCurvetoArgumentSequence();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, a, list) {\n            return [a].concat(list);\n          }(pos0, result0[0], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          result0 = parse_smoothCurvetoArgument();\n          if (result0 !== null) {\n            result0 = function (offset, a) {\n              return [a];\n            }(pos0, result0);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_smoothCurvetoArgument() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_coordinatePair();\n        if (result0 !== null) {\n          result1 = parse_commaWsp();\n          result1 = result1 !== null ? result1 : '';\n          if (result1 !== null) {\n            result2 = parse_coordinatePair();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, a, b) {\n            return [\n              a.x,\n              a.y,\n              b.x,\n              b.y\n            ];\n          }(pos0, result0[0], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_quadraticBezierCurveto() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 81) {\n          result0 = 'Q';\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed('\"Q\"');\n          }\n        }\n        if (result0 !== null) {\n          result1 = [];\n          result2 = parse_wsp();\n          while (result2 !== null) {\n            result1.push(result2);\n            result2 = parse_wsp();\n          }\n          if (result1 !== null) {\n            result2 = parse_quadraticBezierCurvetoArgumentSequence();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, args) {\n            return args.map(function (arg) {\n              return {\n                cmd: 'quadraticCurveTo',\n                args: arg\n              };\n            });\n          }(pos0, result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          if (input.charCodeAt(pos) === 113) {\n            result0 = 'q';\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed('\"q\"');\n            }\n          }\n          if (result0 !== null) {\n            result1 = [];\n            result2 = parse_wsp();\n            while (result2 !== null) {\n              result1.push(result2);\n              result2 = parse_wsp();\n            }\n            if (result1 !== null) {\n              result2 = parse_quadraticBezierCurvetoArgumentSequence();\n              if (result2 !== null) {\n                result0 = [\n                  result0,\n                  result1,\n                  result2\n                ];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = function (offset, args) {\n              return args.map(function (arg) {\n                return {\n                  cmd: 'quadraticCurveToRelative',\n                  args: arg\n                };\n              });\n            }(pos0, result0[2]);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_quadraticBezierCurvetoArgumentSequence() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_quadraticBezierCurvetoArgument();\n        if (result0 !== null) {\n          result1 = parse_commaWsp();\n          result1 = result1 !== null ? result1 : '';\n          if (result1 !== null) {\n            result2 = parse_quadraticBezierCurvetoArgumentSequence();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, a, list) {\n            return [a].concat(list);\n          }(pos0, result0[0], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          result0 = parse_quadraticBezierCurvetoArgument();\n          if (result0 !== null) {\n            result0 = function (offset, a) {\n              return [a];\n            }(pos0, result0);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_quadraticBezierCurvetoArgument() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_coordinatePair();\n        if (result0 !== null) {\n          result1 = parse_commaWsp();\n          result1 = result1 !== null ? result1 : '';\n          if (result1 !== null) {\n            result2 = parse_coordinatePair();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, a, b) {\n            return [\n              a.x,\n              a.y,\n              b.x,\n              b.y\n            ];\n          }(pos0, result0[0], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_smoothQuadraticBezierCurveto() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 84) {\n          result0 = 'T';\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed('\"T\"');\n          }\n        }\n        if (result0 !== null) {\n          result1 = [];\n          result2 = parse_wsp();\n          while (result2 !== null) {\n            result1.push(result2);\n            result2 = parse_wsp();\n          }\n          if (result1 !== null) {\n            result2 = parse_smoothQuadraticBezierCurvetoArgumentSequence();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, args) {\n            return args.map(function (arg) {\n              return {\n                cmd: 'smoothQuadraticCurveTo',\n                args: [\n                  arg.x,\n                  arg.y\n                ]\n              };\n            });\n          }(pos0, result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          if (input.charCodeAt(pos) === 116) {\n            result0 = 't';\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed('\"t\"');\n            }\n          }\n          if (result0 !== null) {\n            result1 = [];\n            result2 = parse_wsp();\n            while (result2 !== null) {\n              result1.push(result2);\n              result2 = parse_wsp();\n            }\n            if (result1 !== null) {\n              result2 = parse_smoothQuadraticBezierCurvetoArgumentSequence();\n              if (result2 !== null) {\n                result0 = [\n                  result0,\n                  result1,\n                  result2\n                ];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = function (offset, args) {\n              return args.map(function (arg) {\n                return {\n                  cmd: 'smoothQuadraticCurveToRelative',\n                  args: [\n                    arg.x,\n                    arg.y\n                  ]\n                };\n              });\n            }(pos0, result0[2]);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_smoothQuadraticBezierCurvetoArgumentSequence() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_coordinatePair();\n        if (result0 !== null) {\n          result1 = parse_commaWsp();\n          result1 = result1 !== null ? result1 : '';\n          if (result1 !== null) {\n            result2 = parse_smoothQuadraticBezierCurvetoArgumentSequence();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, a, list) {\n            return [a].concat(list);\n          }(pos0, result0[0], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          result0 = parse_coordinatePair();\n          if (result0 !== null) {\n            result0 = function (offset, a) {\n              return [a];\n            }(pos0, result0);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_ellipticalArc() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 65) {\n          result0 = 'A';\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed('\"A\"');\n          }\n        }\n        if (result0 !== null) {\n          result1 = [];\n          result2 = parse_wsp();\n          while (result2 !== null) {\n            result1.push(result2);\n            result2 = parse_wsp();\n          }\n          if (result1 !== null) {\n            result2 = parse_ellipticalArcArgumentSequence();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, args) {\n            return args.map(function (arg) {\n              return {\n                cmd: 'ellipticalArcTo',\n                args: arg\n              };\n            });\n          }(pos0, result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          if (input.charCodeAt(pos) === 97) {\n            result0 = 'a';\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed('\"a\"');\n            }\n          }\n          if (result0 !== null) {\n            result1 = [];\n            result2 = parse_wsp();\n            while (result2 !== null) {\n              result1.push(result2);\n              result2 = parse_wsp();\n            }\n            if (result1 !== null) {\n              result2 = parse_ellipticalArcArgumentSequence();\n              if (result2 !== null) {\n                result0 = [\n                  result0,\n                  result1,\n                  result2\n                ];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = function (offset, args) {\n              return args.map(function (arg) {\n                return {\n                  cmd: 'ellipticalArcToRelative',\n                  args: arg\n                };\n              });\n            }(pos0, result0[2]);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_ellipticalArcArgumentSequence() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_ellipticalArcArgument();\n        if (result0 !== null) {\n          result1 = parse_commaWsp();\n          result1 = result1 !== null ? result1 : '';\n          if (result1 !== null) {\n            result2 = parse_ellipticalArcArgumentSequence();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, a, list) {\n            return [a].concat(list);\n          }(pos0, result0[0], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          result0 = parse_ellipticalArcArgument();\n          if (result0 !== null) {\n            result0 = function (offset, a) {\n              return [a];\n            }(pos0, result0);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_ellipticalArcArgument() {\n        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_nonnegativeNumber();\n        if (result0 !== null) {\n          result1 = parse_commaWsp();\n          result1 = result1 !== null ? result1 : '';\n          if (result1 !== null) {\n            result2 = parse_nonnegativeNumber();\n            if (result2 !== null) {\n              result3 = parse_commaWsp();\n              result3 = result3 !== null ? result3 : '';\n              if (result3 !== null) {\n                result4 = parse_number();\n                if (result4 !== null) {\n                  result5 = parse_commaWsp();\n                  if (result5 !== null) {\n                    result6 = parse_flag();\n                    if (result6 !== null) {\n                      result7 = parse_commaWsp();\n                      result7 = result7 !== null ? result7 : '';\n                      if (result7 !== null) {\n                        result8 = parse_flag();\n                        if (result8 !== null) {\n                          result9 = parse_commaWsp();\n                          result9 = result9 !== null ? result9 : '';\n                          if (result9 !== null) {\n                            result10 = parse_coordinatePair();\n                            if (result10 !== null) {\n                              result0 = [\n                                result0,\n                                result1,\n                                result2,\n                                result3,\n                                result4,\n                                result5,\n                                result6,\n                                result7,\n                                result8,\n                                result9,\n                                result10\n                              ];\n                            } else {\n                              result0 = null;\n                              pos = pos1;\n                            }\n                          } else {\n                            result0 = null;\n                            pos = pos1;\n                          }\n                        } else {\n                          result0 = null;\n                          pos = pos1;\n                        }\n                      } else {\n                        result0 = null;\n                        pos = pos1;\n                      }\n                    } else {\n                      result0 = null;\n                      pos = pos1;\n                    }\n                  } else {\n                    result0 = null;\n                    pos = pos1;\n                  }\n                } else {\n                  result0 = null;\n                  pos = pos1;\n                }\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, rx, ry, rot, largeArc, sweep, to) {\n            return [\n              rx,\n              ry,\n              rot,\n              largeArc,\n              sweep,\n              to.x,\n              to.y\n            ];\n          }(pos0, result0[0], result0[2], result0[4], result0[6], result0[8], result0[10]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_coordinatePair() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_number();\n        if (result0 !== null) {\n          result1 = parse_commaWsp();\n          result1 = result1 !== null ? result1 : '';\n          if (result1 !== null) {\n            result2 = parse_number();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, a, b) {\n            return {\n              x: a,\n              y: b\n            };\n          }(pos0, result0[0], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_nonnegativeNumber() {\n        var result0;\n        var pos0;\n        pos0 = pos;\n        result0 = parse_floatingPointConstant();\n        if (result0 !== null) {\n          result0 = function (offset, number) {\n            return parseFloat(number, 10);\n          }(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          result0 = parse_digitSequence();\n          if (result0 !== null) {\n            result0 = function (offset, number) {\n              return parseInt(number, 10);\n            }(pos0, result0);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_number() {\n        var result0, result1;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_sign();\n        result0 = result0 !== null ? result0 : '';\n        if (result0 !== null) {\n          result1 = parse_floatingPointConstant();\n          if (result1 !== null) {\n            result0 = [\n              result0,\n              result1\n            ];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, sign, number) {\n            return parseFloat(sign + number, 10);\n          }(pos0, result0[0], result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          result0 = parse_sign();\n          result0 = result0 !== null ? result0 : '';\n          if (result0 !== null) {\n            result1 = parse_digitSequence();\n            if (result1 !== null) {\n              result0 = [\n                result0,\n                result1\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = function (offset, sign, number) {\n              return parseInt(sign + number, 10);\n            }(pos0, result0[0], result0[1]);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_flag() {\n        var result0;\n        var pos0;\n        pos0 = pos;\n        if (input.charCodeAt(pos) === 48) {\n          result0 = '0';\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed('\"0\"');\n          }\n        }\n        if (result0 !== null) {\n          result0 = function (offset) {\n            return false;\n          }(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          if (input.charCodeAt(pos) === 49) {\n            result0 = '1';\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed('\"1\"');\n            }\n          }\n          if (result0 !== null) {\n            result0 = function (offset) {\n              return true;\n            }(pos0);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_commaWsp() {\n        var result0, result1, result2, result3;\n        var pos0;\n        pos0 = pos;\n        result1 = parse_wsp();\n        if (result1 !== null) {\n          result0 = [];\n          while (result1 !== null) {\n            result0.push(result1);\n            result1 = parse_wsp();\n          }\n        } else {\n          result0 = null;\n        }\n        if (result0 !== null) {\n          result1 = parse_comma();\n          result1 = result1 !== null ? result1 : '';\n          if (result1 !== null) {\n            result2 = [];\n            result3 = parse_wsp();\n            while (result3 !== null) {\n              result2.push(result3);\n              result3 = parse_wsp();\n            }\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos0;\n            }\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          result0 = parse_comma();\n          if (result0 !== null) {\n            result1 = [];\n            result2 = parse_wsp();\n            while (result2 !== null) {\n              result1.push(result2);\n              result2 = parse_wsp();\n            }\n            if (result1 !== null) {\n              result0 = [\n                result0,\n                result1\n              ];\n            } else {\n              result0 = null;\n              pos = pos0;\n            }\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_comma() {\n        var result0;\n        if (input.charCodeAt(pos) === 44) {\n          result0 = ',';\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed('\",\"');\n          }\n        }\n        return result0;\n      }\n      function parse_floatingPointConstant() {\n        var result0, result1;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_fractionalConstant();\n        if (result0 !== null) {\n          result1 = parse_exponent();\n          result1 = result1 !== null ? result1 : '';\n          if (result1 !== null) {\n            result0 = [\n              result0,\n              result1\n            ];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, a, b) {\n            return a + b;\n          }(pos0, result0[0], result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          result0 = parse_digitSequence();\n          if (result0 !== null) {\n            result1 = parse_exponent();\n            if (result1 !== null) {\n              result0 = [\n                result0,\n                result1\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = function (offset, a, b) {\n              return a + b;\n            }(pos0, result0[0], result0[1]);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_fractionalConstant() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_digitSequence();\n        result0 = result0 !== null ? result0 : '';\n        if (result0 !== null) {\n          if (input.charCodeAt(pos) === 46) {\n            result1 = '.';\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed('\".\"');\n            }\n          }\n          if (result1 !== null) {\n            result2 = parse_digitSequence();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, a, b) {\n            return a + '.' + b;\n          }(pos0, result0[0], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          result0 = parse_digitSequence();\n          if (result0 !== null) {\n            if (input.charCodeAt(pos) === 46) {\n              result1 = '.';\n              pos++;\n            } else {\n              result1 = null;\n              if (reportFailures === 0) {\n                matchFailed('\".\"');\n              }\n            }\n            if (result1 !== null) {\n              result0 = [\n                result0,\n                result1\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = function (offset, a) {\n              return a;\n            }(pos0, result0[0]);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_exponent() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 101) {\n          result0 = 'e';\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed('\"e\"');\n          }\n        }\n        if (result0 === null) {\n          if (input.charCodeAt(pos) === 69) {\n            result0 = 'E';\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed('\"E\"');\n            }\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_sign();\n          result1 = result1 !== null ? result1 : '';\n          if (result1 !== null) {\n            result2 = parse_digitSequence();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, a, b, c) {\n            return a + b + c;\n          }(pos0, result0[0], result0[1], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_sign() {\n        var result0;\n        if (input.charCodeAt(pos) === 43) {\n          result0 = '+';\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed('\"+\"');\n          }\n        }\n        if (result0 === null) {\n          if (input.charCodeAt(pos) === 45) {\n            result0 = '-';\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed('\"-\"');\n            }\n          }\n        }\n        return result0;\n      }\n      function parse_digitSequence() {\n        var result0, result1;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_digit();\n        if (result0 !== null) {\n          result1 = parse_digitSequence();\n          if (result1 !== null) {\n            result0 = [\n              result0,\n              result1\n            ];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, a, b) {\n            return a + b;\n          }(pos0, result0[0], result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          result0 = parse_digit();\n        }\n        return result0;\n      }\n      function parse_digit() {\n        var result0;\n        if (/^[0-9]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed('[0-9]');\n          }\n        }\n        return result0;\n      }\n      function parse_wsp() {\n        var result0;\n        if (input.charCodeAt(pos) === 32) {\n          result0 = ' ';\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed('\" \"');\n          }\n        }\n        if (result0 === null) {\n          if (input.charCodeAt(pos) === 9) {\n            result0 = '\\t';\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed('\"\\\\t\"');\n            }\n          }\n          if (result0 === null) {\n            if (input.charCodeAt(pos) === 13) {\n              result0 = '\\r';\n              pos++;\n            } else {\n              result0 = null;\n              if (reportFailures === 0) {\n                matchFailed('\"\\\\r\"');\n              }\n            }\n            if (result0 === null) {\n              if (input.charCodeAt(pos) === 10) {\n                result0 = '\\n';\n                pos++;\n              } else {\n                result0 = null;\n                if (reportFailures === 0) {\n                  matchFailed('\"\\\\n\"');\n                }\n              }\n            }\n          }\n        }\n        return result0;\n      }\n      function cleanupExpected(expected) {\n        expected.sort();\n        var lastExpected = null;\n        var cleanExpected = [];\n        for (var i = 0; i < expected.length; i++) {\n          if (expected[i] !== lastExpected) {\n            cleanExpected.push(expected[i]);\n            lastExpected = expected[i];\n          }\n        }\n        return cleanExpected;\n      }\n      function computeErrorPosition() {\n        var line = 1;\n        var column = 1;\n        var seenCR = false;\n        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {\n          var ch = input.charAt(i);\n          if (ch === '\\n') {\n            if (!seenCR) {\n              line++;\n            }\n            column = 1;\n            seenCR = false;\n          } else if (ch === '\\r' || ch === '\\u2028' || ch === '\\u2029') {\n            line++;\n            column = 1;\n            seenCR = true;\n          } else {\n            column++;\n            seenCR = false;\n          }\n        }\n        return {\n          line: line,\n          column: column\n        };\n      }\n      function createMoveTo(args, isRelative) {\n        var result = [{\n              cmd: isRelative ? 'moveToRelative' : 'moveTo',\n              args: [\n                args[0].x,\n                args[0].y\n              ]\n            }];\n        if (args.length > 1) {\n          for (var i = 1; i < args.length; i++) {\n            result.push({\n              cmd: isRelative ? 'lineToRelative' : 'lineTo',\n              args: [\n                args[i].x,\n                args[i].y\n              ]\n            });\n          }\n        }\n        return result;\n      }\n      var result = parseFunctions[startRule]();\n      if (result === null || pos !== input.length) {\n        var offset = Math.max(pos, rightmostFailuresPos);\n        var found = offset < input.length ? input.charAt(offset) : null;\n        var errorPosition = computeErrorPosition();\n        throw new this.SyntaxError(cleanupExpected(rightmostFailuresExpected), found, offset, errorPosition.line, errorPosition.column);\n      }\n      return result;\n    },\n    toSource: function () {\n      return this._source;\n    }\n  };\n  var result = kite.svgPath;\n  result.SyntaxError = function (expected, found, offset, line, column) {\n    function buildMessage(expected, found) {\n      var expectedHumanized, foundHumanized;\n      switch (expected.length) {\n      case 0:\n        expectedHumanized = 'end of input';\n        break;\n      case 1:\n        expectedHumanized = expected[0];\n        break;\n      default:\n        expectedHumanized = expected.slice(0, expected.length - 1).join(', ') + ' or ' + expected[expected.length - 1];\n      }\n      foundHumanized = found ? quote(found) : 'end of input';\n      return 'Expected ' + expectedHumanized + ' but ' + foundHumanized + ' found.';\n    }\n    this.name = 'SyntaxError';\n    this.expected = expected;\n    this.found = found;\n    this.message = buildMessage(expected, found);\n    this.offset = offset;\n    this.line = line;\n    this.column = column;\n  };\n  result.SyntaxError.prototype = Error.prototype;\n  return result;\n});","\ndefine('KITE/util/LineStyles',['require','KITE/kite'],function (require) {\n  'use strict';\n  var kite = require('KITE/kite');\n  kite.LineStyles = function (args) {\n    if (args === undefined) {\n      args = {};\n    }\n    this.lineWidth = args.lineWidth !== undefined ? args.lineWidth : 1;\n    this.lineCap = args.lineCap !== undefined ? args.lineCap : 'butt';\n    this.lineJoin = args.lineJoin !== undefined ? args.lineJoin : 'miter';\n    this.lineDash = args.lineDash ? args.lineDash : [];\n    this.lineDashOffset = args.lineDashOffset !== undefined ? args.lineDashOffset : 0;\n    this.miterLimit = args.miterLimit !== undefined ? args.miterLimit : 10;\n    null;\n  };\n  var LineStyles = kite.LineStyles;\n  LineStyles.prototype = {\n    constructor: LineStyles,\n    equals: function (other) {\n      var typical = this.lineWidth === other.lineWidth && this.lineCap === other.lineCap && this.lineJoin === other.lineJoin && this.miterLimit === other.miterLimit && this.lineDashOffset === other.lineDashOffset;\n      if (!typical) {\n        return false;\n      }\n      if (this.lineDash.length === other.lineDash.length) {\n        for (var i = 0; i < this.lineDash.length; i++) {\n          if (this.lineDash[i] !== other.lineDash[i]) {\n            return false;\n          }\n        }\n      } else {\n        return false;\n      }\n      return true;\n    }\n  };\n  return kite.LineStyles;\n});","\ndefine('DOT/Vector4',['require','DOT/dot','DOT/Util'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  require('DOT/Util');\n  dot.Vector4 = function Vector4(x, y, z, w) {\n    this.x = x || 0;\n    this.y = y || 0;\n    this.z = z || 0;\n    this.w = w !== undefined ? w : 1;\n  };\n  var Vector4 = dot.Vector4;\n  Vector4.prototype = {\n    constructor: Vector4,\n    isVector4: true,\n    dimension: 4,\n    magnitude: function () {\n      return Math.sqrt(this.magnitudeSquared());\n    },\n    magnitudeSquared: function () {\n      this.dot(this);\n    },\n    distance: function (point) {\n      return this.minus(point).magnitude();\n    },\n    distanceSquared: function (point) {\n      return this.minus(point).magnitudeSquared();\n    },\n    dot: function (v) {\n      return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n    },\n    isFinite: function () {\n      return isFinite(this.x) && isFinite(this.y) && isFinite(this.z) && isFinite(this.w);\n    },\n    equals: function (other) {\n      return this.x === other.x && this.y === other.y && this.z === other.z && this.w === other.w;\n    },\n    equalsEpsilon: function (other, epsilon) {\n      if (!epsilon) {\n        epsilon = 0;\n      }\n      return Math.abs(this.x - other.x) + Math.abs(this.y - other.y) + Math.abs(this.z - other.z) + Math.abs(this.w - other.w) <= epsilon;\n    },\n    copy: function (vector) {\n      if (vector) {\n        return vector.set(this);\n      } else {\n        return new Vector4(this.x, this.y, this.z, this.w);\n      }\n    },\n    normalized: function () {\n      var mag = this.magnitude();\n      if (mag === 0) {\n        throw new Error('Cannot normalize a zero-magnitude vector');\n      } else {\n        return new Vector4(this.x / mag, this.y / mag, this.z / mag, this.w / mag);\n      }\n    },\n    timesScalar: function (scalar) {\n      return new Vector4(this.x * scalar, this.y * scalar, this.z * scalar, this.w * scalar);\n    },\n    times: function (scalar) {\n      null;\n      return this.timesScalar(scalar);\n    },\n    componentTimes: function (v) {\n      return new Vector4(this.x * v.x, this.y * v.y, this.z * v.z, this.w * v.w);\n    },\n    plus: function (v) {\n      return new Vector4(this.x + v.x, this.y + v.y, this.z + v.z, this.w + v.w);\n    },\n    plusScalar: function (scalar) {\n      return new Vector4(this.x + scalar, this.y + scalar, this.z + scalar, this.w + scalar);\n    },\n    minus: function (v) {\n      return new Vector4(this.x - v.x, this.y - v.y, this.z - v.z, this.w - v.w);\n    },\n    minusScalar: function (scalar) {\n      return new Vector4(this.x - scalar, this.y - scalar, this.z - scalar, this.w - scalar);\n    },\n    dividedScalar: function (scalar) {\n      return new Vector4(this.x / scalar, this.y / scalar, this.z / scalar, this.w / scalar);\n    },\n    negated: function () {\n      return new Vector4(-this.x, -this.y, -this.z, -this.w);\n    },\n    angleBetween: function (v) {\n      return Math.acos(dot.clamp(this.normalized().dot(v.normalized()), -1, 1));\n    },\n    blend: function (vector, ratio) {\n      return this.plus(vector.minus(this).times(ratio));\n    },\n    average: function (vector) {\n      return this.blend(vector, 0.5);\n    },\n    toString: function () {\n      return 'Vector4(' + this.x + ', ' + this.y + ', ' + this.z + ', ' + this.w + ')';\n    },\n    toVector3: function () {\n      return new dot.Vector3(this.x, this.y, this.z);\n    },\n    setXYZW: function (x, y, z, w) {\n      this.x = x;\n      this.y = y;\n      this.z = z;\n      this.w = w;\n      return this;\n    },\n    setX: function (x) {\n      this.x = x;\n      return this;\n    },\n    setY: function (y) {\n      this.y = y;\n      return this;\n    },\n    setZ: function (z) {\n      this.z = z;\n      return this;\n    },\n    setW: function (w) {\n      this.w = w;\n      return this;\n    },\n    set: function (v) {\n      return this.setXYZW(v.x, v.y, v.z, v.w);\n    },\n    add: function (v) {\n      return this.setXYZW(this.x + v.x, this.y + v.y, this.z + v.z, this.w + v.w);\n    },\n    addScalar: function (scalar) {\n      return this.setXYZW(this.x + scalar, this.y + scalar, this.z + scalar, this.w + scalar);\n    },\n    subtract: function (v) {\n      return this.setXYZW(this.x - v.x, this.y - v.y, this.z - v.z, this.w - v.w);\n    },\n    subtractScalar: function (scalar) {\n      return this.setXYZW(this.x - scalar, this.y - scalar, this.z - scalar, this.w - scalar);\n    },\n    multiplyScalar: function (scalar) {\n      return this.setXYZW(this.x * scalar, this.y * scalar, this.z * scalar, this.w * scalar);\n    },\n    multiply: function (scalar) {\n      null;\n      return this.multiplyScalar(scalar);\n    },\n    componentMultiply: function (v) {\n      return this.setXYZW(this.x * v.x, this.y * v.y, this.z * v.z, this.w * v.w);\n    },\n    divideScalar: function (scalar) {\n      return this.setXYZW(this.x / scalar, this.y / scalar, this.z / scalar, this.w / scalar);\n    },\n    negate: function () {\n      return this.setXYZW(-this.x, -this.y, -this.z, -this.w);\n    },\n    normalize: function () {\n      var mag = this.magnitude();\n      if (mag === 0) {\n        throw new Error('Cannot normalize a zero-magnitude vector');\n      } else {\n        return this.divideScalar(mag);\n      }\n      return this;\n    }\n  };\n  Vector4.Immutable = function (x, y, z, w) {\n    this.x = x || 0;\n    this.y = y || 0;\n    this.z = z || 0;\n    this.w = w !== undefined ? w : 1;\n  };\n  var Immutable = Vector4.Immutable;\n  Immutable.prototype = new Vector4();\n  Immutable.prototype.constructor = Immutable;\n  Immutable.mutableOverrideHelper = function (mutableFunctionName) {\n    Immutable.prototype[mutableFunctionName] = function () {\n      throw new Error('Cannot call mutable method \\'' + mutableFunctionName + '\\' on immutable Vector4');\n    };\n  };\n  Immutable.mutableOverrideHelper('setXYZW');\n  Immutable.mutableOverrideHelper('setX');\n  Immutable.mutableOverrideHelper('setY');\n  Immutable.mutableOverrideHelper('setZ');\n  Immutable.mutableOverrideHelper('setW');\n  Vector4.ZERO = new Immutable(0, 0, 0, 0);\n  Vector4.X_UNIT = new Immutable(1, 0, 0, 0);\n  Vector4.Y_UNIT = new Immutable(0, 1, 0, 0);\n  Vector4.Z_UNIT = new Immutable(0, 0, 1, 0);\n  Vector4.W_UNIT = new Immutable(0, 0, 0, 1);\n  return Vector4;\n});","\ndefine('DOT/Vector3',['require','DOT/dot','DOT/Util','DOT/Vector2','DOT/Vector4'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  require('DOT/Util');\n  require('DOT/Vector2');\n  require('DOT/Vector4');\n  dot.Vector3 = function Vector3(x, y, z) {\n    this.x = x || 0;\n    this.y = y || 0;\n    this.z = z || 0;\n  };\n  var Vector3 = dot.Vector3;\n  Vector3.prototype = {\n    constructor: Vector3,\n    isVector3: true,\n    dimension: 3,\n    magnitude: function () {\n      return Math.sqrt(this.magnitudeSquared());\n    },\n    magnitudeSquared: function () {\n      return this.dot(this);\n    },\n    distance: function (point) {\n      return this.minus(point).magnitude();\n    },\n    distanceSquared: function (point) {\n      return this.minus(point).magnitudeSquared();\n    },\n    dot: function (v) {\n      return this.x * v.x + this.y * v.y + this.z * v.z;\n    },\n    isFinite: function () {\n      return isFinite(this.x) && isFinite(this.y) && isFinite(this.z);\n    },\n    equals: function (other) {\n      return this.x === other.x && this.y === other.y && this.z === other.z;\n    },\n    equalsEpsilon: function (other, epsilon) {\n      if (!epsilon) {\n        epsilon = 0;\n      }\n      return Math.abs(this.x - other.x) + Math.abs(this.y - other.y) + Math.abs(this.z - other.z) <= epsilon;\n    },\n    copy: function (vector) {\n      if (vector) {\n        return vector.set(this);\n      } else {\n        return new Vector3(this.x, this.y, this.z);\n      }\n    },\n    cross: function (v) {\n      return new Vector3(this.y * v.z - this.z * v.y, this.z * v.x - this.x * v.z, this.x * v.y - this.y * v.x);\n    },\n    normalized: function () {\n      var mag = this.magnitude();\n      if (mag === 0) {\n        throw new Error('Cannot normalize a zero-magnitude vector');\n      } else {\n        return new Vector3(this.x / mag, this.y / mag, this.z / mag);\n      }\n    },\n    timesScalar: function (scalar) {\n      return new Vector3(this.x * scalar, this.y * scalar, this.z * scalar);\n    },\n    times: function (scalar) {\n      null;\n      return this.timesScalar(scalar);\n    },\n    componentTimes: function (v) {\n      return new Vector3(this.x * v.x, this.y * v.y, this.z * v.z);\n    },\n    plus: function (v) {\n      return new Vector3(this.x + v.x, this.y + v.y, this.z + v.z);\n    },\n    plusScalar: function (scalar) {\n      return new Vector3(this.x + scalar, this.y + scalar, this.z + scalar);\n    },\n    minus: function (v) {\n      return new Vector3(this.x - v.x, this.y - v.y, this.z - v.z);\n    },\n    minusScalar: function (scalar) {\n      return new Vector3(this.x - scalar, this.y - scalar, this.z - scalar);\n    },\n    dividedScalar: function (scalar) {\n      return new Vector3(this.x / scalar, this.y / scalar, this.z / scalar);\n    },\n    negated: function () {\n      return new Vector3(-this.x, -this.y, -this.z);\n    },\n    angleBetween: function (v) {\n      return Math.acos(dot.clamp(this.normalized().dot(v.normalized()), -1, 1));\n    },\n    blend: function (vector, ratio) {\n      return this.plus(vector.minus(this).times(ratio));\n    },\n    average: function (vector) {\n      return this.blend(vector, 0.5);\n    },\n    toString: function () {\n      return 'Vector3(' + this.x + ', ' + this.y + ', ' + this.z + ')';\n    },\n    toVector2: function () {\n      return new dot.Vector2(this.x, this.y);\n    },\n    toVector4: function () {\n      return new dot.Vector4(this.x, this.y, this.z);\n    },\n    setXYZ: function (x, y, z) {\n      this.x = x;\n      this.y = y;\n      this.z = z;\n      return this;\n    },\n    setX: function (x) {\n      this.x = x;\n      return this;\n    },\n    setY: function (y) {\n      this.y = y;\n      return this;\n    },\n    setZ: function (z) {\n      this.z = z;\n      return this;\n    },\n    set: function (v) {\n      return this.setXYZ(v.x, v.y, v.z);\n    },\n    add: function (v) {\n      return this.setXYZ(this.x + v.x, this.y + v.y, this.z + v.z);\n    },\n    addScalar: function (scalar) {\n      return this.setXYZ(this.x + scalar, this.y + scalar, this.z + scalar);\n    },\n    subtract: function (v) {\n      return this.setXYZ(this.x - v.x, this.y - v.y, this.z - v.z);\n    },\n    subtractScalar: function (scalar) {\n      return this.setXYZ(this.x - scalar, this.y - scalar, this.z - scalar);\n    },\n    multiplyScalar: function (scalar) {\n      return this.setXYZ(this.x * scalar, this.y * scalar, this.z * scalar);\n    },\n    multiply: function (scalar) {\n      null;\n      return this.multiplyScalar(scalar);\n    },\n    componentMultiply: function (v) {\n      return this.setXYZ(this.x * v.x, this.y * v.y, this.z * v.z);\n    },\n    divideScalar: function (scalar) {\n      return this.setXYZ(this.x / scalar, this.y / scalar, this.z / scalar);\n    },\n    negate: function () {\n      return this.setXYZ(-this.x, -this.y, -this.z);\n    },\n    normalize: function () {\n      var mag = this.magnitude();\n      if (mag === 0) {\n        throw new Error('Cannot normalize a zero-magnitude vector');\n      } else {\n        return this.divideScalar(mag);\n      }\n    }\n  };\n  Vector3.Immutable = function (x, y, z) {\n    this.x = x || 0;\n    this.y = y || 0;\n    this.z = z || 0;\n  };\n  var Immutable = Vector3.Immutable;\n  Immutable.prototype = new Vector3();\n  Immutable.prototype.constructor = Immutable;\n  Immutable.mutableOverrideHelper = function (mutableFunctionName) {\n    Immutable.prototype[mutableFunctionName] = function () {\n      throw new Error('Cannot call mutable method \\'' + mutableFunctionName + '\\' on immutable Vector3');\n    };\n  };\n  Immutable.mutableOverrideHelper('setXYZ');\n  Immutable.mutableOverrideHelper('setX');\n  Immutable.mutableOverrideHelper('setY');\n  Immutable.mutableOverrideHelper('setZ');\n  Vector3.ZERO = new Immutable(0, 0, 0);\n  Vector3.X_UNIT = new Immutable(1, 0, 0);\n  Vector3.Y_UNIT = new Immutable(0, 1, 0);\n  Vector3.Z_UNIT = new Immutable(0, 0, 1);\n  return Vector3;\n});","\ndefine('DOT/Matrix4',['require','DOT/dot','DOT/Vector3','DOT/Vector4'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  require('DOT/Vector3');\n  require('DOT/Vector4');\n  var Float32Array = window.Float32Array || Array;\n  dot.Matrix4 = function Matrix4(v00, v01, v02, v03, v10, v11, v12, v13, v20, v21, v22, v23, v30, v31, v32, v33, type) {\n    this.entries = new Float32Array(16);\n    this.rowMajor(v00 === undefined ? 1 : v00, v01 || 0, v02 || 0, v03 || 0, v10 || 0, v11 === undefined ? 1 : v11, v12 || 0, v13 || 0, v20 || 0, v21 || 0, v22 === undefined ? 1 : v22, v23 || 0, v30 || 0, v31 || 0, v32 || 0, v33 === undefined ? 1 : v33, type);\n  };\n  var Matrix4 = dot.Matrix4;\n  Matrix4.Types = {\n    OTHER: 0,\n    IDENTITY: 1,\n    TRANSLATION_3D: 2,\n    SCALING: 3,\n    AFFINE: 4\n  };\n  var Types = Matrix4.Types;\n  Matrix4.identity = function () {\n    return new Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, Types.IDENTITY);\n  };\n  Matrix4.translation = function (x, y, z) {\n    return new Matrix4(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1, Types.TRANSLATION_3D);\n  };\n  Matrix4.translationFromVector = function (v) {\n    return Matrix4.translation(v.x, v.y, v.z);\n  };\n  Matrix4.scaling = function (x, y, z) {\n    y = y === undefined ? x : y;\n    z = z === undefined ? x : z;\n    return new Matrix4(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1, Types.SCALING);\n  };\n  Matrix4.rotationAxisAngle = function (axis, angle) {\n    var c = Math.cos(angle);\n    var s = Math.sin(angle);\n    var C = 1 - c;\n    return new Matrix4(axis.x * axis.x * C + c, axis.x * axis.y * C - axis.z * s, axis.x * axis.z * C + axis.y * s, 0, axis.y * axis.x * C + axis.z * s, axis.y * axis.y * C + c, axis.y * axis.z * C - axis.x * s, 0, axis.z * axis.x * C - axis.y * s, axis.z * axis.y * C + axis.x * s, axis.z * axis.z * C + c, 0, 0, 0, 0, 1, Types.AFFINE);\n  };\n  Matrix4.rotationX = function (angle) {\n    var c = Math.cos(angle);\n    var s = Math.sin(angle);\n    return new Matrix4(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, Types.AFFINE);\n  };\n  Matrix4.rotationY = function (angle) {\n    var c = Math.cos(angle);\n    var s = Math.sin(angle);\n    return new Matrix4(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1, Types.AFFINE);\n  };\n  Matrix4.rotationZ = function (angle) {\n    var c = Math.cos(angle);\n    var s = Math.sin(angle);\n    return new Matrix4(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, Types.AFFINE);\n  };\n  Matrix4.gluPerspective = function (fovYRadians, aspect, zNear, zFar) {\n    var cotangent = Math.cos(fovYRadians) / Math.sin(fovYRadians);\n    return new Matrix4(cotangent / aspect, 0, 0, 0, 0, cotangent, 0, 0, 0, 0, (zFar + zNear) / (zNear - zFar), 2 * zFar * zNear / (zNear - zFar), 0, 0, -1, 0);\n  };\n  Matrix4.prototype = {\n    constructor: Matrix4,\n    rowMajor: function (v00, v01, v02, v03, v10, v11, v12, v13, v20, v21, v22, v23, v30, v31, v32, v33, type) {\n      this.entries[0] = v00;\n      this.entries[1] = v10;\n      this.entries[2] = v20;\n      this.entries[3] = v30;\n      this.entries[4] = v01;\n      this.entries[5] = v11;\n      this.entries[6] = v21;\n      this.entries[7] = v31;\n      this.entries[8] = v02;\n      this.entries[9] = v12;\n      this.entries[10] = v22;\n      this.entries[11] = v32;\n      this.entries[12] = v03;\n      this.entries[13] = v13;\n      this.entries[14] = v23;\n      this.entries[15] = v33;\n      this.type = type === undefined ? v30 === 0 && v31 === 0 && v32 === 0 && v33 === 1 ? Types.AFFINE : Types.OTHER : type;\n      return this;\n    },\n    columnMajor: function (v00, v10, v20, v30, v01, v11, v21, v31, v02, v12, v22, v32, v03, v13, v23, v33, type) {\n      return this.rowMajor(v00, v01, v02, v03, v10, v11, v12, v13, v20, v21, v22, v23, v30, v31, v32, v33, type);\n    },\n    m00: function () {\n      return this.entries[0];\n    },\n    m01: function () {\n      return this.entries[4];\n    },\n    m02: function () {\n      return this.entries[8];\n    },\n    m03: function () {\n      return this.entries[12];\n    },\n    m10: function () {\n      return this.entries[1];\n    },\n    m11: function () {\n      return this.entries[5];\n    },\n    m12: function () {\n      return this.entries[9];\n    },\n    m13: function () {\n      return this.entries[13];\n    },\n    m20: function () {\n      return this.entries[2];\n    },\n    m21: function () {\n      return this.entries[6];\n    },\n    m22: function () {\n      return this.entries[10];\n    },\n    m23: function () {\n      return this.entries[14];\n    },\n    m30: function () {\n      return this.entries[3];\n    },\n    m31: function () {\n      return this.entries[7];\n    },\n    m32: function () {\n      return this.entries[11];\n    },\n    m33: function () {\n      return this.entries[15];\n    },\n    isFinite: function () {\n      return isFinite(this.m00()) && isFinite(this.m01()) && isFinite(this.m02()) && isFinite(this.m03()) && isFinite(this.m10()) && isFinite(this.m11()) && isFinite(this.m12()) && isFinite(this.m13()) && isFinite(this.m20()) && isFinite(this.m21()) && isFinite(this.m22()) && isFinite(this.m23()) && isFinite(this.m30()) && isFinite(this.m31()) && isFinite(this.m32()) && isFinite(this.m33());\n    },\n    getTranslation: function () {\n      return new dot.Vector3(this.m03(), this.m13(), this.m23());\n    },\n    get translation() {\n      return this.getTranslation();\n    },\n    getScaleVector: function () {\n      var m0003 = this.m00() + this.m03();\n      var m1013 = this.m10() + this.m13();\n      var m2023 = this.m20() + this.m23();\n      var m3033 = this.m30() + this.m33();\n      var m0103 = this.m01() + this.m03();\n      var m1113 = this.m11() + this.m13();\n      var m2123 = this.m21() + this.m23();\n      var m3133 = this.m31() + this.m33();\n      var m0203 = this.m02() + this.m03();\n      var m1213 = this.m12() + this.m13();\n      var m2223 = this.m22() + this.m23();\n      var m3233 = this.m32() + this.m33();\n      return new dot.Vector3(Math.sqrt(m0003 * m0003 + m1013 * m1013 + m2023 * m2023 + m3033 * m3033), Math.sqrt(m0103 * m0103 + m1113 * m1113 + m2123 * m2123 + m3133 * m3133), Math.sqrt(m0203 * m0203 + m1213 * m1213 + m2223 * m2223 + m3233 * m3233));\n    },\n    get scaleVector() {\n      return this.getScaleVector();\n    },\n    getCSSTransform: function () {\n      return 'matrix3d(' + this.entries[0].toFixed(20) + ',' + this.entries[1].toFixed(20) + ',' + this.entries[2].toFixed(20) + ',' + this.entries[3].toFixed(20) + ',' + this.entries[4].toFixed(20) + ',' + this.entries[5].toFixed(20) + ',' + this.entries[6].toFixed(20) + ',' + this.entries[7].toFixed(20) + ',' + this.entries[8].toFixed(20) + ',' + this.entries[9].toFixed(20) + ',' + this.entries[10].toFixed(20) + ',' + this.entries[11].toFixed(20) + ',' + this.entries[12].toFixed(20) + ',' + this.entries[13].toFixed(20) + ',' + this.entries[14].toFixed(20) + ',' + this.entries[15].toFixed(20) + ')';\n    },\n    get cssTransform() {\n      return this.getCSSTransform();\n    },\n    equals: function (m) {\n      return this.m00() === m.m00() && this.m01() === m.m01() && this.m02() === m.m02() && this.m03() === m.m03() && this.m10() === m.m10() && this.m11() === m.m11() && this.m12() === m.m12() && this.m13() === m.m13() && this.m20() === m.m20() && this.m21() === m.m21() && this.m22() === m.m22() && this.m23() === m.m23() && this.m30() === m.m30() && this.m31() === m.m31() && this.m32() === m.m32() && this.m33() === m.m33();\n    },\n    equalsEpsilon: function (m, epsilon) {\n      return Math.abs(this.m00() - m.m00()) < epsilon && Math.abs(this.m01() - m.m01()) < epsilon && Math.abs(this.m02() - m.m02()) < epsilon && Math.abs(this.m03() - m.m03()) < epsilon && Math.abs(this.m10() - m.m10()) < epsilon && Math.abs(this.m11() - m.m11()) < epsilon && Math.abs(this.m12() - m.m12()) < epsilon && Math.abs(this.m13() - m.m13()) < epsilon && Math.abs(this.m20() - m.m20()) < epsilon && Math.abs(this.m21() - m.m21()) < epsilon && Math.abs(this.m22() - m.m22()) < epsilon && Math.abs(this.m23() - m.m23()) < epsilon && Math.abs(this.m30() - m.m30()) < epsilon && Math.abs(this.m31() - m.m31()) < epsilon && Math.abs(this.m32() - m.m32()) < epsilon && Math.abs(this.m33() - m.m33()) < epsilon;\n    },\n    copy: function () {\n      return new Matrix4(this.m00(), this.m01(), this.m02(), this.m03(), this.m10(), this.m11(), this.m12(), this.m13(), this.m20(), this.m21(), this.m22(), this.m23(), this.m30(), this.m31(), this.m32(), this.m33(), this.type);\n    },\n    plus: function (m) {\n      return new Matrix4(this.m00() + m.m00(), this.m01() + m.m01(), this.m02() + m.m02(), this.m03() + m.m03(), this.m10() + m.m10(), this.m11() + m.m11(), this.m12() + m.m12(), this.m13() + m.m13(), this.m20() + m.m20(), this.m21() + m.m21(), this.m22() + m.m22(), this.m23() + m.m23(), this.m30() + m.m30(), this.m31() + m.m31(), this.m32() + m.m32(), this.m33() + m.m33());\n    },\n    minus: function (m) {\n      return new Matrix4(this.m00() - m.m00(), this.m01() - m.m01(), this.m02() - m.m02(), this.m03() - m.m03(), this.m10() - m.m10(), this.m11() - m.m11(), this.m12() - m.m12(), this.m13() - m.m13(), this.m20() - m.m20(), this.m21() - m.m21(), this.m22() - m.m22(), this.m23() - m.m23(), this.m30() - m.m30(), this.m31() - m.m31(), this.m32() - m.m32(), this.m33() - m.m33());\n    },\n    transposed: function () {\n      return new Matrix4(this.m00(), this.m10(), this.m20(), this.m30(), this.m01(), this.m11(), this.m21(), this.m31(), this.m02(), this.m12(), this.m22(), this.m32(), this.m03(), this.m13(), this.m23(), this.m33());\n    },\n    negated: function () {\n      return new Matrix4(-this.m00(), -this.m01(), -this.m02(), -this.m03(), -this.m10(), -this.m11(), -this.m12(), -this.m13(), -this.m20(), -this.m21(), -this.m22(), -this.m23(), -this.m30(), -this.m31(), -this.m32(), -this.m33());\n    },\n    inverted: function () {\n      switch (this.type) {\n      case Types.IDENTITY:\n        return this;\n      case Types.TRANSLATION_3D:\n        return new Matrix4(1, 0, 0, -this.m03(), 0, 1, 0, -this.m13(), 0, 0, 1, -this.m23(), 0, 0, 0, 1, Types.TRANSLATION_3D);\n      case Types.SCALING:\n        return new Matrix4(1 / this.m00(), 0, 0, 0, 0, 1 / this.m11(), 0, 0, 0, 0, 1 / this.m22(), 0, 0, 0, 0, 1 / this.m33(), Types.SCALING);\n      case Types.AFFINE:\n      case Types.OTHER:\n        var det = this.getDeterminant();\n        if (det !== 0) {\n          return new Matrix4((-this.m31() * this.m22() * this.m13() + this.m21() * this.m32() * this.m13() + this.m31() * this.m12() * this.m23() - this.m11() * this.m32() * this.m23() - this.m21() * this.m12() * this.m33() + this.m11() * this.m22() * this.m33()) / det, (this.m31() * this.m22() * this.m03() - this.m21() * this.m32() * this.m03() - this.m31() * this.m02() * this.m23() + this.m01() * this.m32() * this.m23() + this.m21() * this.m02() * this.m33() - this.m01() * this.m22() * this.m33()) / det, (-this.m31() * this.m12() * this.m03() + this.m11() * this.m32() * this.m03() + this.m31() * this.m02() * this.m13() - this.m01() * this.m32() * this.m13() - this.m11() * this.m02() * this.m33() + this.m01() * this.m12() * this.m33()) / det, (this.m21() * this.m12() * this.m03() - this.m11() * this.m22() * this.m03() - this.m21() * this.m02() * this.m13() + this.m01() * this.m22() * this.m13() + this.m11() * this.m02() * this.m23() - this.m01() * this.m12() * this.m23()) / det, (this.m30() * this.m22() * this.m13() - this.m20() * this.m32() * this.m13() - this.m30() * this.m12() * this.m23() + this.m10() * this.m32() * this.m23() + this.m20() * this.m12() * this.m33() - this.m10() * this.m22() * this.m33()) / det, (-this.m30() * this.m22() * this.m03() + this.m20() * this.m32() * this.m03() + this.m30() * this.m02() * this.m23() - this.m00() * this.m32() * this.m23() - this.m20() * this.m02() * this.m33() + this.m00() * this.m22() * this.m33()) / det, (this.m30() * this.m12() * this.m03() - this.m10() * this.m32() * this.m03() - this.m30() * this.m02() * this.m13() + this.m00() * this.m32() * this.m13() + this.m10() * this.m02() * this.m33() - this.m00() * this.m12() * this.m33()) / det, (-this.m20() * this.m12() * this.m03() + this.m10() * this.m22() * this.m03() + this.m20() * this.m02() * this.m13() - this.m00() * this.m22() * this.m13() - this.m10() * this.m02() * this.m23() + this.m00() * this.m12() * this.m23()) / det, (-this.m30() * this.m21() * this.m13() + this.m20() * this.m31() * this.m13() + this.m30() * this.m11() * this.m23() - this.m10() * this.m31() * this.m23() - this.m20() * this.m11() * this.m33() + this.m10() * this.m21() * this.m33()) / det, (this.m30() * this.m21() * this.m03() - this.m20() * this.m31() * this.m03() - this.m30() * this.m01() * this.m23() + this.m00() * this.m31() * this.m23() + this.m20() * this.m01() * this.m33() - this.m00() * this.m21() * this.m33()) / det, (-this.m30() * this.m11() * this.m03() + this.m10() * this.m31() * this.m03() + this.m30() * this.m01() * this.m13() - this.m00() * this.m31() * this.m13() - this.m10() * this.m01() * this.m33() + this.m00() * this.m11() * this.m33()) / det, (this.m20() * this.m11() * this.m03() - this.m10() * this.m21() * this.m03() - this.m20() * this.m01() * this.m13() + this.m00() * this.m21() * this.m13() + this.m10() * this.m01() * this.m23() - this.m00() * this.m11() * this.m23()) / det, (this.m30() * this.m21() * this.m12() - this.m20() * this.m31() * this.m12() - this.m30() * this.m11() * this.m22() + this.m10() * this.m31() * this.m22() + this.m20() * this.m11() * this.m32() - this.m10() * this.m21() * this.m32()) / det, (-this.m30() * this.m21() * this.m02() + this.m20() * this.m31() * this.m02() + this.m30() * this.m01() * this.m22() - this.m00() * this.m31() * this.m22() - this.m20() * this.m01() * this.m32() + this.m00() * this.m21() * this.m32()) / det, (this.m30() * this.m11() * this.m02() - this.m10() * this.m31() * this.m02() - this.m30() * this.m01() * this.m12() + this.m00() * this.m31() * this.m12() + this.m10() * this.m01() * this.m32() - this.m00() * this.m11() * this.m32()) / det, (-this.m20() * this.m11() * this.m02() + this.m10() * this.m21() * this.m02() + this.m20() * this.m01() * this.m12() - this.m00() * this.m21() * this.m12() - this.m10() * this.m01() * this.m22() + this.m00() * this.m11() * this.m22()) / det);\n        } else {\n          throw new Error('Matrix could not be inverted, determinant === 0');\n        }\n        break;\n      default:\n        throw new Error('Matrix3.inverted with unknown type: ' + this.type);\n      }\n    },\n    timesMatrix: function (m) {\n      if (this.type === Types.IDENTITY || m.type === Types.IDENTITY) {\n        return this.type === Types.IDENTITY ? m : this;\n      }\n      if (this.type === m.type) {\n        if (this.type === Types.TRANSLATION_3D) {\n          return new Matrix4(1, 0, 0, this.m03() + m.m02(), 0, 1, 0, this.m13() + m.m12(), 0, 0, 1, this.m23() + m.m23(), 0, 0, 0, 1, Types.TRANSLATION_3D);\n        } else if (this.type === Types.SCALING) {\n          return new Matrix4(this.m00() * m.m00(), 0, 0, 0, 0, this.m11() * m.m11(), 0, 0, 0, 0, this.m22() * m.m22(), 0, 0, 0, 0, 1, Types.SCALING);\n        }\n      }\n      if (this.type !== Types.OTHER && m.type !== Types.OTHER) {\n        return new Matrix4(this.m00() * m.m00() + this.m01() * m.m10() + this.m02() * m.m20(), this.m00() * m.m01() + this.m01() * m.m11() + this.m02() * m.m21(), this.m00() * m.m02() + this.m01() * m.m12() + this.m02() * m.m22(), this.m00() * m.m03() + this.m01() * m.m13() + this.m02() * m.m23() + this.m03(), this.m10() * m.m00() + this.m11() * m.m10() + this.m12() * m.m20(), this.m10() * m.m01() + this.m11() * m.m11() + this.m12() * m.m21(), this.m10() * m.m02() + this.m11() * m.m12() + this.m12() * m.m22(), this.m10() * m.m03() + this.m11() * m.m13() + this.m12() * m.m23() + this.m13(), this.m20() * m.m00() + this.m21() * m.m10() + this.m22() * m.m20(), this.m20() * m.m01() + this.m21() * m.m11() + this.m22() * m.m21(), this.m20() * m.m02() + this.m21() * m.m12() + this.m22() * m.m22(), this.m20() * m.m03() + this.m21() * m.m13() + this.m22() * m.m23() + this.m23(), 0, 0, 0, 1, Types.AFFINE);\n      }\n      return new Matrix4(this.m00() * m.m00() + this.m01() * m.m10() + this.m02() * m.m20() + this.m03() * m.m30(), this.m00() * m.m01() + this.m01() * m.m11() + this.m02() * m.m21() + this.m03() * m.m31(), this.m00() * m.m02() + this.m01() * m.m12() + this.m02() * m.m22() + this.m03() * m.m32(), this.m00() * m.m03() + this.m01() * m.m13() + this.m02() * m.m23() + this.m03() * m.m33(), this.m10() * m.m00() + this.m11() * m.m10() + this.m12() * m.m20() + this.m13() * m.m30(), this.m10() * m.m01() + this.m11() * m.m11() + this.m12() * m.m21() + this.m13() * m.m31(), this.m10() * m.m02() + this.m11() * m.m12() + this.m12() * m.m22() + this.m13() * m.m32(), this.m10() * m.m03() + this.m11() * m.m13() + this.m12() * m.m23() + this.m13() * m.m33(), this.m20() * m.m00() + this.m21() * m.m10() + this.m22() * m.m20() + this.m23() * m.m30(), this.m20() * m.m01() + this.m21() * m.m11() + this.m22() * m.m21() + this.m23() * m.m31(), this.m20() * m.m02() + this.m21() * m.m12() + this.m22() * m.m22() + this.m23() * m.m32(), this.m20() * m.m03() + this.m21() * m.m13() + this.m22() * m.m23() + this.m23() * m.m33(), this.m30() * m.m00() + this.m31() * m.m10() + this.m32() * m.m20() + this.m33() * m.m30(), this.m30() * m.m01() + this.m31() * m.m11() + this.m32() * m.m21() + this.m33() * m.m31(), this.m30() * m.m02() + this.m31() * m.m12() + this.m32() * m.m22() + this.m33() * m.m32(), this.m30() * m.m03() + this.m31() * m.m13() + this.m32() * m.m23() + this.m33() * m.m33());\n    },\n    timesVector4: function (v) {\n      var x = this.m00() * v.x + this.m01() * v.y + this.m02() * v.z + this.m03() * v.w;\n      var y = this.m10() * v.x + this.m11() * v.y + this.m12() * v.z + this.m13() * v.w;\n      var z = this.m20() * v.x + this.m21() * v.y + this.m22() * v.z + this.m23() * v.w;\n      var w = this.m30() * v.x + this.m31() * v.y + this.m32() * v.z + this.m33() * v.w;\n      return new dot.Vector4(x, y, z, w);\n    },\n    timesVector3: function (v) {\n      return this.timesVector4(v.toVector4()).toVector3();\n    },\n    timesTransposeVector4: function (v) {\n      var x = this.m00() * v.x + this.m10() * v.y + this.m20() * v.z + this.m30() * v.w;\n      var y = this.m01() * v.x + this.m11() * v.y + this.m21() * v.z + this.m31() * v.w;\n      var z = this.m02() * v.x + this.m12() * v.y + this.m22() * v.z + this.m32() * v.w;\n      var w = this.m03() * v.x + this.m13() * v.y + this.m23() * v.z + this.m33() * v.w;\n      return new dot.Vector4(x, y, z, w);\n    },\n    timesTransposeVector3: function (v) {\n      return this.timesTransposeVector4(v.toVector4()).toVector3();\n    },\n    timesRelativeVector3: function (v) {\n      var x = this.m00() * v.x + this.m10() * v.y + this.m20() * v.z;\n      var y = this.m01() * v.y + this.m11() * v.y + this.m21() * v.z;\n      var z = this.m02() * v.z + this.m12() * v.y + this.m22() * v.z;\n      return new dot.Vector3(x, y, z);\n    },\n    getDeterminant: function () {\n      return this.m03() * this.m12() * this.m21() * this.m30() - this.m02() * this.m13() * this.m21() * this.m30() - this.m03() * this.m11() * this.m22() * this.m30() + this.m01() * this.m13() * this.m22() * this.m30() + this.m02() * this.m11() * this.m23() * this.m30() - this.m01() * this.m12() * this.m23() * this.m30() - this.m03() * this.m12() * this.m20() * this.m31() + this.m02() * this.m13() * this.m20() * this.m31() + this.m03() * this.m10() * this.m22() * this.m31() - this.m00() * this.m13() * this.m22() * this.m31() - this.m02() * this.m10() * this.m23() * this.m31() + this.m00() * this.m12() * this.m23() * this.m31() + this.m03() * this.m11() * this.m20() * this.m32() - this.m01() * this.m13() * this.m20() * this.m32() - this.m03() * this.m10() * this.m21() * this.m32() + this.m00() * this.m13() * this.m21() * this.m32() + this.m01() * this.m10() * this.m23() * this.m32() - this.m00() * this.m11() * this.m23() * this.m32() - this.m02() * this.m11() * this.m20() * this.m33() + this.m01() * this.m12() * this.m20() * this.m33() + this.m02() * this.m10() * this.m21() * this.m33() - this.m00() * this.m12() * this.m21() * this.m33() - this.m01() * this.m10() * this.m22() * this.m33() + this.m00() * this.m11() * this.m22() * this.m33();\n    },\n    get determinant() {\n      return this.getDeterminant();\n    },\n    toString: function () {\n      return this.m00() + ' ' + this.m01() + ' ' + this.m02() + ' ' + this.m03() + '\\n' + this.m10() + ' ' + this.m11() + ' ' + this.m12() + ' ' + this.m13() + '\\n' + this.m20() + ' ' + this.m21() + ' ' + this.m22() + ' ' + this.m23() + '\\n' + this.m30() + ' ' + this.m31() + ' ' + this.m32() + ' ' + this.m33();\n    },\n    makeImmutable: function () {\n      this.rowMajor = function () {\n        throw new Error('Cannot modify immutable matrix');\n      };\n    }\n  };\n  Matrix4.IDENTITY = new Matrix4();\n  Matrix4.IDENTITY.makeImmutable();\n  return Matrix4;\n});","\ndefine('DOT/Matrix3',['require','DOT/dot','PHET_CORE/Poolable','PHET_CORE/inherit','DOT/Vector2','DOT/Vector3','DOT/Matrix4'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  var Poolable = require('PHET_CORE/Poolable');\n  var inherit = require('PHET_CORE/inherit');\n  var FastArray = dot.FastArray;\n  require('DOT/Vector2');\n  require('DOT/Vector3');\n  require('DOT/Matrix4');\n  dot.Matrix3 = function Matrix3(v00, v01, v02, v10, v11, v12, v20, v21, v22, type) {\n    this.entries = new FastArray(9);\n    this.rowMajor(v00 === undefined ? 1 : v00, v01 || 0, v02 || 0, v10 || 0, v11 === undefined ? 1 : v11, v12 || 0, v20 || 0, v21 || 0, v22 === undefined ? 1 : v22, type);\n    phetAllocation && phetAllocation('Matrix3');\n  };\n  var Matrix3 = dot.Matrix3;\n  dot.FastMatrix3 = function FastMatrix3() {\n    this.entries = new FastArray(9);\n    phetAllocation && phetAllocation('Matrix3');\n  };\n  var FastMatrix3 = dot.FastMatrix3;\n  Matrix3.Types = {\n    OTHER: 0,\n    IDENTITY: 1,\n    TRANSLATION_2D: 2,\n    SCALING: 3,\n    AFFINE: 4\n  };\n  var Types = Matrix3.Types;\n  Matrix3.identity = function () {\n    return FastMatrix3.dirtyFromPool().setToIdentity();\n  };\n  Matrix3.translation = function (x, y) {\n    return FastMatrix3.dirtyFromPool().setToTranslation(x, y);\n  };\n  Matrix3.translationFromVector = function (v) {\n    return Matrix3.translation(v.x, v.y);\n  };\n  Matrix3.scaling = function (x, y) {\n    return FastMatrix3.dirtyFromPool().setToScale(x, y);\n  };\n  Matrix3.scale = Matrix3.scaling;\n  Matrix3.affine = function (m00, m10, m01, m11, m02, m12) {\n    return FastMatrix3.dirtyFromPool().setToAffine(m00, m01, m02, m10, m11, m12);\n  };\n  Matrix3.rowMajor = function (v00, v01, v02, v10, v11, v12, v20, v21, v22, type) {\n    return FastMatrix3.dirtyFromPool().rowMajor(v00, v01, v02, v10, v11, v12, v20, v21, v22, type);\n  };\n  Matrix3.rotationAxisAngle = function (axis, angle) {\n    return FastMatrix3.dirtyFromPool().setToRotationAxisAngle(axis, angle);\n  };\n  Matrix3.rotationX = function (angle) {\n    return FastMatrix3.dirtyFromPool().setToRotationX(angle);\n  };\n  Matrix3.rotationY = function (angle) {\n    return FastMatrix3.dirtyFromPool().setToRotationY(angle);\n  };\n  Matrix3.rotationZ = function (angle) {\n    return FastMatrix3.dirtyFromPool().setToRotationZ(angle);\n  };\n  Matrix3.rotation2 = Matrix3.rotationZ;\n  Matrix3.rotationAround = function (angle, x, y) {\n    return Matrix3.translation(x, y).timesMatrix(Matrix3.rotation2(angle)).timesMatrix(Matrix3.translation(-x, -y));\n  };\n  Matrix3.rotationAroundPoint = function (angle, point) {\n    return Matrix3.rotationAround(angle, point.x, point.y);\n  };\n  Matrix3.fromSVGMatrix = function (svgMatrix) {\n    return FastMatrix3.dirtyFromPool().setToSVGMatrix(svgMatrix);\n  };\n  Matrix3.rotateAToB = function (a, b) {\n    return FastMatrix3.dirtyFromPool().setRotationAToB(a, b);\n  };\n  Matrix3.prototype = {\n    constructor: Matrix3,\n    m00: function () {\n      return this.entries[0];\n    },\n    m01: function () {\n      return this.entries[3];\n    },\n    m02: function () {\n      return this.entries[6];\n    },\n    m10: function () {\n      return this.entries[1];\n    },\n    m11: function () {\n      return this.entries[4];\n    },\n    m12: function () {\n      return this.entries[7];\n    },\n    m20: function () {\n      return this.entries[2];\n    },\n    m21: function () {\n      return this.entries[5];\n    },\n    m22: function () {\n      return this.entries[8];\n    },\n    isIdentity: function () {\n      return this.type === Types.IDENTITY || this.equals(Matrix3.IDENTITY);\n    },\n    isAffine: function () {\n      return this.type === Types.AFFINE || this.m20() === 0 && this.m21() === 0 && this.m22() === 1;\n    },\n    isFinite: function () {\n      return isFinite(this.m00()) && isFinite(this.m01()) && isFinite(this.m02()) && isFinite(this.m10()) && isFinite(this.m11()) && isFinite(this.m12()) && isFinite(this.m20()) && isFinite(this.m21()) && isFinite(this.m22());\n    },\n    getDeterminant: function () {\n      return this.m00() * this.m11() * this.m22() + this.m01() * this.m12() * this.m20() + this.m02() * this.m10() * this.m21() - this.m02() * this.m11() * this.m20() - this.m01() * this.m10() * this.m22() - this.m00() * this.m12() * this.m21();\n    },\n    get determinant() {\n      return this.getDeterminant();\n    },\n    getTranslation: function () {\n      return new dot.Vector2(this.m02(), this.m12());\n    },\n    get translation() {\n      return this.getTranslation();\n    },\n    getScaleVector: function () {\n      return new dot.Vector2(Math.sqrt(this.m00() * this.m00() + this.m10() * this.m10()), Math.sqrt(this.m01() * this.m01() + this.m11() * this.m11()));\n    },\n    get scaleVector() {\n      return this.getScaleVector();\n    },\n    getRotation: function () {\n      var transformedVector = this.timesVector2(dot.Vector2.X_UNIT).minus(this.timesVector2(dot.Vector2.ZERO));\n      return Math.atan2(transformedVector.y, transformedVector.x);\n    },\n    get rotation() {\n      return this.getRotation();\n    },\n    toMatrix4: function () {\n      return new dot.Matrix4(this.m00(), this.m01(), this.m02(), 0, this.m10(), this.m11(), this.m12(), 0, this.m20(), this.m21(), this.m22(), 0, 0, 0, 0, 1);\n    },\n    toString: function () {\n      return this.m00() + ' ' + this.m01() + ' ' + this.m02() + '\\n' + this.m10() + ' ' + this.m11() + ' ' + this.m12() + '\\n' + this.m20() + ' ' + this.m21() + ' ' + this.m22();\n    },\n    toSVGMatrix: function () {\n      var result = document.createElementNS('http://www.w3.org/2000/svg', 'svg').createSVGMatrix();\n      result.a = this.m00();\n      result.b = this.m10();\n      result.c = this.m01();\n      result.d = this.m11();\n      result.e = this.m02();\n      result.f = this.m12();\n      return result;\n    },\n    getCSSTransform: function () {\n      return 'matrix(' + this.entries[0].toFixed(20) + ',' + this.entries[1].toFixed(20) + ',' + this.entries[3].toFixed(20) + ',' + this.entries[4].toFixed(20) + ',' + this.entries[6].toFixed(20) + ',' + this.entries[7].toFixed(20) + ')';\n    },\n    get cssTransform() {\n      return this.getCSSTransform();\n    },\n    getSVGTransform: function () {\n      function svgNumber(number) {\n        return number.toFixed(20);\n      }\n      switch (this.type) {\n      case Types.IDENTITY:\n        return '';\n      case Types.TRANSLATION_2D:\n        return 'translate(' + svgNumber(this.entries[6]) + ',' + this.entries[7] + ')';\n      case Types.SCALING:\n        return 'scale(' + svgNumber(this.entries[0]) + (this.entries[0] === this.entries[4] ? '' : ',' + svgNumber(this.entries[4])) + ')';\n      default:\n        return 'matrix(' + svgNumber(this.entries[0]) + ',' + svgNumber(this.entries[1]) + ',' + svgNumber(this.entries[3]) + ',' + svgNumber(this.entries[4]) + ',' + svgNumber(this.entries[6]) + ',' + svgNumber(this.entries[7]) + ')';\n      }\n    },\n    get svgTransform() {\n      return this.getSVGTransform();\n    },\n    getCSSTransformStyles: function () {\n      var transformCSS = this.getCSSTransform();\n      return {\n        '-webkit-perspective': 1000,\n        '-webkit-backface-visibility': 'hidden',\n        '-webkit-transform': transformCSS + ' translateZ(0)',\n        '-moz-transform': transformCSS + ' translateZ(0)',\n        '-ms-transform': transformCSS,\n        '-o-transform': transformCSS,\n        'transform': transformCSS,\n        'transform-origin': 'top left',\n        '-ms-transform-origin': 'top left'\n      };\n    },\n    get cssTransformStyles() {\n      return this.getCSSTransformStyles();\n    },\n    equals: function (m) {\n      return this.m00() === m.m00() && this.m01() === m.m01() && this.m02() === m.m02() && this.m10() === m.m10() && this.m11() === m.m11() && this.m12() === m.m12() && this.m20() === m.m20() && this.m21() === m.m21() && this.m22() === m.m22();\n    },\n    equalsEpsilon: function (m, epsilon) {\n      return Math.abs(this.m00() - m.m00()) < epsilon && Math.abs(this.m01() - m.m01()) < epsilon && Math.abs(this.m02() - m.m02()) < epsilon && Math.abs(this.m10() - m.m10()) < epsilon && Math.abs(this.m11() - m.m11()) < epsilon && Math.abs(this.m12() - m.m12()) < epsilon && Math.abs(this.m20() - m.m20()) < epsilon && Math.abs(this.m21() - m.m21()) < epsilon && Math.abs(this.m22() - m.m22()) < epsilon;\n    },\n    copy: function () {\n      return new Matrix3(this.m00(), this.m01(), this.m02(), this.m10(), this.m11(), this.m12(), this.m20(), this.m21(), this.m22(), this.type);\n    },\n    plus: function (m) {\n      return new Matrix3(this.m00() + m.m00(), this.m01() + m.m01(), this.m02() + m.m02(), this.m10() + m.m10(), this.m11() + m.m11(), this.m12() + m.m12(), this.m20() + m.m20(), this.m21() + m.m21(), this.m22() + m.m22());\n    },\n    minus: function (m) {\n      return new Matrix3(this.m00() - m.m00(), this.m01() - m.m01(), this.m02() - m.m02(), this.m10() - m.m10(), this.m11() - m.m11(), this.m12() - m.m12(), this.m20() - m.m20(), this.m21() - m.m21(), this.m22() - m.m22());\n    },\n    transposed: function () {\n      return new Matrix3(this.m00(), this.m10(), this.m20(), this.m01(), this.m11(), this.m21(), this.m02(), this.m12(), this.m22(), this.type === Types.IDENTITY || this.type === Types.SCALING ? this.type : undefined);\n    },\n    negated: function () {\n      return new Matrix3(-this.m00(), -this.m01(), -this.m02(), -this.m10(), -this.m11(), -this.m12(), -this.m20(), -this.m21(), -this.m22());\n    },\n    inverted: function () {\n      var det;\n      switch (this.type) {\n      case Types.IDENTITY:\n        return this;\n      case Types.TRANSLATION_2D:\n        return new Matrix3(1, 0, -this.m02(), 0, 1, -this.m12(), 0, 0, 1, Types.TRANSLATION_2D);\n      case Types.SCALING:\n        return new Matrix3(1 / this.m00(), 0, 0, 0, 1 / this.m11(), 0, 0, 0, 1 / this.m22(), Types.SCALING);\n      case Types.AFFINE:\n        det = this.getDeterminant();\n        if (det !== 0) {\n          return new Matrix3((-this.m12() * this.m21() + this.m11() * this.m22()) / det, (this.m02() * this.m21() - this.m01() * this.m22()) / det, (-this.m02() * this.m11() + this.m01() * this.m12()) / det, (this.m12() * this.m20() - this.m10() * this.m22()) / det, (-this.m02() * this.m20() + this.m00() * this.m22()) / det, (this.m02() * this.m10() - this.m00() * this.m12()) / det, 0, 0, 1, Types.AFFINE);\n        } else {\n          throw new Error('Matrix could not be inverted, determinant === 0');\n        }\n        break;\n      case Types.OTHER:\n        det = this.getDeterminant();\n        if (det !== 0) {\n          return new Matrix3((-this.m12() * this.m21() + this.m11() * this.m22()) / det, (this.m02() * this.m21() - this.m01() * this.m22()) / det, (-this.m02() * this.m11() + this.m01() * this.m12()) / det, (this.m12() * this.m20() - this.m10() * this.m22()) / det, (-this.m02() * this.m20() + this.m00() * this.m22()) / det, (this.m02() * this.m10() - this.m00() * this.m12()) / det, (-this.m11() * this.m20() + this.m10() * this.m21()) / det, (this.m01() * this.m20() - this.m00() * this.m21()) / det, (-this.m01() * this.m10() + this.m00() * this.m11()) / det, Types.OTHER);\n        } else {\n          throw new Error('Matrix could not be inverted, determinant === 0');\n        }\n        break;\n      default:\n        throw new Error('Matrix3.inverted with unknown type: ' + this.type);\n      }\n    },\n    timesMatrix: function (m) {\n      if (this.type === Types.IDENTITY || m.type === Types.IDENTITY) {\n        return this.type === Types.IDENTITY ? m : this;\n      }\n      if (this.type === m.type) {\n        if (this.type === Types.TRANSLATION_2D) {\n          return new Matrix3(1, 0, this.m02() + m.m02(), 0, 1, this.m12() + m.m12(), 0, 0, 1, Types.TRANSLATION_2D);\n        } else if (this.type === Types.SCALING) {\n          return new Matrix3(this.m00() * m.m00(), 0, 0, 0, this.m11() * m.m11(), 0, 0, 0, 1, Types.SCALING);\n        }\n      }\n      if (this.type !== Types.OTHER && m.type !== Types.OTHER) {\n        return new Matrix3(this.m00() * m.m00() + this.m01() * m.m10(), this.m00() * m.m01() + this.m01() * m.m11(), this.m00() * m.m02() + this.m01() * m.m12() + this.m02(), this.m10() * m.m00() + this.m11() * m.m10(), this.m10() * m.m01() + this.m11() * m.m11(), this.m10() * m.m02() + this.m11() * m.m12() + this.m12(), 0, 0, 1, Types.AFFINE);\n      }\n      return new Matrix3(this.m00() * m.m00() + this.m01() * m.m10() + this.m02() * m.m20(), this.m00() * m.m01() + this.m01() * m.m11() + this.m02() * m.m21(), this.m00() * m.m02() + this.m01() * m.m12() + this.m02() * m.m22(), this.m10() * m.m00() + this.m11() * m.m10() + this.m12() * m.m20(), this.m10() * m.m01() + this.m11() * m.m11() + this.m12() * m.m21(), this.m10() * m.m02() + this.m11() * m.m12() + this.m12() * m.m22(), this.m20() * m.m00() + this.m21() * m.m10() + this.m22() * m.m20(), this.m20() * m.m01() + this.m21() * m.m11() + this.m22() * m.m21(), this.m20() * m.m02() + this.m21() * m.m12() + this.m22() * m.m22());\n    },\n    timesVector2: function (v) {\n      var x = this.m00() * v.x + this.m01() * v.y + this.m02();\n      var y = this.m10() * v.x + this.m11() * v.y + this.m12();\n      return new dot.Vector2(x, y);\n    },\n    timesVector3: function (v) {\n      var x = this.m00() * v.x + this.m01() * v.y + this.m02() * v.z;\n      var y = this.m10() * v.x + this.m11() * v.y + this.m12() * v.z;\n      var z = this.m20() * v.x + this.m21() * v.y + this.m22() * v.z;\n      return new dot.Vector3(x, y, z);\n    },\n    timesTransposeVector2: function (v) {\n      var x = this.m00() * v.x + this.m10() * v.y;\n      var y = this.m01() * v.x + this.m11() * v.y;\n      return new dot.Vector2(x, y);\n    },\n    timesRelativeVector2: function (v) {\n      var x = this.m00() * v.x + this.m01() * v.y;\n      var y = this.m10() * v.y + this.m11() * v.y;\n      return new dot.Vector2(x, y);\n    },\n    rowMajor: function (v00, v01, v02, v10, v11, v12, v20, v21, v22, type) {\n      this.entries[0] = v00;\n      this.entries[1] = v10;\n      this.entries[2] = v20;\n      this.entries[3] = v01;\n      this.entries[4] = v11;\n      this.entries[5] = v21;\n      this.entries[6] = v02;\n      this.entries[7] = v12;\n      this.entries[8] = v22;\n      this.type = type === undefined ? v20 === 0 && v21 === 0 && v22 === 1 ? Types.AFFINE : Types.OTHER : type;\n      return this;\n    },\n    set: function (matrix) {\n      return this.rowMajor(matrix.m00(), matrix.m01(), matrix.m02(), matrix.m10(), matrix.m11(), matrix.m12(), matrix.m20(), matrix.m21(), matrix.m22(), matrix.type);\n    },\n    makeImmutable: function () {\n      this.rowMajor = function () {\n        throw new Error('Cannot modify immutable matrix');\n      };\n      return this;\n    },\n    columnMajor: function (v00, v10, v20, v01, v11, v21, v02, v12, v22, type) {\n      return this.rowMajor(v00, v01, v02, v10, v11, v12, v20, v21, v22, type);\n    },\n    add: function (m) {\n      return this.rowMajor(this.m00() + m.m00(), this.m01() + m.m01(), this.m02() + m.m02(), this.m10() + m.m10(), this.m11() + m.m11(), this.m12() + m.m12(), this.m20() + m.m20(), this.m21() + m.m21(), this.m22() + m.m22());\n    },\n    subtract: function (m) {\n      return this.rowMajor(this.m00() - m.m00(), this.m01() - m.m01(), this.m02() - m.m02(), this.m10() - m.m10(), this.m11() - m.m11(), this.m12() - m.m12(), this.m20() - m.m20(), this.m21() - m.m21(), this.m22() - m.m22());\n    },\n    transpose: function () {\n      return this.rowMajor(this.m00(), this.m10(), this.m20(), this.m01(), this.m11(), this.m21(), this.m02(), this.m12(), this.m22(), this.type === Types.IDENTITY || this.type === Types.SCALING ? this.type : undefined);\n    },\n    negate: function () {\n      return this.rowMajor(-this.m00(), -this.m01(), -this.m02(), -this.m10(), -this.m11(), -this.m12(), -this.m20(), -this.m21(), -this.m22());\n    },\n    invert: function () {\n      var det;\n      switch (this.type) {\n      case Types.IDENTITY:\n        return this;\n      case Types.TRANSLATION_2D:\n        return this.rowMajor(1, 0, -this.m02(), 0, 1, -this.m12(), 0, 0, 1, Types.TRANSLATION_2D);\n      case Types.SCALING:\n        return this.rowMajor(1 / this.m00(), 0, 0, 0, 1 / this.m11(), 0, 0, 0, 1 / this.m22(), Types.SCALING);\n      case Types.AFFINE:\n        det = this.getDeterminant();\n        if (det !== 0) {\n          return this.rowMajor((-this.m12() * this.m21() + this.m11() * this.m22()) / det, (this.m02() * this.m21() - this.m01() * this.m22()) / det, (-this.m02() * this.m11() + this.m01() * this.m12()) / det, (this.m12() * this.m20() - this.m10() * this.m22()) / det, (-this.m02() * this.m20() + this.m00() * this.m22()) / det, (this.m02() * this.m10() - this.m00() * this.m12()) / det, 0, 0, 1, Types.AFFINE);\n        } else {\n          throw new Error('Matrix could not be inverted, determinant === 0');\n        }\n        break;\n      case Types.OTHER:\n        det = this.getDeterminant();\n        if (det !== 0) {\n          return this.rowMajor((-this.m12() * this.m21() + this.m11() * this.m22()) / det, (this.m02() * this.m21() - this.m01() * this.m22()) / det, (-this.m02() * this.m11() + this.m01() * this.m12()) / det, (this.m12() * this.m20() - this.m10() * this.m22()) / det, (-this.m02() * this.m20() + this.m00() * this.m22()) / det, (this.m02() * this.m10() - this.m00() * this.m12()) / det, (-this.m11() * this.m20() + this.m10() * this.m21()) / det, (this.m01() * this.m20() - this.m00() * this.m21()) / det, (-this.m01() * this.m10() + this.m00() * this.m11()) / det, Types.OTHER);\n        } else {\n          throw new Error('Matrix could not be inverted, determinant === 0');\n        }\n        break;\n      default:\n        throw new Error('Matrix3.inverted with unknown type: ' + this.type);\n      }\n    },\n    multiplyMatrix: function (m) {\n      if (m.type === Types.IDENTITY) {\n        return this;\n      }\n      if (this.type === Types.IDENTITY) {\n        return this.set(m);\n      }\n      if (this.type === m.type) {\n        if (this.type === Types.TRANSLATION_2D) {\n          return this.rowMajor(1, 0, this.m02() + m.m02(), 0, 1, this.m12() + m.m12(), 0, 0, 1, Types.TRANSLATION_2D);\n        } else if (this.type === Types.SCALING) {\n          return this.rowMajor(this.m00() * m.m00(), 0, 0, 0, this.m11() * m.m11(), 0, 0, 0, 1, Types.SCALING);\n        }\n      }\n      if (this.type !== Types.OTHER && m.type !== Types.OTHER) {\n        return this.rowMajor(this.m00() * m.m00() + this.m01() * m.m10(), this.m00() * m.m01() + this.m01() * m.m11(), this.m00() * m.m02() + this.m01() * m.m12() + this.m02(), this.m10() * m.m00() + this.m11() * m.m10(), this.m10() * m.m01() + this.m11() * m.m11(), this.m10() * m.m02() + this.m11() * m.m12() + this.m12(), 0, 0, 1, Types.AFFINE);\n      }\n      return this.rowMajor(this.m00() * m.m00() + this.m01() * m.m10() + this.m02() * m.m20(), this.m00() * m.m01() + this.m01() * m.m11() + this.m02() * m.m21(), this.m00() * m.m02() + this.m01() * m.m12() + this.m02() * m.m22(), this.m10() * m.m00() + this.m11() * m.m10() + this.m12() * m.m20(), this.m10() * m.m01() + this.m11() * m.m11() + this.m12() * m.m21(), this.m10() * m.m02() + this.m11() * m.m12() + this.m12() * m.m22(), this.m20() * m.m00() + this.m21() * m.m10() + this.m22() * m.m20(), this.m20() * m.m01() + this.m21() * m.m11() + this.m22() * m.m21(), this.m20() * m.m02() + this.m21() * m.m12() + this.m22() * m.m22());\n    },\n    setToIdentity: function () {\n      return this.rowMajor(1, 0, 0, 0, 1, 0, 0, 0, 1, Types.IDENTITY);\n    },\n    setToTranslation: function (x, y) {\n      return this.rowMajor(1, 0, x, 0, 1, y, 0, 0, 1, Types.TRANSLATION_2D);\n    },\n    setToScale: function (x, y) {\n      y = y === undefined ? x : y;\n      return this.rowMajor(x, 0, 0, 0, y, 0, 0, 0, 1, Types.SCALING);\n    },\n    setToAffine: function (m00, m01, m02, m10, m11, m12) {\n      return this.rowMajor(m00, m01, m02, m10, m11, m12, 0, 0, 1, Types.AFFINE);\n    },\n    setToRotationAxisAngle: function (axis, angle) {\n      var c = Math.cos(angle);\n      var s = Math.sin(angle);\n      var C = 1 - c;\n      return this.rowMajor(axis.x * axis.x * C + c, axis.x * axis.y * C - axis.z * s, axis.x * axis.z * C + axis.y * s, axis.y * axis.x * C + axis.z * s, axis.y * axis.y * C + c, axis.y * axis.z * C - axis.x * s, axis.z * axis.x * C - axis.y * s, axis.z * axis.y * C + axis.x * s, axis.z * axis.z * C + c, Types.OTHER);\n    },\n    setToRotationX: function (angle) {\n      var c = Math.cos(angle);\n      var s = Math.sin(angle);\n      return this.rowMajor(1, 0, 0, 0, c, -s, 0, s, c, Types.OTHER);\n    },\n    setToRotationY: function (angle) {\n      var c = Math.cos(angle);\n      var s = Math.sin(angle);\n      return this.rowMajor(c, 0, s, 0, 1, 0, -s, 0, c, Types.OTHER);\n    },\n    setToRotationZ: function (angle) {\n      var c = Math.cos(angle);\n      var s = Math.sin(angle);\n      return this.rowMajor(c, -s, 0, s, c, 0, 0, 0, 1, Types.AFFINE);\n    },\n    setToSVGMatrix: function (svgMatrix) {\n      return this.rowMajor(svgMatrix.a, svgMatrix.c, svgMatrix.e, svgMatrix.b, svgMatrix.d, svgMatrix.f, 0, 0, 1, Types.AFFINE);\n    },\n    setRotationAToB: function (a, b) {\n      var start = a;\n      var end = b;\n      var epsilon = 0.0001;\n      var e, h, f;\n      var v = start.cross(end);\n      e = start.dot(end);\n      f = e < 0 ? -e : e;\n      if (f > 1 - epsilon) {\n        var c1, c2, c3;\n        var x = new dot.Vector3(start.x > 0 ? start.x : -start.x, start.y > 0 ? start.y : -start.y, start.z > 0 ? start.z : -start.z);\n        if (x.x < x.y) {\n          if (x.x < x.z) {\n            x = dot.Vector3.X_UNIT;\n          } else {\n            x = dot.Vector3.Z_UNIT;\n          }\n        } else {\n          if (x.y < x.z) {\n            x = dot.Vector3.Y_UNIT;\n          } else {\n            x = dot.Vector3.Z_UNIT;\n          }\n        }\n        var u = x.minus(start);\n        v = x.minus(end);\n        c1 = 2 / u.dot(u);\n        c2 = 2 / v.dot(v);\n        c3 = c1 * c2 * u.dot(v);\n        return this.rowMajor(-c1 * u.x * u.x - c2 * v.x * v.x + c3 * v.x * u.x + 1, -c1 * u.x * u.y - c2 * v.x * v.y + c3 * v.x * u.y, -c1 * u.x * u.z - c2 * v.x * v.z + c3 * v.x * u.z, -c1 * u.y * u.x - c2 * v.y * v.x + c3 * v.y * u.x, -c1 * u.y * u.y - c2 * v.y * v.y + c3 * v.y * u.y + 1, -c1 * u.y * u.z - c2 * v.y * v.z + c3 * v.y * u.z, -c1 * u.z * u.x - c2 * v.z * v.x + c3 * v.z * u.x, -c1 * u.z * u.y - c2 * v.z * v.y + c3 * v.z * u.y, -c1 * u.z * u.z - c2 * v.z * v.z + c3 * v.z * u.z + 1);\n      } else {\n        var hvx, hvz, hvxy, hvxz, hvyz;\n        h = 1 / (1 + e);\n        hvx = h * v.x;\n        hvz = h * v.z;\n        hvxy = hvx * v.y;\n        hvxz = hvx * v.z;\n        hvyz = hvz * v.y;\n        return this.rowMajor(e + hvx * v.x, hvxy - v.z, hvxz + v.y, hvxy + v.z, e + h * v.y * v.y, hvyz - v.x, hvxz - v.y, hvyz + v.x, e + hvz * v.z);\n      }\n    },\n    multiplyVector2: function (v) {\n      return v.setXY(this.m00() * v.x + this.m01() * v.y + this.m02(), this.m10() * v.x + this.m11() * v.y + this.m12());\n    },\n    multiplyVector3: function (v) {\n      return v.setXYZ(this.m00() * v.x + this.m01() * v.y + this.m02() * v.z, this.m10() * v.x + this.m11() * v.y + this.m12() * v.z, this.m20() * v.x + this.m21() * v.y + this.m22() * v.z);\n    },\n    multiplyTransposeVector2: function (v) {\n      return v.setXY(this.m00() * v.x + this.m10() * v.y, this.m01() * v.x + this.m11() * v.y);\n    },\n    multiplyRelativeVector2: function (v) {\n      return v.setXY(this.m00() * v.x + this.m01() * v.y, this.m10() * v.y + this.m11() * v.y);\n    },\n    canvasSetTransform: function (context) {\n      context.setTransform(this.entries[0], this.entries[1], this.entries[3], this.entries[4], this.entries[6], this.entries[7]);\n    },\n    canvasAppendTransform: function (context) {\n      if (this.type !== Types.IDENTITY) {\n        context.transform(this.entries[0], this.entries[1], this.entries[3], this.entries[4], this.entries[6], this.entries[7]);\n      }\n    }\n  };\n  Poolable(Matrix3, {\n    defaultFactory: function () {\n      return new Matrix3();\n    },\n    constructorDuplicateFactory: function (pool) {\n      return function (v00, v01, v02, v10, v11, v12, v20, v21, v22, type) {\n        if (pool.length) {\n          return pool.pop().rowMajor(v00, v01, v02, v10, v11, v12, v20, v21, v22, type);\n        } else {\n          return new Matrix3(v00, v01, v02, v10, v11, v12, v20, v21, v22, type);\n        }\n      };\n    }\n  });\n  Poolable(FastMatrix3, {\n    defaultFactory: function () {\n      return new FastMatrix3();\n    }\n  });\n  inherit(Matrix3, FastMatrix3);\n  Matrix3.IDENTITY = new Matrix3(1, 0, 0, 0, 1, 0, 0, 0, 1, Types.IDENTITY);\n  Matrix3.IDENTITY.makeImmutable();\n  Matrix3.X_REFLECTION = new Matrix3(-1, 0, 0, 0, 1, 0, 0, 0, 1, Types.AFFINE);\n  Matrix3.X_REFLECTION.makeImmutable();\n  Matrix3.Y_REFLECTION = new Matrix3(1, 0, 0, 0, -1, 0, 0, 0, 1, Types.AFFINE);\n  Matrix3.Y_REFLECTION.makeImmutable();\n  Matrix3.translationTimesMatrix = function (x, y, m) {\n    var type;\n    if (m.type === Types.IDENTITY || m.type === Types.TRANSLATION_2D) {\n      return new Matrix3(1, 0, m.m02() + x, 0, 1, m.m12() + y, 0, 0, 1, Types.TRANSLATION_2D);\n    } else if (m.type === Types.OTHER) {\n      type = Types.OTHER;\n    } else {\n      type = Types.AFFINE;\n    }\n    return new Matrix3(m.m00(), m.m01(), m.m02() + x, m.m10(), m.m11(), m.m12() + y, m.m20(), m.m21(), m.m22(), type);\n  };\n  Matrix3.printer = {\n    print: function (matrix) {\n      console.log(matrix.toString());\n    }\n  };\n  return Matrix3;\n});","\ndefine('KITE/segments/Quadratic',['require','PHET_CORE/inherit','DOT/Bounds2','DOT/Matrix3','DOT/Util','DOT/Util','KITE/segments/Segment'],function (require) {\n  'use strict';\n  var inherit = require('PHET_CORE/inherit');\n  var Bounds2 = require('DOT/Bounds2');\n  var Matrix3 = require('DOT/Matrix3');\n  var solveQuadraticRootsReal = require('DOT/Util').solveQuadraticRootsReal;\n  var arePointsCollinear = require('DOT/Util').arePointsCollinear;\n  var Segment = require('KITE/segments/Segment');\n  Segment.Quadratic = function Quadratic(start, control, end) {\n    this._start = start;\n    this._control = control;\n    this._end = end;\n    this._startTangent = undefined;\n    this._endTangent = undefined;\n    this._tCriticalX = undefined;\n    this._tCriticalY = undefined;\n    this._bounds = undefined;\n  };\n  inherit(Segment, Segment.Quadratic, {\n    degree: 2,\n    getStart: function () {\n      return this._start;\n    },\n    get start() {\n      return this._start;\n    },\n    getControl: function () {\n      return this._control;\n    },\n    get control() {\n      return this._control;\n    },\n    getEnd: function () {\n      return this._end;\n    },\n    get end() {\n      return this._end;\n    },\n    getStartTangent: function () {\n      if (this._startTangent === undefined) {\n        var controlIsStart = this._start.equals(this._control);\n        this._startTangent = controlIsStart ? this._end.minus(this._start).normalized() : this._control.minus(this._start).normalized();\n      }\n      return this._startTangent;\n    },\n    get startTangent() {\n      return this.getStartTangent();\n    },\n    getEndTangent: function () {\n      if (this._endTangent === undefined) {\n        var controlIsEnd = this._end.equals(this._control);\n        this._endTangent = controlIsEnd ? this._end.minus(this._start).normalized() : this._end.minus(this._control).normalized();\n      }\n      return this._endTangent;\n    },\n    get endTangent() {\n      return this.getEndTangent();\n    },\n    getTCriticalX: function () {\n      if (this._tCriticalX === undefined) {\n        this._tCriticalX = Segment.Quadratic.extremaT(this._start.x, this._control.x, this._end.x);\n      }\n      return this._tCriticalX;\n    },\n    get tCriticalX() {\n      return this.getTCriticalX();\n    },\n    getTCriticalY: function () {\n      if (this._tCriticalY === undefined) {\n        this._tCriticalY = Segment.Quadratic.extremaT(this._start.y, this._control.y, this._end.y);\n      }\n      return this._tCriticalY;\n    },\n    get tCriticalY() {\n      return this.getTCriticalY();\n    },\n    getNondegenerateSegments: function () {\n      var start = this._start;\n      var control = this._control;\n      var end = this._end;\n      var startIsEnd = start.equals(end);\n      var startIsControl = start.equals(control);\n      var endIsControl = start.equals(control);\n      if (startIsEnd && startIsControl) {\n        return [];\n      } else if (startIsEnd) {\n        var halfPoint = this.positionAt(0.5);\n        return [\n          new Segment.Line(start, halfPoint),\n          new Segment.Line(halfPoint, end)\n        ];\n      } else if (arePointsCollinear(start, control, end)) {\n        if (startIsControl || endIsControl) {\n          return [new Segment.Line(start, end)];\n        }\n        var delta = end.minus(start);\n        var p1d = control.minus(start).dot(delta.normalized) / delta.magnitude();\n        var t = Segment.Quadratic.extremaT(0, p1d, 1);\n        if (t !== null && t > 0 && t < 1) {\n          var pt = this.positionAt(t);\n          return _.flatten([\n            new Segment.Line(start, pt).getNondegenerateSegments(),\n            new Segment.Line(pt, end).getNondegenerateSegments()\n          ]);\n        } else {\n          return [new Segment.Line(start, end)];\n        }\n      } else {\n        return [this];\n      }\n    },\n    getBounds: function () {\n      if (this._bounds === undefined) {\n        this._bounds = new Bounds2(Math.min(this._start.x, this._end.x), Math.min(this._start.y, this._end.y), Math.max(this._start.x, this._end.x), Math.max(this._start.y, this._end.y));\n        var tCriticalX = this.getTCriticalX();\n        var tCriticalY = this.getTCriticalY();\n        if (tCriticalX !== null && tCriticalX > 0 && tCriticalX < 1) {\n          this._bounds = this._bounds.withPoint(this.positionAt(tCriticalX));\n        }\n        if (tCriticalY !== null && tCriticalY > 0 && tCriticalY < 1) {\n          this._bounds = this._bounds.withPoint(this.positionAt(tCriticalY));\n        }\n      }\n      return this._bounds;\n    },\n    get bounds() {\n      return this.getBounds();\n    },\n    positionAt: function (t) {\n      var mt = 1 - t;\n      return this._start.times(mt * mt).plus(this._control.times(2 * mt * t)).plus(this._end.times(t * t));\n    },\n    tangentAt: function (t) {\n      return this._control.minus(this._start).times(2 * (1 - t)).plus(this._end.minus(this._control).times(2 * t));\n    },\n    curvatureAt: function (t) {\n      var epsilon = 1e-7;\n      if (Math.abs(t - 0.5) > 0.5 - epsilon) {\n        var isZero = t < 0.5;\n        var p0 = isZero ? this._start : this._end;\n        var p1 = this._control;\n        var p2 = isZero ? this._end : this._start;\n        var d10 = p1.minus(p0);\n        var a = d10.magnitude();\n        var h = (isZero ? -1 : 1) * d10.perpendicular().normalized().dot(p2.minus(p1));\n        return h * (this.degree - 1) / (this.degree * a * a);\n      } else {\n        return this.subdivided(t, true)[0].curvatureAt(1);\n      }\n    },\n    offsetTo: function (r, reverse) {\n      var curves = [this];\n      var depth = 5;\n      for (var i = 0; i < depth; i++) {\n        curves = _.flatten(_.map(curves, function (curve) {\n          return curve.subdivided(0.5, true);\n        }));\n      }\n      var offsetCurves = _.map(curves, function (curve) {\n          return curve.approximateOffset(r);\n        });\n      if (reverse) {\n        offsetCurves.reverse();\n        offsetCurves = _.map(offsetCurves, function (curve) {\n          return curve.reversed(true);\n        });\n      }\n      return offsetCurves;\n    },\n    subdivided: function (t) {\n      var leftMid = this._start.blend(this._control, t);\n      var rightMid = this._control.blend(this._end, t);\n      var mid = leftMid.blend(rightMid, t);\n      return [\n        new Segment.Quadratic(this._start, leftMid, mid),\n        new Segment.Quadratic(mid, rightMid, this._end)\n      ];\n    },\n    degreeElevated: function () {\n      return new Segment.Cubic(this._start, this._start.plus(this._control.timesScalar(2)).dividedScalar(3), this._end.plus(this._control.timesScalar(2)).dividedScalar(3), this._end);\n    },\n    reversed: function () {\n      return new Segment.Quadratic(this._end, this._control, this._start);\n    },\n    approximateOffset: function (r) {\n      return new Segment.Quadratic(this._start.plus((this._start.equals(this._control) ? this._end.minus(this._start) : this._control.minus(this._start)).perpendicular().normalized().times(r)), this._control.plus(this._end.minus(this._start).perpendicular().normalized().times(r)), this._end.plus((this._end.equals(this._control) ? this._end.minus(this._start) : this._end.minus(this._control)).perpendicular().normalized().times(r)));\n    },\n    getSVGPathFragment: function () {\n      return 'Q ' + this._control.x + ' ' + this._control.y + ' ' + this._end.x + ' ' + this._end.y;\n    },\n    strokeLeft: function (lineWidth) {\n      return this.offsetTo(-lineWidth / 2, false);\n    },\n    strokeRight: function (lineWidth) {\n      return this.offsetTo(lineWidth / 2, true);\n    },\n    getInteriorExtremaTs: function () {\n      var result = [];\n      var epsilon = 1e-10;\n      if (this.tCriticalX !== undefined && this.tCriticalX > epsilon && this.tCriticalX < 1 - epsilon) {\n        result.push(this.tCriticalX);\n      }\n      if (this.tCriticalY !== undefined && this.tCriticalY > epsilon && this.tCriticalY < 1 - epsilon) {\n        result.push(this.tCriticalY);\n      }\n      return result.sort();\n    },\n    intersectsBounds: function (bounds) {\n      throw new Error('Segment.Quadratic.intersectsBounds unimplemented');\n    },\n    intersection: function (ray) {\n      var self = this;\n      var result = [];\n      var inverseMatrix = Matrix3.rotation2(-ray.dir.angle()).timesMatrix(Matrix3.translation(-ray.pos.x, -ray.pos.y));\n      var p0 = inverseMatrix.timesVector2(this._start);\n      var p1 = inverseMatrix.timesVector2(this._control);\n      var p2 = inverseMatrix.timesVector2(this._end);\n      var a = p0.y - 2 * p1.y + p2.y;\n      var b = -2 * p0.y + 2 * p1.y;\n      var c = p0.y;\n      var ts = solveQuadraticRootsReal(a, b, c);\n      _.each(ts, function (t) {\n        if (t >= 0 && t <= 1) {\n          var hitPoint = self.positionAt(t);\n          var unitTangent = self.tangentAt(t).normalized();\n          var perp = unitTangent.perpendicular();\n          var toHit = hitPoint.minus(ray.pos);\n          if (toHit.dot(ray.dir) > 0) {\n            result.push({\n              distance: toHit.magnitude(),\n              point: hitPoint,\n              normal: perp.dot(ray.dir) > 0 ? perp.negated() : perp,\n              wind: ray.dir.perpendicular().dot(unitTangent) < 0 ? 1 : -1\n            });\n          }\n        }\n      });\n      return result;\n    },\n    windingIntersection: function (ray) {\n      var wind = 0;\n      var hits = this.intersection(ray);\n      _.each(hits, function (hit) {\n        wind += hit.wind;\n      });\n      return wind;\n    },\n    writeToContext: function (context) {\n      context.quadraticCurveTo(this._control.x, this._control.y, this._end.x, this._end.y);\n    },\n    transformed: function (matrix) {\n      return new Segment.Quadratic(matrix.timesVector2(this._start), matrix.timesVector2(this._control), matrix.timesVector2(this._end));\n    },\n    reparameterized: function (a, b) {\n      var p = this._start.plus(this._end.plus(this._control.timesScalar(-2)));\n      var q = this._control.minus(this._start).timesScalar(2);\n      var r = this._start;\n      var alpha = p.timesScalar(a * a);\n      var beta = p.timesScalar(a * b).timesScalar(2).plus(q.timesScalar(a));\n      var gamma = p.timesScalar(b * b).plus(q.timesScalar(b)).plus(r);\n      return new Segment.Quadratic(gamma, beta.timesScalar(0.5).plus(gamma), alpha.plus(beta).plus(gamma));\n    }\n  });\n  Segment.Quadratic.extremaT = function (start, control, end) {\n    var divisorX = 2 * (end - 2 * control + start);\n    if (divisorX !== 0) {\n      return -2 * (control - start) / divisorX;\n    } else {\n      return null;\n    }\n  };\n  return Segment.Quadratic;\n});","\ndefine('KITE/segments/Cubic',['require','PHET_CORE/inherit','DOT/Bounds2','DOT/Vector2','DOT/Matrix3','DOT/Util','DOT/Util','DOT/Util','KITE/segments/Segment','KITE/segments/Quadratic'],function (require) {\n  'use strict';\n  var inherit = require('PHET_CORE/inherit');\n  var Bounds2 = require('DOT/Bounds2');\n  var Vector2 = require('DOT/Vector2');\n  var Matrix3 = require('DOT/Matrix3');\n  var solveQuadraticRootsReal = require('DOT/Util').solveQuadraticRootsReal;\n  var solveCubicRootsReal = require('DOT/Util').solveCubicRootsReal;\n  var arePointsCollinear = require('DOT/Util').arePointsCollinear;\n  var Segment = require('KITE/segments/Segment');\n  require('KITE/segments/Quadratic');\n  Segment.Cubic = function Cubic(start, control1, control2, end) {\n    this._start = start;\n    this._control1 = control1;\n    this._control2 = control2;\n    this._end = end;\n    this._startTangent = undefined;\n    this._endTangent = undefined;\n    this._r = undefined;\n    this._s = undefined;\n    this._tCusp = undefined;\n    this._tDeterminant = undefined;\n    this._tInflection1 = undefined;\n    this._tInflection2 = undefined;\n    this._startQuadratic = undefined;\n    this._endQuadratic = undefined;\n    this._xExtremaT = undefined;\n    this._yExtremaT = undefined;\n    this._bounds = undefined;\n  };\n  inherit(Segment, Segment.Cubic, {\n    degree: 3,\n    getStart: function () {\n      return this._start;\n    },\n    get start() {\n      return this._start;\n    },\n    getControl1: function () {\n      return this._control1;\n    },\n    get control1() {\n      return this._control1;\n    },\n    getControl2: function () {\n      return this._control2;\n    },\n    get control2() {\n      return this._control2;\n    },\n    getEnd: function () {\n      return this._end;\n    },\n    get end() {\n      return this._end;\n    },\n    getStartTangent: function () {\n      if (this._startTangent === undefined) {\n        this._startTangent = this.tangentAt(0).normalized();\n      }\n      return this._startTangent;\n    },\n    get startTangent() {\n      return this.getStartTangent();\n    },\n    getEndTangent: function () {\n      if (this._endTangent === undefined) {\n        this._endTangent = this.tangentAt(1).normalized();\n      }\n      return this._endTangent;\n    },\n    get endTangent() {\n      return this.getEndTangent();\n    },\n    getR: function () {\n      if (this._r === undefined) {\n        this._r = this._control1.minus(this._start).normalized();\n      }\n      return this._r;\n    },\n    get r() {\n      return this.getR();\n    },\n    getS: function () {\n      if (this._s === undefined) {\n        this._s = this.getR().perpendicular();\n      }\n      return this._s;\n    },\n    get s() {\n      return this.getS();\n    },\n    getTCusp: function () {\n      if (this._tCusp === undefined) {\n        this.computeCuspInfo();\n      }\n      null;\n      return this._tCusp;\n    },\n    get tCusp() {\n      return this.getTCusp();\n    },\n    getTDeterminant: function () {\n      if (this._tDeterminant === undefined) {\n        this.computeCuspInfo();\n      }\n      null;\n      return this._tDeterminant;\n    },\n    get tDeterminant() {\n      return this.getTDeterminant();\n    },\n    getTInflection1: function () {\n      if (this._tInflection1 === undefined) {\n        this.computeCuspInfo();\n      }\n      null;\n      return this._tInflection1;\n    },\n    get tInflection1() {\n      return this.getTInflection1();\n    },\n    getTInflection2: function () {\n      if (this._tInflection2 === undefined) {\n        this.computeCuspInfo();\n      }\n      null;\n      return this._tInflection2;\n    },\n    get tInflection2() {\n      return this.getTInflection2();\n    },\n    getStartQuadratic: function () {\n      if (this._startQuadratic === undefined) {\n        this.computeCuspSegments();\n      }\n      null;\n      return this._startQuadratic;\n    },\n    get startQuadratic() {\n      return this.getStartQuadratic();\n    },\n    getEndQuadratic: function () {\n      if (this._endQuadratic === undefined) {\n        this.computeCuspSegments();\n      }\n      null;\n      return this._endQuadratic;\n    },\n    get endQuadratic() {\n      return this.getEndQuadratic();\n    },\n    getXExtremaT: function () {\n      if (this._xExtremaT === undefined) {\n        this._xExtremaT = Segment.Cubic.extremaT(this._start.x, this._control1.x, this._control2.x, this._end.x);\n      }\n      return this._xExtremaT;\n    },\n    get xExtremaT() {\n      return this.getXExtremaT();\n    },\n    getYExtremaT: function () {\n      if (this._yExtremaT === undefined) {\n        this._yExtremaT = Segment.Cubic.extremaT(this._start.y, this._control1.y, this._control2.y, this._end.y);\n      }\n      return this._yExtremaT;\n    },\n    get yExtremaT() {\n      return this.getYExtremaT();\n    },\n    getBounds: function () {\n      if (this._bounds === undefined) {\n        this._bounds = Bounds2.NOTHING;\n        this._bounds = this._bounds.withPoint(this._start);\n        this._bounds = this._bounds.withPoint(this._end);\n        var cubic = this;\n        _.each(this.getXExtremaT(), function (t) {\n          if (t >= 0 && t <= 1) {\n            cubic._bounds = cubic._bounds.withPoint(cubic.positionAt(t));\n          }\n        });\n        _.each(this.getYExtremaT(), function (t) {\n          if (t >= 0 && t <= 1) {\n            cubic._bounds = cubic._bounds.withPoint(cubic.positionAt(t));\n          }\n        });\n        if (this.hasCusp()) {\n          this._bounds = this._bounds.withPoint(this.positionAt(this.getTCusp()));\n        }\n      }\n      return this._bounds;\n    },\n    get bounds() {\n      return this.getBounds();\n    },\n    computeCuspInfo: function () {\n      var a = this._start.times(-1).plus(this._control1.times(3)).plus(this._control2.times(-3)).plus(this._end);\n      var b = this._start.times(3).plus(this._control1.times(-6)).plus(this._control2.times(3));\n      var c = this._start.times(-3).plus(this._control1.times(3));\n      var aPerp = a.perpendicular();\n      var bPerp = b.perpendicular();\n      var aPerpDotB = aPerp.dot(b);\n      this._tCusp = -0.5 * (aPerp.dot(c) / aPerpDotB);\n      this._tDeterminant = this._tCusp * this._tCusp - 1 / 3 * (bPerp.dot(c) / aPerpDotB);\n      if (this._tDeterminant >= 0) {\n        var sqrtDet = Math.sqrt(this._tDeterminant);\n        this._tInflection1 = this._tCusp - sqrtDet;\n        this._tInflection2 = this._tCusp + sqrtDet;\n      } else {\n        this._tInflection1 = null;\n        this._tInflection2 = null;\n      }\n    },\n    computeCuspSegments: function () {\n      if (this.hasCusp()) {\n        var subdividedAtCusp = this.subdivided(this.getTCusp);\n        this._startQuadratic = new Segment.Quadratic(subdividedAtCusp[0].start, subdividedAtCusp[0].control1, subdividedAtCusp[0].end, false);\n        this._endQuadratic = new Segment.Quadratic(subdividedAtCusp[1].start, subdividedAtCusp[1].control2, subdividedAtCusp[1].end, false);\n      } else {\n        this._startQuadratic = null;\n        this._endQuadratic = null;\n      }\n    },\n    getNondegenerateSegments: function () {\n      var start = this._start;\n      var control1 = this._control1;\n      var control2 = this._control2;\n      var end = this._end;\n      var reduced = this.degreeReduced(1e-9);\n      if (start.equals(end) && start.equals(control1) && start.equals(control2)) {\n        return [];\n      } else if (this.hasCusp()) {\n        return _.flatten([\n          this._startQuadratic.getNondegenerateSegments(),\n          this._endQuadratic.getNondegenerateSegments()\n        ]);\n      } else if (reduced) {\n        return reduced.getNondegenerateSegments();\n      } else if (arePointsCollinear(start, control1, end) && arePointsCollinear(start, control2, end)) {\n        throw new Error('TODO, use extrema T funcs');\n      } else {\n        return [this];\n      }\n    },\n    hasCusp: function () {\n      var tCusp = this.getTCusp();\n      var epsilon = 1e-7;\n      return this.tangentAt(tCusp).magnitude() < epsilon && tCusp >= 0 && tCusp <= 1;\n    },\n    positionAt: function (t) {\n      var mt = 1 - t;\n      return this._start.times(mt * mt * mt).plus(this._control1.times(3 * mt * mt * t)).plus(this._control2.times(3 * mt * t * t)).plus(this._end.times(t * t * t));\n    },\n    tangentAt: function (t) {\n      var mt = 1 - t;\n      return this._start.times(-3 * mt * mt).plus(this._control1.times(3 * mt * mt - 6 * mt * t)).plus(this._control2.times(6 * mt * t - 3 * t * t)).plus(this._end.times(3 * t * t));\n    },\n    curvatureAt: function (t) {\n      var epsilon = 1e-7;\n      if (Math.abs(t - 0.5) > 0.5 - epsilon) {\n        var isZero = t < 0.5;\n        var p0 = isZero ? this._start : this._end;\n        var p1 = isZero ? this._control1 : this._control2;\n        var p2 = isZero ? this._control2 : this._control1;\n        var d10 = p1.minus(p0);\n        var a = d10.magnitude();\n        var h = (isZero ? -1 : 1) * d10.perpendicular().normalized().dot(p2.minus(p1));\n        return h * (this.degree - 1) / (this.degree * a * a);\n      } else {\n        return this.subdivided(t)[0].curvatureAt(1);\n      }\n    },\n    toRS: function (point) {\n      var firstVector = point.minus(this._start);\n      return new Vector2(firstVector.dot(this.getR()), firstVector.dot(this.getS()));\n    },\n    subdivided: function (t) {\n      var left = this._start.blend(this._control1, t);\n      var right = this._control2.blend(this._end, t);\n      var middle = this._control1.blend(this._control2, t);\n      var leftMid = left.blend(middle, t);\n      var rightMid = middle.blend(right, t);\n      var mid = leftMid.blend(rightMid, t);\n      return [\n        new Segment.Cubic(this._start, left, leftMid, mid),\n        new Segment.Cubic(mid, rightMid, right, this._end)\n      ];\n    },\n    offsetTo: function (r, reverse) {\n      var quantity = 32;\n      var points = [];\n      var result = [];\n      for (var i = 0; i < quantity; i++) {\n        var t = i / (quantity - 1);\n        if (reverse) {\n          t = 1 - t;\n        }\n        points.push(this.positionAt(t).plus(this.tangentAt(t).perpendicular().normalized().times(r)));\n        if (i > 0) {\n          result.push(new Segment.Line(points[i - 1], points[i]));\n        }\n      }\n      return result;\n    },\n    getSVGPathFragment: function () {\n      return 'C ' + this._control1.x + ' ' + this._control1.y + ' ' + this._control2.x + ' ' + this._control2.y + ' ' + this._end.x + ' ' + this._end.y;\n    },\n    strokeLeft: function (lineWidth) {\n      return this.offsetTo(-lineWidth / 2, false);\n    },\n    strokeRight: function (lineWidth) {\n      return this.offsetTo(lineWidth / 2, true);\n    },\n    getInteriorExtremaTs: function () {\n      var ts = this.getXExtremaT().concat(this.getYExtremaT());\n      var result = [];\n      _.each(ts, function (t) {\n        var epsilon = 1e-10;\n        if (t > epsilon && t < 1 - epsilon) {\n          if (_.every(result, function (otherT) {\n              return Math.abs(t - otherT) > epsilon;\n            })) {\n            result.push(t);\n          }\n        }\n      });\n      return result.sort();\n    },\n    intersectsBounds: function (bounds) {\n      throw new Error('Segment.Cubic.intersectsBounds unimplemented');\n    },\n    intersection: function (ray) {\n      var self = this;\n      var result = [];\n      var inverseMatrix = Matrix3.rotation2(-ray.dir.angle()).timesMatrix(Matrix3.translation(-ray.pos.x, -ray.pos.y));\n      var p0 = inverseMatrix.timesVector2(this._start);\n      var p1 = inverseMatrix.timesVector2(this._control1);\n      var p2 = inverseMatrix.timesVector2(this._control2);\n      var p3 = inverseMatrix.timesVector2(this._end);\n      var a = -p0.y + 3 * p1.y - 3 * p2.y + p3.y;\n      var b = 3 * p0.y - 6 * p1.y + 3 * p2.y;\n      var c = -3 * p0.y + 3 * p1.y;\n      var d = p0.y;\n      var ts = solveCubicRootsReal(a, b, c, d);\n      _.each(ts, function (t) {\n        if (t >= 0 && t <= 1) {\n          var hitPoint = self.positionAt(t);\n          var unitTangent = self.tangentAt(t).normalized();\n          var perp = unitTangent.perpendicular();\n          var toHit = hitPoint.minus(ray.pos);\n          if (toHit.dot(ray.dir) > 0) {\n            result.push({\n              distance: toHit.magnitude(),\n              point: hitPoint,\n              normal: perp.dot(ray.dir) > 0 ? perp.negated() : perp,\n              wind: ray.dir.perpendicular().dot(unitTangent) < 0 ? 1 : -1\n            });\n          }\n        }\n      });\n      return result;\n    },\n    windingIntersection: function (ray) {\n      var wind = 0;\n      var hits = this.intersection(ray);\n      _.each(hits, function (hit) {\n        wind += hit.wind;\n      });\n      return wind;\n    },\n    writeToContext: function (context) {\n      context.bezierCurveTo(this._control1.x, this._control1.y, this._control2.x, this._control2.y, this._end.x, this._end.y);\n    },\n    transformed: function (matrix) {\n      return new Segment.Cubic(matrix.timesVector2(this._start), matrix.timesVector2(this._control1), matrix.timesVector2(this._control2), matrix.timesVector2(this._end));\n    },\n    degreeReduced: function (epsilon) {\n      epsilon = epsilon || 0;\n      var controlA = this._control1.timesScalar(3).minus(this._start).dividedScalar(2);\n      var controlB = this._control2.timesScalar(3).minus(this._end).dividedScalar(2);\n      if (controlA.minus(controlB).magnitude() <= epsilon) {\n        return new Segment.Quadratic(this._start, controlA.average(controlB), this._end);\n      } else {\n        return null;\n      }\n    }\n  });\n  Segment.Cubic.extremaT = function (v0, v1, v2, v3) {\n    var a = -3 * v0 + 9 * v1 - 9 * v2 + 3 * v3;\n    var b = 6 * v0 - 12 * v1 + 6 * v2;\n    var c = -3 * v0 + 3 * v1;\n    return solveQuadraticRootsReal(a, b, c);\n  };\n  return Segment.Cubic;\n});","\ndefine('DOT/Transform3',['require','DOT/dot','DOT/Matrix3','DOT/Vector2','DOT/Ray2'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  require('DOT/Matrix3');\n  require('DOT/Vector2');\n  require('DOT/Ray2');\n  dot.Transform3 = function Transform3(matrix) {\n    this.listeners = [];\n    this.setMatrix(matrix === undefined ? dot.Matrix3.IDENTITY : matrix);\n    phetAllocation && phetAllocation('Transform3');\n  };\n  var Transform3 = dot.Transform3;\n  Transform3.prototype = {\n    constructor: Transform3,\n    setMatrix: function (matrix) {\n      null;\n      var oldMatrix = this.matrix;\n      var length = this.listeners.length;\n      var i;\n      for (i = 0; i < length; i++) {\n        this.listeners[i].before(matrix, oldMatrix);\n      }\n      this.matrix = matrix;\n      this.inverse = null;\n      this.matrixTransposed = null;\n      this.inverseTransposed = null;\n      for (i = 0; i < length; i++) {\n        this.listeners[i].after(matrix, oldMatrix);\n      }\n    },\n    prepend: function (matrix) {\n      this.setMatrix(matrix.timesMatrix(this.matrix));\n    },\n    prependTranslation: function (x, y) {\n      this.setMatrix(dot.Matrix3.translationTimesMatrix(x, y, this.matrix));\n    },\n    append: function (matrix) {\n      this.setMatrix(this.matrix.timesMatrix(matrix));\n    },\n    prependTransform: function (transform) {\n      this.prepend(transform.matrix);\n    },\n    appendTransform: function (transform) {\n      this.append(transform.matrix);\n    },\n    applyToCanvasContext: function (context) {\n      context.setTransform(this.matrix.m00(), this.matrix.m10(), this.matrix.m01(), this.matrix.m11(), this.matrix.m02(), this.matrix.m12());\n    },\n    copy: function () {\n      var transform = new Transform3(this.matrix);\n      transform.inverse = this.inverse;\n      transform.matrixTransposed = this.matrixTransposed;\n      transform.inverseTransposed = this.inverseTransposed;\n    },\n    deepCopy: function () {\n      var transform = new Transform3(this.matrix.copy());\n      transform.inverse = this.inverse ? this.inverse.copy() : null;\n      transform.matrixTransposed = this.matrixTransposed ? this.matrixTransposed.copy() : null;\n      transform.inverseTransposed = this.inverseTransposed ? this.inverseTransposed.copy() : null;\n    },\n    getMatrix: function () {\n      return this.matrix;\n    },\n    getInverse: function () {\n      if (this.inverse === null) {\n        this.inverse = this.matrix.inverted();\n      }\n      return this.inverse;\n    },\n    getMatrixTransposed: function () {\n      if (this.matrixTransposed === null) {\n        this.matrixTransposed = this.matrix.transposed();\n      }\n      return this.matrixTransposed;\n    },\n    getInverseTransposed: function () {\n      if (this.inverseTransposed === null) {\n        this.inverseTransposed = this.getInverse().transposed();\n      }\n      return this.inverseTransposed;\n    },\n    isIdentity: function () {\n      return this.matrix.type === dot.Matrix3.Types.IDENTITY;\n    },\n    isFinite: function () {\n      return this.matrix.isFinite();\n    },\n    transformPosition2: function (vec2) {\n      return this.matrix.timesVector2(vec2);\n    },\n    transformDelta2: function (vec2) {\n      var m = this.getMatrix();\n      return new dot.Vector2(m.m00() * vec2.x + m.m01() * vec2.y, m.m10() * vec2.x + m.m11() * vec2.y);\n    },\n    transformNormal2: function (vec2) {\n      return this.getInverse().timesTransposeVector2(vec2);\n    },\n    transformX: function (x) {\n      var m = this.getMatrix();\n      null;\n      return m.m00() * x + m.m02();\n    },\n    transformY: function (y) {\n      var m = this.getMatrix();\n      null;\n      return m.m11() * y + m.m12();\n    },\n    transformDeltaX: function (x) {\n      var m = this.getMatrix();\n      null;\n      return m.m00() * x;\n    },\n    transformDeltaY: function (y) {\n      var m = this.getMatrix();\n      null;\n      return m.m11() * y;\n    },\n    transformBounds2: function (bounds2) {\n      return bounds2.transformed(this.matrix);\n    },\n    transformShape: function (shape) {\n      return shape.transformed(this.matrix);\n    },\n    transformRay2: function (ray) {\n      return new dot.Ray2(this.transformPosition2(ray.pos), this.transformDelta2(ray.dir).normalized());\n    },\n    inversePosition2: function (vec2) {\n      return this.getInverse().timesVector2(vec2);\n    },\n    inverseDelta2: function (vec2) {\n      var m = this.getInverse();\n      return new dot.Vector2(m.m00() * vec2.x + m.m01() * vec2.y, m.m10() * vec2.x + m.m11() * vec2.y);\n    },\n    inverseNormal2: function (vec2) {\n      return this.matrix.timesTransposeVector2(vec2);\n    },\n    inverseX: function (x) {\n      var m = this.getInverse();\n      null;\n      return m.m00() * x + m.m02();\n    },\n    inverseY: function (y) {\n      var m = this.getInverse();\n      null;\n      return m.m11() * y + m.m12();\n    },\n    inverseDeltaX: function (x) {\n      var m = this.getInverse();\n      null;\n      return m.m00() * x;\n    },\n    inverseDeltaY: function (y) {\n      var m = this.getInverse();\n      null;\n      return m.m11() * y;\n    },\n    inverseBounds2: function (bounds2) {\n      return bounds2.transformed(this.getInverse());\n    },\n    inverseShape: function (shape) {\n      return shape.transformed(this.getInverse());\n    },\n    inverseRay2: function (ray) {\n      return new dot.Ray2(this.inversePosition2(ray.pos), this.inverseDelta2(ray.dir).normalized());\n    },\n    addTransformListener: function (listener) {\n      null;\n      this.listeners.push(listener);\n    },\n    prependTransformListener: function (listener) {\n      null;\n      this.listeners.unshift(listener);\n    },\n    removeTransformListener: function (listener) {\n      null;\n      this.listeners.splice(_.indexOf(this.listeners, listener), 1);\n    }\n  };\n  return Transform3;\n});","\ndefine('KITE/segments/EllipticalArc',['require','PHET_CORE/inherit','DOT/Vector2','DOT/Bounds2','DOT/Matrix3','DOT/Transform3','DOT/Util','DOT/Util','KITE/segments/Segment','KITE/util/Subpath'],function (require) {\n  'use strict';\n  var inherit = require('PHET_CORE/inherit');\n  var Vector2 = require('DOT/Vector2');\n  var Bounds2 = require('DOT/Bounds2');\n  var Matrix3 = require('DOT/Matrix3');\n  var Transform3 = require('DOT/Transform3');\n  var toDegrees = require('DOT/Util').toDegrees;\n  var DotUtil = require('DOT/Util');\n  var Segment = require('KITE/segments/Segment');\n  require('KITE/util/Subpath');\n  Segment.EllipticalArc = function EllipticalArc(center, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise) {\n    if (radiusX < 0) {\n      radiusX = -radiusX;\n      startAngle = Math.PI - startAngle;\n      endAngle = Math.PI - endAngle;\n      anticlockwise = !anticlockwise;\n    }\n    if (radiusY < 0) {\n      radiusY = -radiusY;\n      startAngle = -startAngle;\n      endAngle = -endAngle;\n      anticlockwise = !anticlockwise;\n    }\n    if (radiusX < radiusY) {\n      rotation += Math.PI / 2;\n      startAngle -= Math.PI / 2;\n      endAngle -= Math.PI / 2;\n      var tmpR = radiusX;\n      radiusX = radiusY;\n      radiusY = tmpR;\n    }\n    this._center = center;\n    this._radiusX = radiusX;\n    this._radiusY = radiusY;\n    this._rotation = rotation;\n    this._startAngle = startAngle;\n    this._endAngle = endAngle;\n    this._anticlockwise = anticlockwise;\n    this._unitTransform = undefined;\n    this._start = undefined;\n    this._end = undefined;\n    this._startTangent = undefined;\n    this._endTangent = undefined;\n    this._actualEndAngle = undefined;\n    this._isFullPerimeter = undefined;\n    this._angleDifference = undefined;\n    this._unitArcSegment = undefined;\n    if (radiusX < radiusY) {\n      throw new Error('Not verified to work if radiusX < radiusY');\n    }\n    null;\n    null;\n  };\n  inherit(Segment, Segment.EllipticalArc, {\n    getCenter: function () {\n      return this._center;\n    },\n    get center() {\n      return this.getCenter();\n    },\n    getRadiusX: function () {\n      return this._radiusX;\n    },\n    get radiusX() {\n      return this.getRadiusX();\n    },\n    getRadiusY: function () {\n      return this._radiusY;\n    },\n    get radiusY() {\n      return this.getRadiusY();\n    },\n    getRotation: function () {\n      return this._rotation;\n    },\n    get rotation() {\n      return this.getRotation();\n    },\n    getStartAngle: function () {\n      return this._startAngle;\n    },\n    get startAngle() {\n      return this.getStartAngle();\n    },\n    getEndAngle: function () {\n      return this._endAngle;\n    },\n    get endAngle() {\n      return this.getEndAngle();\n    },\n    getAnticlockwise: function () {\n      return this._anticlockwise;\n    },\n    get anticlockwise() {\n      return this.getAnticlockwise();\n    },\n    getUnitTransform: function () {\n      if (this._unitTransform === undefined) {\n        this._unitTransform = Segment.EllipticalArc.computeUnitTransform(this._center, this._radiusX, this._radiusY, this._rotation);\n      }\n      return this._unitTransform;\n    },\n    get unitTransform() {\n      return this.getUnitTransform();\n    },\n    getStart: function () {\n      if (this._start === undefined) {\n        this._start = this.positionAtAngle(this._startAngle);\n      }\n      return this._start;\n    },\n    get start() {\n      return this.getStart();\n    },\n    getEnd: function () {\n      if (this._end === undefined) {\n        this._end = this.positionAtAngle(this._endAngle);\n      }\n      return this._end;\n    },\n    get end() {\n      return this.getEnd();\n    },\n    getStartTangent: function () {\n      if (this._startTangent === undefined) {\n        this._startTangent = this.tangentAtAngle(this._startAngle);\n      }\n      return this._startTangent;\n    },\n    get startTangent() {\n      return this.getStartTangent();\n    },\n    getEndTangent: function () {\n      if (this._endTangent === undefined) {\n        this._endTangent = this.tangentAtAngle(this._endAngle);\n      }\n      return this._endTangent;\n    },\n    get endTangent() {\n      return this.getEndTangent();\n    },\n    getActualEndAngle: function () {\n      if (this._actualEndAngle === undefined) {\n        if (this._anticlockwise) {\n          if (this._startAngle > this._endAngle) {\n            this._actualEndAngle = this._endAngle;\n          } else if (this._startAngle < this._endAngle) {\n            this._actualEndAngle = this._endAngle - 2 * Math.PI;\n          } else {\n            this._actualEndAngle = this._startAngle;\n          }\n        } else {\n          if (this._startAngle < this._endAngle) {\n            this._actualEndAngle = this._endAngle;\n          } else if (this._startAngle > this._endAngle) {\n            this._actualEndAngle = this._endAngle + Math.PI * 2;\n          } else {\n            this._actualEndAngle = this._startAngle;\n          }\n        }\n      }\n      return this._actualEndAngle;\n    },\n    get actualEndAngle() {\n      return this.getActualEndAngle();\n    },\n    getIsFullPerimeter: function () {\n      if (this._isFullPerimeter === undefined) {\n        this._isFullPerimeter = !this._anticlockwise && this._endAngle - this._startAngle >= Math.PI * 2 || this._anticlockwise && this._startAngle - this._endAngle >= Math.PI * 2;\n      }\n      return this._isFullPerimeter;\n    },\n    get isFullPerimeter() {\n      return this.getIsFullPerimeter();\n    },\n    getAngleDifference: function () {\n      if (this._angleDifference === undefined) {\n        this._angleDifference = this._anticlockwise ? this._startAngle - this._endAngle : this._endAngle - this._startAngle;\n        if (this._angleDifference < 0) {\n          this._angleDifference += Math.PI * 2;\n        }\n        null;\n      }\n      return this._angleDifference;\n    },\n    get angleDifference() {\n      return this.getAngleDifference();\n    },\n    getUnitArcSegment: function () {\n      if (this._unitArcSegment === undefined) {\n        this._unitArcSegment = new Segment.Arc(Vector2.ZERO, 1, this._startAngle, this._endAngle, this._anticlockwise);\n      }\n      return this._unitArcSegment;\n    },\n    getBounds: function () {\n      if (this._bounds === undefined) {\n        this._bounds = Bounds2.NOTHING.withPoint(this.getStart()).withPoint(this.getEnd());\n        if (this._startAngle !== this._endAngle) {\n          var xAngle = Math.atan(-(this._radiusY / this._radiusX) * Math.tan(this._rotation));\n          var yAngle = Math.atan(this._radiusY / this._radiusX / Math.tan(this._rotation));\n          this.possibleExtremaAngles = [\n            xAngle,\n            xAngle + Math.PI,\n            yAngle,\n            yAngle + Math.PI\n          ];\n          _.each(this.possibleExtremaAngles, this.includeBoundsAtAngle.bind(this));\n        }\n      }\n      return this._bounds;\n    },\n    get bounds() {\n      return this.getBounds();\n    },\n    getNondegenerateSegments: function () {\n      if (this._radiusX <= 0 || this._radiusY <= 0 || this._startAngle === this._endAngle) {\n        return [];\n      } else if (this._radiusX === this._radiusY) {\n        var startAngle = this._startAngle - this._rotation;\n        var endAngle = this._endAngle - this._rotation;\n        if (Math.abs(this._endAngle - this._startAngle) === Math.PI * 2) {\n          endAngle = this._anticlockwise ? startAngle - Math.PI * 2 : startAngle + Math.PI * 2;\n        }\n        return [new Segment.Arc(this._center, this._radiusX, startAngle, endAngle, this._anticlockwise)];\n      } else {\n        return [this];\n      }\n    },\n    includeBoundsAtAngle: function (angle) {\n      if (this.containsAngle(angle)) {\n        this._bounds = this._bounds.withPoint(this.positionAtAngle(angle));\n      }\n    },\n    mapAngle: function (angle) {\n      return this._startAngle > this.getActualEndAngle() ? DotUtil.moduloBetweenUp(angle, this._startAngle - 2 * Math.PI, this._startAngle) : DotUtil.moduloBetweenDown(angle, this._startAngle, this._startAngle + 2 * Math.PI);\n    },\n    tAtAngle: function (angle) {\n      return (this.mapAngle(angle) - this._startAngle) / (this.getActualEndAngle() - this._startAngle);\n    },\n    angleAt: function (t) {\n      return this._startAngle + (this.getActualEndAngle() - this._startAngle) * t;\n    },\n    positionAt: function (t) {\n      return this.positionAtAngle(this.angleAt(t));\n    },\n    tangentAt: function (t) {\n      return this.tangentAtAngle(this.angleAt(t));\n    },\n    curvatureAt: function (t) {\n      var angle = this.angleAt(t);\n      var aq = this._radiusX * Math.sin(angle);\n      var bq = this._radiusY * Math.cos(angle);\n      var denominator = Math.pow(bq * bq + aq * aq, 3 / 2);\n      return (this._anticlockwise ? -1 : 1) * this._radiusX * this._radiusY / denominator;\n    },\n    positionAtAngle: function (angle) {\n      return this.getUnitTransform().transformPosition2(Vector2.createPolar(1, angle));\n    },\n    tangentAtAngle: function (angle) {\n      var normal = this.getUnitTransform().transformNormal2(Vector2.createPolar(1, angle));\n      return this._anticlockwise ? normal.perpendicular() : normal.perpendicular().negated();\n    },\n    containsAngle: function (angle) {\n      var normalizedAngle = this._anticlockwise ? angle - this._endAngle : angle - this._startAngle;\n      var positiveMinAngle = normalizedAngle % (Math.PI * 2);\n      if (positiveMinAngle < 0) {\n        positiveMinAngle += Math.PI * 2;\n      }\n      return positiveMinAngle <= this.getAngleDifference();\n    },\n    offsetTo: function (r, reverse) {\n      var quantity = 32;\n      var points = [];\n      var result = [];\n      for (var i = 0; i < quantity; i++) {\n        var ratio = i / (quantity - 1);\n        if (reverse) {\n          ratio = 1 - ratio;\n        }\n        var angle = this.angleAt(ratio);\n        points.push(this.positionAtAngle(angle).plus(this.tangentAtAngle(angle).perpendicular().normalized().times(r)));\n        if (i > 0) {\n          result.push(new Segment.Line(points[i - 1], points[i]));\n        }\n      }\n      return result;\n    },\n    getSVGPathFragment: function () {\n      var epsilon = 0.01;\n      var sweepFlag = this._anticlockwise ? '0' : '1';\n      var largeArcFlag;\n      var degreesRotation = toDegrees(this._rotation);\n      if (this.getAngleDifference() < Math.PI * 2 - epsilon) {\n        largeArcFlag = this.getAngleDifference() < Math.PI ? '0' : '1';\n        return 'A ' + this._radiusX + ' ' + this._radiusY + ' ' + degreesRotation + ' ' + largeArcFlag + ' ' + sweepFlag + ' ' + this.getEnd().x + ' ' + this.getEnd().y;\n      } else {\n        var splitOppositeAngle = (this._startAngle + this._endAngle) / 2;\n        var splitPoint = this.positionAtAngle(splitOppositeAngle);\n        largeArcFlag = '0';\n        var firstArc = 'A ' + this._radiusX + ' ' + this._radiusY + ' ' + degreesRotation + ' ' + largeArcFlag + ' ' + sweepFlag + ' ' + splitPoint.x + ' ' + splitPoint.y;\n        var secondArc = 'A ' + this._radiusX + ' ' + this._radiusY + ' ' + degreesRotation + ' ' + largeArcFlag + ' ' + sweepFlag + ' ' + this.getEnd().x + ' ' + this.getEnd().y;\n        return firstArc + ' ' + secondArc;\n      }\n    },\n    strokeLeft: function (lineWidth) {\n      return this.offsetTo(-lineWidth / 2, false);\n    },\n    strokeRight: function (lineWidth) {\n      return this.offsetTo(lineWidth / 2, true);\n    },\n    getInteriorExtremaTs: function () {\n      var that = this;\n      var result = [];\n      _.each(this.possibleExtremaAngles, function (angle) {\n        if (that.containsAngle(angle)) {\n          var t = that.tAtAngle(angle);\n          var epsilon = 1e-10;\n          if (t > epsilon && t < 1 - epsilon) {\n            result.push(t);\n          }\n        }\n      });\n      return result.sort();\n    },\n    subdivided: function (t) {\n      var angle0 = this.angleAt(0);\n      var angleT = this.angleAt(t);\n      var angle1 = this.angleAt(1);\n      return [\n        new Segment.EllipticalArc(this._center, this._radiusX, this._radiusY, this._rotation, angle0, angleT, this._anticlockwise),\n        new Segment.EllipticalArc(this._center, this._radiusX, this._radiusY, this._rotation, angleT, angle1, this._anticlockwise)\n      ];\n    },\n    intersectsBounds: function (bounds) {\n      throw new Error('Segment.EllipticalArc.intersectsBounds unimplemented');\n    },\n    intersection: function (ray) {\n      var unitTransform = this.getUnitTransform();\n      var rayInUnitCircleSpace = unitTransform.inverseRay2(ray);\n      var hits = this.getUnitArcSegment().intersection(rayInUnitCircleSpace);\n      return _.map(hits, function (hit) {\n        var transformedPoint = unitTransform.transformPosition2(hit.point);\n        return {\n          distance: ray.pos.distance(transformedPoint),\n          point: transformedPoint,\n          normal: unitTransform.inverseNormal2(hit.normal),\n          wind: hit.wind\n        };\n      });\n    },\n    windingIntersection: function (ray) {\n      var rayInUnitCircleSpace = this.getUnitTransform().inverseRay2(ray);\n      return this.getUnitArcSegment().windingIntersection(rayInUnitCircleSpace);\n    },\n    writeToContext: function (context) {\n      if (context.ellipse) {\n        context.ellipse(this._center.x, this._center.y, this._radiusX, this._radiusY, this._rotation, this._startAngle, this._endAngle, this._anticlockwise);\n      } else {\n        this.getUnitTransform().getMatrix().canvasAppendTransform(context);\n        context.arc(0, 0, 1, this._startAngle, this._endAngle, this._anticlockwise);\n        this.getUnitTransform().getInverse().canvasAppendTransform(context);\n      }\n    },\n    transformed: function (matrix) {\n      var transformedSemiMajorAxis = matrix.timesVector2(Vector2.createPolar(this._radiusX, this._rotation)).minus(matrix.timesVector2(Vector2.ZERO));\n      var transformedSemiMinorAxis = matrix.timesVector2(Vector2.createPolar(this._radiusY, this._rotation + Math.PI / 2)).minus(matrix.timesVector2(Vector2.ZERO));\n      var rotation = transformedSemiMajorAxis.angle();\n      var radiusX = transformedSemiMajorAxis.magnitude();\n      var radiusY = transformedSemiMinorAxis.magnitude();\n      var reflected = matrix.getDeterminant() < 0;\n      var anticlockwise = reflected ? !this._anticlockwise : this._anticlockwise;\n      var startAngle = reflected ? -this._startAngle : this._startAngle;\n      var endAngle = reflected ? -this._endAngle : this._endAngle;\n      if (Math.abs(this._endAngle - this._startAngle) === Math.PI * 2) {\n        endAngle = anticlockwise ? startAngle - Math.PI * 2 : startAngle + Math.PI * 2;\n      }\n      return new Segment.EllipticalArc(matrix.timesVector2(this._center), radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise);\n    }\n  });\n  Segment.EllipticalArc.computeUnitTransform = function (center, radiusX, radiusY, rotation) {\n    return new Transform3(Matrix3.translation(center.x, center.y).timesMatrix(Matrix3.rotation2(rotation)).timesMatrix(Matrix3.scaling(radiusX, radiusY)));\n  };\n  return Segment.EllipticalArc;\n});","\ndefine('KITE/Shape',['require','KITE/kite','DOT/Vector2','DOT/Bounds2','DOT/Ray2','KITE/util/Subpath','KITE/../parser/svgPath','KITE/util/LineStyles','KITE/segments/Arc','KITE/segments/Cubic','KITE/segments/EllipticalArc','KITE/segments/Line','KITE/segments/Quadratic'],function (require) {\n  'use strict';\n  var kite = require('KITE/kite');\n  var Vector2 = require('DOT/Vector2');\n  var Bounds2 = require('DOT/Bounds2');\n  var Ray2 = require('DOT/Ray2');\n  var Subpath = require('KITE/util/Subpath');\n  var svgPath = require('KITE/../parser/svgPath');\n  require('KITE/util/LineStyles');\n  require('KITE/segments/Arc');\n  require('KITE/segments/Cubic');\n  require('KITE/segments/EllipticalArc');\n  require('KITE/segments/Line');\n  require('KITE/segments/Quadratic');\n  function p(x, y) {\n    return new Vector2(x, y);\n  }\n  function v(x, y) {\n    return new Vector2(x, y);\n  }\n  kite.Shape = function Shape(subpaths, bounds) {\n    this.subpaths = typeof subpaths === 'object' ? subpaths : [];\n    null;\n    this.bounds = (bounds || Bounds2.NOTHING).copy();\n    var that = this;\n    if (subpaths && typeof subpaths !== 'object') {\n      null;\n      _.each(svgPath.parse(subpaths), function (item) {\n        null;\n        that[item.cmd].apply(that, item.args);\n      });\n    }\n    phetAllocation && phetAllocation('Shape');\n  };\n  var Shape = kite.Shape;\n  Shape.prototype = {\n    constructor: Shape,\n    moveTo: function (x, y) {\n      return this.moveToPoint(v(x, y));\n    },\n    moveToRelative: function (x, y) {\n      return this.moveToPointRelative(v(x, y));\n    },\n    moveToPointRelative: function (point) {\n      return this.moveToPoint(this.getRelativePoint().plus(point));\n    },\n    moveToPoint: function (point) {\n      return this.addSubpath(new kite.Subpath().addPoint(point));\n    },\n    lineTo: function (x, y) {\n      return this.lineToPoint(v(x, y));\n    },\n    lineToRelative: function (x, y) {\n      return this.lineToPointRelative(v(x, y));\n    },\n    lineToPointRelative: function (point) {\n      return this.lineToPoint(this.getRelativePoint().plus(point));\n    },\n    lineToPoint: function (point) {\n      if (this.hasSubpaths()) {\n        var start = this.getLastSubpath().getLastPoint();\n        var end = point;\n        var line = new kite.Segment.Line(start, end);\n        this.getLastSubpath().addPoint(end);\n        this.addSegmentAndBounds(line);\n        null;\n      } else {\n        this.ensure(point);\n      }\n      return this;\n    },\n    horizontalLineTo: function (x) {\n      return this.lineTo(x, this.getRelativePoint().y);\n    },\n    horizontalLineToRelative: function (x) {\n      return this.lineToRelative(x, 0);\n    },\n    verticalLineTo: function (y) {\n      return this.lineTo(this.getRelativePoint().x, y);\n    },\n    verticalLineToRelative: function (y) {\n      return this.lineToRelative(0, y);\n    },\n    quadraticCurveTo: function (cpx, cpy, x, y) {\n      return this.quadraticCurveToPoint(v(cpx, cpy), v(x, y));\n    },\n    quadraticCurveToRelative: function (cpx, cpy, x, y) {\n      return this.quadraticCurveToPointRelative(v(cpx, cpy), v(x, y));\n    },\n    quadraticCurveToPointRelative: function (controlPoint, point) {\n      var relativePoint = this.getRelativePoint();\n      return this.quadraticCurveToPoint(relativePoint.plus(controlPoint), relativePoint.plus(point));\n    },\n    smoothQuadraticCurveTo: function (x, y) {\n      return this.quadraticCurveToPoint(this.getSmoothQuadraticControlPoint(), v(x, y));\n    },\n    smoothQuadraticCurveToRelative: function (x, y) {\n      return this.quadraticCurveToPoint(this.getSmoothQuadraticControlPoint(), v(x, y).plus(this.getRelativePoint()));\n    },\n    quadraticCurveToPoint: function (controlPoint, point) {\n      var shape = this;\n      this.ensure(controlPoint);\n      var start = this.getLastSubpath().getLastPoint();\n      var quadratic = new kite.Segment.Quadratic(start, controlPoint, point);\n      this.getLastSubpath().addPoint(point);\n      var nondegenerateSegments = quadratic.getNondegenerateSegments();\n      _.each(nondegenerateSegments, function (segment) {\n        shape.addSegmentAndBounds(segment);\n      });\n      return this;\n    },\n    cubicCurveTo: function (cp1x, cp1y, cp2x, cp2y, x, y) {\n      return this.cubicCurveToPoint(v(cp1x, cp1y), v(cp2x, cp2y), v(x, y));\n    },\n    cubicCurveToRelative: function (cp1x, cp1y, cp2x, cp2y, x, y) {\n      return this.cubicCurveToPointRelative(v(cp1x, cp1y), v(cp2x, cp2y), v(x, y));\n    },\n    cubicCurveToPointRelative: function (control1, control2, point) {\n      var relativePoint = this.getRelativePoint();\n      return this.cubicCurveToPoint(relativePoint.plus(control1), relativePoint.plus(control2), relativePoint.plus(point));\n    },\n    smoothCubicCurveTo: function (cp2x, cp2y, x, y) {\n      return this.cubicCurveToPoint(this.getSmoothCubicControlPoint(), v(cp2x, cp2y), v(x, y));\n    },\n    smoothCubicCurveToRelative: function (cp2x, cp2y, x, y) {\n      return this.cubicCurveToPoint(this.getSmoothCubicControlPoint(), v(cp2x, cp2y).plus(this.getRelativePoint()), v(x, y).plus(this.getRelativePoint()));\n    },\n    cubicCurveToPoint: function (control1, control2, point) {\n      var shape = this;\n      this.ensure(control1);\n      var start = this.getLastSubpath().getLastPoint();\n      var cubic = new kite.Segment.Cubic(start, control1, control2, point);\n      var nondegenerateSegments = cubic.getNondegenerateSegments();\n      _.each(nondegenerateSegments, function (segment) {\n        shape.addSegmentAndBounds(segment);\n      });\n      this.getLastSubpath().addPoint(point);\n      return this;\n    },\n    arc: function (centerX, centerY, radius, startAngle, endAngle, anticlockwise) {\n      return this.arcPoint(v(centerX, centerY), radius, startAngle, endAngle, anticlockwise);\n    },\n    arcPoint: function (center, radius, startAngle, endAngle, anticlockwise) {\n      var arc = new kite.Segment.Arc(center, radius, startAngle, endAngle, anticlockwise);\n      var startPoint = arc.getStart();\n      var endPoint = arc.getEnd();\n      if (this.hasSubpaths() && this.getLastSubpath().getLength() > 0 && !startPoint.equals(this.getLastSubpath().getLastPoint(), 0)) {\n        this.addSegmentAndBounds(new kite.Segment.Line(this.getLastSubpath().getLastPoint(), startPoint));\n      }\n      if (!this.hasSubpaths()) {\n        this.addSubpath(new kite.Subpath());\n      }\n      this.getLastSubpath().addPoint(startPoint);\n      this.getLastSubpath().addPoint(endPoint);\n      this.addSegmentAndBounds(arc);\n      return this;\n    },\n    ellipticalArc: function (centerX, centerY, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise) {\n      return this.ellipticalArcPoint(v(centerX, centerY), radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise);\n    },\n    ellipticalArcPoint: function (center, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise) {\n      var ellipticalArc = new kite.Segment.EllipticalArc(center, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise);\n      var startPoint = ellipticalArc.start;\n      var endPoint = ellipticalArc.end;\n      if (this.hasSubpaths() && this.getLastSubpath().getLength() > 0 && !startPoint.equals(this.getLastSubpath().getLastPoint(), 0)) {\n        this.addSegmentAndBounds(new kite.Segment.Line(this.getLastSubpath().getLastPoint(), startPoint));\n      }\n      if (!this.hasSubpaths()) {\n        this.addSubpath(new kite.Subpath());\n      }\n      this.getLastSubpath().addPoint(startPoint);\n      this.getLastSubpath().addPoint(endPoint);\n      this.addSegmentAndBounds(ellipticalArc);\n      return this;\n    },\n    close: function () {\n      if (this.hasSubpaths()) {\n        var previousPath = this.getLastSubpath();\n        var nextPath = new kite.Subpath();\n        previousPath.close();\n        this.addSubpath(nextPath);\n        nextPath.addPoint(previousPath.getFirstPoint());\n      }\n      return this;\n    },\n    ellipticalArcToRelative: function (radiusX, radiusY, rotation, largeArc, sweep, x, y) {\n      var relativePoint = this.getRelativePoint();\n      return this.ellipticalArcTo(radiusX, radiusY, rotation, largeArc, sweep, x + relativePoint.x, y + relativePoint.y);\n    },\n    ellipticalArcTo: function (radiusX, radiusY, rotation, largeArc, sweep, x, y) {\n      throw new Error('ellipticalArcTo unimplemented');\n    },\n    circle: function (centerX, centerY, radius) {\n      if (typeof centerX === 'object') {\n        var center = centerX;\n        radius = centerY;\n        return this.arcPoint(center, radius, 0, Math.PI * 2, false);\n      } else {\n        return this.arcPoint(p(centerX, centerY), radius, 0, Math.PI * 2, false);\n      }\n    },\n    ellipse: function (centerX, centerY, radiusX, radiusY, rotation) {\n      if (typeof centerX === 'object') {\n        var center = centerX;\n        rotation = radiusY;\n        radiusY = radiusX;\n        radiusX = centerY;\n        return this.ellipticalArcPoint(center, radiusX, radiusY, rotation || 0, 0, Math.PI * 2, false);\n      } else {\n        return this.ellipticalArcPoint(v(centerX, centerY), radiusX, radiusY, rotation || 0, 0, Math.PI * 2, false);\n      }\n    },\n    rect: function (x, y, width, height) {\n      var subpath = new kite.Subpath();\n      this.addSubpath(subpath);\n      subpath.addPoint(v(x, y));\n      subpath.addPoint(v(x + width, y));\n      subpath.addPoint(v(x + width, y + height));\n      subpath.addPoint(v(x, y + height));\n      this.addSegmentAndBounds(new kite.Segment.Line(subpath.points[0], subpath.points[1]));\n      this.addSegmentAndBounds(new kite.Segment.Line(subpath.points[1], subpath.points[2]));\n      this.addSegmentAndBounds(new kite.Segment.Line(subpath.points[2], subpath.points[3]));\n      subpath.close();\n      this.addSubpath(new kite.Subpath());\n      this.getLastSubpath().addPoint(v(x, y));\n      null;\n      return this;\n    },\n    roundRect: function (x, y, width, height, arcw, arch) {\n      var lowX = x + arcw;\n      var highX = x + width - arcw;\n      var lowY = y + arch;\n      var highY = y + height - arch;\n      if (arcw === arch) {\n        this.arc(highX, lowY, arcw, -Math.PI / 2, 0, false).arc(highX, highY, arcw, 0, Math.PI / 2, false).arc(lowX, highY, arcw, Math.PI / 2, Math.PI, false).arc(lowX, lowY, arcw, Math.PI, Math.PI * 3 / 2, false).close();\n      } else {\n        this.ellipticalArc(highX, lowY, arcw, arch, 0, -Math.PI / 2, 0, false).ellipticalArc(highX, highY, arcw, arch, 0, 0, Math.PI / 2, false).ellipticalArc(lowX, highY, arcw, arch, 0, Math.PI / 2, Math.PI, false).ellipticalArc(lowX, lowY, arcw, arch, 0, Math.PI, Math.PI * 3 / 2, false).close();\n      }\n      return this;\n    },\n    polygon: function (vertices) {\n      var length = vertices.length;\n      if (length > 0) {\n        this.moveToPoint(vertices[0]);\n        for (var i = 1; i < length; i++) {\n          this.lineToPoint(vertices[i]);\n        }\n      }\n      return this.close();\n    },\n    copy: function () {\n      return new Shape(_.map(this.subpaths, function (subpath) {\n        return subpath.copy();\n      }), this.bounds);\n    },\n    writeToContext: function (context) {\n      var len = this.subpaths.length;\n      for (var i = 0; i < len; i++) {\n        this.subpaths[i].writeToContext(context);\n      }\n    },\n    getSVGPath: function () {\n      var subpathStrings = [];\n      var len = this.subpaths.length;\n      for (var i = 0; i < len; i++) {\n        var subpath = this.subpaths[i];\n        if (subpath.isDrawable()) {\n          var startPoint = subpath.getFirstSegment().start;\n          null;\n          var string = 'M ' + startPoint.x + ' ' + startPoint.y + ' ';\n          string += _.map(subpath.segments, function (segment) {\n            return segment.getSVGPathFragment();\n          }).join(' ');\n          if (subpath.isClosed()) {\n            string += ' Z';\n          }\n          subpathStrings.push(string);\n        }\n      }\n      return subpathStrings.join(' ');\n    },\n    transformed: function (matrix) {\n      var subpaths = _.map(this.subpaths, function (subpath) {\n          return subpath.transformed(matrix);\n        });\n      var bounds = _.reduce(subpaths, function (bounds, subpath) {\n          return bounds.union(subpath.bounds);\n        }, Bounds2.NOTHING);\n      return new Shape(subpaths, bounds);\n    },\n    computeBounds: function (lineStyles) {\n      if (lineStyles) {\n        return this.bounds.union(this.getStrokedShape(lineStyles).bounds);\n      } else {\n        return this.bounds;\n      }\n    },\n    containsPoint: function (point) {\n      var ray = new Ray2(point, Vector2.X_UNIT);\n      return this.windingIntersection(ray) !== 0;\n    },\n    intersection: function (ray) {\n      var hits = [];\n      var numSubpaths = this.subpaths.length;\n      for (var i = 0; i < numSubpaths; i++) {\n        var subpath = this.subpaths[i];\n        if (subpath.isDrawable()) {\n          var numSegments = subpath.segments.length;\n          for (var k = 0; k < numSegments; k++) {\n            var segment = subpath.segments[k];\n            hits = hits.concat(segment.intersection(ray));\n          }\n          if (subpath.hasClosingSegment()) {\n            hits = hits.concat(subpath.getClosingSegment().intersection(ray));\n          }\n        }\n      }\n      return _.sortBy(hits, function (hit) {\n        return hit.distance;\n      });\n    },\n    windingIntersection: function (ray) {\n      var wind = 0;\n      var numSubpaths = this.subpaths.length;\n      for (var i = 0; i < numSubpaths; i++) {\n        var subpath = this.subpaths[i];\n        if (subpath.isDrawable()) {\n          var numSegments = subpath.segments.length;\n          for (var k = 0; k < numSegments; k++) {\n            wind += subpath.segments[k].windingIntersection(ray);\n          }\n          if (subpath.hasClosingSegment()) {\n            wind += subpath.getClosingSegment().windingIntersection(ray);\n          }\n        }\n      }\n      return wind;\n    },\n    intersectsBounds: function (bounds) {\n      var numSubpaths = this.subpaths.length;\n      for (var i = 0; i < numSubpaths; i++) {\n        var subpath = this.subpaths[i];\n        if (subpath.isDrawable()) {\n          var numSegments = subpath.segments.length;\n          for (var k = 0; k < numSegments; k++) {\n            if (subpath.segments[k].intersectsBounds(bounds)) {\n              return true;\n            }\n          }\n          if (subpath.hasClosingSegment()) {\n            if (subpath.getClosingSegment().intersectsBounds(bounds)) {\n              return true;\n            }\n          }\n        }\n      }\n      return false;\n    },\n    getStrokedShape: function (lineStyles) {\n      var subpaths = [];\n      var bounds = Bounds2.NOTHING.copy();\n      var subLen = this.subpaths.length;\n      for (var i = 0; i < subLen; i++) {\n        var subpath = this.subpaths[i];\n        var strokedSubpath = subpath.stroked(lineStyles);\n        subpaths = subpaths.concat(strokedSubpath);\n      }\n      subLen = subpaths.length;\n      for (i = 0; i < subLen; i++) {\n        bounds.includeBounds(subpaths[i].bounds);\n      }\n      return new Shape(subpaths, bounds);\n    },\n    toString: function () {\n      return 'new kite.Shape( \\'' + this.getSVGPath() + '\\' )';\n    },\n    addSegmentAndBounds: function (segment) {\n      this.getLastSubpath().addSegment(segment);\n      this.bounds = this.bounds.includeBounds(this.getLastSubpath().bounds);\n    },\n    ensure: function (point) {\n      if (!this.hasSubpaths()) {\n        this.addSubpath(new Subpath());\n        this.getLastSubpath().addPoint(point);\n      }\n    },\n    addSubpath: function (subpath) {\n      this.subpaths.push(subpath);\n      return this;\n    },\n    hasSubpaths: function () {\n      return this.subpaths.length > 0;\n    },\n    getLastSubpath: function () {\n      return _.last(this.subpaths);\n    },\n    getLastPoint: function () {\n      return this.hasSubpaths() ? this.getLastSubpath().getLastPoint() : null;\n    },\n    getLastSegment: function () {\n      if (!this.hasSubpaths()) {\n        return null;\n      }\n      var subpath = this.getLastSubpath();\n      if (!subpath.isDrawable()) {\n        return null;\n      }\n      return subpath.getLastSegment();\n    },\n    getSmoothQuadraticControlPoint: function () {\n      var lastPoint = this.getLastPoint();\n      var segment = this.getLastSegment();\n      if (!segment || !(segment instanceof kite.Segment.Quadratic)) {\n        return lastPoint;\n      }\n      return lastPoint.plus(lastPoint.minus(segment.control));\n    },\n    getSmoothCubicControlPoint: function () {\n      var lastPoint = this.getLastPoint();\n      var segment = this.getLastSegment();\n      if (!segment || !(segment instanceof kite.Segment.Cubic)) {\n        return lastPoint;\n      }\n      return lastPoint.plus(lastPoint.minus(segment.control2));\n    },\n    getRelativePoint: function () {\n      var lastPoint = this.getLastPoint();\n      return lastPoint ? lastPoint : Vector2.ZERO;\n    }\n  };\n  Shape.rectangle = function (x, y, width, height) {\n    return new Shape().rect(x, y, width, height);\n  };\n  Shape.rect = Shape.rectangle;\n  Shape.roundRect = function (x, y, width, height, arcw, arch) {\n    return new Shape().roundRect(x, y, width, height, arcw, arch);\n  };\n  Shape.roundRectangle = Shape.roundRect;\n  Shape.polygon = function (vertices) {\n    return new Shape().polygon(vertices);\n  };\n  Shape.bounds = function (bounds) {\n    return new Shape().rect(bounds.minX, bounds.minY, bounds.maxX - bounds.minX, bounds.maxY - bounds.minY);\n  };\n  Shape.lineSegment = function (a, b, c, d) {\n    if (typeof a === 'number') {\n      return new Shape().moveTo(a, b).lineTo(c, d);\n    } else {\n      return new Shape().moveToPoint(a).lineToPoint(b);\n    }\n  };\n  Shape.regularPolygon = function (sides, radius) {\n    var shape = new Shape();\n    _.each(_.range(sides), function (k) {\n      var point = Vector2.createPolar(radius, 2 * Math.PI * k / sides);\n      k === 0 ? shape.moveToPoint(point) : shape.lineToPoint(point);\n    });\n    return shape.close();\n  };\n  Shape.circle = function (centerX, centerY, radius) {\n    if (centerY === undefined) {\n      return new Shape().circle(0, 0, centerX);\n    }\n    return new Shape().circle(centerX, centerY, radius).close();\n  };\n  Shape.ellipse = function (centerX, centerY, radiusX, radiusY) {\n    if (radiusX === undefined) {\n      return new Shape().ellipse(0, 0, centerX, centerY);\n    }\n    return new Shape().ellipse(centerX, centerY, radiusX, radiusY).close();\n  };\n  Shape.arc = function (centerX, centerY, radius, startAngle, endAngle, anticlockwise) {\n    return new Shape().arc(centerX, centerY, radius, startAngle, endAngle, anticlockwise);\n  };\n  return Shape;\n});","\ndefine('main',[\n  'KITE/kite',\n  'KITE/Shape',\n  'KITE/segments/Arc',\n  'KITE/segments/Cubic',\n  'KITE/segments/EllipticalArc',\n  'KITE/segments/Line',\n  'KITE/segments/Quadratic',\n  'KITE/segments/Segment',\n  'KITE/util/LineStyles',\n  'KITE/util/Subpath',\n  'KITE/../parser/svgPath'\n], function (kite) {\n  'use strict';\n  return kite;\n});","\ndefine('DOT/Bounds3',['require','DOT/dot','DOT/Vector3'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  require('DOT/Vector3');\n  dot.Bounds3 = function Bounds3(minX, minY, minZ, maxX, maxY, maxZ) {\n    null;\n    this.minX = minX;\n    this.minY = minY;\n    this.minZ = minZ;\n    this.maxX = maxX;\n    this.maxY = maxY;\n    this.maxZ = maxZ;\n    phetAllocation && phetAllocation('Bounds3');\n  };\n  var Bounds3 = dot.Bounds3;\n  Bounds3.prototype = {\n    constructor: Bounds3,\n    isBounds: true,\n    dimension: 3,\n    getWidth: function () {\n      return this.maxX - this.minX;\n    },\n    get width() {\n      return this.getWidth();\n    },\n    getHeight: function () {\n      return this.maxY - this.minY;\n    },\n    get height() {\n      return this.getHeight();\n    },\n    getDepth: function () {\n      return this.maxZ - this.minZ;\n    },\n    get depth() {\n      return this.getDepth();\n    },\n    getX: function () {\n      return this.minX;\n    },\n    get x() {\n      return this.getX();\n    },\n    getY: function () {\n      return this.minY;\n    },\n    get y() {\n      return this.getY();\n    },\n    getZ: function () {\n      return this.minZ;\n    },\n    get z() {\n      return this.getZ();\n    },\n    getMinX: function () {\n      return this.minX;\n    },\n    get left() {\n      return this.minX;\n    },\n    getMinY: function () {\n      return this.minY;\n    },\n    get top() {\n      return this.minY;\n    },\n    getMinZ: function () {\n      return this.minZ;\n    },\n    get back() {\n      return this.minZ;\n    },\n    getMaxX: function () {\n      return this.maxX;\n    },\n    get right() {\n      return this.maxX;\n    },\n    getMaxY: function () {\n      return this.maxY;\n    },\n    get bottom() {\n      return this.maxY;\n    },\n    getMaxZ: function () {\n      return this.maxZ;\n    },\n    get front() {\n      return this.maxZ;\n    },\n    getCenterX: function () {\n      return (this.maxX + this.minX) / 2;\n    },\n    get centerX() {\n      return this.getCenterX();\n    },\n    getCenterY: function () {\n      return (this.maxY + this.minY) / 2;\n    },\n    get centerY() {\n      return this.getCenterY();\n    },\n    getCenterZ: function () {\n      return (this.maxZ + this.minZ) / 2;\n    },\n    get centerZ() {\n      return this.getCenterZ();\n    },\n    getCenter: function () {\n      return new dot.Vector3(this.getCenterX(), this.getCenterY(), this.getCenterZ());\n    },\n    get center() {\n      return this.getCenter();\n    },\n    isEmpty: function () {\n      return this.getWidth() < 0 || this.getHeight() < 0 || this.getDepth() < 0;\n    },\n    isFinite: function () {\n      return isFinite(this.minX) && isFinite(this.minY) && isFinite(this.minZ) && isFinite(this.maxX) && isFinite(this.maxY) && isFinite(this.maxZ);\n    },\n    isValid: function () {\n      return !this.isEmpty() && this.isFinite();\n    },\n    containsCoordinates: function (x, y, z) {\n      return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY && this.minZ <= z && z <= this.maxZ;\n    },\n    containsPoint: function (point) {\n      return this.containsCoordinates(point.x, point.y, point.z);\n    },\n    containsBounds: function (bounds) {\n      return this.minX <= bounds.minX && this.maxX >= bounds.maxX && this.minY <= bounds.minY && this.maxY >= bounds.maxY && this.minZ <= bounds.minZ && this.maxZ >= bounds.maxZ;\n    },\n    intersectsBounds: function (bounds) {\n      return !this.intersection(bounds).isEmpty();\n    },\n    toString: function () {\n      return '[x:(' + this.minX + ',' + this.maxX + '),y:(' + this.minY + ',' + this.maxY + '),z:(' + this.minZ + ',' + this.maxZ + ')]';\n    },\n    equals: function (other) {\n      return this.minX === other.minX && this.minY === other.minY && this.minZ === other.minZ && this.maxX === other.maxX && this.maxY === other.maxY && this.maxZ === other.maxZ;\n    },\n    equalsEpsilon: function (other, epsilon) {\n      epsilon = epsilon || 0;\n      var thisFinite = this.isFinite();\n      var otherFinite = other.isFinite();\n      if (thisFinite && otherFinite) {\n        return Math.abs(this.minX - other.minX) < epsilon && Math.abs(this.minY - other.minY) < epsilon && Math.abs(this.minZ - other.minZ) < epsilon && Math.abs(this.maxX - other.maxX) < epsilon && Math.abs(this.maxY - other.maxY) < epsilon && Math.abs(this.maxZ - other.maxZ) < epsilon;\n      } else if (thisFinite !== otherFinite) {\n        return false;\n      } else if (this === other) {\n        return true;\n      } else {\n        return (isFinite(this.minX + other.minX) ? Math.abs(this.minX - other.minX) < epsilon : this.minX === other.minX) && (isFinite(this.minY + other.minY) ? Math.abs(this.minY - other.minY) < epsilon : this.minY === other.minY) && (isFinite(this.minZ + other.minZ) ? Math.abs(this.minZ - other.minZ) < epsilon : this.minZ === other.minZ) && (isFinite(this.maxX + other.maxX) ? Math.abs(this.maxX - other.maxX) < epsilon : this.maxX === other.maxX) && (isFinite(this.maxY + other.maxY) ? Math.abs(this.maxY - other.maxY) < epsilon : this.maxY === other.maxY) && (isFinite(this.maxZ + other.maxZ) ? Math.abs(this.maxZ - other.maxZ) < epsilon : this.maxZ === other.maxZ);\n      }\n    },\n    copy: function (bounds) {\n      if (bounds) {\n        return bounds.set(this);\n      } else {\n        return new Bounds3(this.minX, this.minY, this.minZ, this.maxX, this.maxY, this.maxZ);\n      }\n    },\n    union: function (bounds) {\n      return new Bounds3(Math.min(this.minX, bounds.minX), Math.min(this.minY, bounds.minY), Math.min(this.minZ, bounds.minZ), Math.max(this.maxX, bounds.maxX), Math.max(this.maxY, bounds.maxY), Math.max(this.maxZ, bounds.maxZ));\n    },\n    intersection: function (bounds) {\n      return new Bounds3(Math.max(this.minX, bounds.minX), Math.max(this.minY, bounds.minY), Math.max(this.minZ, bounds.minZ), Math.min(this.maxX, bounds.maxX), Math.min(this.maxY, bounds.maxY), Math.min(this.maxZ, bounds.maxZ));\n    },\n    withCoordinates: function (x, y, z) {\n      return new Bounds3(Math.min(this.minX, x), Math.min(this.minY, y), Math.min(this.minZ, z), Math.max(this.maxX, x), Math.max(this.maxY, y), Math.max(this.maxZ, z));\n    },\n    withPoint: function (point) {\n      return this.withCoordinates(point.x, point.y, point.z);\n    },\n    withMinX: function (minX) {\n      return new Bounds3(minX, this.minY, this.minZ, this.maxX, this.maxY, this.maxZ);\n    },\n    withMinY: function (minY) {\n      return new Bounds3(this.minX, minY, this.minZ, this.maxX, this.maxY, this.maxZ);\n    },\n    withMinZ: function (minZ) {\n      return new Bounds3(this.minX, this.minY, minZ, this.maxX, this.maxY, this.maxZ);\n    },\n    withMaxX: function (maxX) {\n      return new Bounds3(this.minX, this.minY, this.minZ, maxX, this.maxY, this.maxZ);\n    },\n    withMaxY: function (maxY) {\n      return new Bounds3(this.minX, this.minY, this.minZ, this.maxX, maxY, this.maxZ);\n    },\n    withMaxZ: function (maxZ) {\n      return new Bounds3(this.minX, this.minY, this.minZ, this.maxX, this.maxY, maxZ);\n    },\n    roundedOut: function () {\n      return new Bounds3(Math.floor(this.minX), Math.floor(this.minY), Math.floor(this.minZ), Math.ceil(this.maxX), Math.ceil(this.maxY), Math.ceil(this.maxZ));\n    },\n    roundedIn: function () {\n      return new Bounds3(Math.ceil(this.minX), Math.ceil(this.minY), Math.ceil(this.minZ), Math.floor(this.maxX), Math.floor(this.maxY), Math.floor(this.maxZ));\n    },\n    transformed: function (matrix) {\n      return this.copy().transform(matrix);\n    },\n    dilated: function (d) {\n      return new Bounds3(this.minX - d, this.minY - d, this.minZ - d, this.maxX + d, this.maxY + d, this.maxZ + d);\n    },\n    dilatedX: function (x) {\n      return new Bounds3(this.minX - x, this.minY, this.minZ, this.maxX + x, this.maxY, this.maxZ);\n    },\n    dilatedY: function (y) {\n      return new Bounds3(this.minX, this.minY - y, this.minZ, this.maxX, this.maxY + y, this.maxZ);\n    },\n    dilatedZ: function (z) {\n      return new Bounds3(this.minX, this.minY, this.minZ - z, this.maxX, this.maxY, this.maxZ + z);\n    },\n    dilatedXYZ: function (x, y, z) {\n      return new Bounds3(this.minX - x, this.minY - y, this.minZ - z, this.maxX + x, this.maxY + y, this.maxZ + z);\n    },\n    eroded: function (d) {\n      return this.dilated(-d);\n    },\n    erodedX: function (x) {\n      return this.dilatedX(-x);\n    },\n    erodedY: function (y) {\n      return this.dilatedY(-y);\n    },\n    erodedZ: function (z) {\n      return this.dilatedZ(-z);\n    },\n    erodedXYZ: function (x, y, z) {\n      return this.dilatedXYZ(-x, -y, -z);\n    },\n    shiftedX: function (x) {\n      return new Bounds3(this.minX + x, this.minY, this.minZ, this.maxX + x, this.maxY, this.maxZ);\n    },\n    shiftedY: function (y) {\n      return new Bounds3(this.minX, this.minY + y, this.minZ, this.maxX, this.maxY + y, this.maxZ);\n    },\n    shiftedZ: function (z) {\n      return new Bounds3(this.minX, this.minY, this.minZ + z, this.maxX, this.maxY, this.maxZ + z);\n    },\n    shifted: function (x, y, z) {\n      return new Bounds3(this.minX + x, this.minY + y, this.minZ + z, this.maxX + x, this.maxY + y, this.maxZ + z);\n    },\n    setMinMax: function (minX, minY, minZ, maxX, maxY, maxZ) {\n      this.minX = minX;\n      this.minY = minY;\n      this.minZ = minZ;\n      this.maxX = maxX;\n      this.maxY = maxY;\n      this.maxZ = maxZ;\n      return this;\n    },\n    setMinX: function (minX) {\n      this.minX = minX;\n      return this;\n    },\n    setMinY: function (minY) {\n      this.minY = minY;\n      return this;\n    },\n    setMinZ: function (minZ) {\n      this.minZ = minZ;\n      return this;\n    },\n    setMaxX: function (maxX) {\n      this.maxX = maxX;\n      return this;\n    },\n    setMaxY: function (maxY) {\n      this.maxY = maxY;\n      return this;\n    },\n    setMaxZ: function (maxZ) {\n      this.maxZ = maxZ;\n      return this;\n    },\n    set: function (bounds) {\n      return this.setMinMax(bounds.minX, bounds.minY, bounds.minZ, bounds.maxX, bounds.maxY, bounds.maxZ);\n    },\n    includeBounds: function (bounds) {\n      return this.setMinMax(Math.min(this.minX, bounds.minX), Math.min(this.minY, bounds.minY), Math.min(this.minZ, bounds.minZ), Math.max(this.maxX, bounds.maxX), Math.max(this.maxY, bounds.maxY), Math.max(this.maxZ, bounds.maxZ));\n    },\n    constrainBounds: function (bounds) {\n      return this.setMinMax(Math.max(this.minX, bounds.minX), Math.max(this.minY, bounds.minY), Math.max(this.minZ, bounds.minZ), Math.min(this.maxX, bounds.maxX), Math.min(this.maxY, bounds.maxY), Math.min(this.maxZ, bounds.maxZ));\n    },\n    addCoordinates: function (x, y, z) {\n      return this.setMinMax(Math.min(this.minX, x), Math.min(this.minY, y), Math.min(this.minZ, z), Math.max(this.maxX, x), Math.max(this.maxY, y), Math.max(this.maxZ, z));\n    },\n    addPoint: function (point) {\n      return this.addCoordinates(point.x, point.y, point.z);\n    },\n    roundOut: function () {\n      return this.setMinMax(Math.floor(this.minX), Math.floor(this.minY), Math.floor(this.minZ), Math.ceil(this.maxX), Math.ceil(this.maxY), Math.ceil(this.maxZ));\n    },\n    roundIn: function () {\n      return this.setMinMax(Math.ceil(this.minX), Math.ceil(this.minY), Math.ceil(this.minZ), Math.floor(this.maxX), Math.floor(this.maxY), Math.floor(this.maxZ));\n    },\n    transform: function (matrix) {\n      if (this.isEmpty()) {\n        return this;\n      }\n      if (matrix.isIdentity()) {\n        return this;\n      }\n      var minX = Number.POSITIVE_INFINITY;\n      var minY = Number.POSITIVE_INFINITY;\n      var minZ = Number.POSITIVE_INFINITY;\n      var maxX = Number.NEGATIVE_INFINITY;\n      var maxY = Number.NEGATIVE_INFINITY;\n      var maxZ = Number.NEGATIVE_INFINITY;\n      var vector = new dot.Vector3();\n      function withIt(vector) {\n        minX = Math.min(minX, vector.x);\n        minY = Math.min(minY, vector.y);\n        minZ = Math.min(minZ, vector.z);\n        maxX = Math.max(maxX, vector.x);\n        maxY = Math.max(maxY, vector.y);\n        maxZ = Math.max(maxZ, vector.z);\n      }\n      withIt(matrix.multiplyVector3(vector.setXYZ(this.minX, this.minY, this.minZ)));\n      withIt(matrix.multiplyVector3(vector.setXYZ(this.minX, this.maxY, this.minZ)));\n      withIt(matrix.multiplyVector3(vector.setXYZ(this.maxX, this.minY, this.minZ)));\n      withIt(matrix.multiplyVector3(vector.setXYZ(this.maxX, this.maxY, this.minZ)));\n      withIt(matrix.multiplyVector3(vector.setXYZ(this.minX, this.minY, this.maxZ)));\n      withIt(matrix.multiplyVector3(vector.setXYZ(this.minX, this.maxY, this.maxZ)));\n      withIt(matrix.multiplyVector3(vector.setXYZ(this.maxX, this.minY, this.maxZ)));\n      withIt(matrix.multiplyVector3(vector.setXYZ(this.maxX, this.maxY, this.maxZ)));\n      return this.setMinMax(minX, minY, minZ, maxX, maxY, maxZ);\n    },\n    dilate: function (d) {\n      return this.setMinMax(this.minX - d, this.minY - d, this.minZ - d, this.maxX + d, this.maxY + d, this.maxZ + d);\n    },\n    dilateX: function (x) {\n      return this.setMinMax(this.minX - x, this.minY, this.minZ, this.maxX + x, this.maxY, this.maxZ);\n    },\n    dilateY: function (y) {\n      return this.setMinMax(this.minX, this.minY - y, this.minZ, this.maxX, this.maxY + y, this.maxZ);\n    },\n    dilateZ: function (z) {\n      return this.setMinMax(this.minX, this.minY, this.minZ - z, this.maxX, this.maxY, this.maxZ + z);\n    },\n    dilateXYZ: function (x, y, z) {\n      return this.setMinMax(this.minX - x, this.minY - y, this.minZ - z, this.maxX + x, this.maxY + y, this.maxZ + z);\n    },\n    erode: function (d) {\n      return this.dilate(-d);\n    },\n    erodeX: function (x) {\n      return this.dilateX(-x);\n    },\n    erodeY: function (y) {\n      return this.dilateY(-y);\n    },\n    erodeZ: function (z) {\n      return this.dilateZ(-z);\n    },\n    erodeXYZ: function (x, y, z) {\n      return this.dilateXYZ(-x, -y, -z);\n    },\n    shiftX: function (x) {\n      return this.setMinMax(this.minX + x, this.minY, this.minZ, this.maxX + x, this.maxY, this.maxZ);\n    },\n    shiftY: function (y) {\n      return this.setMinMax(this.minX, this.minY + y, this.minZ, this.maxX, this.maxY + y, this.maxZ);\n    },\n    shiftZ: function (z) {\n      return this.setMinMax(this.minX, this.minY, this.minZ + z, this.maxX, this.maxY, this.maxZ + z);\n    },\n    shift: function (x, y, z) {\n      return this.setMinMax(this.minX + x, this.minY + y, this.minZ + z, this.maxX + x, this.maxY + y, this.maxZ + z);\n    }\n  };\n  Bounds3.cuboid = function (x, y, z, width, height, depth) {\n    return new Bounds3(x, y, z, x + width, y + height, z + depth);\n  };\n  Bounds3.point = function (x, y, z) {\n    return new Bounds3(x, y, z, x, y, z);\n  };\n  Bounds3.EVERYTHING = new Bounds3(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n  Bounds3.NOTHING = new Bounds3(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n  return Bounds3;\n});","\ndefine('DOT/Complex',['require','DOT/dot','PHET_CORE/inherit','DOT/Vector2'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  var inherit = require('PHET_CORE/inherit');\n  var Vector2 = require('DOT/Vector2');\n  dot.Complex = function Complex(real, imaginary) {\n    Vector2.call(this, real, imaginary);\n    this.real = real;\n    this.imaginary = imaginary;\n  };\n  var Complex = dot.Complex;\n  Complex.real = function (real) {\n    return new Complex(real, 0);\n  };\n  Complex.imaginary = function (imaginary) {\n    return new Complex(0, imaginary);\n  };\n  Complex.createPolar = function (magnitude, phase) {\n    return new Complex(magnitude * Math.cos(phase), magnitude * Math.sin(phase));\n  };\n  inherit(Vector2.Immutable, Complex, {\n    phase: Vector2.prototype.angle,\n    times: function (c) {\n      return new Complex(this.real * c.real - this.imaginary * c.imaginary, this.real * c.imaginary + this.imaginary * c.real);\n    },\n    dividedBy: function (c) {\n      var cMag = c.magnitudeSquared();\n      return new Complex((this.real * c.real + this.imaginary * c.imaginary) / cMag, (this.imaginary * c.real - this.real * c.imaginary) / cMag);\n    },\n    sqrt: function () {\n      var mag = this.magnitude();\n      return new Complex(Math.sqrt((mag + this.real) / 2), (this.imaginary >= 0 ? 1 : -1) * Math.sqrt((mag - this.real) / 2));\n    },\n    conjugate: function () {\n      return new Complex(this.real, -this.imaginary);\n    },\n    exponentiated: function () {\n      return Complex.createPolar(Math.exp(this.real), this.imaginary);\n    },\n    toString: function () {\n      return 'Complex(' + this.x + ', ' + this.y + ')';\n    }\n  });\n  Complex.ZERO = new Complex(0, 0);\n  Complex.ONE = new Complex(1, 0);\n  Complex.I = new Complex(0, 1);\n  return Complex;\n});","\ndefine('DOT/ConvexHull2',['require','DOT/dot'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  function ccw(p1, p2, p3) {\n    return p2.minus(p1).crossScalar(p3.minus(p1));\n  }\n  dot.ConvexHull2 = {\n    grahamScan: function (points, includeCollinear) {\n      if (points.length <= 2) {\n        return points;\n      }\n      var minY = Number.POSITIVE_INFINITY;\n      var p = null;\n      _.each(points, function (point) {\n        if (point.y <= minY) {\n          if (point.y === minY && p) {\n            if (point.x < p.x) {\n              p = point;\n            }\n          } else {\n            minY = point.y;\n            p = point;\n          }\n        }\n      });\n      points = _.sortBy(points, function (point) {\n        return point.minus(p).angle();\n      });\n      points.splice(_.indexOf(points, p), 1);\n      var result = [p];\n      _.each(points, function (point) {\n        if (p.x === point.x && p.y === point.y) {\n          return;\n        }\n        function isRightTurn() {\n          if (result.length < 2) {\n            return false;\n          }\n          var cross = ccw(result[result.length - 2], result[result.length - 1], point);\n          return includeCollinear ? cross < 0 : cross <= 0;\n        }\n        while (isRightTurn()) {\n          result.pop();\n        }\n        result.push(point);\n      });\n      return result;\n    }\n  };\n  return dot.ConvexHull2;\n});","\ndefine('DOT/Dimension2',['require','DOT/dot','DOT/Bounds2'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  require('DOT/Bounds2');\n  dot.Dimension2 = function Dimension2(width, height) {\n    this.width = width;\n    this.height = height;\n  };\n  var Dimension2 = dot.Dimension2;\n  Dimension2.prototype = {\n    constructor: Dimension2,\n    toString: function () {\n      return '[' + this.width + 'w, ' + this.height + 'h]';\n    },\n    toBounds: function (x, y) {\n      x = x || 0;\n      y = y || 0;\n      return new dot.Bounds2(x, y, this.width + x, this.height + y);\n    },\n    equals: function (other) {\n      return this.width === other.width && this.height === other.height;\n    }\n  };\n  return Dimension2;\n});","\ndefine('DOT/EigenvalueDecomposition',['require','DOT/dot'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  var Float32Array = window.Float32Array || Array;\n  dot.EigenvalueDecomposition = function EigenvalueDecomposition(matrix) {\n    var i, j;\n    var A = matrix.entries;\n    this.n = matrix.getColumnDimension();\n    var n = this.n;\n    this.V = new Float32Array(n * n);\n    this.d = new Float32Array(n);\n    this.e = new Float32Array(n);\n    this.issymmetric = true;\n    for (j = 0; j < n && this.issymmetric; j++) {\n      for (i = 0; i < n && this.issymmetric; i++) {\n        this.issymmetric = A[i * this.n + j] === A[j * this.n + i];\n      }\n    }\n    if (this.issymmetric) {\n      for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n          this.V[i * this.n + j] = A[i * this.n + j];\n        }\n      }\n      this.tred2();\n      this.tql2();\n    } else {\n      this.H = new Float32Array(n * n);\n      this.ort = new Float32Array(n);\n      for (j = 0; j < n; j++) {\n        for (i = 0; i < n; i++) {\n          this.H[i * this.n + j] = A[i * this.n + j];\n        }\n      }\n      this.orthes();\n      this.hqr2();\n    }\n  };\n  var EigenvalueDecomposition = dot.EigenvalueDecomposition;\n  EigenvalueDecomposition.prototype = {\n    constructor: EigenvalueDecomposition,\n    getV: function () {\n      return this.V.copy();\n    },\n    getRealEigenvalues: function () {\n      return this.d;\n    },\n    getImagEigenvalues: function () {\n      return this.e;\n    },\n    getD: function () {\n      var n = this.n, d = this.d, e = this.e;\n      var X = new dot.Matrix(n, n);\n      var D = X.entries;\n      for (var i = 0; i < n; i++) {\n        for (var j = 0; j < n; j++) {\n          D[i * this.n + j] = 0;\n        }\n        D[i * this.n + i] = d[i];\n        if (e[i] > 0) {\n          D[i * this.n + i + 1] = e[i];\n        } else if (e[i] < 0) {\n          D[i * this.n + i - 1] = e[i];\n        }\n      }\n      return X;\n    },\n    tred2: function () {\n      var n = this.n, V = this.V, d = this.d, e = this.e;\n      var i, j, k, f, g, h;\n      for (j = 0; j < n; j++) {\n        d[j] = V[(n - 1) * n + j];\n      }\n      for (i = n - 1; i > 0; i--) {\n        var scale = 0;\n        h = 0;\n        for (k = 0; k < i; k++) {\n          scale = scale + Math.abs(d[k]);\n        }\n        if (scale === 0) {\n          e[i] = d[i - 1];\n          for (j = 0; j < i; j++) {\n            d[j] = V[(i - 1) * n + j];\n            V[i * this.n + j] = 0;\n            V[j * this.n + i] = 0;\n          }\n        } else {\n          for (k = 0; k < i; k++) {\n            d[k] /= scale;\n            h += d[k] * d[k];\n          }\n          f = d[i - 1];\n          g = Math.sqrt(h);\n          if (f > 0) {\n            g = -g;\n          }\n          e[i] = scale * g;\n          h = h - f * g;\n          d[i - 1] = f - g;\n          for (j = 0; j < i; j++) {\n            e[j] = 0;\n          }\n          for (j = 0; j < i; j++) {\n            f = d[j];\n            V[j * this.n + i] = f;\n            g = e[j] + V[j * n + j] * f;\n            for (k = j + 1; k <= i - 1; k++) {\n              g += V[k * n + j] * d[k];\n              e[k] += V[k * n + j] * f;\n            }\n            e[j] = g;\n          }\n          f = 0;\n          for (j = 0; j < i; j++) {\n            e[j] /= h;\n            f += e[j] * d[j];\n          }\n          var hh = f / (h + h);\n          for (j = 0; j < i; j++) {\n            e[j] -= hh * d[j];\n          }\n          for (j = 0; j < i; j++) {\n            f = d[j];\n            g = e[j];\n            for (k = j; k <= i - 1; k++) {\n              V[k * n + j] -= f * e[k] + g * d[k];\n            }\n            d[j] = V[(i - 1) * n + j];\n            V[i * this.n + j] = 0;\n          }\n        }\n        d[i] = h;\n      }\n      for (i = 0; i < n - 1; i++) {\n        V[(n - 1) * n + i] = V[i * n + i];\n        V[i * n + i] = 1;\n        h = d[i + 1];\n        if (h !== 0) {\n          for (k = 0; k <= i; k++) {\n            d[k] = V[k * n + (i + 1)] / h;\n          }\n          for (j = 0; j <= i; j++) {\n            g = 0;\n            for (k = 0; k <= i; k++) {\n              g += V[k * n + (i + 1)] * V[k * n + j];\n            }\n            for (k = 0; k <= i; k++) {\n              V[k * n + j] -= g * d[k];\n            }\n          }\n        }\n        for (k = 0; k <= i; k++) {\n          V[k * n + (i + 1)] = 0;\n        }\n      }\n      for (j = 0; j < n; j++) {\n        d[j] = V[(n - 1) * n + j];\n        V[(n - 1) * n + j] = 0;\n      }\n      V[(n - 1) * n + (n - 1)] = 1;\n      e[0] = 0;\n    },\n    tql2: function () {\n      var n = this.n, V = this.V, d = this.d, e = this.e;\n      var i, j, k, l, g, p;\n      var iter;\n      for (i = 1; i < n; i++) {\n        e[i - 1] = e[i];\n      }\n      e[n - 1] = 0;\n      var f = 0;\n      var tst1 = 0;\n      var eps = Math.pow(2, -52);\n      for (l = 0; l < n; l++) {\n        tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n        var m = l;\n        while (m < n) {\n          if (Math.abs(e[m]) <= eps * tst1) {\n            break;\n          }\n          m++;\n        }\n        if (m > l) {\n          iter = 0;\n          do {\n            iter = iter + 1;\n            g = d[l];\n            p = (d[l + 1] - g) / (2 * e[l]);\n            var r = dot.Matrix.hypot(p, 1);\n            if (p < 0) {\n              r = -r;\n            }\n            d[l] = e[l] / (p + r);\n            d[l + 1] = e[l] * (p + r);\n            var dl1 = d[l + 1];\n            var h = g - d[l];\n            for (i = l + 2; i < n; i++) {\n              d[i] -= h;\n            }\n            f = f + h;\n            p = d[m];\n            var c = 1;\n            var c2 = c;\n            var c3 = c;\n            var el1 = e[l + 1];\n            var s = 0;\n            var s2 = 0;\n            for (i = m - 1; i >= l; i--) {\n              c3 = c2;\n              c2 = c;\n              s2 = s;\n              g = c * e[i];\n              h = c * p;\n              r = dot.Matrix.hypot(p, e[i]);\n              e[i + 1] = s * r;\n              s = e[i] / r;\n              c = p / r;\n              p = c * d[i] - s * g;\n              d[i + 1] = h + s * (c * g + s * d[i]);\n              for (k = 0; k < n; k++) {\n                h = V[k * n + (i + 1)];\n                V[k * n + (i + 1)] = s * V[k * n + i] + c * h;\n                V[k * n + i] = c * V[k * n + i] - s * h;\n              }\n            }\n            p = -s * s2 * c3 * el1 * e[l] / dl1;\n            e[l] = s * p;\n            d[l] = c * p;\n          } while (Math.abs(e[l]) > eps * tst1);\n        }\n        d[l] = d[l] + f;\n        e[l] = 0;\n      }\n      for (i = 0; i < n - 1; i++) {\n        k = i;\n        p = d[i];\n        for (j = i + 1; j < n; j++) {\n          if (d[j] < p) {\n            k = j;\n            p = d[j];\n          }\n        }\n        if (k !== i) {\n          d[k] = d[i];\n          d[i] = p;\n          for (j = 0; j < n; j++) {\n            p = V[j * this.n + i];\n            V[j * this.n + i] = V[j * n + k];\n            V[j * n + k] = p;\n          }\n        }\n      }\n    },\n    orthes: function () {\n      var n = this.n, V = this.V, H = this.H, ort = this.ort;\n      var i, j, m, f, g;\n      var low = 0;\n      var high = n - 1;\n      for (m = low + 1; m <= high - 1; m++) {\n        var scale = 0;\n        for (i = m; i <= high; i++) {\n          scale = scale + Math.abs(H[i * n + (m - 1)]);\n        }\n        if (scale !== 0) {\n          var h = 0;\n          for (i = high; i >= m; i--) {\n            ort[i] = H[i * n + (m - 1)] / scale;\n            h += ort[i] * ort[i];\n          }\n          g = Math.sqrt(h);\n          if (ort[m] > 0) {\n            g = -g;\n          }\n          h = h - ort[m] * g;\n          ort[m] = ort[m] - g;\n          for (j = m; j < n; j++) {\n            f = 0;\n            for (i = high; i >= m; i--) {\n              f += ort[i] * H[i * this.n + j];\n            }\n            f = f / h;\n            for (i = m; i <= high; i++) {\n              H[i * this.n + j] -= f * ort[i];\n            }\n          }\n          for (i = 0; i <= high; i++) {\n            f = 0;\n            for (j = high; j >= m; j--) {\n              f += ort[j] * H[i * this.n + j];\n            }\n            f = f / h;\n            for (j = m; j <= high; j++) {\n              H[i * this.n + j] -= f * ort[j];\n            }\n          }\n          ort[m] = scale * ort[m];\n          H[m * n + (m - 1)] = scale * g;\n        }\n      }\n      for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n          V[i * this.n + j] = i === j ? 1 : 0;\n        }\n      }\n      for (m = high - 1; m >= low + 1; m--) {\n        if (H[m * n + (m - 1)] !== 0) {\n          for (i = m + 1; i <= high; i++) {\n            ort[i] = H[i * n + (m - 1)];\n          }\n          for (j = m; j <= high; j++) {\n            g = 0;\n            for (i = m; i <= high; i++) {\n              g += ort[i] * V[i * this.n + j];\n            }\n            g = g / ort[m] / H[m * n + (m - 1)];\n            for (i = m; i <= high; i++) {\n              V[i * this.n + j] += g * ort[i];\n            }\n          }\n        }\n      }\n    },\n    cdiv: function (xr, xi, yr, yi) {\n      var r, d;\n      if (Math.abs(yr) > Math.abs(yi)) {\n        r = yi / yr;\n        d = yr + r * yi;\n        this.cdivr = (xr + r * xi) / d;\n        this.cdivi = (xi - r * xr) / d;\n      } else {\n        r = yr / yi;\n        d = yi + r * yr;\n        this.cdivr = (r * xr + xi) / d;\n        this.cdivi = (r * xi - xr) / d;\n      }\n    },\n    hqr2: function () {\n      var n, V = this.V, d = this.d, e = this.e, H = this.H;\n      var i, j, k, l, m;\n      var iter;\n      var nn = this.n;\n      n = nn - 1;\n      var low = 0;\n      var high = nn - 1;\n      var eps = Math.pow(2, -52);\n      var exshift = 0;\n      var p = 0, q = 0, r = 0, s = 0, z = 0, t, w, x, y;\n      var norm = 0;\n      for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n          d[i] = H[i * n + i];\n          e[i] = 0;\n        }\n        for (j = Math.max(i - 1, 0); j < nn; j++) {\n          norm = norm + Math.abs(H[i * this.n + j]);\n        }\n      }\n      iter = 0;\n      while (n >= low) {\n        l = n;\n        while (l > low) {\n          s = Math.abs(H[(l - 1) * n + (l - 1)]) + Math.abs(H[l * n + l]);\n          if (s === 0) {\n            s = norm;\n          }\n          if (Math.abs(H[l * n + (l - 1)]) < eps * s) {\n            break;\n          }\n          l--;\n        }\n        if (l === n) {\n          H[n * n + n] = H[n * n + n] + exshift;\n          d[n] = H[n * n + n];\n          e[n] = 0;\n          n--;\n          iter = 0;\n        } else if (l === n - 1) {\n          w = H[n * n + n - 1] * H[(n - 1) * n + n];\n          p = (H[(n - 1) * n + (n - 1)] - H[n * n + n]) / 2;\n          q = p * p + w;\n          z = Math.sqrt(Math.abs(q));\n          H[n * n + n] = H[n * n + n] + exshift;\n          H[(n - 1) * n + (n - 1)] = H[(n - 1) * n + (n - 1)] + exshift;\n          x = H[n * n + n];\n          if (q >= 0) {\n            if (p >= 0) {\n              z = p + z;\n            } else {\n              z = p - z;\n            }\n            d[n - 1] = x + z;\n            d[n] = d[n - 1];\n            if (z !== 0) {\n              d[n] = x - w / z;\n            }\n            e[n - 1] = 0;\n            e[n] = 0;\n            x = H[n * n + n - 1];\n            s = Math.abs(x) + Math.abs(z);\n            p = x / s;\n            q = z / s;\n            r = Math.sqrt(p * p + q * q);\n            p = p / r;\n            q = q / r;\n            for (j = n - 1; j < nn; j++) {\n              z = H[(n - 1) * n + j];\n              H[(n - 1) * n + j] = q * z + p * H[n * n + j];\n              H[n * n + j] = q * H[n * n + j] - p * z;\n            }\n            for (i = 0; i <= n; i++) {\n              z = H[i * n + n - 1];\n              H[i * n + n - 1] = q * z + p * H[i * n + n];\n              H[i * n + n] = q * H[i * n + n] - p * z;\n            }\n            for (i = low; i <= high; i++) {\n              z = V[i * n + n - 1];\n              V[i * n + n - 1] = q * z + p * V[i * n + n];\n              V[i * n + n] = q * V[i * n + n] - p * z;\n            }\n          } else {\n            d[n - 1] = x + p;\n            d[n] = x + p;\n            e[n - 1] = z;\n            e[n] = -z;\n          }\n          n = n - 2;\n          iter = 0;\n        } else {\n          x = H[n * n + n];\n          y = 0;\n          w = 0;\n          if (l < n) {\n            y = H[(n - 1) * n + (n - 1)];\n            w = H[n * n + n - 1] * H[(n - 1) * n + n];\n          }\n          if (iter === 10) {\n            exshift += x;\n            for (i = low; i <= n; i++) {\n              H[i * n + i] -= x;\n            }\n            s = Math.abs(H[n * n + n - 1]) + Math.abs(H[(n - 1) * n + n - 2]);\n            x = y = 0.75 * s;\n            w = -0.4375 * s * s;\n          }\n          if (iter === 30) {\n            s = (y - x) / 2;\n            s = s * s + w;\n            if (s > 0) {\n              s = Math.sqrt(s);\n              if (y < x) {\n                s = -s;\n              }\n              s = x - w / ((y - x) / 2 + s);\n              for (i = low; i <= n; i++) {\n                H[i * n + i] -= s;\n              }\n              exshift += s;\n              x = y = w = 0.964;\n            }\n          }\n          iter = iter + 1;\n          m = n - 2;\n          while (m >= l) {\n            z = H[m * n + m];\n            r = x - z;\n            s = y - z;\n            p = (r * s - w) / H[(m + 1) * n + m] + H[m * n + m + 1];\n            q = H[(m + 1) * n + m + 1] - z - r - s;\n            r = H[(m + 2) * n + m + 1];\n            s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n            p = p / s;\n            q = q / s;\n            r = r / s;\n            if (m === l) {\n              break;\n            }\n            if (Math.abs(H[m * n + (m - 1)]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[(m - 1) * n + m - 1]) + Math.abs(z) + Math.abs(H[(m + 1) * n + m + 1])))) {\n              break;\n            }\n            m--;\n          }\n          for (i = m + 2; i <= n; i++) {\n            H[i * n + i - 2] = 0;\n            if (i > m + 2) {\n              H[i * n + i - 3] = 0;\n            }\n          }\n          for (k = m; k <= n - 1; k++) {\n            var notlast = k !== n - 1;\n            if (k !== m) {\n              p = H[k * n + k - 1];\n              q = H[(k + 1) * n + k - 1];\n              r = notlast ? H[(k + 2) * n + k - 1] : 0;\n              x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n              if (x !== 0) {\n                p = p / x;\n                q = q / x;\n                r = r / x;\n              }\n            }\n            if (x === 0) {\n              break;\n            }\n            s = Math.sqrt(p * p + q * q + r * r);\n            if (p < 0) {\n              s = -s;\n            }\n            if (s !== 0) {\n              if (k !== m) {\n                H[k * n + k - 1] = -s * x;\n              } else if (l !== m) {\n                H[k * n + k - 1] = -H[k * n + k - 1];\n              }\n              p = p + s;\n              x = p / s;\n              y = q / s;\n              z = r / s;\n              q = q / p;\n              r = r / p;\n              for (j = k; j < nn; j++) {\n                p = H[k * n + j] + q * H[(k + 1) * n + j];\n                if (notlast) {\n                  p = p + r * H[(k + 2) * n + j];\n                  H[(k + 2) * n + j] = H[(k + 2) * n + j] - p * z;\n                }\n                H[k * n + j] = H[k * n + j] - p * x;\n                H[(k + 1) * n + j] = H[(k + 1) * n + j] - p * y;\n              }\n              for (i = 0; i <= Math.min(n, k + 3); i++) {\n                p = x * H[i * n + k] + y * H[i * n + k + 1];\n                if (notlast) {\n                  p = p + z * H[i * n + k + 2];\n                  H[i * n + k + 2] = H[i * n + k + 2] - p * r;\n                }\n                H[i * n + k] = H[i * n + k] - p;\n                H[i * n + k + 1] = H[i * n + k + 1] - p * q;\n              }\n              for (i = low; i <= high; i++) {\n                p = x * V[i * n + k] + y * V[i * n + k + 1];\n                if (notlast) {\n                  p = p + z * V[i * n + k + 2];\n                  V[i * n + k + 2] = V[i * n + k + 2] - p * r;\n                }\n                V[i * n + k] = V[i * n + k] - p;\n                V[i * n + k + 1] = V[i * n + k + 1] - p * q;\n              }\n            }\n          }\n        }\n      }\n      if (norm === 0) {\n        return;\n      }\n      for (n = nn - 1; n >= 0; n--) {\n        p = d[n];\n        q = e[n];\n        if (q === 0) {\n          l = n;\n          H[n * n + n] = 1;\n          for (i = n - 1; i >= 0; i--) {\n            w = H[i * n + i] - p;\n            r = 0;\n            for (j = l; j <= n; j++) {\n              r = r + H[i * this.n + j] * H[j * n + n];\n            }\n            if (e[i] < 0) {\n              z = w;\n              s = r;\n            } else {\n              l = i;\n              if (e[i] === 0) {\n                if (w !== 0) {\n                  H[i * n + n] = -r / w;\n                } else {\n                  H[i * n + n] = -r / (eps * norm);\n                }\n              } else {\n                x = H[i * n + i + 1];\n                y = H[(i + 1) * n + i];\n                q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n                t = (x * s - z * r) / q;\n                H[i * n + n] = t;\n                if (Math.abs(x) > Math.abs(z)) {\n                  H[(i + 1) * n + n] = (-r - w * t) / x;\n                } else {\n                  H[(i + 1) * n + n] = (-s - y * t) / z;\n                }\n              }\n              t = Math.abs(H[i * n + n]);\n              if (eps * t * t > 1) {\n                for (j = i; j <= n; j++) {\n                  H[j * n + n] = H[j * n + n] / t;\n                }\n              }\n            }\n          }\n        } else if (q < 0) {\n          l = n - 1;\n          if (Math.abs(H[n * n + n - 1]) > Math.abs(H[(n - 1) * n + n])) {\n            H[(n - 1) * n + (n - 1)] = q / H[n * n + n - 1];\n            H[(n - 1) * n + n] = -(H[n * n + n] - p) / H[n * n + n - 1];\n          } else {\n            this.cdiv(0, -H[(n - 1) * n + n], H[(n - 1) * n + (n - 1)] - p, q);\n            H[(n - 1) * n + (n - 1)] = this.cdivr;\n            H[(n - 1) * n + n] = this.cdivi;\n          }\n          H[n * n + n - 1] = 0;\n          H[n * n + n] = 1;\n          for (i = n - 2; i >= 0; i--) {\n            var ra, sa, vr, vi;\n            ra = 0;\n            sa = 0;\n            for (j = l; j <= n; j++) {\n              ra = ra + H[i * this.n + j] * H[j * n + n - 1];\n              sa = sa + H[i * this.n + j] * H[j * n + n];\n            }\n            w = H[i * n + i] - p;\n            if (e[i] < 0) {\n              z = w;\n              r = ra;\n              s = sa;\n            } else {\n              l = i;\n              if (e[i] === 0) {\n                this.cdiv(-ra, -sa, w, q);\n                H[i * n + n - 1] = this.cdivr;\n                H[i * n + n] = this.cdivi;\n              } else {\n                x = H[i * n + i + 1];\n                y = H[(i + 1) * n + i];\n                vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n                vi = (d[i] - p) * 2 * q;\n                if (vr === 0 && vi === 0) {\n                  vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));\n                }\n                this.cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);\n                H[i * n + n - 1] = this.cdivr;\n                H[i * n + n] = this.cdivi;\n                if (Math.abs(x) > Math.abs(z) + Math.abs(q)) {\n                  H[(i + 1) * n + n - 1] = (-ra - w * H[i * n + n - 1] + q * H[i * n + n]) / x;\n                  H[(i + 1) * n + n] = (-sa - w * H[i * n + n] - q * H[i * n + n - 1]) / x;\n                } else {\n                  this.cdiv(-r - y * H[i * n + n - 1], -s - y * H[i * n + n], z, q);\n                  H[(i + 1) * n + n - 1] = this.cdivr;\n                  H[(i + 1) * n + n] = this.cdivi;\n                }\n              }\n              t = Math.max(Math.abs(H[i * n + n - 1]), Math.abs(H[i * n + n]));\n              if (eps * t * t > 1) {\n                for (j = i; j <= n; j++) {\n                  H[j * n + n - 1] = H[j * n + n - 1] / t;\n                  H[j * n + n] = H[j * n + n] / t;\n                }\n              }\n            }\n          }\n        }\n      }\n      for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n          for (j = i; j < nn; j++) {\n            V[i * this.n + j] = H[i * this.n + j];\n          }\n        }\n      }\n      for (j = nn - 1; j >= low; j--) {\n        for (i = low; i <= high; i++) {\n          z = 0;\n          for (k = low; k <= Math.min(j, high); k++) {\n            z = z + V[i * n + k] * H[k * n + j];\n          }\n          V[i * this.n + j] = z;\n        }\n      }\n    }\n  };\n  return EigenvalueDecomposition;\n});","\ndefine('DOT/LinearFunction',['require','DOT/dot','DOT/Util'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  require('DOT/Util');\n  dot.LinearFunction = function LinearFunction(a1, a2, b1, b2, clamp) {\n    clamp = _.isUndefined(clamp) ? false : clamp;\n    var map = function (a1, a2, b1, b2, a3, clamp) {\n      var b3 = dot.Util.linear(a1, a2, b1, b2, a3);\n      if (clamp) {\n        var max = Math.max(b1, b2);\n        var min = Math.min(b1, b2);\n        b3 = dot.Util.clamp(b3, min, max);\n      }\n      return b3;\n    };\n    var evaluate = function (a3) {\n      return map(a1, a2, b1, b2, a3, clamp);\n    };\n    evaluate.inverse = function (b3) {\n      return map(b1, b2, a1, a2, b3, clamp);\n    };\n    return evaluate;\n  };\n  return dot.LinearFunction;\n});","\ndefine('DOT/LUDecomposition',['require','DOT/dot'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  var Float32Array = window.Float32Array || Array;\n  dot.LUDecomposition = function LUDecomposition(matrix) {\n    var i, j, k;\n    this.matrix = matrix;\n    this.LU = matrix.getArrayCopy();\n    var LU = this.LU;\n    this.m = matrix.getRowDimension();\n    var m = this.m;\n    this.n = matrix.getColumnDimension();\n    var n = this.n;\n    this.piv = new Uint32Array(m);\n    for (i = 0; i < m; i++) {\n      this.piv[i] = i;\n    }\n    this.pivsign = 1;\n    var LUcolj = new Float32Array(m);\n    for (j = 0; j < n; j++) {\n      for (i = 0; i < m; i++) {\n        LUcolj[i] = LU[matrix.index(i, j)];\n      }\n      for (i = 0; i < m; i++) {\n        var kmax = Math.min(i, j);\n        var s = 0;\n        for (k = 0; k < kmax; k++) {\n          var ik = matrix.index(i, k);\n          s += LU[ik] * LUcolj[k];\n        }\n        LUcolj[i] -= s;\n        LU[matrix.index(i, j)] = LUcolj[i];\n      }\n      var p = j;\n      for (i = j + 1; i < m; i++) {\n        if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n          p = i;\n        }\n      }\n      if (p !== j) {\n        for (k = 0; k < n; k++) {\n          var pk = matrix.index(p, k);\n          var jk = matrix.index(j, k);\n          var t = LU[pk];\n          LU[pk] = LU[jk];\n          LU[jk] = t;\n        }\n        k = this.piv[p];\n        this.piv[p] = this.piv[j];\n        this.piv[j] = k;\n        this.pivsign = -this.pivsign;\n      }\n      if (j < m && LU[this.matrix.index(j, j)] !== 0) {\n        for (i = j + 1; i < m; i++) {\n          LU[matrix.index(i, j)] /= LU[matrix.index(j, j)];\n        }\n      }\n    }\n  };\n  var LUDecomposition = dot.LUDecomposition;\n  LUDecomposition.prototype = {\n    constructor: LUDecomposition,\n    isNonsingular: function () {\n      for (var j = 0; j < this.n; j++) {\n        var index = this.matrix.index(j, j);\n        if (this.LU[index] === 0) {\n          return false;\n        }\n      }\n      return true;\n    },\n    getL: function () {\n      var result = new dot.Matrix(this.m, this.n);\n      for (var i = 0; i < this.m; i++) {\n        for (var j = 0; j < this.n; j++) {\n          if (i > j) {\n            result.entries[result.index(i, j)] = this.LU[this.matrix.index(i, j)];\n          } else if (i === j) {\n            result.entries[result.index(i, j)] = 1;\n          } else {\n            result.entries[result.index(i, j)] = 0;\n          }\n        }\n      }\n      return result;\n    },\n    getU: function () {\n      var result = new dot.Matrix(this.n, this.n);\n      for (var i = 0; i < this.n; i++) {\n        for (var j = 0; j < this.n; j++) {\n          if (i <= j) {\n            result.entries[result.index(i, j)] = this.LU[this.matrix.index(i, j)];\n          } else {\n            result.entries[result.index(i, j)] = 0;\n          }\n        }\n      }\n      return result;\n    },\n    getPivot: function () {\n      var p = new Uint32Array(this.m);\n      for (var i = 0; i < this.m; i++) {\n        p[i] = this.piv[i];\n      }\n      return p;\n    },\n    getDoublePivot: function () {\n      var vals = new Float32Array(this.m);\n      for (var i = 0; i < this.m; i++) {\n        vals[i] = this.piv[i];\n      }\n      return vals;\n    },\n    det: function () {\n      if (this.m !== this.n) {\n        throw new Error('Matrix must be square.');\n      }\n      var d = this.pivsign;\n      for (var j = 0; j < this.n; j++) {\n        d *= this.LU[this.matrix.index(j, j)];\n      }\n      return d;\n    },\n    solve: function (matrix) {\n      var i, j, k;\n      if (matrix.getRowDimension() !== this.m) {\n        throw new Error('Matrix row dimensions must agree.');\n      }\n      if (!this.isNonsingular()) {\n        throw new Error('Matrix is singular.');\n      }\n      var nx = matrix.getColumnDimension();\n      var Xmat = matrix.getArrayRowMatrix(this.piv, 0, nx - 1);\n      for (k = 0; k < this.n; k++) {\n        for (i = k + 1; i < this.n; i++) {\n          for (j = 0; j < nx; j++) {\n            Xmat.entries[Xmat.index(i, j)] -= Xmat.entries[Xmat.index(k, j)] * this.LU[this.matrix.index(i, k)];\n          }\n        }\n      }\n      for (k = this.n - 1; k >= 0; k--) {\n        for (j = 0; j < nx; j++) {\n          Xmat.entries[Xmat.index(k, j)] /= this.LU[this.matrix.index(k, k)];\n        }\n        for (i = 0; i < k; i++) {\n          for (j = 0; j < nx; j++) {\n            Xmat.entries[Xmat.index(i, j)] -= Xmat.entries[Xmat.index(k, j)] * this.LU[this.matrix.index(i, k)];\n          }\n        }\n      }\n      return Xmat;\n    }\n  };\n  return LUDecomposition;\n});","\ndefine('PHET_CORE/isArray',['require','PHET_CORE/core'],function (require) {\n  'use strict';\n  var core = require('PHET_CORE/core');\n  var isArray = core.isArray = function isArray(array) {\n      return Object.prototype.toString.call(array) === '[object Array]';\n    };\n  return isArray;\n});","\ndefine('DOT/SingularValueDecomposition',['require','DOT/dot'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  var Float32Array = window.Float32Array || Array;\n  dot.SingularValueDecomposition = function SingularValueDecomposition(matrix) {\n    this.matrix = matrix;\n    var Arg = matrix;\n    var A = Arg.getArrayCopy();\n    this.m = Arg.getRowDimension();\n    this.n = Arg.getColumnDimension();\n    var m = this.m;\n    var n = this.n;\n    var min = Math.min;\n    var max = Math.max;\n    var pow = Math.pow;\n    var abs = Math.abs;\n    var nu = min(m, n);\n    this.s = new Float32Array(min(m + 1, n));\n    var s = this.s;\n    this.U = new Float32Array(m * nu);\n    var U = this.U;\n    this.V = new Float32Array(n * n);\n    var V = this.V;\n    var e = new Float32Array(n);\n    var work = new Float32Array(m);\n    var wantu = true;\n    var wantv = true;\n    var i, j, k, t, f;\n    var cs, sn;\n    var hypot = dot.Matrix.hypot;\n    var nct = min(m - 1, n);\n    var nrt = max(0, min(n - 2, m));\n    for (k = 0; k < max(nct, nrt); k++) {\n      if (k < nct) {\n        s[k] = 0;\n        for (i = k; i < m; i++) {\n          s[k] = hypot(s[k], A[i * n + k]);\n        }\n        if (s[k] !== 0) {\n          if (A[k * n + k] < 0) {\n            s[k] = -s[k];\n          }\n          for (i = k; i < m; i++) {\n            A[i * n + k] /= s[k];\n          }\n          A[k * n + k] += 1;\n        }\n        s[k] = -s[k];\n      }\n      for (j = k + 1; j < n; j++) {\n        if (k < nct && s[k] !== 0) {\n          t = 0;\n          for (i = k; i < m; i++) {\n            t += A[i * n + k] * A[i * n + j];\n          }\n          t = -t / A[k * n + k];\n          for (i = k; i < m; i++) {\n            A[i * n + j] += t * A[i * n + k];\n          }\n        }\n        e[j] = A[k * n + j];\n      }\n      if (wantu && k < nct) {\n        for (i = k; i < m; i++) {\n          U[i * nu + k] = A[i * n + k];\n        }\n      }\n      if (k < nrt) {\n        e[k] = 0;\n        for (i = k + 1; i < n; i++) {\n          e[k] = hypot(e[k], e[i]);\n        }\n        if (e[k] !== 0) {\n          if (e[k + 1] < 0) {\n            e[k] = -e[k];\n          }\n          for (i = k + 1; i < n; i++) {\n            e[i] /= e[k];\n          }\n          e[k + 1] += 1;\n        }\n        e[k] = -e[k];\n        if (k + 1 < m && e[k] !== 0) {\n          for (i = k + 1; i < m; i++) {\n            work[i] = 0;\n          }\n          for (j = k + 1; j < n; j++) {\n            for (i = k + 1; i < m; i++) {\n              work[i] += e[j] * A[i * n + j];\n            }\n          }\n          for (j = k + 1; j < n; j++) {\n            t = -e[j] / e[k + 1];\n            for (i = k + 1; i < m; i++) {\n              A[i * n + j] += t * work[i];\n            }\n          }\n        }\n        if (wantv) {\n          for (i = k + 1; i < n; i++) {\n            V[i * n + k] = e[i];\n          }\n        }\n      }\n    }\n    var p = min(n, m + 1);\n    if (nct < n) {\n      s[nct] = A[nct * n + nct];\n    }\n    if (m < p) {\n      s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n      e[nrt] = A[nrt * n + p - 1];\n    }\n    e[p - 1] = 0;\n    if (wantu) {\n      for (j = nct; j < nu; j++) {\n        for (i = 0; i < m; i++) {\n          U[i * nu + j] = 0;\n        }\n        U[j * nu + j] = 1;\n      }\n      for (k = nct - 1; k >= 0; k--) {\n        if (s[k] !== 0) {\n          for (j = k + 1; j < nu; j++) {\n            t = 0;\n            for (i = k; i < m; i++) {\n              t += U[i * nu + k] * U[i * nu + j];\n            }\n            t = -t / U[k * nu + k];\n            for (i = k; i < m; i++) {\n              U[i * nu + j] += t * U[i * nu + k];\n            }\n          }\n          for (i = k; i < m; i++) {\n            U[i * nu + k] = -U[i * nu + k];\n          }\n          U[k * nu + k] = 1 + U[k * nu + k];\n          for (i = 0; i < k - 1; i++) {\n            U[i * nu + k] = 0;\n          }\n        } else {\n          for (i = 0; i < m; i++) {\n            U[i * nu + k] = 0;\n          }\n          U[k * nu + k] = 1;\n        }\n      }\n    }\n    if (wantv) {\n      for (k = n - 1; k >= 0; k--) {\n        if (k < nrt && e[k] !== 0) {\n          for (j = k + 1; j < nu; j++) {\n            t = 0;\n            for (i = k + 1; i < n; i++) {\n              t += V[i * n + k] * V[i * n + j];\n            }\n            t = -t / V[(k + 1) * n + k];\n            for (i = k + 1; i < n; i++) {\n              V[i * n + j] += t * V[i * n + k];\n            }\n          }\n        }\n        for (i = 0; i < n; i++) {\n          V[i * n + k] = 0;\n        }\n        V[k * n + k] = 1;\n      }\n    }\n    var pp = p - 1;\n    var iter = 0;\n    var eps = pow(2, -52);\n    var tiny = pow(2, -966);\n    while (p > 0) {\n      var kase;\n      for (k = p - 2; k >= -1; k--) {\n        if (k === -1) {\n          break;\n        }\n        if (abs(e[k]) <= tiny + eps * (abs(s[k]) + abs(s[k + 1]))) {\n          e[k] = 0;\n          break;\n        }\n      }\n      if (k === p - 2) {\n        kase = 4;\n      } else {\n        var ks;\n        for (ks = p - 1; ks >= k; ks--) {\n          if (ks === k) {\n            break;\n          }\n          t = (ks !== p ? abs(e[ks]) : 0) + (ks !== k + 1 ? abs(e[ks - 1]) : 0);\n          if (abs(s[ks]) <= tiny + eps * t) {\n            s[ks] = 0;\n            break;\n          }\n        }\n        if (ks === k) {\n          kase = 3;\n        } else if (ks === p - 1) {\n          kase = 1;\n        } else {\n          kase = 2;\n          k = ks;\n        }\n      }\n      k++;\n      switch (kase) {\n      case 1: {\n          f = e[p - 2];\n          e[p - 2] = 0;\n          for (j = p - 2; j >= k; j--) {\n            t = hypot(s[j], f);\n            cs = s[j] / t;\n            sn = f / t;\n            s[j] = t;\n            if (j !== k) {\n              f = -sn * e[j - 1];\n              e[j - 1] = cs * e[j - 1];\n            }\n            if (wantv) {\n              for (i = 0; i < n; i++) {\n                t = cs * V[i * n + j] + sn * V[i * n + p - 1];\n                V[i * n + p - 1] = -sn * V[i * n + j] + cs * V[i * n + p - 1];\n                V[i * n + j] = t;\n              }\n            }\n          }\n        }\n        break;\n      case 2: {\n          f = e[k - 1];\n          e[k - 1] = 0;\n          for (j = k; j < p; j++) {\n            t = hypot(s[j], f);\n            cs = s[j] / t;\n            sn = f / t;\n            s[j] = t;\n            f = -sn * e[j];\n            e[j] = cs * e[j];\n            if (wantu) {\n              for (i = 0; i < m; i++) {\n                t = cs * U[i * nu + j] + sn * U[i * nu + k - 1];\n                U[i * nu + k - 1] = -sn * U[i * nu + j] + cs * U[i * nu + k - 1];\n                U[i * nu + j] = t;\n              }\n            }\n          }\n        }\n        break;\n      case 3: {\n          var scale = max(max(max(max(abs(s[p - 1]), abs(s[p - 2])), abs(e[p - 2])), abs(s[k])), abs(e[k]));\n          var sp = s[p - 1] / scale;\n          var spm1 = s[p - 2] / scale;\n          var epm1 = e[p - 2] / scale;\n          var sk = s[k] / scale;\n          var ek = e[k] / scale;\n          var b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n          var c = sp * epm1 * (sp * epm1);\n          var shift = 0;\n          if (b !== 0 || c !== 0) {\n            shift = Math.sqrt(b * b + c);\n            if (b < 0) {\n              shift = -shift;\n            }\n            shift = c / (b + shift);\n          }\n          f = (sk + sp) * (sk - sp) + shift;\n          var g = sk * ek;\n          for (j = k; j < p - 1; j++) {\n            t = hypot(f, g);\n            cs = f / t;\n            sn = g / t;\n            if (j !== k) {\n              e[j - 1] = t;\n            }\n            f = cs * s[j] + sn * e[j];\n            e[j] = cs * e[j] - sn * s[j];\n            g = sn * s[j + 1];\n            s[j + 1] = cs * s[j + 1];\n            if (wantv) {\n              for (i = 0; i < n; i++) {\n                t = cs * V[i * n + j] + sn * V[i * n + j + 1];\n                V[i * n + j + 1] = -sn * V[i * n + j] + cs * V[i * n + j + 1];\n                V[i * n + j] = t;\n              }\n            }\n            t = hypot(f, g);\n            cs = f / t;\n            sn = g / t;\n            s[j] = t;\n            f = cs * e[j] + sn * s[j + 1];\n            s[j + 1] = -sn * e[j] + cs * s[j + 1];\n            g = sn * e[j + 1];\n            e[j + 1] = cs * e[j + 1];\n            if (wantu && j < m - 1) {\n              for (i = 0; i < m; i++) {\n                t = cs * U[i * nu + j] + sn * U[i * nu + j + 1];\n                U[i * nu + j + 1] = -sn * U[i * nu + j] + cs * U[i * nu + j + 1];\n                U[i * nu + j] = t;\n              }\n            }\n          }\n          e[p - 2] = f;\n          iter = iter + 1;\n        }\n        break;\n      case 4: {\n          if (s[k] <= 0) {\n            s[k] = s[k] < 0 ? -s[k] : 0;\n            if (wantv) {\n              for (i = 0; i <= pp; i++) {\n                V[i * n + k] = -V[i * n + k];\n              }\n            }\n          }\n          while (k < pp) {\n            if (s[k] >= s[k + 1]) {\n              break;\n            }\n            t = s[k];\n            s[k] = s[k + 1];\n            s[k + 1] = t;\n            if (wantv && k < n - 1) {\n              for (i = 0; i < n; i++) {\n                t = V[i * n + k + 1];\n                V[i * n + k + 1] = V[i * n + k];\n                V[i * n + k] = t;\n              }\n            }\n            if (wantu && k < m - 1) {\n              for (i = 0; i < m; i++) {\n                t = U[i * nu + k + 1];\n                U[i * nu + k + 1] = U[i * nu + k];\n                U[i * nu + k] = t;\n              }\n            }\n            k++;\n          }\n          iter = 0;\n          p--;\n        }\n        break;\n      }\n    }\n  };\n  var SingularValueDecomposition = dot.SingularValueDecomposition;\n  SingularValueDecomposition.prototype = {\n    constructor: SingularValueDecomposition,\n    getU: function () {\n      return new dot.Matrix(this.m, Math.min(this.m + 1, this.n), this.U, true);\n    },\n    getV: function () {\n      return new dot.Matrix(this.n, this.n, this.V, true);\n    },\n    getSingularValues: function () {\n      return this.s;\n    },\n    getS: function () {\n      var result = new dot.Matrix(this.n, this.n);\n      for (var i = 0; i < this.n; i++) {\n        for (var j = 0; j < this.n; j++) {\n          result.entries[result.index(i, j)] = 0;\n        }\n        result.entries[result.index(i, i)] = this.s[i];\n      }\n      return result;\n    },\n    norm2: function () {\n      return this.s[0];\n    },\n    cond: function () {\n      return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n    },\n    rank: function () {\n      var eps = Math.pow(2, -23);\n      var tol = Math.max(this.m, this.n) * this.s[0] * eps;\n      var r = 0;\n      for (var i = 0; i < this.s.length; i++) {\n        if (this.s[i] > tol) {\n          r++;\n        }\n      }\n      return r;\n    }\n  };\n});","\ndefine('DOT/QRDecomposition',['require','DOT/dot'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  var Float32Array = window.Float32Array || Array;\n  dot.QRDecomposition = function QRDecomposition(matrix) {\n    this.matrix = matrix;\n    this.QR = matrix.getArrayCopy();\n    var QR = this.QR;\n    this.m = matrix.getRowDimension();\n    var m = this.m;\n    this.n = matrix.getColumnDimension();\n    var n = this.n;\n    this.Rdiag = new Float32Array(n);\n    var i, j, k;\n    for (k = 0; k < n; k++) {\n      var nrm = 0;\n      for (i = k; i < m; i++) {\n        nrm = dot.Matrix.hypot(nrm, QR[this.matrix.index(i, k)]);\n      }\n      if (nrm !== 0) {\n        if (QR[this.matrix.index(k, k)] < 0) {\n          nrm = -nrm;\n        }\n        for (i = k; i < m; i++) {\n          QR[this.matrix.index(i, k)] /= nrm;\n        }\n        QR[this.matrix.index(k, k)] += 1;\n        for (j = k + 1; j < n; j++) {\n          var s = 0;\n          for (i = k; i < m; i++) {\n            s += QR[this.matrix.index(i, k)] * QR[this.matrix.index(i, j)];\n          }\n          s = -s / QR[this.matrix.index(k, k)];\n          for (i = k; i < m; i++) {\n            QR[this.matrix.index(i, j)] += s * QR[this.matrix.index(i, k)];\n          }\n        }\n      }\n      this.Rdiag[k] = -nrm;\n    }\n  };\n  var QRDecomposition = dot.QRDecomposition;\n  QRDecomposition.prototype = {\n    constructor: QRDecomposition,\n    isFullRank: function () {\n      for (var j = 0; j < this.n; j++) {\n        if (this.Rdiag[j] === 0) {\n          return false;\n        }\n      }\n      return true;\n    },\n    getH: function () {\n      var result = new dot.Matrix(this.m, this.n);\n      for (var i = 0; i < this.m; i++) {\n        for (var j = 0; j < this.n; j++) {\n          if (i >= j) {\n            result.entries[result.index(i, j)] = this.QR[this.matrix.index(i, j)];\n          } else {\n            result.entries[result.index(i, j)] = 0;\n          }\n        }\n      }\n      return result;\n    },\n    getR: function () {\n      var result = new dot.Matrix(this.n, this.n);\n      for (var i = 0; i < this.n; i++) {\n        for (var j = 0; j < this.n; j++) {\n          if (i < j) {\n            result.entries[result.index(i, j)] = this.QR[this.matrix.index(i, j)];\n          } else if (i === j) {\n            result.entries[result.index(i, j)] = this.Rdiag[i];\n          } else {\n            result.entries[result.index(i, j)] = 0;\n          }\n        }\n      }\n      return result;\n    },\n    getQ: function () {\n      var i, j, k;\n      var result = new dot.Matrix(this.m, this.n);\n      for (k = this.n - 1; k >= 0; k--) {\n        for (i = 0; i < this.m; i++) {\n          result.entries[result.index(i, k)] = 0;\n        }\n        result.entries[result.index(k, k)] = 1;\n        for (j = k; j < this.n; j++) {\n          if (this.QR[this.matrix.index(k, k)] !== 0) {\n            var s = 0;\n            for (i = k; i < this.m; i++) {\n              s += this.QR[this.matrix.index(i, k)] * result.entries[result.index(i, j)];\n            }\n            s = -s / this.QR[this.matrix.index(k, k)];\n            for (i = k; i < this.m; i++) {\n              result.entries[result.index(i, j)] += s * this.QR[this.matrix.index(i, k)];\n            }\n          }\n        }\n      }\n      return result;\n    },\n    solve: function (matrix) {\n      if (matrix.getRowDimension() !== this.m) {\n        throw new Error('Matrix row dimensions must agree.');\n      }\n      if (!this.isFullRank()) {\n        throw new Error('Matrix is rank deficient.');\n      }\n      var i, j, k;\n      var nx = matrix.getColumnDimension();\n      var X = matrix.getArrayCopy();\n      for (k = 0; k < this.n; k++) {\n        for (j = 0; j < nx; j++) {\n          var s = 0;\n          for (i = k; i < this.m; i++) {\n            s += this.QR[this.matrix.index(i, k)] * X[matrix.index(i, j)];\n          }\n          s = -s / this.QR[this.matrix.index(k, k)];\n          for (i = k; i < this.m; i++) {\n            X[matrix.index(i, j)] += s * this.QR[this.matrix.index(i, k)];\n          }\n        }\n      }\n      for (k = this.n - 1; k >= 0; k--) {\n        for (j = 0; j < nx; j++) {\n          X[matrix.index(k, j)] /= this.Rdiag[k];\n        }\n        for (i = 0; i < k; i++) {\n          for (j = 0; j < nx; j++) {\n            X[matrix.index(i, j)] -= X[matrix.index(k, j)] * this.QR[this.matrix.index(i, k)];\n          }\n        }\n      }\n      return new dot.Matrix(X, this.n, nx).getMatrix(0, this.n - 1, 0, nx - 1);\n    }\n  };\n  return QRDecomposition;\n});","\ndefine('DOT/Matrix',['require','DOT/dot','PHET_CORE/isArray','DOT/SingularValueDecomposition','DOT/LUDecomposition','DOT/QRDecomposition','DOT/EigenvalueDecomposition','DOT/Vector2','DOT/Vector3','DOT/Vector4'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  var Float32Array = window.Float32Array || Array;\n  var isArray = require('PHET_CORE/isArray');\n  require('DOT/SingularValueDecomposition');\n  require('DOT/LUDecomposition');\n  require('DOT/QRDecomposition');\n  require('DOT/EigenvalueDecomposition');\n  require('DOT/Vector2');\n  require('DOT/Vector3');\n  require('DOT/Vector4');\n  dot.Matrix = function Matrix(m, n, filler, fast) {\n    this.m = m;\n    this.n = n;\n    var size = m * n;\n    this.size = size;\n    var i;\n    if (fast) {\n      this.entries = filler;\n    } else {\n      if (!filler) {\n        filler = 0;\n      }\n      this.entries = new Float32Array(size);\n      if (isArray(filler)) {\n        null;\n        for (i = 0; i < size; i++) {\n          this.entries[i] = filler[i];\n        }\n      } else {\n        for (i = 0; i < size; i++) {\n          this.entries[i] = filler;\n        }\n      }\n    }\n  };\n  var Matrix = dot.Matrix;\n  Matrix.hypot = function hypot(a, b) {\n    var r;\n    if (Math.abs(a) > Math.abs(b)) {\n      r = b / a;\n      r = Math.abs(a) * Math.sqrt(1 + r * r);\n    } else if (b !== 0) {\n      r = a / b;\n      r = Math.abs(b) * Math.sqrt(1 + r * r);\n    } else {\n      r = 0;\n    }\n    return r;\n  };\n  Matrix.prototype = {\n    constructor: Matrix,\n    copy: function () {\n      var result = new Matrix(this.m, this.n);\n      for (var i = 0; i < this.size; i++) {\n        result.entries[i] = this.entries[i];\n      }\n      return result;\n    },\n    getArray: function () {\n      return this.entries;\n    },\n    getArrayCopy: function () {\n      return new Float32Array(this.entries);\n    },\n    getRowDimension: function () {\n      return this.m;\n    },\n    getColumnDimension: function () {\n      return this.n;\n    },\n    index: function (i, j) {\n      return i * this.n + j;\n    },\n    get: function (i, j) {\n      return this.entries[this.index(i, j)];\n    },\n    set: function (i, j, s) {\n      this.entries[this.index(i, j)] = s;\n    },\n    getMatrix: function (i0, i1, j0, j1) {\n      var result = new Matrix(i1 - i0 + 1, j1 - j0 + 1);\n      for (var i = i0; i <= i1; i++) {\n        for (var j = j0; j <= j1; j++) {\n          result.entries[result.index(i - i0, j - j0)] = this.entries[this.index(i, j)];\n        }\n      }\n      return result;\n    },\n    getArrayRowMatrix: function (r, j0, j1) {\n      var result = new Matrix(r.length, j1 - j0 + 1);\n      for (var i = 0; i < r.length; i++) {\n        for (var j = j0; j <= j1; j++) {\n          result.entries[result.index(i, j - j0)] = this.entries[this.index(r[i], j)];\n        }\n      }\n      return result;\n    },\n    transpose: function () {\n      var result = new Matrix(this.n, this.m);\n      for (var i = 0; i < this.m; i++) {\n        for (var j = 0; j < this.n; j++) {\n          result.entries[result.index(j, i)] = this.entries[this.index(i, j)];\n        }\n      }\n      return result;\n    },\n    norm1: function () {\n      var f = 0;\n      for (var j = 0; j < this.n; j++) {\n        var s = 0;\n        for (var i = 0; i < this.m; i++) {\n          s += Math.abs(this.entries[this.index(i, j)]);\n        }\n        f = Math.max(f, s);\n      }\n      return f;\n    },\n    norm2: function () {\n      return new dot.SingularValueDecomposition(this).norm2();\n    },\n    normInf: function () {\n      var f = 0;\n      for (var i = 0; i < this.m; i++) {\n        var s = 0;\n        for (var j = 0; j < this.n; j++) {\n          s += Math.abs(this.entries[this.index(i, j)]);\n        }\n        f = Math.max(f, s);\n      }\n      return f;\n    },\n    normF: function () {\n      var f = 0;\n      for (var i = 0; i < this.m; i++) {\n        for (var j = 0; j < this.n; j++) {\n          f = Matrix.hypot(f, this.entries[this.index(i, j)]);\n        }\n      }\n      return f;\n    },\n    uminus: function () {\n      var result = new Matrix(this.m, this.n);\n      for (var i = 0; i < this.m; i++) {\n        for (var j = 0; j < this.n; j++) {\n          result.entries[result.index(i, j)] = -this.entries[this.index(i, j)];\n        }\n      }\n      return result;\n    },\n    plus: function (matrix) {\n      this.checkMatrixDimensions(matrix);\n      var result = new Matrix(this.m, this.n);\n      for (var i = 0; i < this.m; i++) {\n        for (var j = 0; j < this.n; j++) {\n          var index = result.index(i, j);\n          result.entries[index] = this.entries[index] + matrix.entries[index];\n        }\n      }\n      return result;\n    },\n    plusEquals: function (matrix) {\n      this.checkMatrixDimensions(matrix);\n      var result = new Matrix(this.m, this.n);\n      for (var i = 0; i < this.m; i++) {\n        for (var j = 0; j < this.n; j++) {\n          var index = result.index(i, j);\n          this.entries[index] = this.entries[index] + matrix.entries[index];\n        }\n      }\n      return this;\n    },\n    minus: function (matrix) {\n      this.checkMatrixDimensions(matrix);\n      var result = new Matrix(this.m, this.n);\n      for (var i = 0; i < this.m; i++) {\n        for (var j = 0; j < this.n; j++) {\n          var index = this.index(i, j);\n          result.entries[index] = this.entries[index] - matrix.entries[index];\n        }\n      }\n      return result;\n    },\n    minusEquals: function (matrix) {\n      this.checkMatrixDimensions(matrix);\n      for (var i = 0; i < this.m; i++) {\n        for (var j = 0; j < this.n; j++) {\n          var index = this.index(i, j);\n          this.entries[index] = this.entries[index] - matrix.entries[index];\n        }\n      }\n      return this;\n    },\n    arrayTimes: function (matrix) {\n      this.checkMatrixDimensions(matrix);\n      var result = new Matrix(this.m, this.n);\n      for (var i = 0; i < this.m; i++) {\n        for (var j = 0; j < this.n; j++) {\n          var index = result.index(i, j);\n          result.entries[index] = this.entries[index] * matrix.entries[index];\n        }\n      }\n      return result;\n    },\n    arrayTimesEquals: function (matrix) {\n      this.checkMatrixDimensions(matrix);\n      for (var i = 0; i < this.m; i++) {\n        for (var j = 0; j < this.n; j++) {\n          var index = this.index(i, j);\n          this.entries[index] = this.entries[index] * matrix.entries[index];\n        }\n      }\n      return this;\n    },\n    arrayRightDivide: function (matrix) {\n      this.checkMatrixDimensions(matrix);\n      var result = new Matrix(this.m, this.n);\n      for (var i = 0; i < this.m; i++) {\n        for (var j = 0; j < this.n; j++) {\n          var index = this.index(i, j);\n          result.entries[index] = this.entries[index] / matrix.entries[index];\n        }\n      }\n      return result;\n    },\n    arrayRightDivideEquals: function (matrix) {\n      this.checkMatrixDimensions(matrix);\n      for (var i = 0; i < this.m; i++) {\n        for (var j = 0; j < this.n; j++) {\n          var index = this.index(i, j);\n          this.entries[index] = this.entries[index] / matrix.entries[index];\n        }\n      }\n      return this;\n    },\n    arrayLeftDivide: function (matrix) {\n      this.checkMatrixDimensions(matrix);\n      var result = new Matrix(this.m, this.n);\n      for (var i = 0; i < this.m; i++) {\n        for (var j = 0; j < this.n; j++) {\n          var index = this.index(i, j);\n          result.entries[index] = matrix.entries[index] / this.entries[index];\n        }\n      }\n      return result;\n    },\n    arrayLeftDivideEquals: function (matrix) {\n      this.checkMatrixDimensions(matrix);\n      for (var i = 0; i < this.m; i++) {\n        for (var j = 0; j < this.n; j++) {\n          var index = this.index(i, j);\n          this.entries[index] = matrix.entries[index] / this.entries[index];\n        }\n      }\n      return this;\n    },\n    times: function (matrixOrScalar) {\n      var result;\n      var i, j, k, s;\n      var matrix;\n      if (matrixOrScalar.isMatrix) {\n        matrix = matrixOrScalar;\n        if (matrix.m !== this.n) {\n          throw new Error('Matrix inner dimensions must agree.');\n        }\n        result = new Matrix(this.m, matrix.n);\n        var matrixcolj = new Float32Array(this.n);\n        for (j = 0; j < matrix.n; j++) {\n          for (k = 0; k < this.n; k++) {\n            matrixcolj[k] = matrix.entries[matrix.index(k, j)];\n          }\n          for (i = 0; i < this.m; i++) {\n            s = 0;\n            for (k = 0; k < this.n; k++) {\n              s += this.entries[this.index(i, k)] * matrixcolj[k];\n            }\n            result.entries[result.index(i, j)] = s;\n          }\n        }\n        return result;\n      } else {\n        s = matrixOrScalar;\n        result = new Matrix(this.m, this.n);\n        for (i = 0; i < this.m; i++) {\n          for (j = 0; j < this.n; j++) {\n            result.entries[result.index(i, j)] = s * this.entries[this.index(i, j)];\n          }\n        }\n        return result;\n      }\n    },\n    timesEquals: function (s) {\n      for (var i = 0; i < this.m; i++) {\n        for (var j = 0; j < this.n; j++) {\n          var index = this.index(i, j);\n          this.entries[index] = s * this.entries[index];\n        }\n      }\n      return this;\n    },\n    solve: function (matrix) {\n      return this.m === this.n ? new dot.LUDecomposition(this).solve(matrix) : new dot.QRDecomposition(this).solve(matrix);\n    },\n    solveTranspose: function (matrix) {\n      return this.transpose().solve(matrix.transpose());\n    },\n    inverse: function () {\n      return this.solve(Matrix.identity(this.m, this.m));\n    },\n    det: function () {\n      return new dot.LUDecomposition(this).det();\n    },\n    rank: function () {\n      return new dot.SingularValueDecomposition(this).rank();\n    },\n    cond: function () {\n      return new dot.SingularValueDecomposition(this).cond();\n    },\n    trace: function () {\n      var t = 0;\n      for (var i = 0; i < Math.min(this.m, this.n); i++) {\n        t += this.entries[this.index(i, i)];\n      }\n      return t;\n    },\n    checkMatrixDimensions: function (matrix) {\n      if (matrix.m !== this.m || matrix.n !== this.n) {\n        throw new Error('Matrix dimensions must agree.');\n      }\n    },\n    toString: function () {\n      var result = '';\n      result += 'dim: ' + this.getRowDimension() + 'x' + this.getColumnDimension() + '\\n';\n      for (var row = 0; row < this.getRowDimension(); row++) {\n        for (var col = 0; col < this.getColumnDimension(); col++) {\n          result += this.get(row, col) + ' ';\n        }\n        result += '\\n';\n      }\n      return result;\n    },\n    extractVector2: function (column) {\n      null;\n      return new dot.Vector2(this.get(0, column), this.get(1, column));\n    },\n    extractVector3: function (column) {\n      null;\n      return new dot.Vector3(this.get(0, column), this.get(1, column), this.get(2, column));\n    },\n    extractVector4: function (column) {\n      null;\n      return new dot.Vector4(this.get(0, column), this.get(1, column), this.get(2, column), this.get(3, column));\n    },\n    isMatrix: true\n  };\n  Matrix.identity = function (m, n) {\n    var result = new Matrix(m, n);\n    for (var i = 0; i < m; i++) {\n      for (var j = 0; j < n; j++) {\n        result.entries[result.index(i, j)] = i === j ? 1 : 0;\n      }\n    }\n    return result;\n  };\n  Matrix.rowVector2 = function (vector) {\n    return new Matrix(1, 2, [\n      vector.x,\n      vector.y\n    ]);\n  };\n  Matrix.rowVector3 = function (vector) {\n    return new Matrix(1, 3, [\n      vector.x,\n      vector.y,\n      vector.z\n    ]);\n  };\n  Matrix.rowVector4 = function (vector) {\n    return new Matrix(1, 4, [\n      vector.x,\n      vector.y,\n      vector.z,\n      vector.w\n    ]);\n  };\n  Matrix.rowVector = function (vector) {\n    if (vector.isVector2) {\n      return Matrix.rowVector2(vector);\n    } else if (vector.isVector3) {\n      return Matrix.rowVector3(vector);\n    } else if (vector.isVector4) {\n      return Matrix.rowVector4(vector);\n    } else {\n      throw new Error('undetected type of vector: ' + vector.toString());\n    }\n  };\n  Matrix.columnVector2 = function (vector) {\n    return new Matrix(2, 1, [\n      vector.x,\n      vector.y\n    ]);\n  };\n  Matrix.columnVector3 = function (vector) {\n    return new Matrix(3, 1, [\n      vector.x,\n      vector.y,\n      vector.z\n    ]);\n  };\n  Matrix.columnVector4 = function (vector) {\n    return new Matrix(4, 1, [\n      vector.x,\n      vector.y,\n      vector.z,\n      vector.w\n    ]);\n  };\n  Matrix.columnVector = function (vector) {\n    if (vector.isVector2) {\n      return Matrix.columnVector2(vector);\n    } else if (vector.isVector3) {\n      return Matrix.columnVector3(vector);\n    } else if (vector.isVector4) {\n      return Matrix.columnVector4(vector);\n    } else {\n      throw new Error('undetected type of vector: ' + vector.toString());\n    }\n  };\n  Matrix.fromVectors2 = function (vectors) {\n    var dimension = 2;\n    var n = vectors.length;\n    var data = new Float32Array(dimension * n);\n    for (var i = 0; i < n; i++) {\n      var vector = vectors[i];\n      data[i] = vector.x;\n      data[i + n] = vector.y;\n    }\n    return new Matrix(dimension, n, data, true);\n  };\n  Matrix.fromVectors3 = function (vectors) {\n    var dimension = 3;\n    var n = vectors.length;\n    var data = new Float32Array(dimension * n);\n    for (var i = 0; i < n; i++) {\n      var vector = vectors[i];\n      data[i] = vector.x;\n      data[i + n] = vector.y;\n      data[i + 2 * n] = vector.z;\n    }\n    return new Matrix(dimension, n, data, true);\n  };\n  Matrix.fromVectors4 = function (vectors) {\n    var dimension = 4;\n    var n = vectors.length;\n    var data = new Float32Array(dimension * n);\n    for (var i = 0; i < n; i++) {\n      var vector = vectors[i];\n      data[i] = vector.x;\n      data[i + n] = vector.y;\n      data[i + 2 * n] = vector.z;\n      data[i + 3 * n] = vector.w;\n    }\n    return new Matrix(dimension, n, data, true);\n  };\n  return Matrix;\n});","\ndefine('AXON/axon',['require'],function (require) {\n  'use strict';\n  var axon = {};\n  return axon;\n});","\ndefine('AXON/Property',['require','AXON/axon'],function (require) {\n  'use strict';\n  var axon = require('AXON/axon');\n  axon.Property = function Property(value) {\n    this.storeValue(value);\n    this.storeInitialValue(value);\n    this._observers = [];\n  };\n  axon.Property.prototype = {\n    get: function () {\n      return this._value;\n    },\n    set: function (value) {\n      if (!this.equalsValue(value)) {\n        this._setAndNotifyObservers(value);\n      }\n      return this;\n    },\n    equalsValue: function (value) {\n      return value === this._value;\n    },\n    storeValue: function (value) {\n      this._value = value;\n    },\n    storeInitialValue: function (value) {\n      this._initialValue = value;\n    },\n    _setAndNotifyObservers: function (value) {\n      var oldValue = this.get();\n      this.storeValue(value);\n      this._notifyObservers(oldValue);\n    },\n    _notifyObservers: function (oldValue) {\n      var value = this.get();\n      var observersCopy = this._observers.slice();\n      for (var i = 0; i < observersCopy.length; i++) {\n        observersCopy[i](value, oldValue);\n      }\n    },\n    notifyObserversUnsafe: function () {\n      var value = this.get();\n      for (var i = 0; i < this._observers.length; i++) {\n        this._observers[i](value);\n      }\n    },\n    reset: function () {\n      this.set(this._initialValue);\n    },\n    _set: function (value) {\n      return this.set.bind(this, value);\n    },\n    get value() {\n      return this.get();\n    },\n    set value(newValue) {\n      this.set(newValue);\n    },\n    link: function (observer) {\n      if (this._observers.indexOf(observer) === -1) {\n        this._observers.push(observer);\n        observer(this.get(), null);\n      }\n    },\n    unlink: function (observer) {\n      var index = this._observers.indexOf(observer);\n      if (index !== -1) {\n        this._observers.splice(index, 1);\n      }\n    },\n    lazyLink: function (observer) {\n      if (this._observers.indexOf(observer) === -1) {\n        this._observers.push(observer);\n      }\n    },\n    toString: function () {\n      return 'Property{' + this.get() + '}';\n    },\n    valueOf: function () {\n      return this.toString();\n    },\n    once: function (observer) {\n      var property = this;\n      var wrapper = function (newValue, oldValue) {\n        observer(newValue, oldValue);\n        property.unlink(wrapper);\n      };\n      this.lazyLink(wrapper);\n      return wrapper;\n    },\n    linkAttribute: function (object, attributeName) {\n      var handle = function (value) {\n        object[attributeName] = value;\n      };\n      this.link(handle);\n      return handle;\n    },\n    valueEquals: function (value) {\n      return new axon.DerivedProperty([this], function (propertyValue) {\n        return propertyValue === value;\n      });\n    },\n    and: function (otherProperty) {\n      return new axon.DerivedProperty([\n        this,\n        otherProperty\n      ], function (thisValue, otherValue) {\n        return thisValue && otherValue;\n      });\n    },\n    derivedNot: function () {\n      return new axon.DerivedProperty([this], function (thisValue) {\n        return !thisValue;\n      });\n    },\n    not: function () {\n      var parentProperty = this;\n      var childProperty = new axon.Property(!this.value);\n      var setParentToChild = function (value) {\n        childProperty.set(!value);\n      };\n      parentProperty.link(setParentToChild);\n      var setChildToParent = function (value) {\n        parentProperty.set(!value);\n      };\n      childProperty.link(setChildToParent);\n      childProperty.detach = function () {\n        parentProperty.unlink(setParentToChild);\n        childProperty.unlink(setChildToParent);\n      };\n      return childProperty;\n    },\n    debug: function (name) {\n      var listener = function (value) {\n        console.log(name, value);\n      };\n      this.link(listener);\n      return listener;\n    }\n  };\n  return axon.Property;\n});","\ndefine('DOT/ObservableBounds2',['require','DOT/dot','PHET_CORE/inherit','PHET_CORE/extend','PHET_CORE/Poolable','AXON/Property','DOT/Bounds2'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  var inherit = require('PHET_CORE/inherit');\n  var extend = require('PHET_CORE/extend');\n  var Poolable = require('PHET_CORE/Poolable');\n  var Property = require('AXON/Property');\n  require('DOT/Bounds2');\n  dot.ObservableBounds2 = function ObservableBounds2(minX, minY, maxX, maxY) {\n    dot.Bounds2.call(this, minX, minY, maxX, maxY);\n    this._oldValue = this.copy();\n    Property.call(this, this);\n  };\n  var ObservableBounds2 = dot.ObservableBounds2;\n  inherit(dot.Bounds2, ObservableBounds2, extend({}, Property.prototype, {\n    get: function () {\n      return this;\n    },\n    setMinMax: function (minX, minY, maxX, maxY) {\n      if (this.minX !== minX || this.minY !== minY || this.maxX !== maxX || this.maxY !== maxY) {\n        this._oldValue.minX = this.minX;\n        this._oldValue.minY = this.minY;\n        this._oldValue.maxX = this.maxX;\n        this._oldValue.maxY = this.maxY;\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n        this._notifyObservers(this._oldValue);\n      }\n      return this;\n    },\n    setMinX: function (minX) {\n      if (this.minX !== minX) {\n        this._oldValue.minX = this.minX;\n        this.minX = minX;\n        this._notifyObservers(this._oldValue);\n      }\n      return this;\n    },\n    setMinY: function (minY) {\n      if (this.minY !== minY) {\n        this._oldValue.minY = this.minY;\n        this.minY = minY;\n        this._notifyObservers(this._oldValue);\n      }\n      return this;\n    },\n    setMaxX: function (maxX) {\n      if (this.maxX !== maxX) {\n        this._oldValue.maxX = this.maxX;\n        this.maxX = maxX;\n        this._notifyObservers(this._oldValue);\n      }\n      return this;\n    },\n    setMaxY: function (maxY) {\n      if (this.maxY !== maxY) {\n        this._oldValue.maxY = this.maxY;\n        this.maxY = maxY;\n        this._notifyObservers(this._oldValue);\n      }\n      return this;\n    },\n    set: dot.Bounds2.prototype.set,\n    equalsValue: function (value) {\n      return this.equals(value);\n    },\n    storeValue: function (value) {\n    },\n    storeInitialValue: function (value) {\n      this._initialMinX = value.minX;\n      this._initialMinY = value.minY;\n      this._initialMaxX = value.maxX;\n      this._initialMaxY = value.maxY;\n    },\n    reset: function () {\n      this.setMinMax(this._initialMinX, this._initialMinY, this._initialMaxX, this._initialMaxY);\n    },\n    toString: function () {\n      return 'ObservableBounds2(' + this.minX + ', ' + this.minY + ', ' + this.maxX + ', ' + this.maxY + ')';\n    }\n  }));\n  Poolable(ObservableBounds2, {\n    defaultFactory: function () {\n      return new ObservableBounds2();\n    },\n    constructorDuplicateFactory: function (pool) {\n      return function (minX, minY, maxX, maxY) {\n        if (pool.length) {\n          return pool.pop().setMinMax(minX, minY, maxX, maxY);\n        } else {\n          return new ObservableBounds2(minX, minY, maxX, maxY);\n        }\n      };\n    }\n  });\n  return ObservableBounds2;\n});","\ndefine('DOT/ObservableMatrix3',['require','DOT/dot','PHET_CORE/inherit','PHET_CORE/extend','PHET_CORE/Poolable','AXON/Property','DOT/Matrix3'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  var inherit = require('PHET_CORE/inherit');\n  var extend = require('PHET_CORE/extend');\n  var Poolable = require('PHET_CORE/Poolable');\n  var Property = require('AXON/Property');\n  require('DOT/Matrix3');\n  dot.ObservableMatrix3 = function ObservableMatrix3(v00, v01, v02, v10, v11, v12, v20, v21, v22, type) {\n    dot.Matrix3.call(this, v00, v01, v02, v10, v11, v12, v20, v21, v22, type);\n    this._oldValue = this.copy();\n    this._skipChecks = false;\n    Property.call(this, this);\n  };\n  var ObservableMatrix3 = dot.ObservableMatrix3;\n  inherit(dot.Matrix3, ObservableMatrix3, extend({}, Property.prototype, {\n    get: function () {\n      return this;\n    },\n    rowMajor: function (v00, v01, v02, v10, v11, v12, v20, v21, v22, type) {\n      var skip = this._skipChecks;\n      var modified = skip || v00 !== this.entries[0] || v10 !== this.entries[1] || v20 !== this.entries[2] || v01 !== this.entries[3] || v11 !== this.entries[4] || v21 !== this.entries[5] || v02 !== this.entries[6] || v12 !== this.entries[7] || v22 !== this.entries[8] || type !== this.type;\n      if (modified) {\n        if (!skip && this._oldValue) {\n          this._oldValue.entries[0] = this.entries[0];\n          this._oldValue.entries[1] = this.entries[1];\n          this._oldValue.entries[2] = this.entries[2];\n          this._oldValue.entries[3] = this.entries[3];\n          this._oldValue.entries[4] = this.entries[4];\n          this._oldValue.entries[5] = this.entries[5];\n          this._oldValue.entries[6] = this.entries[6];\n          this._oldValue.entries[7] = this.entries[7];\n          this._oldValue.entries[8] = this.entries[8];\n          this._oldValue.type = this.type;\n        }\n        this.entries[0] = v00;\n        this.entries[1] = v10;\n        this.entries[2] = v20;\n        this.entries[3] = v01;\n        this.entries[4] = v11;\n        this.entries[5] = v21;\n        this.entries[6] = v02;\n        this.entries[7] = v12;\n        this.entries[8] = v22;\n        this.type = type === undefined ? v20 === 0 && v21 === 0 && v22 === 1 ? dot.Matrix3.Types.AFFINE : dot.Matrix3.Types.OTHER : type;\n        if (this._observers) {\n          this._notifyObservers(skip ? null : this._oldValue);\n        }\n      }\n      return this;\n    },\n    set: dot.Matrix3.prototype.set,\n    equalsValue: function (value) {\n      return this.equals(value);\n    },\n    storeValue: function (value) {\n    },\n    storeInitialValue: function (value) {\n      this._initial00 = value.m00();\n      this._initial01 = value.m01();\n      this._initial02 = value.m02();\n      this._initial10 = value.m10();\n      this._initial11 = value.m11();\n      this._initial12 = value.m12();\n      this._initial20 = value.m20();\n      this._initial21 = value.m21();\n      this._initial22 = value.m22();\n      this._initialType = value.type;\n    },\n    reset: function () {\n      this.rowMajor(this._initial00, this._initial01, this._initial02, this._initial10, this._initial11, this._initial12, this._initial20, this._initial21, this._initial22, this._initialType);\n    },\n    toString: dot.Matrix3.prototype.toString\n  }));\n  Poolable(ObservableMatrix3, {\n    defaultFactory: function () {\n      return new ObservableMatrix3();\n    },\n    constructorDuplicateFactory: function (pool) {\n      return function (v00, v01, v02, v10, v11, v12, v20, v21, v22, type) {\n        if (pool.length) {\n          return pool.pop().rowMajor(v00, v01, v02, v10, v11, v12, v20, v21, v22, type);\n        } else {\n          return new ObservableMatrix3(v00, v01, v02, v10, v11, v12, v20, v21, v22, type);\n        }\n      };\n    }\n  });\n  return ObservableMatrix3;\n});","\ndefine('DOT/ObservableVector2',['require','DOT/dot','PHET_CORE/inherit','PHET_CORE/extend','PHET_CORE/Poolable','AXON/Property','DOT/Vector2'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  var inherit = require('PHET_CORE/inherit');\n  var extend = require('PHET_CORE/extend');\n  var Poolable = require('PHET_CORE/Poolable');\n  var Property = require('AXON/Property');\n  require('DOT/Vector2');\n  dot.ObservableVector2 = function ObservableVector2(x, y) {\n    dot.Vector2.call(this, x, y);\n    this._oldValue = this.copy();\n    Property.call(this, this);\n  };\n  var ObservableVector2 = dot.ObservableVector2;\n  inherit(dot.Vector2, ObservableVector2, extend({}, Property.prototype, {\n    get: function () {\n      return this;\n    },\n    setXY: function (x, y) {\n      if (this.x !== x || this.y !== y) {\n        this._oldValue.x = this.x;\n        this._oldValue.y = this.y;\n        this.x = x;\n        this.y = y;\n        this._notifyObservers(this._oldValue);\n      }\n      return this;\n    },\n    setX: function (x) {\n      if (this.x !== x) {\n        this._oldValue.x = this.x;\n        this.x = x;\n        this._notifyObservers(this._oldValue);\n      }\n      return this;\n    },\n    setY: function (y) {\n      if (this.y !== y) {\n        this._oldValue.y = this.y;\n        this.y = y;\n        this._notifyObservers(this._oldValue);\n      }\n      return this;\n    },\n    set: dot.Vector2.prototype.set,\n    equalsValue: function (value) {\n      return this.equals(value);\n    },\n    storeValue: function (value) {\n    },\n    storeInitialValue: function (value) {\n      this._initialX = value.x;\n      this._initialY = value.y;\n    },\n    reset: function () {\n      this.setXY(this._initialX, this._initialY);\n    },\n    toString: function () {\n      return 'ObservableVector2(' + this.x + ', ' + this.y + ')';\n    }\n  }));\n  Poolable(ObservableVector2, {\n    defaultFactory: function () {\n      return new ObservableVector2();\n    },\n    constructorDuplicateFactory: function (pool) {\n      return function (x, y) {\n        if (pool.length) {\n          return pool.pop().setXY(x, y);\n        } else {\n          return new ObservableVector2(x, y);\n        }\n      };\n    }\n  });\n  return ObservableVector2;\n});","\ndefine('DOT/Permutation',['require','DOT/dot','PHET_CORE/isArray','DOT/Util'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  var isArray = require('PHET_CORE/isArray');\n  require('DOT/Util');\n  var Permutation = dot.Permutation = function Permutation(indices) {\n      this.indices = indices;\n    };\n  Permutation.identity = function (size) {\n    null;\n    var indices = new Array(size);\n    for (var i = 0; i < size; i++) {\n      indices[i] = i;\n    }\n    return new Permutation(indices);\n  };\n  Permutation.permutations = function (size) {\n    var result = [];\n    Permutation.forEachPermutation(dot.rangeInclusive(0, size - 1), function (integers) {\n      result.push(new Permutation(integers));\n    });\n    return result;\n  };\n  function recursiveForEachPermutation(array, prefix, callback) {\n    if (array.length === 0) {\n      callback.call(undefined, prefix);\n    } else {\n      for (var i = 0; i < array.length; i++) {\n        var element = array[i];\n        var nextArray = array.slice(0);\n        nextArray.splice(i, 1);\n        var nextPrefix = prefix.slice(0);\n        nextPrefix.push(element);\n        recursiveForEachPermutation(nextArray, nextPrefix, callback);\n      }\n    }\n  }\n  Permutation.forEachPermutation = function (array, callback) {\n    recursiveForEachPermutation(array, [], callback);\n  };\n  Permutation.prototype = {\n    constructor: Permutation,\n    size: function () {\n      return this.indices.length;\n    },\n    apply: function (arrayOrInt) {\n      if (isArray(arrayOrInt)) {\n        if (arrayOrInt.length !== this.size()) {\n          throw new Error('Permutation length ' + this.size() + ' not equal to list length ' + arrayOrInt.length);\n        }\n        var result = new Array(arrayOrInt.length);\n        for (var i = 0; i < arrayOrInt.length; i++) {\n          result[i] = arrayOrInt[this.indices[i]];\n        }\n        return result;\n      } else {\n        return this.indices[arrayOrInt];\n      }\n    },\n    inverted: function () {\n      var newPermutation = new Array(this.size());\n      for (var i = 0; i < this.size(); i++) {\n        newPermutation[this.indices[i]] = i;\n      }\n      return new Permutation(newPermutation);\n    },\n    withIndicesPermuted: function (indices) {\n      var result = [];\n      var that = this;\n      Permutation.forEachPermutation(indices, function (integers) {\n        var oldIndices = that.indices;\n        var newPermutation = oldIndices.slice(0);\n        for (var i = 0; i < indices.length; i++) {\n          newPermutation[indices[i]] = oldIndices[integers[i]];\n        }\n        result.push(new Permutation(newPermutation));\n      });\n      return result;\n    },\n    toString: function () {\n      return 'P[' + this.indices.join(', ') + ']';\n    }\n  };\n  Permutation.testMe = function (console) {\n    var a = new Permutation([\n        1,\n        4,\n        3,\n        2,\n        0\n      ]);\n    console.log(a.toString());\n    var b = a.inverted();\n    console.log(b.toString());\n    console.log(b.withIndicesPermuted([\n      0,\n      3,\n      4\n    ]).toString());\n    console.log(Permutation.permutations(4).toString());\n  };\n  return Permutation;\n});","\ndefine('DOT/Quaternion',['require','DOT/dot','PHET_CORE/Poolable','DOT/Vector3','DOT/Matrix3','DOT/Util'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  var Poolable = require('PHET_CORE/Poolable');\n  require('DOT/Vector3');\n  require('DOT/Matrix3');\n  require('DOT/Util');\n  dot.Quaternion = function Quaternion(x, y, z, w) {\n    this.setXYZW(x, y, z, w);\n    phetAllocation && phetAllocation('Quaternion');\n  };\n  var Quaternion = dot.Quaternion;\n  Quaternion.prototype = {\n    constructor: Quaternion,\n    isQuaternion: true,\n    setXYZW: function (x, y, z, w) {\n      this.x = x || 0;\n      this.y = y || 0;\n      this.z = z || 0;\n      this.w = w !== undefined ? w : 1;\n    },\n    plus: function (quat) {\n      return new Quaternion(this.x + quat.x, this.y + quat.y, this.z + quat.z, this.w + quat.w);\n    },\n    timesScalar: function (s) {\n      return new Quaternion(this.x * s, this.y * s, this.z * s, this.w * s);\n    },\n    timesQuaternion: function (quat) {\n      return new Quaternion(this.x * quat.w - this.z * quat.y + this.y * quat.z + this.w * quat.x, -this.x * quat.z + this.y * quat.w + this.z * quat.x + this.w * quat.y, this.x * quat.y - this.y * quat.x + this.z * quat.w + this.w * quat.z, -this.x * quat.x - this.y * quat.y - this.z * quat.z + this.w * quat.w);\n    },\n    timesVector3: function (v) {\n      if (v.magnitude() === 0) {\n        return new dot.Vector3();\n      }\n      return new dot.Vector3F(this.w * this.w * v.x + 2 * this.y * this.w * v.z - 2 * this.z * this.w * v.y + this.x * this.x * v.x + 2 * this.y * this.x * v.y + 2 * this.z * this.x * v.z - this.z * this.z * v.x - this.y * this.y * v.x, 2 * this.x * this.y * v.x + this.y * this.y * v.y + 2 * this.z * this.y * v.z + 2 * this.w * this.z * v.x - this.z * this.z * v.y + this.w * this.w * v.y - 2 * this.x * this.w * v.z - this.x * this.x * v.y, 2 * this.x * this.z * v.x + 2 * this.y * this.z * v.y + this.z * this.z * v.z - 2 * this.w * this.y * v.x - this.y * this.y * v.z + 2 * this.w * this.x * v.y - this.x * this.x * v.z + this.w * this.w * v.z);\n    },\n    magnitude: function () {\n      return Math.sqrt(this.magnitudeSquared());\n    },\n    magnitudeSquared: function () {\n      return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n    },\n    normalized: function () {\n      var magnitude = this.magnitude();\n      null;\n      return this.timesScalar(1 / magnitude);\n    },\n    negated: function () {\n      return new Quaternion(-this.x, -this.y, -this.z, -this.w);\n    },\n    toRotationMatrix: function () {\n      var norm = this.magnitudeSquared();\n      var flip = norm === 1 ? 2 : norm > 0 ? 2 / norm : 0;\n      var xx = this.x * this.x * flip;\n      var xy = this.x * this.y * flip;\n      var xz = this.x * this.z * flip;\n      var xw = this.w * this.x * flip;\n      var yy = this.y * this.y * flip;\n      var yz = this.y * this.z * flip;\n      var yw = this.w * this.y * flip;\n      var zz = this.z * this.z * flip;\n      var zw = this.w * this.z * flip;\n      return new dot.Matrix3().columnMajor(1 - (yy + zz), xy + zw, xz - yw, xy - zw, 1 - (xx + zz), yz + xw, xz + yw, yz - xw, 1 - (xx + yy));\n    }\n  };\n  Quaternion.fromEulerAngles = function (yaw, roll, pitch) {\n    var sinPitch = Math.sin(pitch * 0.5);\n    var cosPitch = Math.cos(pitch * 0.5);\n    var sinRoll = Math.sin(roll * 0.5);\n    var cosRoll = Math.cos(roll * 0.5);\n    var sinYaw = Math.sin(yaw * 0.5);\n    var cosYaw = Math.cos(yaw * 0.5);\n    var a = cosRoll * cosPitch;\n    var b = sinRoll * sinPitch;\n    var c = cosRoll * sinPitch;\n    var d = sinRoll * cosPitch;\n    return new Quaternion(a * sinYaw + b * cosYaw, d * cosYaw + c * sinYaw, c * cosYaw - d * sinYaw, a * cosYaw - b * sinYaw);\n  };\n  Quaternion.fromRotationMatrix = function (matrix) {\n    var v00 = matrix.m00();\n    var v01 = matrix.m01();\n    var v02 = matrix.m02();\n    var v10 = matrix.m10();\n    var v11 = matrix.m11();\n    var v12 = matrix.m12();\n    var v20 = matrix.m20();\n    var v21 = matrix.m21();\n    var v22 = matrix.m22();\n    var trace = v00 + v11 + v22;\n    var sqt;\n    if (trace >= 0) {\n      sqt = Math.sqrt(trace + 1);\n      return new Quaternion((v21 - v12) * 0.5 / sqt, (v02 - v20) * 0.5 / sqt, (v10 - v01) * 0.5 / sqt, 0.5 * sqt);\n    } else if (v00 > v11 && v00 > v22) {\n      sqt = Math.sqrt(1 + v00 - v11 - v22);\n      return new Quaternion(sqt * 0.5, (v10 + v01) * 0.5 / sqt, (v02 + v20) * 0.5 / sqt, (v21 - v12) * 0.5 / sqt);\n    } else if (v11 > v22) {\n      sqt = Math.sqrt(1 + v11 - v00 - v22);\n      return new Quaternion((v10 + v01) * 0.5 / sqt, sqt * 0.5, (v21 + v12) * 0.5 / sqt, (v02 - v20) * 0.5 / sqt);\n    } else {\n      sqt = Math.sqrt(1 + v22 - v00 - v11);\n      return new Quaternion((v02 + v20) * 0.5 / sqt, (v21 + v12) * 0.5 / sqt, sqt * 0.5, (v10 - v01) * 0.5 / sqt);\n    }\n  };\n  Quaternion.getRotationQuaternion = function (a, b) {\n    return Quaternion.fromRotationMatrix(dot.Matrix3.rotateAToB(a, b));\n  };\n  Quaternion.slerp = function (a, b, t) {\n    if (a.x === b.x && a.y === b.y && a.z === b.z && a.w === b.w) {\n      return a;\n    }\n    var dot = a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;\n    if (dot < 0) {\n      b = b.negated();\n      dot = -dot;\n    }\n    var ratioA = 1 - t;\n    var ratioB = t;\n    if (1 - dot > 0.1) {\n      var theta = Math.acos(dot);\n      var invSinTheta = 1 / Math.sin(theta);\n      ratioA = Math.sin((1 - t) * theta) * invSinTheta;\n      ratioB = Math.sin(t * theta) * invSinTheta;\n    }\n    return new Quaternion(ratioA * a.x + ratioB * b.x, ratioA * a.y + ratioB * b.y, ratioA * a.z + ratioB * b.z, ratioA * a.w + ratioB * b.w);\n  };\n  Poolable(Quaternion, {\n    defaultFactory: function () {\n      return new Quaternion();\n    },\n    constructorDuplicateFactory: function (pool) {\n      return function (x, y, z, w) {\n        if (pool.length) {\n          return pool.pop().set(x, y, z, w);\n        } else {\n          return new Quaternion(x, y, z, w);\n        }\n      };\n    }\n  });\n  return Quaternion;\n});","\ndefine('DOT/Ray3',['require','DOT/dot'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  dot.Ray3 = function Ray3(pos, dir) {\n    this.pos = pos;\n    this.dir = dir;\n  };\n  var Ray3 = dot.Ray3;\n  Ray3.prototype = {\n    constructor: Ray3,\n    shifted: function (distance) {\n      return new Ray3(this.pointAtDistance(distance), this.dir);\n    },\n    pointAtDistance: function (distance) {\n      return this.pos.plus(this.dir.timesScalar(distance));\n    },\n    toString: function () {\n      return this.pos.toString() + ' => ' + this.dir.toString();\n    }\n  };\n  return Ray3;\n});","\ndefine('DOT/Rectangle',['require','DOT/dot','PHET_CORE/inherit','DOT/Bounds2'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  var inherit = require('PHET_CORE/inherit');\n  var Bounds2 = require('DOT/Bounds2');\n  dot.Rectangle = function Rectangle(x, y, width, height) {\n    null;\n    Bounds2.call(this, x, y, x + width, y + height);\n  };\n  var Rectangle = dot.Rectangle;\n  inherit(Bounds2, Rectangle);\n  return Rectangle;\n});","\ndefine('DOT/Transform4',['require','DOT/dot','DOT/Matrix4','DOT/Vector3','DOT/Ray3'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  require('DOT/Matrix4');\n  require('DOT/Vector3');\n  require('DOT/Ray3');\n  dot.Transform4 = function Transform4(matrix) {\n    this.setMatrix(matrix === undefined ? dot.Matrix4.IDENTITY : matrix);\n  };\n  var Transform4 = dot.Transform4;\n  Transform4.prototype = {\n    constructor: Transform4,\n    setMatrix: function (matrix) {\n      this.matrix = matrix;\n      this.inverse = null;\n      this.matrixTransposed = null;\n      this.inverseTransposed = null;\n    },\n    getMatrix: function () {\n      return this.matrix;\n    },\n    getInverse: function () {\n      if (this.inverse === null) {\n        this.inverse = this.matrix.inverted();\n      }\n      return this.inverse;\n    },\n    getMatrixTransposed: function () {\n      if (this.matrixTransposed === null) {\n        this.matrixTransposed = this.matrix.transposed();\n      }\n      return this.matrixTransposed;\n    },\n    getInverseTransposed: function () {\n      if (this.inverseTransposed === null) {\n        this.inverseTransposed = this.getInverse().transposed();\n      }\n      return this.inverseTransposed;\n    },\n    prepend: function (matrix) {\n      this.setMatrix(matrix.timesMatrix(this.matrix));\n    },\n    append: function (matrix) {\n      this.setMatrix(this.matrix.timesMatrix(matrix));\n    },\n    prependTransform: function (transform) {\n      this.prepend(transform.matrix);\n    },\n    appendTransform: function (transform) {\n      this.append(transform.matrix);\n    },\n    isIdentity: function () {\n      return this.matrix.type === dot.Matrix4.Types.IDENTITY;\n    },\n    applyToCanvasContext: function (context) {\n      context.setTransform(this.matrix.m00(), this.matrix.m10(), this.matrix.m01(), this.matrix.m11(), this.matrix.m03(), this.matrix.m13());\n    },\n    transformPosition3: function (vec3) {\n      return this.matrix.timesVector3(vec3);\n    },\n    transformDelta3: function (vec3) {\n      return this.matrix.timesRelativeVector3(vec3);\n    },\n    transformNormal3: function (vec3) {\n      return this.getInverse().timesTransposeVector3(vec3);\n    },\n    transformDeltaX: function (x) {\n      return this.transformDelta3(new dot.Vector3(x, 0, 0)).x;\n    },\n    transformDeltaY: function (y) {\n      return this.transformDelta3(new dot.Vector3(0, y, 0)).y;\n    },\n    transformDeltaZ: function (z) {\n      return this.transformDelta3(new dot.Vector3(0, 0, z)).z;\n    },\n    transformRay: function (ray) {\n      return new dot.Ray3(this.transformPosition3(ray.pos), this.transformPosition3(ray.pos.plus(ray.dir)).minus(this.transformPosition3(ray.pos)));\n    },\n    inversePosition3: function (vec3) {\n      return this.getInverse().timesVector3(vec3);\n    },\n    inverseDelta3: function (vec3) {\n      return this.inversePosition3(vec3).minus(this.inversePosition3(dot.Vector3.ZERO));\n    },\n    inverseNormal3: function (vec3) {\n      return this.matrix.timesTransposeVector3(vec3);\n    },\n    inverseDeltaX: function (x) {\n      return this.inverseDelta3(new dot.Vector3(x, 0, 0)).x;\n    },\n    inverseDeltaY: function (y) {\n      return this.inverseDelta3(new dot.Vector3(0, y, 0)).y;\n    },\n    inverseDeltaZ: function (z) {\n      return this.inverseDelta3(new dot.Vector3(0, 0, z)).z;\n    },\n    inverseRay: function (ray) {\n      return new dot.Ray3(this.inversePosition3(ray.pos), this.inversePosition3(ray.pos.plus(ray.dir)).minus(this.inversePosition3(ray.pos)));\n    }\n  };\n  return Transform4;\n});","\ndefine('DOT/main',[\n  'DOT/dot',\n  'DOT/Bounds2',\n  'DOT/Bounds3',\n  'DOT/Complex',\n  'DOT/ConvexHull2',\n  'DOT/Dimension2',\n  'DOT/EigenvalueDecomposition',\n  'DOT/LinearFunction',\n  'DOT/LUDecomposition',\n  'DOT/Matrix',\n  'DOT/Matrix3',\n  'DOT/Matrix4',\n  'DOT/ObservableBounds2',\n  'DOT/ObservableMatrix3',\n  'DOT/ObservableVector2',\n  'DOT/Permutation',\n  'DOT/QRDecomposition',\n  'DOT/Quaternion',\n  'DOT/Ray2',\n  'DOT/Ray3',\n  'DOT/Rectangle',\n  'DOT/SingularValueDecomposition',\n  'DOT/Transform3',\n  'DOT/Transform4',\n  'DOT/Util',\n  'DOT/Vector2',\n  'DOT/Vector3',\n  'DOT/Vector4'\n], function (dot) {\n  'use strict';\n  return dot;\n});","\ndefine('PHET_CORE/collect',['require','PHET_CORE/core'],function (require) {\n  'use strict';\n  var core = require('PHET_CORE/core');\n  var collect = core.collect = function collect(iterate) {\n      null;\n      var result = [];\n      iterate(function (ob) {\n        result.push(ob);\n      });\n      return result;\n    };\n  return collect;\n});","\ndefine('PHET_CORE/escapeHTML',['require','PHET_CORE/core'],function (require) {\n  'use strict';\n  var core = require('PHET_CORE/core');\n  var escapeHTML = core.escapeHTML = function escapeHTML(str) {\n      return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\\"/g, '&quot;').replace(/\\'/g, '&#x27;').replace(/\\//g, '&#x2F;');\n    };\n  return escapeHTML;\n});","\ndefine('PHET_CORE/inheritPrototype',['require','PHET_CORE/core'],function (require) {\n  'use strict';\n  var core = require('PHET_CORE/core');\n  var inheritPrototype = core.inheritPrototype = function inheritPrototype(subtype, supertype) {\n      var prototype = Object(supertype.prototype);\n      prototype.constructor = subtype;\n      subtype.prototype = prototype;\n    };\n  return inheritPrototype;\n});","\ndefine('PHET_CORE/loadScript',['require','PHET_CORE/core'],function (require) {\n  'use strict';\n  var core = require('PHET_CORE/core');\n  var loadScript = core.loadScript = function loadScript(args) {\n      if (typeof args === 'string') {\n        args = { src: args };\n      }\n      var src = args.src;\n      var callback = args.callback;\n      var async = args.async === undefined ? true : args.async;\n      var cacheBuster = args.cacheBuster === undefined ? false : args.cacheBuster;\n      var called = false;\n      var script = document.createElement('script');\n      script.type = 'text/javascript';\n      script.async = async;\n      script.onload = script.onreadystatechange = function () {\n        var state = this.readyState;\n        if (state && state !== 'complete' && state !== 'loaded') {\n          return;\n        }\n        if (!called) {\n          called = true;\n          if (callback) {\n            callback();\n          }\n        }\n      };\n      script.src = src + (cacheBuster ? '?random=' + Math.random().toFixed(10) : '');\n      var other = document.getElementsByTagName('script')[0];\n      other.parentNode.insertBefore(script, other);\n    };\n  return loadScript;\n});","\ndefine('PHET_CORE/platform',['require','PHET_CORE/core'],function (require) {\n  'use strict';\n  var core = require('PHET_CORE/core');\n  var ua = navigator.userAgent;\n  function isIE(version) {\n    var r = new RegExp('msie' + (!isNaN(version) ? '\\\\s' + version : ''), 'i');\n    return r.test(ua);\n  }\n  var platform = core.platform = {\n      get firefox() {\n        return ua.toLowerCase().indexOf('firefox') > -1;\n      },\n      get mobileSafari() {\n        return ua.match(/(iPod|iPhone|iPad)/) && ua.match(/AppleWebKit/);\n      },\n      get safari5() {\n        return ua.match(/Version\\/5\\./) && ua.match(/Safari\\//) && ua.match(/AppleWebKit/);\n      },\n      get safari6() {\n        return ua.match(/Version\\/6\\./) && ua.match(/Safari\\//) && ua.match(/AppleWebKit/);\n      },\n      get safari7() {\n        return ua.match(/Version\\/7\\./) && ua.match(/Safari\\//) && ua.match(/AppleWebKit/);\n      },\n      get ie9() {\n        return isIE(9);\n      },\n      get ie10() {\n        return isIE(10);\n      },\n      get ie11() {\n        return isIE(11);\n      },\n      get ie() {\n        return ua.indexOf('MSIE') !== -1;\n      },\n      get android() {\n        return ua.indexOf('Android') > 0;\n      }\n    };\n  return platform;\n});","\ndefine('PHET_CORE/profiler',['require','PHET_CORE/core'],function (require) {\n  'use strict';\n  var core = require('PHET_CORE/core');\n  var stack = [];\n  var results = {};\n  var count = 0;\n  var listeners = [];\n  var profiler = core.profiler = {\n      displayCount: 1000,\n      start: function (name) {\n        var time = Date.now();\n        stack.push({\n          name: name,\n          time: time\n        });\n      },\n      addListener: function (listener) {\n        listeners.push(listener);\n      },\n      stop: function () {\n        var end = Date.now();\n        var top = stack.pop();\n        var elapsed = end - top.time;\n        if (!results[top.name]) {\n          results[top.name] = [];\n        }\n        results[top.name].push(elapsed);\n        count++;\n        if (count % this.displayCount === 0) {\n          var summary = JSON.stringify(this.toJSON());\n          console.log(summary);\n          for (var i = 0; i < listeners.length; i++) {\n            listeners[i](summary);\n          }\n          results = {};\n        }\n      },\n      toJSON: function () {\n        var summary = {};\n        var sum;\n        for (var property in results) {\n          sum = 0;\n          for (var i = 0; i < results[property].length; i++) {\n            var time = results[property][i];\n            sum += time;\n          }\n          var average = sum / results[property].length;\n          summary[property] = {\n            average: average,\n            count: results[property].length\n          };\n        }\n        return summary;\n      },\n      testSelf: function () {\n        var a, b;\n        var profiler = this;\n        this.displayCount = 10000000;\n        for (var i = 0; i < 10; i++) {\n          profiler.start('physics');\n          for (var k = 0; k < 10000; k++) {\n            profiler.start('mloop');\n            for (var m = 0; m < 10000; m++) {\n              a = 100 * 200;\n            }\n            profiler.stop();\n            profiler.start('xloop');\n            for (var x = 0; x < 20000; x++) {\n              b = 100 * 200;\n            }\n            profiler.stop();\n          }\n          profiler.stop();\n        }\n        console.log('results: ', a, b);\n        console.log(JSON.stringify(this.toJSON()));\n      }\n    };\n  return profiler;\n});","\ndefine('PHET_CORE/main',[\n  'PHET_CORE/core',\n  'PHET_CORE/collect',\n  'PHET_CORE/escapeHTML',\n  'PHET_CORE/extend',\n  'PHET_CORE/inherit',\n  'PHET_CORE/inheritPrototype',\n  'PHET_CORE/isArray',\n  'PHET_CORE/loadScript',\n  'PHET_CORE/phetAllocation',\n  'PHET_CORE/platform',\n  'PHET_CORE/Poolable',\n  'PHET_CORE/profiler'\n], function (core) {\n  'use strict';\n  return core;\n});","\nif (window.has) {\n  window.has.add('assert.basic', function (global, document, anElement) {\n    'use strict';\n    return false;\n  });\n}\nwindow.loadedKiteConfig = true;\nrequire.config({\n  deps: [\n    'main',\n    'DOT/main',\n    'PHET_CORE/main'\n  ],\n  paths: {\n    underscore: '../../sherpa/lodash-2.4.1',\n    KITE: '.',\n    DOT: '../../dot/js',\n    PHET_CORE: '../../phet-core/js',\n    ASSERT: '../../assert/js',\n    AXON: '../../axon/js'\n  },\n  shim: { underscore: { exports: '_' } },\n  urlArgs: new Date().getTime()\n});\ndefine(\"production-config\", function(){});\n"]}