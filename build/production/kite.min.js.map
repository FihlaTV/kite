{"version":3,"sources":["../node_modules/grunt-requirejs/node_modules/almond/almond.js","../../phet-core/js/Namespace.js","../../phet-core/js/phetCore.js","../../phet-core/js/phetAllocation.js","kite.js","../../phet-core/js/extend.js","../../phet-core/js/inherit.js","../../axon/js/axon.js","../../phet-core/js/cleanArray.js","../../axon/js/Events.js","../../dot/js/dot.js","../../phet-core/js/Poolable.js","../../dot/js/Util.js","../../dot/js/Vector2.js","../../dot/js/Bounds2.js","../../dot/js/Ray2.js","segments/Segment.js","segments/Line.js","segments/Arc.js","util/LineStyles.js","util/Subpath.js","parser/svgPath.js","../../dot/js/Vector4.js","../../dot/js/Vector3.js","../../dot/js/Matrix4.js","../../dot/js/Matrix3.js","segments/Quadratic.js","segments/Cubic.js","../../dot/js/Transform3.js","segments/EllipticalArc.js","Shape.js","main.js","../../axon/js/Emitter.js","../../axon/js/Multilink.js","../../axon/js/Property.js","../../axon/js/DerivedProperty.js","../../axon/js/ObservableArray.js","../../axon/js/PropertySet.js","../../axon/js/main.js","../../dot/js/BinPacker.js","../../dot/js/Bounds3.js","../../dot/js/Complex.js","../../dot/js/ConvexHull2.js","../../dot/js/Dimension2.js","../../dot/js/EigenvalueDecomposition.js","../../dot/js/LinearFunction.js","../../dot/js/LUDecomposition.js","../../phet-core/js/isArray.js","../../dot/js/SingularValueDecomposition.js","../../dot/js/QRDecomposition.js","../../dot/js/Matrix.js","../../dot/js/MatrixOps3.js","../../dot/js/Permutation.js","../../dot/js/Plane3.js","../../dot/js/Quaternion.js","../../dot/js/Random.js","../../dot/js/Ray3.js","../../dot/js/Rectangle.js","../../dot/js/Sphere3.js","../../dot/js/Transform4.js","../../dot/js/main.js","../../phet-core/js/arrayRemove.js","../../phet-core/js/collect.js","../../phet-core/js/detectPrefix.js","../../phet-core/js/detectPrefixEvent.js","../../phet-core/js/escapeHTML.js","../../phet-core/js/EventTimer.js","../../phet-core/js/loadScript.js","../../phet-core/js/pairs.js","../../phet-core/js/partition.js","../../phet-core/js/platform.js","../../phet-core/js/main.js","config.js"],"names":["requirejs","require","define","undef","hasProp","obj","prop","hasOwn","call","normalize","name","baseName","nameParts","nameSegment","mapValue","foundMap","lastIndex","foundI","foundStarMap","starI","i","j","part","baseParts","split","map","config","starMap","charAt","slice","length","nodeIdCompat","jsSuffixRegExp","test","replace","concat","splice","join","indexOf","substring","makeRequire","relName","forceSync","req","apply","aps","arguments","makeNormalize","makeLoad","depName","value","defined","callDep","waiting","args","defining","main","Error","splitPrefix","prefix","index","makeConfig","makeMap","handlers","Object","prototype","hasOwnProperty","plugin","parts","f","n","pr","p","exports","e","module","id","uri","deps","callback","cjsModule","ret","usingExports","callbackType","load","undefined","alt","setTimeout","cfg","_defined","amd","jQuery","Namespace","this","window","phet","constructor","register","key","keys","parent","lastKey","phetCore","phetAllocation","alloc","stack","count","stacks","log","report","_","sortBy","each","console","kite","toFixed","extend","Array","source","defineProperty","getOwnPropertyDescriptor","inherit","supertype","subtype","prototypeProperties","staticProperties","F","cleanArray","arr","pop","Events","options","_eventListeners","_staticEventListeners","tandem","addInstance","disposeEvents","removeInstance","axon","dispose","on","eventName","push","onStatic","once","events","wrappedCallback","off","offStatic","hasListener","array","hasStaticListener","removeAllEventListeners","trigger","suffix","listeners","staticListeners","staticCount","hasNoArguments","listener","staticListener","trigger0","trigger1","param1","trigger2","param2","dot","x","y","Vector2","z","Vector3","w","Vector4","Float64Array","Poolable","mixin","type","proto","maxPoolSize","initialSize","pool","defaultFactory","dirtyFromPool","fillPool","constructorDuplicateFactory","createFromPool","freeToPool","generate","z0","z1","EPSILON","Number","MIN_VALUE","TWO_PI","Math","PI","Util","clamp","min","max","moduloBetweenDown","divisor","partial","moduloBetweenUp","rangeInclusive","a","b","result","rangeExclusive","toRadians","degrees","toDegrees","radians","gcd","lineLineIntersection","p1","p2","p3","p4","x12","x34","y12","y34","denom","sphereRayIntersection","radius","ray","epsilon","center","rayDir","direction","pos","position","centerToRay","minus","tmp","centerToRayDistSq","magnitudeSquared","det","base","sqt","sqrt","ta","tb","hitPositionB","pointAtDistance","normalB","normalized","distance","hitPoint","normal","negated","fromOutside","hitPositionA","normalA","solveQuadraticRootsReal","c","abs","discriminant","solveCubicRootsReal","d","q","r","b3","dsqrt","cubeRoot","rsqrt","doubleRoot","qX","acos","rr","cos","pow","linear","a1","a2","b1","b2","a3","roundSymmetric","round","decimalPlaces","multiplier","newValue","toFixedNumber","parseFloat","isInteger","lineSegmentIntersection","x1","y1","x2","y2","x3","y3","x4","y4","numA","numB","ua","ub","distToSegmentSquared","point","segmentLength","distanceSquared","t","distToSegment","arePointsCollinear","triangleArea","triangleAreaSigned","log10","val","LN10","boxMullerTransform","mu","sigma","u1","u2","random","sin","isVector2","dimension","magnitude","distanceXY","dx","dy","distanceSquaredXY","v","dotXY","angle","atan2","angleBetween","thisMagnitude","vMagnitude","equals","other","equalsEpsilon","isFinite","copy","vector","set","crossScalar","mag","withMagnitude","setMagnitude","timesScalar","scalar","times","componentTimes","plus","plusXY","plusScalar","minusXY","minusScalar","dividedScalar","perpendicular","rotated","newAngle","blend","ratio","average","toString","toVector3","setXY","setX","setY","scale","multiplyScalar","add","addXY","addScalar","subtract","subtractXY","subtractScalar","multiply","componentMultiply","divideScalar","negate","rotate","setPolar","toStateObject","createPolar","fromStateObject","stateObject","Immutable","mutableOverrideHelper","mutableFunctionName","ZERO","X_UNIT","Y_UNIT","Bounds2","minX","minY","maxX","maxY","scratchVector2","isBounds","getWidth","width","getHeight","height","getX","getY","getMinX","getMinY","getMaxX","getMaxY","getLeft","left","getTop","top","getRight","right","getBottom","bottom","getCenterX","centerX","getCenterY","centerY","getLeftTop","leftTop","getCenterTop","centerTop","getRightTop","rightTop","getLeftCenter","leftCenter","getCenter","getRightCenter","rightCenter","getLeftBottom","leftBottom","getCenterBottom","centerBottom","getRightBottom","rightBottom","isEmpty","hasNonzeroArea","isValid","closestPointTo","location","containsCoordinates","xConstrained","yConstrained","containsPoint","containsBounds","bounds","intersectsBounds","minimumDistanceToPointSquared","closeX","closeY","maximumDistanceToPointSquared","thisFinite","otherFinite","union","intersection","withCoordinates","withPoint","withMinX","withMinY","withMaxX","withMaxY","roundedOut","floor","ceil","roundedIn","transformed","matrix","transform","dilated","dilatedX","dilatedY","dilatedXY","eroded","erodedX","erodedY","erodedXY","withOffsets","shiftedX","shiftedY","shifted","setMinMax","setMinX","setMinY","setMaxX","setMaxY","includeBounds","constrainBounds","addCoordinates","addPoint","roundOut","roundIn","isIdentity","NOTHING","multiplyVector2","dilate","dilateX","dilateY","dilateXY","erode","erodeX","erodeY","erodeXY","offset","shiftX","shiftY","shift","getClosestPoint","rect","POSITIVE_INFINITY","NEGATIVE_INFINITY","EVERYTHING","Ray2","Segment","DotUtil","identityFunction","areStrokedBoundsDilated","startTangent","endTangent","getBoundsWithTransform","transformedSegment","getBounds","subdivisions","tList","subdivided","subdividedIntoMonotone","getInteriorExtremaTs","toPiecewiseLinearSegments","minLevels","maxLevels","segments","start","end","pointMap","middle","positionAt","finished","curveEpsilon","distanceEpsilon","Line","subdividedSegments","addInvalidatingGetterSetter","internalName","capitalizedName","toUpperCase","getterName","setterName","invalidate","get","closestToPoint","threshold","thresholdSquared","items","bestList","bestDistanceSquared","thresholdOk","segment","explicitClosestToPoint","infos","info","ts","pa","pb","minDistanceSquared","maxDistanceSquared","curItems","item","tmid","pmid","boundsA","boundsB","minA","minB","maxA","maxB","closestPoint","_start","_end","_tangent","_bounds","getStartTangent","getEndTangent","getNondegenerateSegments","tangentAt","curvatureAt","getSVGPathFragment","svgNumber","strokeLeft","lineWidth","strokeRight","pt","diff","s","perp","wind","windingIntersection","hits","writeToContext","context","lineTo","timesVector2","reparameterized","polarToCartesian","Arc","startAngle","endAngle","anticlockwise","_center","_radius","_startAngle","_endAngle","_anticlockwise","_startTangent","_endTangent","_actualEndAngle","_isFullPerimeter","_angleDifference","getStart","positionAtAngle","getEnd","tangentAtAngle","getActualEndAngle","actualEndAngle","getIsFullPerimeter","isFullPerimeter","getAngleDifference","angleDifference","includeBoundsAtAngle","containsAngle","mapAngle","tAtAngle","angleAt","normalizedAngle","positiveMinAngle","largeArcFlag","sweepFlag","splitOppositeAngle","splitPoint","firstArc","secondArc","that","sort","angle0","angleT","angle1","pointB","pointA","hit","arc","getDeterminant","scaleVector","getScaleVector","radiusX","radiusY","EllipticalArc","LineStyles","lineCap","lineJoin","lineDash","lineDashOffset","miterLimit","typical","leftJoin","fromTangent","toTangent","fromPoint","toPoint","bevel","fromAngle","toAngle","theta","miterPoint","rightJoin","cap","tangent","tangentAngle","toLeft","toRight","toFront","Subpath","points","closed","self","_strokedSubpaths","_strokedSubpathsComputed","_strokedStyles","_invalidateListener","bind","_invalidatingPoints","addSegmentDirectly","invalidatePoints","numSegments","addSegment","nondegenerateSegments","numNondegenerateSegments","addClosingSegment","hasClosingSegment","closingSegment","getClosingSegment","getFirstPoint","close","getLength","first","getLastPoint","last","getFirstSegment","getLastSegment","isDrawable","isClosed","startPoint","moveTo","len","closePath","toPiecewiseLinear","flatten","nonlinearTransformed","methodName","regularSegments","offsets","previousI","stroked","lineStyles","appendLeftSegments","leftSegments","appendRightSegments","rightSegments","firstSegment","lastSegment","alreadyClosed","subpaths","quote","escape","parse","input","startRule","matchFailed","failure","rightmostFailuresPos","rightmostFailuresExpected","parse_svgPath","result0","result1","result2","result3","pos0","pos1","parse_wsp","parse_movetoDrawtoCommandGroups","path","parse_movetoDrawtoCommandGroup","parse_moveto","parse_drawtoCommands","m","parse_drawtoCommand","cmd","cmds","parse_closepath","parse_lineto","parse_horizontalLineto","parse_verticalLineto","parse_curveto","parse_smoothCurveto","parse_quadraticBezierCurveto","parse_smoothQuadraticBezierCurveto","parse_ellipticalArc","charCodeAt","reportFailures","parse_movetoArgumentSequence","createMoveTo","parse_coordinatePair","parse_commaWsp","parse_linetoArgumentSequence","pair","list","command","arg","parse_horizontalLinetoArgumentSequence","parse_number","parse_verticalLinetoArgumentSequence","parse_curvetoArgumentSequence","parse_curvetoArgument","result4","parse_smoothCurvetoArgumentSequence","parse_smoothCurvetoArgument","parse_quadraticBezierCurvetoArgumentSequence","parse_quadraticBezierCurvetoArgument","parse_smoothQuadraticBezierCurvetoArgumentSequence","parse_ellipticalArcArgumentSequence","parse_ellipticalArcArgument","result5","result6","result7","result8","result9","result10","parse_nonnegativeNumber","parse_flag","rx","ry","rot","largeArc","sweep","to","parse_floatingPointConstant","number","parse_digitSequence","parseInt","parse_sign","sign","parse_comma","parse_fractionalConstant","parse_exponent","parse_digit","cleanupExpected","expected","lastExpected","cleanExpected","computeErrorPosition","line","column","seenCR","ch","isRelative","parseFunctions","svgPath","movetoDrawtoCommandGroups","movetoDrawtoCommandGroup","drawtoCommands","drawtoCommand","moveto","movetoArgumentSequence","closepath","lineto","linetoArgumentSequence","horizontalLineto","horizontalLinetoArgumentSequence","verticalLineto","verticalLinetoArgumentSequence","curveto","curvetoArgumentSequence","curvetoArgument","smoothCurveto","smoothCurvetoArgumentSequence","smoothCurvetoArgument","quadraticBezierCurveto","quadraticBezierCurvetoArgumentSequence","quadraticBezierCurvetoArgument","smoothQuadraticBezierCurveto","smoothQuadraticBezierCurvetoArgumentSequence","ellipticalArc","ellipticalArcArgumentSequence","ellipticalArcArgument","coordinatePair","nonnegativeNumber","flag","commaWsp","comma","floatingPointConstant","fractionalConstant","exponent","digitSequence","digit","wsp","found","errorPosition","SyntaxError","toSource","_source","buildMessage","expectedHumanized","foundHumanized","message","isVector4","distanceXYZW","dz","dw","distanceSquaredXYZW","dotXYZW","plusXYZW","minusXYZW","setXYZW","setZ","setW","addXYZW","subtractXYZW","Z_UNIT","W_UNIT","isVector3","distanceXYZ","distanceSquaredXYZ","dotXYZ","cross","plusXYZ","minusXYZ","toVector2","toVector4","setXYZ","addXYZ","subtractXYZ","slerp","Quaternion","getRotationQuaternion","timesVector3","Matrix4","v00","v01","v02","v03","v10","v11","v12","v13","v20","v21","v22","v23","v30","v31","v32","v33","entries","Float32Array","rowMajor","Types","OTHER","IDENTITY","TRANSLATION_3D","SCALING","AFFINE","identity","translation","translationFromVector","scaling","rotationAxisAngle","axis","C","rotationX","rotationY","rotationZ","gluPerspective","fovYRadians","aspect","zNear","zFar","cotangent","columnMajor","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","getTranslation","m0003","m1013","m2023","m3033","m0103","m1113","m2123","m3133","m0203","m1213","m2223","m3233","getCSSTransform","cssTransform","transposed","inverted","timesMatrix","timesVector4","timesTransposeVector4","timesTransposeVector3","timesRelativeVector3","determinant","makeImmutable","Matrix3","argumentsShouldNotExist","createIdentityArray","FastArray","identityFastArray","TRANSLATION_2D","setToIdentity","setToTranslation","setToScale","affine","setToAffine","setToRotationAxisAngle","setToRotationX","setToRotationY","setToRotationZ","rotation2","rotationAround","rotationAroundPoint","fromSVGMatrix","svgMatrix","setToSVGMatrix","rotateAToB","setRotationAToB","isFastIdentity","isAffine","isAligned","isAxisAligned","getRotation","rotation","toMatrix4","toAffineMatrix4","toSVGMatrix","document","createElementNS","createSVGMatrix","getSVGTransform","svgTransform","getCSSTransformStyles","transformCSS","-webkit-perspective","-webkit-backface-visibility","-webkit-transform","-moz-transform","-ms-transform","-o-transform","transform-origin","-ms-transform-origin","cssTransformStyles","timesTransposeVector2","timesRelativeVector2","setArray","set00","set01","set02","set10","set11","set12","set20","set21","set22","transpose","invert","multiplyMatrix","prependTranslation","h","c1","c2","c3","u","hvx","hvz","hvxy","hvxz","hvyz","setTo32Bit","setTo64Bit","multiplyVector3","multiplyTransposeVector2","multiplyRelativeVector2","canvasSetTransform","setTransform","canvasAppendTransform","instance","X_REFLECTION","Y_REFLECTION","translationTimesMatrix","printer","print","Quadratic","control","_control","degree","_tCriticalX","_tCriticalY","controlIsStart","controlIsEnd","getTCriticalX","extremaT","tCriticalX","getTCriticalY","tCriticalY","startIsEnd","startIsControl","endIsControl","halfPoint","delta","p1d","isNaN","mt","isZero","p0","d10","offsetTo","reverse","curves","depth","curve","offsetCurves","approximateOffset","reversed","leftMid","rightMid","mid","degreeElevated","Cubic","criticalX","criticalY","inverseMatrix","unitTangent","toHit","quadraticCurveTo","alpha","beta","gamma","divisorX","NaN","control1","control2","_control1","_control2","scratchVector1","scratchVector3","_r","_s","_tCusp","_tDeterminant","_tInflection1","_tInflection2","_startQuadratic","_endQuadratic","_xExtremaT","_yExtremaT","getR","getS","getTCusp","computeCuspInfo","tCusp","getTDeterminant","tDeterminant","getTInflection1","tInflection1","getTInflection2","tInflection2","getStartQuadratic","computeCuspSegments","startQuadratic","getEndQuadratic","endQuadratic","getXExtremaT","xExtremaT","getYExtremaT","yExtremaT","cubic","hasCusp","aPerp","bPerp","aPerpDotB","sqrtDet","subdividedAtCusp","reduced","degreeReduced","extremaPoints","lastPoint","toRS","firstVector","quantity","every","otherT","bezierCurveTo","controlA","controlB","difference","v0","v1","v2","v3","Transform3","inverse","matrixTransposed","inverseTransposed","inverseValid","transposeValid","inverseTransposeValid","setMatrix","scratchMatrix","prepend","append","prependTransform","appendTransform","applyToCanvasContext","getMatrix","getInverse","getMatrixTransposed","getInverseTransposed","transformPosition2","transformDelta2","transformNormal2","transformX","transformY","transformDeltaX","transformDeltaY","transformBounds2","transformShape","shape","transformRay2","inversePosition2","inverseDelta2","inverseNormal2","inverseX","inverseY","inverseDeltaX","inverseDeltaY","inverseBounds2","bounds2","inverseShape","inverseRay2","_radiusX","_radiusY","_rotation","_unitTransform","_unitArcSegment","tmpR","getUnitTransform","computeUnitTransform","unitTransform","getUnitArcSegment","xAngle","atan","tan","yAngle","possibleExtremaAngles","aq","bq","denominator","degreesRotation","rayInUnitCircleSpace","transformedPoint","ellipse","transformedSemiMajorAxis","transformedSemiMinorAxis","reflected","weightedSplineVector","beforeVector","currentVector","afterVector","tension","Shape","resetControlPoints","addSubpath","lastQuadraticControlPoint","lastCubicControlPoint","setQuadraticControlPoint","setCubicControlPoint","subpath","hasSubpaths","moveToPoint","moveToRelative","moveToPointRelative","getRelativePoint","lineToPoint","lineToRelative","lineToPointRelative","getLastSubpath","addSegmentAndBounds","ensure","horizontalLineTo","horizontalLineToRelative","verticalLineTo","verticalLineToRelative","cpx","cpy","quadraticCurveToPoint","quadraticCurveToRelative","quadraticCurveToPointRelative","controlPoint","relativePoint","smoothQuadraticCurveTo","getSmoothQuadraticControlPoint","smoothQuadraticCurveToRelative","quadratic","cubicCurveTo","cp1x","cp1y","cp2x","cp2y","cubicCurveToPoint","cubicCurveToRelative","cubicCurveToPointRelative","smoothCubicCurveTo","getSmoothCubicControlPoint","smoothCubicCurveToRelative","arcPoint","endPoint","ellipticalArcPoint","previousPath","nextPath","ellipticalArcToRelative","ellipticalArcTo","circle","roundRect","arcw","arch","lowX","highX","lowY","highY","polygon","vertices","cardinalSpline","positions","isClosedLineSegments","pointNumber","segmentNumber","cardinalPoints","bezierPoints","getSVGPath","string","k","reduce","includeCurvature","numSubpaths","minHorizontalRay","minVerticalRay","maxHorizontalRay","maxVerticalRay","horizontalRayIntersections","verticalRayIntersections","getStrokedShape","subLen","strokedSubpath","getOffsetShape","getStrokedBounds","rectangle","roundRectangle","roundedRectangleWithRadii","cornerRadii","topLeftRadius","topLeft","topRightRadius","topRight","bottomLeftRadius","bottomLeft","bottomRightRadius","bottomRight","lineSegment","regularPolygon","sides","range","Emitter","listenersToEmitTo","addListener","defendCallbacks","removeListener","removeAllListeners","defended","defendedListeners","emit","lastEntry","emit1","arg1","emit2","arg2","hasListeners","Multilink","dependencies","lazy","dependencyValues","property","multilink","dependencyListeners","dependency","lazyLink","unlink","Property","isTandem","_value","_initialValue","changedEmitter","disposeProperty","equalsValue","_setAndNotifyObservers","areValuesEqual","initialValue","oldValue","_notifyObservers","notifyObserversStatic","reset","link","observer","unlinkAll","linkAttribute","object","attributeName","handle","unlinkAttribute","valueOf","wrapper","debug","toggleFunction","toggle","onValue","onValueObserver","properties","lazyMultilink","unmultilink","derivedProperty","addProperty","propertyName","configurable","enumerable","equalsFunction","notFunction","conjunctionWithProperty","disjunctionWithProperty","addWithProperty","multiplyWithProperty","DerivedProperty","derivation","valueEquals","firstProperty","secondProperty","and","or","sum","product","lessThanNumber","lessThanEqualNumber","greaterThanNumber","greaterThanEqualNumber","derivedNot","mapValues","values","ObservableArray","_options","allowDuplicates","_array","_addedListeners","_removedListeners","lengthProperty","initialArray","startedCallbacksForItemAddedEmitter","endedCallbacksForItemAddedEmitter","startedCallbacksForItemRemovedEmitter","endedCallbacksForItemRemovedEmitter","disposeObservableArray","_fireItemRemoved","_fireItemAdded","addItemAddedListener","removeItemAddedListener","addItemRemovedListener","removeItemRemovedListener","addListeners","itemAddedListener","itemRemovedListener","addAll","remove","removeAll","contains","clear","forEach","mapFunction","filter","predicate","combiner","getArray","PropertySet","tandemSet","propertySet","getOwnPropertyNames","SUFFIX","addGetterAndSetter","removeProperty","addGetter","toDerivedProperty","propertyNames","getProperties","addDerivedProperty","dependencyNames","propertyKey","setValues","getValues","state","text","BinPacker","rootBin","Bin","allocate","bin","findAvailableBin","sizedBin","use","deallocate","unuse","binTree","padding","children","isSplit","isUsed","splitX","splitY","mainBounds","rightBounds","bottomBounds","mainBin","attemptToCollapse","child","Bounds3","minZ","maxZ","getDepth","getZ","getMinZ","getMaxZ","getBack","back","getFront","front","getCenterZ","centerZ","withMinZ","withMaxZ","dilatedZ","dilatedXYZ","erodedZ","erodedXYZ","shiftedZ","setMinZ","setMaxZ","withIt","dilateZ","dilateXYZ","erodeZ","erodeXYZ","shiftZ","cuboid","Complex","real","imaginary","phase","dividedBy","cMag","conjugate","exponentiated","exp","ONE","I","ccw","ConvexHull2","grahamScan","includeCollinear","isRightTurn","Dimension2","setWidth","setHeight","toBounds","EigenvalueDecomposition","A","getColumnDimension","V","issymmetric","tred2","tql2","H","ort","orthes","hqr2","getV","getRealEigenvalues","getImagEigenvalues","getD","X","Matrix","D","g","hh","l","iter","tst1","eps","hypot","dl1","el1","s2","low","high","cdiv","xr","xi","yr","yi","cdivr","cdivi","nn","exshift","norm","notlast","ra","sa","vr","vi","LinearFunction","isUndefined","evaluate","LUDecomposition","LU","getArrayCopy","getRowDimension","piv","Uint32Array","pivsign","LUcolj","kmax","ik","pk","jk","isNonsingular","getL","getU","getPivot","getDoublePivot","vals","solve","nx","Xmat","getArrayRowMatrix","isArray","SingularValueDecomposition","Arg","nu","U","cs","sn","work","wantu","wantv","nct","nrt","pp","tiny","kase","ks","sp","spm1","epm1","sk","ek","getSingularValues","norm2","cond","rank","tol","QRDecomposition","QR","Rdiag","nrm","isFullRank","getH","getQ","filler","fast","size","i0","i1","j0","j1","norm1","normInf","normF","uminus","checkMatrixDimensions","plusEquals","minusEquals","arrayTimes","arrayTimesEquals","arrayRightDivide","arrayRightDivideEquals","arrayLeftDivide","arrayLeftDivideEquals","matrixOrScalar","isMatrix","matrixcolj","timesEquals","solveTranspose","trace","row","col","extractVector2","extractVector3","extractVector4","setVectors3","vectors","rowVector2","rowVector3","rowVector4","rowVector","columnVector2","columnVector3","columnVector4","columnVector","fromVectors2","data","fromVectors3","fromVectors4","SQRT_HALF","MatrixOps3","index3","set3","transpose3","m1","m2","m3","m5","m6","m7","det3","mult3","m0","m4","m8","mult3LeftTranspose","mult3RightTranspose","mult3BothTranspose","mult3Vector3","swapNegateColumn","idx0","idx1","tmp0","tmp1","tmp2","setIdentity3","setGivens3","preMult3Givens","baseA","baseB","postMult3Givens","applyJacobi3","mS","mQ","a11","a12","a22","lhs","rhs","useAngle","jacobiIteration3","qrAnnihilate3","diagonalValue","targetValue","diagonalSquared","targetSquared","rsqr","svd3","jacobiIterationCount","resultU","resultSigma","resultV","tmpMag","mag0","mag1","mag2","bigEpsilon","columnVectors","getColumnVector3","columnIndex","mult","multRightTranspose","permuteColumns","permutation","permutedColumnIndex","indices","Permutation","recursiveForEachPermutation","element","nextArray","nextPrefix","permutations","forEachPermutation","integers","arrayOrInt","newPermutation","withIndicesPermuted","oldIndices","testMe","Plane3","intersectWithRay","distanceToPlane","XY","XZ","YZ","fromTriangle","isQuaternion","quat","timesQuaternion","toRotationMatrix","flip","xx","xy","xz","xw","yy","yz","yw","zz","zw","fromEulerAngles","yaw","roll","pitch","sinPitch","cosPitch","sinRoll","cosRoll","sinYaw","cosYaw","fromRotationMatrix","ratioA","ratioB","invSinTheta","Random","seed","staticSeed","chipper","randomSeed","setSeed","seedrandom","getSeed","nextBoolean","nextInt","nextDouble","vv","nextGaussian","Ray3","plane","Rectangle","Sphere3","intersect","raydir","intersections","resultB","resultA","Transform4","transformPosition3","transformDelta3","transformNormal3","transformDeltaZ","transformRay","inversePosition3","inverseDelta3","inverseNormal3","inverseDeltaZ","inverseRay","arrayRemove","collect","iterate","ob","detectPrefix","detectPrefixEvent","isEvent","escapeHTML","str","EventTimer","eventModel","eventCallback","timeBeforeNextEvent","getPeriodBeforeNextEvent","step","dt","ConstantEventModel","rate","UniformEventModel","pseudoRandomNumberSource","uniformRandomNumber","PoissonEventModel","loadScript","src","async","cacheBuster","called","script","createElement","onload","onreadystatechange","readyState","getElementsByTagName","parentNode","insertBefore","pairs","partition","satisfied","unsatisfied","isIE","version","getInternetExplorerVersion","rv","re","navigator","appName","RegExp","exec","$1","userAgent","platform","firefox","toLowerCase","mobileSafari","match","safari5","safari6","safari7","ie","ie9","ie10","ie11","android","edge","chromium","paths","KITE","DOT","PHET_CORE","AXON","urlArgs","Date","now"],"mappings":"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,QAGAv4D,EAAA,SAAA,cAEA4F,OAAAoB,KAAAjH,EAAA,QAAA6F,OAAA4C,KAAAzI,EAAA,aAAA6F,OAAAwE,IAAArK,EAAA,YAAA6F,OAAAQ,SAAArG,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AxElvaA,ADwaA;ACvaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC5EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA,ADiBA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjCA,ADkCA;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9DA,AD+DA;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjCA,ADkCA;ACjhXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChHA,ADiHA;AChHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACnnj3BA,ADk3BA;ACjxOA,ADyOA;ACxhbzXA,AD0XA;ACzrtFA,ADstFA;ACrtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxyBA,ADyyBA;ACxypzBA,ADqzBA;ACpzliBA,ADmiBA;ACliBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AClgliBA,ADmiBA;AClivlteA,ADueA;ACtephCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChCA,ADiCA;AChtKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACvpXA,ADqXA;ACpXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC/SA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACrnXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACfvtvrr9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClEA,ADmEA;AClnNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrBA,ADsBA;ACrhhBA,ADihBA;AChhjqhJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC3RA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AChGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACnzdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACjjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACvzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"kite.min.js","sourcesContent":["/**\n * @license almond 0.2.9 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.\n * Available via the MIT or new BSD license.\n * see: http://github.com/jrburke/almond for details\n */\n//Going sloppy to avoid 'use strict' string cost, but strict practices should\n//be followed.\n/*jslint sloppy: true */\n/*global setTimeout: false */\n\nvar requirejs, require, define;\n(function (undef) {\n    var main, req, makeMap, handlers,\n        defined = {},\n        waiting = {},\n        config = {},\n        defining = {},\n        hasOwn = Object.prototype.hasOwnProperty,\n        aps = [].slice,\n        jsSuffixRegExp = /\\.js$/;\n\n    function hasProp(obj, prop) {\n        return hasOwn.call(obj, prop);\n    }\n\n    /**\n     * Given a relative module name, like ./something, normalize it to\n     * a real name that can be mapped to a path.\n     * @param {String} name the relative name\n     * @param {String} baseName a real name that the name arg is relative\n     * to.\n     * @returns {String} normalized name\n     */\n    function normalize(name, baseName) {\n        var nameParts, nameSegment, mapValue, foundMap, lastIndex,\n            foundI, foundStarMap, starI, i, j, part,\n            baseParts = baseName && baseName.split(\"/\"),\n            map = config.map,\n            starMap = (map && map['*']) || {};\n\n        //Adjust any relative paths.\n        if (name && name.charAt(0) === \".\") {\n            //If have a base name, try to normalize against it,\n            //otherwise, assume it is a top-level require that will\n            //be relative to baseUrl in the end.\n            if (baseName) {\n                //Convert baseName to array, and lop off the last part,\n                //so that . matches that \"directory\" and not name of the baseName's\n                //module. For instance, baseName of \"one/two/three\", maps to\n                //\"one/two/three.js\", but we want the directory, \"one/two\" for\n                //this normalization.\n                baseParts = baseParts.slice(0, baseParts.length - 1);\n                name = name.split('/');\n                lastIndex = name.length - 1;\n\n                // Node .js allowance:\n                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {\n                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');\n                }\n\n                name = baseParts.concat(name);\n\n                //start trimDots\n                for (i = 0; i < name.length; i += 1) {\n                    part = name[i];\n                    if (part === \".\") {\n                        name.splice(i, 1);\n                        i -= 1;\n                    } else if (part === \"..\") {\n                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {\n                            //End of the line. Keep at least one non-dot\n                            //path segment at the front so it can be mapped\n                            //correctly to disk. Otherwise, there is likely\n                            //no path mapping for a path starting with '..'.\n                            //This can still fail, but catches the most reasonable\n                            //uses of ..\n                            break;\n                        } else if (i > 0) {\n                            name.splice(i - 1, 2);\n                            i -= 2;\n                        }\n                    }\n                }\n                //end trimDots\n\n                name = name.join(\"/\");\n            } else if (name.indexOf('./') === 0) {\n                // No baseName, so this is ID is resolved relative\n                // to baseUrl, pull off the leading dot.\n                name = name.substring(2);\n            }\n        }\n\n        //Apply map config if available.\n        if ((baseParts || starMap) && map) {\n            nameParts = name.split('/');\n\n            for (i = nameParts.length; i > 0; i -= 1) {\n                nameSegment = nameParts.slice(0, i).join(\"/\");\n\n                if (baseParts) {\n                    //Find the longest baseName segment match in the config.\n                    //So, do joins on the biggest to smallest lengths of baseParts.\n                    for (j = baseParts.length; j > 0; j -= 1) {\n                        mapValue = map[baseParts.slice(0, j).join('/')];\n\n                        //baseName segment has  config, find if it has one for\n                        //this name.\n                        if (mapValue) {\n                            mapValue = mapValue[nameSegment];\n                            if (mapValue) {\n                                //Match, update name to the new value.\n                                foundMap = mapValue;\n                                foundI = i;\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                if (foundMap) {\n                    break;\n                }\n\n                //Check for a star map match, but just hold on to it,\n                //if there is a shorter segment match later in a matching\n                //config, then favor over this star map.\n                if (!foundStarMap && starMap && starMap[nameSegment]) {\n                    foundStarMap = starMap[nameSegment];\n                    starI = i;\n                }\n            }\n\n            if (!foundMap && foundStarMap) {\n                foundMap = foundStarMap;\n                foundI = starI;\n            }\n\n            if (foundMap) {\n                nameParts.splice(0, foundI, foundMap);\n                name = nameParts.join('/');\n            }\n        }\n\n        return name;\n    }\n\n    function makeRequire(relName, forceSync) {\n        return function () {\n            //A version of a require function that passes a moduleName\n            //value for items that may need to\n            //look up paths relative to the moduleName\n            return req.apply(undef, aps.call(arguments, 0).concat([relName, forceSync]));\n        };\n    }\n\n    function makeNormalize(relName) {\n        return function (name) {\n            return normalize(name, relName);\n        };\n    }\n\n    function makeLoad(depName) {\n        return function (value) {\n            defined[depName] = value;\n        };\n    }\n\n    function callDep(name) {\n        if (hasProp(waiting, name)) {\n            var args = waiting[name];\n            delete waiting[name];\n            defining[name] = true;\n            main.apply(undef, args);\n        }\n\n        if (!hasProp(defined, name) && !hasProp(defining, name)) {\n            throw new Error('No ' + name);\n        }\n        return defined[name];\n    }\n\n    //Turns a plugin!resource to [plugin, resource]\n    //with the plugin being undefined if the name\n    //did not have a plugin prefix.\n    function splitPrefix(name) {\n        var prefix,\n            index = name ? name.indexOf('!') : -1;\n        if (index > -1) {\n            prefix = name.substring(0, index);\n            name = name.substring(index + 1, name.length);\n        }\n        return [prefix, name];\n    }\n\n    /**\n     * Makes a name map, normalizing the name, and using a plugin\n     * for normalization if necessary. Grabs a ref to plugin\n     * too, as an optimization.\n     */\n    makeMap = function (name, relName) {\n        var plugin,\n            parts = splitPrefix(name),\n            prefix = parts[0];\n\n        name = parts[1];\n\n        if (prefix) {\n            prefix = normalize(prefix, relName);\n            plugin = callDep(prefix);\n        }\n\n        //Normalize according\n        if (prefix) {\n            if (plugin && plugin.normalize) {\n                name = plugin.normalize(name, makeNormalize(relName));\n            } else {\n                name = normalize(name, relName);\n            }\n        } else {\n            name = normalize(name, relName);\n            parts = splitPrefix(name);\n            prefix = parts[0];\n            name = parts[1];\n            if (prefix) {\n                plugin = callDep(prefix);\n            }\n        }\n\n        //Using ridiculous property names for space reasons\n        return {\n            f: prefix ? prefix + '!' + name : name, //fullName\n            n: name,\n            pr: prefix,\n            p: plugin\n        };\n    };\n\n    function makeConfig(name) {\n        return function () {\n            return (config && config.config && config.config[name]) || {};\n        };\n    }\n\n    handlers = {\n        require: function (name) {\n            return makeRequire(name);\n        },\n        exports: function (name) {\n            var e = defined[name];\n            if (typeof e !== 'undefined') {\n                return e;\n            } else {\n                return (defined[name] = {});\n            }\n        },\n        module: function (name) {\n            return {\n                id: name,\n                uri: '',\n                exports: defined[name],\n                config: makeConfig(name)\n            };\n        }\n    };\n\n    main = function (name, deps, callback, relName) {\n        var cjsModule, depName, ret, map, i,\n            args = [],\n            callbackType = typeof callback,\n            usingExports;\n\n        //Use name if no relName\n        relName = relName || name;\n\n        //Call the callback to define the module, if necessary.\n        if (callbackType === 'undefined' || callbackType === 'function') {\n            //Pull out the defined dependencies and pass the ordered\n            //values to the callback.\n            //Default to [require, exports, module] if no deps\n            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;\n            for (i = 0; i < deps.length; i += 1) {\n                map = makeMap(deps[i], relName);\n                depName = map.f;\n\n                //Fast path CommonJS standard dependencies.\n                if (depName === \"require\") {\n                    args[i] = handlers.require(name);\n                } else if (depName === \"exports\") {\n                    //CommonJS module spec 1.1\n                    args[i] = handlers.exports(name);\n                    usingExports = true;\n                } else if (depName === \"module\") {\n                    //CommonJS module spec 1.1\n                    cjsModule = args[i] = handlers.module(name);\n                } else if (hasProp(defined, depName) ||\n                           hasProp(waiting, depName) ||\n                           hasProp(defining, depName)) {\n                    args[i] = callDep(depName);\n                } else if (map.p) {\n                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});\n                    args[i] = defined[depName];\n                } else {\n                    throw new Error(name + ' missing ' + depName);\n                }\n            }\n\n            ret = callback ? callback.apply(defined[name], args) : undefined;\n\n            if (name) {\n                //If setting exports via \"module\" is in play,\n                //favor that over return value and exports. After that,\n                //favor a non-undefined return value over exports use.\n                if (cjsModule && cjsModule.exports !== undef &&\n                        cjsModule.exports !== defined[name]) {\n                    defined[name] = cjsModule.exports;\n                } else if (ret !== undef || !usingExports) {\n                    //Use the return value from the function.\n                    defined[name] = ret;\n                }\n            }\n        } else if (name) {\n            //May just be an object definition for the module. Only\n            //worry about defining if have a module name.\n            defined[name] = callback;\n        }\n    };\n\n    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {\n        if (typeof deps === \"string\") {\n            if (handlers[deps]) {\n                //callback in this case is really relName\n                return handlers[deps](callback);\n            }\n            //Just return the module wanted. In this scenario, the\n            //deps arg is the module name, and second arg (if passed)\n            //is just the relName.\n            //Normalize module name, if it contains . or ..\n            return callDep(makeMap(deps, callback).f);\n        } else if (!deps.splice) {\n            //deps is a config object, not an array.\n            config = deps;\n            if (config.deps) {\n                req(config.deps, config.callback);\n            }\n            if (!callback) {\n                return;\n            }\n\n            if (callback.splice) {\n                //callback is an array, which means it is a dependency list.\n                //Adjust args if there are dependencies\n                deps = callback;\n                callback = relName;\n                relName = null;\n            } else {\n                deps = undef;\n            }\n        }\n\n        //Support require(['a'])\n        callback = callback || function () {};\n\n        //If relName is a function, it is an errback handler,\n        //so remove it.\n        if (typeof relName === 'function') {\n            relName = forceSync;\n            forceSync = alt;\n        }\n\n        //Simulate async callback;\n        if (forceSync) {\n            main(undef, deps, callback, relName);\n        } else {\n            //Using a non-zero value because of concern for what old browsers\n            //do, and latest browsers \"upgrade\" to 4 if lower value is used:\n            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:\n            //If want a value immediately, use require('id') instead -- something\n            //that works in almond on the global level, but not guaranteed and\n            //unlikely to work in other AMD implementations.\n            setTimeout(function () {\n                main(undef, deps, callback, relName);\n            }, 4);\n        }\n\n        return req;\n    };\n\n    /**\n     * Just drops the config on the floor, but returns req in case\n     * the config return value is used.\n     */\n    req.config = function (cfg) {\n        return req(cfg);\n    };\n\n    /**\n     * Expose module registry for debugging and tooling\n     */\n    requirejs._defined = defined;\n\n    define = function (name, deps, callback) {\n\n        //This module may not have dependencies\n        if (!deps.splice) {\n            //deps is not an array, so probably means\n            //an object literal or factory function for\n            //the value. Adjust args.\n            callback = deps;\n            deps = [];\n        }\n\n        if (!hasProp(defined, name) && !hasProp(waiting, name)) {\n            waiting[name] = [name, deps, callback];\n        }\n    };\n\n    define.amd = {\n        jQuery: true\n    };\n}());\n\ndefine(\"almond\", function(){});\n\n","// Copyright 2015, University of Colorado Boulder\n\n/**\n * @author Jonathan Olson\n * @author Chris Malley (PixelZoom, Inc.)\n */\ndefine( 'PHET_CORE/Namespace',['require'],function( require ) {\n  'use strict';\n\n  /**\n   * @param {string} name\n   * @constructor\n   */\n  function Namespace( name ) {\n\n    this.name = name; // @public (read-only)\n\n    if ( window.phet ) {\n      assert && assert( !window.phet[ name ], 'namespace ' + name + ' already exists' );\n      window.phet[ name ] = this;\n    }\n  }\n\n  Namespace.prototype = {\n\n    constructor: Namespace,\n\n    /**\n     * Registers a key-value pair with the namespace.\n     *\n     * If there are no dots ('.') in the key, it will be assigned to the namespace. For example:\n     * - x.register( 'A', A );\n     * will set x.A = A.\n     *\n     * If the key contains one or more dots ('.'), it's treated somewhat like a path expression. For instance, if the\n     * following is called:\n     * - x.register( 'A.B.C', C );\n     * then the register function will navigate to the object x.A.B and add x.A.B.C = C.\n     *\n     * @param {string} key\n     * @param {*} value\n     * @public\n     */\n    register: function( key, value ) {\n\n      // If the key isn't compound (doesn't contain '.'), we can just look it up on this namespace\n      if ( key.indexOf( '.' ) < 0 ) {\n        assert && assert( !this[ key ], key + ' is already registered for namespace ' + this.name );\n        this[ key ] = value;\n      }\n      // Compound (contains '.' at least once). x.register( 'A.B.C', C ) should set x.A.B.C.\n      else {\n        var keys = key.split( '.' ); // e.g. [ 'A', 'B', 'C' ]\n\n        // Walk into the namespace, verifying that each level exists. e.g. parent => x.A.B\n        var parent = this;\n        for ( var i = 0; i < keys.length - 1; i++ ) { // for all but the last key\n          assert && assert( !!parent[ keys[ i ] ],\n            [ this.name ].concat( keys.slice( 0, i + 1 ) ).join( '.' ) + ' needs to be defined to register ' + key );\n\n          parent = parent[ keys[ i ] ];\n        }\n\n        // Write into the inner namespace, e.g. x.A.B[ 'C' ] = C\n        var lastKey = keys[ keys.length - 1 ];\n        assert && assert( !parent[ lastKey ], key + ' is already registered for namespace ' + this.name );\n        parent[ lastKey ] = value;\n      }\n\n      return value;\n    }\n  };\n\n  return Namespace;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\ndefine( 'PHET_CORE/phetCore',['require','PHET_CORE/Namespace'],function( require ) {\n  'use strict';\n\n  var Namespace = require( 'PHET_CORE/Namespace' );\n\n  // no phetAllocation initialized, since we don't need it with just phet-core, and this file is required before that\n\n  var phetCore = new Namespace( 'phetCore' );\n\n  // Namespace can't require this file, so we register it as a special case.\n  phetCore.register( 'Namespace', Namespace );\n\n  return phetCore;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Object instance allocation tracking, so we can cut down on garbage collection.\n *\n * Sample usage:\n * 1. Run the sim and set up the scenario that you wish to profile\n * 2. In the JS console, type: window.alloc={}\n * 3. Wait until you have taken enough data\n * 4. Type x = window.alloc; delete window.alloc;\n *\n * Now you can inspect the x variable which contains the allocation information.\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'PHET_CORE/phetAllocation',['require','PHET_CORE/phetCore'],function( require ) {\n  'use strict';\n\n  var phetCore = require( 'PHET_CORE/phetCore' );\n\n  function phetAllocation( name ) {\n    if ( window.alloc ) {\n      var stack;\n      try { throw new Error(); }\n      catch( e ) { stack = e.stack; }\n\n      if ( !window.alloc[ name ] ) {\n        window.alloc[ name ] = { count: 0, stacks: {} };\n      }\n      var log = window.alloc[ name ];\n\n      log.count++;\n      if ( !log.stacks[ stack ] ) {\n        log.stacks[ stack ] = 1;\n      }\n      else {\n        log.stacks[ stack ] += 1;\n      }\n      log.report = function() {\n        var stacks = Object.keys( log.stacks );\n        stacks = _.sortBy( stacks, function( key ) { return log.stacks[ key ]; } );\n        _.each( stacks, function( stack ) {\n          console.log( log.stacks[ stack ] + ': ' + stack );\n        } );\n      };\n    }\n  }\n\n  phetCore.register( 'phetAllocation', phetAllocation );\n\n  return phetAllocation;\n} );\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * The main 'kite' namespace object for the exported (non-Require.js) API. Used internally\n * since it prevents Require.js issues with circular dependencies.\n *\n * The returned kite object namespace may be incomplete if not all modules are listed as\n * dependencies. Please use the 'main' module for that purpose if all of Kite is desired.\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'KITE/kite',['require','PHET_CORE/Namespace','PHET_CORE/phetAllocation'],function( require ) {\n  'use strict';\n\n  var Namespace = require( 'PHET_CORE/Namespace' );\n\n  // object allocation tracking\n  window.phetAllocation = require( 'PHET_CORE/phetAllocation' );\n\n  var kite = new Namespace( 'kite' );\n\n  // Since SVG doesn't support parsing scientific notation (e.g. 7e5), we need to output fixed decimal-point strings.\n  // Since this needs to be done quickly, and we don't particularly care about slight rounding differences (it's\n  // being used for display purposes only, and is never shown to the user), we use the built-in JS toFixed instead of\n  // Dot's version of toFixed. See https://github.com/phetsims/kite/issues/50\n  kite.register( 'svgNumber', function( n ) {\n    return n.toFixed( 20 );\n  } );\n\n  // will be filled in by other modules\n  return kite;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Like Underscore's _.extend, but with hardcoded support for ES5 getters/setters.\n *\n * See https://github.com/documentcloud/underscore/pull/986.\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'PHET_CORE/extend',['require','PHET_CORE/phetCore'],function( require ) {\n  'use strict';\n\n  var phetCore = require( 'PHET_CORE/phetCore' );\n\n  function extend( obj ) {\n    _.each( Array.prototype.slice.call( arguments, 1 ), function( source ) {\n      if ( source ) {\n        for ( var prop in source ) {\n          Object.defineProperty( obj, prop, Object.getOwnPropertyDescriptor( source, prop ) );\n        }\n      }\n    } );\n    return obj;\n  }\n\n  phetCore.register( 'extend', extend );\n\n  return extend;\n} );\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Utility function for setting up prototypal inheritance.\n * Maintains supertype.prototype.constructor while properly copying ES5 getters and setters.\n * Supports adding functions to both the prototype itself and the constructor function.\n *\n * Usage:\n *\n * // Call the supertype constructor somewhere in the subtype's constructor.\n * function A() { scenery.Node.call( this ); };\n *\n * // Add prototype functions and/or 'static' functions\n * return inherit( scenery.Node, A, {\n *   customBehavior: function() { ... },\n *   isAnA: true\n * }, {\n *   someStaticFunction: function() { ...}\n * } );\n *\n * // client calls\n * new A().isAnA; // true\n * new scenery.Node().isAnA; // undefined\n * new A().constructor.name; // 'A'\n * A.someStaticFunction();\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\ndefine( 'PHET_CORE/inherit',['require','PHET_CORE/phetCore','PHET_CORE/extend'],function( require ) {\n  'use strict';\n\n  var phetCore = require( 'PHET_CORE/phetCore' );\n  var extend = require( 'PHET_CORE/extend' );\n\n  /**\n   * @param supertype           Constructor for the supertype.\n   * @param subtype             Constructor for the subtype. Generally should contain supertype.call( this, ... )\n   * @param prototypeProperties [optional] object containing properties that will be set on the prototype.\n   * @param staticProperties [optional] object containing properties that will be set on the constructor function itself\n   */\n  function inherit( supertype, subtype, prototypeProperties, staticProperties ) {\n    assert && assert( typeof supertype === 'function' );\n\n    function F() {}\n\n    F.prototype = supertype.prototype; // so new F().__proto__ === supertype.prototype\n\n    subtype.prototype = extend( // extend will combine the properties and constructor into the new F copy\n      new F(),                  // so new F().__proto__ === supertype.prototype, and the prototype chain is set up nicely\n      { constructor: subtype }, // overrides the constructor properly\n      prototypeProperties       // [optional] additional properties for the prototype, as an object.\n    );\n\n    //Copy the static properties onto the subtype constructor so they can be accessed 'statically'\n    extend( subtype, staticProperties );\n\n    return subtype; // pass back the subtype so it can be returned immediately as a module export\n  }\n\n  phetCore.register( 'inherit', inherit );\n\n  return inherit;\n} );\n","// Copyright 2013-2015, University of Colorado Boulder\n\ndefine( 'AXON/axon',['require','PHET_CORE/Namespace'],function( require ) {\n  'use strict';\n\n  var Namespace = require( 'PHET_CORE/Namespace' );\n\n  return new Namespace( 'axon' );\n} );\n\n","// Copyright 2014-2015, University of Colorado Boulder\n\n/**\n * If given an Array, removes all of its elements and returns it. Otherwise, if given a falsy value\n * (null/undefined/etc.), it will create and return a fresh Array.\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'PHET_CORE/cleanArray',['require','PHET_CORE/phetCore'],function( require ) {\n  'use strict';\n\n  var phetCore = require( 'PHET_CORE/phetCore' );\n\n  function cleanArray( arr ) {\n    assert && assert( !arr || ( arr instanceof Array ), 'cleanArray either takes an Array' );\n\n    if ( arr ) {\n      // fastest way to clear an array (http://stackoverflow.com/questions/1232040/how-to-empty-an-array-in-javascript, http://jsperf.com/array-destroy/32)\n      // also, better than length=0, since it doesn't create significant garbage collection (like length=0), tested on Chrome 34.\n      while ( arr.length ) {\n        arr.pop();\n      }\n      return arr;\n    }\n    else {\n      return [];\n    }\n  }\n\n  phetCore.register( 'cleanArray', cleanArray );\n\n  return cleanArray;\n} );\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Lightweight event & listener abstraction.\n * @author Sam Reid\n */\ndefine( 'AXON/Events',['require','AXON/axon','PHET_CORE/cleanArray'],function( require ) {\n  'use strict';\n\n  // modules\n  var axon = require( 'AXON/axon' );\n  var cleanArray = require( 'PHET_CORE/cleanArray' );\n\n  /**\n   * @class Events\n   * @constructor\n   */\n  function Events( options ) {\n\n    this._eventListeners = {}; // @private\n    this._staticEventListeners = {}; // @private\n\n    options && options.tandem && options.tandem.addInstance( this );\n    this.disposeEvents = function() {\n      options && options.tandem && options.tandem.removeInstance( this );\n    };\n  }\n\n  axon.register( 'Events', Events );\n\n  Events.prototype = {\n\n    // @public\n    dispose: function() {\n      this.disposeEvents();\n    },\n\n    /////////////////////////////////////////////\n    // Below this point are the functions for event handling, basically orthogonal to property value change notifications\n\n    /**\n     * Register a listener when the specified eventName is triggered. Use off() to remove.\n     * Concurrent modification of listeners (on/off) from within the callback is acceptable.\n     * @param {string} eventName the name for the event channel\n     * @param {function} callback\n     * @public\n     */\n    on: function( eventName, callback ) {\n      assert && assert( typeof eventName === 'string', 'eventName should be a string' );\n      assert && assert( typeof callback === 'function', 'callback should be a function' );\n\n      this._eventListeners[ eventName ] = this._eventListeners[ eventName ] || [];\n      this._eventListeners[ eventName ].push( callback );\n    },\n\n    /**\n     * Register a listener when the specified eventName is triggered. Listener should be \"static\", meaning:\n     *   1. It shall not add/remove any \"static\" listeners (including itself) while it is being called (as any type of side-effect), and\n     *   2. \"static\" listeners should not be added while a non-static listener (on the same object) is being called.\n     * These restrictions allow us to guarantee that all listeners attached when an event is triggered are called.\n     * Since static listeners are stored separately, use offStatic() to remove listeners added with onStatic()\n     * @param {string} eventName the name for the event channel\n     * @param {function} callback\n     * @public\n     */\n    onStatic: function( eventName, callback ) {\n      assert && assert( typeof eventName === 'string', 'eventName should be a string' );\n      assert && assert( typeof callback === 'function', 'callback should be a function' );\n\n      this._staticEventListeners[ eventName ] = this._staticEventListeners[ eventName ] || [];\n      this._staticEventListeners[ eventName ].push( callback );\n    },\n\n    /**\n     * Adds a function which will only be called back once, after which it is removed as a listener.\n     * If you need to remove a function added with 'once' you will have to remove its handle, which is returned by the function.\n     * @param {string} eventName the name for the event channel\n     * @param {function} callback function to be called back once (if at all)\n     * @public\n     */\n    once: function( eventName, callback ) {\n      assert && assert( typeof eventName === 'string', 'eventName should be a string' );\n      assert && assert( typeof callback === 'function', 'callback should be a function' );\n\n      var events = this;\n      var wrappedCallback = function() {\n        events.off( eventName, wrappedCallback );\n\n        //If no arguments being passed through, call back without processing arguments, for possible speed\n        if ( arguments.length === 0 ) {\n          callback();\n        }\n        else {\n\n          //General case of passing events through to the wrapped callback function\n          callback.apply( this, Array.prototype.slice.call( arguments, 0 ) );\n        }\n      };\n      this.on( eventName, wrappedCallback );\n\n      //Return the handle in case it needs to be removed.\n      return wrappedCallback;\n    },\n\n    /**\n     * Remove a listener added with on() from the specified event type.  Does nothing if the listener did not exist.\n     * @param {string} eventName the name for the event channel\n     * @param {function} callback\n     * @public\n     */\n    off: function( eventName, callback ) {\n      assert && assert( typeof eventName === 'string', 'eventName should be a string' );\n      assert && assert( typeof callback === 'function', 'callback should be a function' );\n\n      var index = -1;\n      if ( this._eventListeners[ eventName ] ) {\n        index = this._eventListeners[ eventName ].indexOf( callback );\n        if ( index !== -1 ) {\n          this._eventListeners[ eventName ].splice( index, 1 );\n        }\n      }\n\n      return index; // so we can tell if we actually removed a listener\n    },\n\n    /**\n     * Remove a listener added with onStatic() from the specified event type.  Does nothing if the listener did not exist.\n     * @param {string} eventName the name for the event channel\n     * @param {function} callback\n     * @public\n     */\n    offStatic: function( eventName, callback ) {\n      assert && assert( typeof eventName === 'string', 'eventName should be a string' );\n      assert && assert( typeof callback === 'function', 'callback should be a function' );\n\n      var index = -1;\n      if ( this._staticEventListeners[ eventName ] ) {\n        index = this._staticEventListeners[ eventName ].indexOf( callback );\n        if ( index !== -1 ) {\n          this._staticEventListeners[ eventName ].splice( index, 1 );\n        }\n      }\n\n      return index; // so we can tell if we actually removed a listener\n    },\n\n    /**\n     * Checks for the existence of a specific listener, attached to a specific event name. Doesn't check for static listeners\n     * @param {string} eventName the name for the event channel\n     * @param {function} callback\n     * @returns {boolean}\n     * @public\n     */\n    hasListener: function( eventName, callback ) {\n      assert && assert( typeof eventName === 'string', 'eventName should be a string' );\n      assert && assert( typeof callback === 'function', 'callback should be a function' );\n\n      var array = this._eventListeners[ eventName ];\n      return !!array && array.indexOf( callback ) >= 0;\n    },\n\n    /**\n     * Checks for the existence of a specific static listener, attached to a specific event name. Doesn't check for non-static listeners\n     * @param {string} eventName the name for the event channel\n     * @param {function} callback\n     * @returns {boolean}\n     * @public\n     */\n    hasStaticListener: function( eventName, callback ) {\n      assert && assert( typeof eventName === 'string', 'eventName should be a string' );\n      assert && assert( typeof callback === 'function', 'callback should be a function' );\n\n      var array = this._staticEventListeners[ eventName ];\n      return !!array && array.indexOf( callback ) >= 0;\n    },\n\n    /**\n     * Removes all listeners added with on() and onStatic().\n     * @public\n     */\n    removeAllEventListeners: function() {\n      var eventName;\n      for ( eventName in this._eventListeners ) {\n        cleanArray( this._eventListeners[ eventName ] );\n      }\n      for ( eventName in this._staticEventListeners ) {\n        cleanArray( this._staticEventListeners[ eventName ] );\n      }\n    },\n\n    /**\n     * Trigger an event with the specified name and arguments.\n     * @param {string} eventName the name for the event channel\n     * @param args... optional arguments to pass to the listeners\n     * @public\n     */\n    trigger: function( eventName ) {\n      assert && assert( typeof eventName === 'string', 'eventName should be a string' );\n\n      var listeners = this._eventListeners[ eventName ];\n      var staticListeners = this._staticEventListeners[ eventName ];\n\n      // listener quantities for normal and static\n      var count = listeners ? listeners.length : 0;\n      var staticCount = staticListeners ? staticListeners.length : 0;\n\n      // only compute our arguments suffix once, instead of in our inner loop\n      var suffix;\n      var hasNoArguments = arguments.length === 1;\n      if ( !hasNoArguments && ( count > 0 || staticCount > 0 ) ) {\n        phetAllocation && phetAllocation( 'Array' );\n        suffix = Array.prototype.slice.call( arguments, 1 );\n      }\n\n      // make a copy of non-static listeners, in case callback removes listener\n      if ( count > 0 ) {\n        listeners = listeners.slice();\n      }\n\n      var i;\n\n      for ( i = 0; i < count; i++ ) {\n        var listener = listeners[ i ];\n\n        //Simple case of no arguments, call it separately for improved performance in case it is faster (untested)\n        if ( hasNoArguments ) {\n          listener();\n        }\n        else {\n          listener.apply( this, suffix );\n        }\n\n        assert && assert( !staticListeners || staticListeners.length === staticCount, 'Concurrent modifications of static listeners from within non-static listeners are forbidden' );\n      }\n\n      for ( i = 0; i < staticCount; i++ ) {\n        var staticListener = staticListeners[ i ];\n\n        //Simple case of no arguments, call it separately for improved performance in case it is faster (untested)\n        if ( hasNoArguments ) {\n          staticListener( arguments );\n        }\n        else {\n          staticListener.apply( this, suffix );\n        }\n\n        assert && assert( staticListeners.length === staticCount, 'Concurrent modifications from static listeners are forbidden' );\n      }\n    },\n\n    /**\n     * Trigger an event with the specified name, with no arguments.  Since the number of arguments is known\n     * no additional work is required to process and pass through the arguments (as opposed to trigger() itself).\n     * @param {string} eventName the name for the event channel\n     * @public\n     */\n    trigger0: function( eventName ) {\n      assert && assert( arguments.length === 1 );\n      assert && assert( typeof eventName === 'string', 'eventName should be a string' );\n\n      var listeners = this._eventListeners[ eventName ];\n      var staticListeners = this._staticEventListeners[ eventName ];\n\n      // listener quantities for normal and static\n      var count = listeners ? listeners.length : 0;\n      var staticCount = staticListeners ? staticListeners.length : 0;\n\n      // make a copy of non-static listeners, in case callback removes listener\n      if ( count > 0 ) {\n        listeners = listeners.slice();\n      }\n\n      var i;\n\n      for ( i = 0; i < count; i++ ) {\n        listeners[ i ]();\n\n        assert && assert( !staticListeners || staticListeners.length === staticCount, 'Concurrent modifications of static listeners from within non-static listeners are forbidden' );\n      }\n\n      for ( i = 0; i < staticCount; i++ ) {\n        staticListeners[ i ]();\n\n        assert && assert( staticListeners.length === staticCount, 'Concurrent modifications from static listeners are forbidden' );\n      }\n    },\n\n    /**\n     * Trigger an event with the specified name, with a single argument.  Since the number of arguments is known\n     * no additional work is required to process and pass through the arguments (as opposed to trigger() itself).\n     * @param {string} eventName the name for the event channel\n     * @param {Object} param1 - the argument to pass through to the listeners\n     * @public\n     */\n    trigger1: function( eventName, param1 ) {\n      assert && assert( arguments.length === 2 );\n      assert && assert( typeof eventName === 'string', 'eventName should be a string' );\n\n      var listeners = this._eventListeners[ eventName ];\n      var staticListeners = this._staticEventListeners[ eventName ];\n\n      // listener quantities for normal and static\n      var count = listeners ? listeners.length : 0;\n      var staticCount = staticListeners ? staticListeners.length : 0;\n\n      // make a copy of non-static listeners, in case callback removes listener\n      if ( count > 0 ) {\n        listeners = listeners.slice();\n      }\n\n      var i;\n\n      for ( i = 0; i < count; i++ ) {\n        listeners[ i ]( param1 );\n\n        assert && assert( !staticListeners || staticListeners.length === staticCount, 'Concurrent modifications of static listeners from within non-static listeners are forbidden' );\n      }\n\n      for ( i = 0; i < staticCount; i++ ) {\n        staticListeners[ i ]( param1 );\n\n        assert && assert( staticListeners.length === staticCount, 'Concurrent modifications from static listeners are forbidden' );\n      }\n    },\n\n    /**\n     * Trigger an event with the specified name, with two arguments.  Since the number of arguments is known\n     * no additional work is required to process and pass through the arguments (as opposed to trigger() itself).\n     * @param {string} eventName the name for the event channel\n     * @param {Object} param1 - the first parameter\n     * @param {Object} param2 - the second parameter\n     * @public\n     */\n    trigger2: function( eventName, param1, param2 ) {\n      assert && assert( arguments.length === 3 );\n      assert && assert( typeof eventName === 'string', 'eventName should be a string' );\n\n      var listeners = this._eventListeners[ eventName ];\n      var staticListeners = this._staticEventListeners[ eventName ];\n\n      // listener quantities for normal and static\n      var count = listeners ? listeners.length : 0;\n      var staticCount = staticListeners ? staticListeners.length : 0;\n\n      // make a copy of non-static listeners, in case callback removes listener\n      if ( count > 0 ) {\n        listeners = listeners.slice();\n      }\n\n      var i;\n\n      for ( i = 0; i < count; i++ ) {\n        listeners[ i ]( param1, param2 );\n\n        assert && assert( !staticListeners || staticListeners.length === staticCount, 'Concurrent modifications of static listeners from within non-static listeners are forbidden' );\n      }\n\n      for ( i = 0; i < staticCount; i++ ) {\n        staticListeners[ i ]( param1, param2 );\n\n        assert && assert( staticListeners.length === staticCount, 'Concurrent modifications from static listeners are forbidden' );\n      }\n    }\n  };\n\n  return Events;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\ndefine( 'DOT/dot',['require','PHET_CORE/Namespace','PHET_CORE/phetAllocation'],function( require ) {\n  'use strict';\n\n  var Namespace = require( 'PHET_CORE/Namespace' );\n\n  // object allocation tracking\n  window.phetAllocation = require( 'PHET_CORE/phetAllocation' );\n\n  var dot = new Namespace( 'dot' );\n\n  dot.register( 'v2', function( x, y ) { return new dot.Vector2( x, y ); } );\n  dot.register( 'v3', function( x, y, z ) { return new dot.Vector3( x, y, z ); } );\n  dot.register( 'v4', function( x, y, z, w ) { return new dot.Vector4( x, y, z, w ); } );\n\n  // TODO: performance: check browser speed to compare how fast this is. We may need to add a 32 option for GL ES.\n  dot.register( 'FastArray', window.Float64Array ? window.Float64Array : window.Array );\n\n  // will be filled in by other modules\n  return dot;\n} );\n\n","// Copyright 2015, University of Colorado Boulder\n\n/**\n * Object pooling mix-in, for cases where creating new objects is expensive, and we'd rather mark some objects as able\n * to be reused (i.e. 'in the pool'). This provides a pool of objects for each type it is invoked on. It allows for\n * getting \"new\" objects that can either be constructed OR pulled in from a pool, and requires that the objects are\n * essentially able to \"re-run\" the constructor.\n *\n * This is usually done by having an initialize() method on the objects with the same call signature as the constructor,\n * and the constructor basically forwards to initialize(). Thus most \"construction\" logic is in the initialize() call.\n * Then when putting the object back in the pool, references should be released, so memory isn't leaked. The initialize()\n * function needs to support being called multiple times, and generally shouldn't create additional objects on calls\n * after the first.\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'PHET_CORE/Poolable',['require','PHET_CORE/phetCore','PHET_CORE/extend'],function( require ) {\n  'use strict';\n\n  var phetCore = require( 'PHET_CORE/phetCore' );\n  var extend = require( 'PHET_CORE/extend' );\n\n  var Poolable = {\n    /**\n     * Adds the pool and some static methods to the type, and adds the instance method freeToPool() to the type's\n     * prototype.\n     * @public\n     *\n     * Options available:\n     * - maxPoolSize {number} - Maximum number of items that can be allowed in the pool\n     * - initialSize {number} - If non-zero, that many fresh items will be constructed if there is a defaultFactory\n     * - defaultFactory {function() => Type} - Factory function with no parameters that creates an instance of the type.\n     *     Allows Type.dirtyFromPool() and Type.fillPool()\n     * - constructorDuplicateFactory { function( pool ) => function( ... ) => Type}\n     *     Creates a factory function that takes the same parameters as the type's constructors. Allows\n     *     Type.createFromPool( ... )\n     *\n     * @param {function} type - The constructor for the type\n     * @param {Object} [options] -\n     */\n    mixin: function( type, options ) {\n      var proto = type.prototype;\n\n      // defaults\n      options = extend( {\n        maxPoolSize: 50, // since we don't want to blow too much memory\n        initialSize: 0\n      }, options );\n\n      var pool = type.pool = [];\n\n      /*\n       * For example: defaultFactory: function() { return new Vector2(); }\n       */\n      if ( options.defaultFactory ) {\n        // @public\n        type.dirtyFromPool = function() {\n          if ( pool.length ) {\n            // return an instance in an arbitrary (dirty) state\n            return pool.pop();\n          }\n          else {\n            // else return a new default instance\n            return options.defaultFactory();\n          }\n        };\n\n        // @public - fills the object pool up to n instances\n        type.fillPool = function( n ) {\n          // fill up the object pool to the initial size\n          while ( pool.length < n ) {\n            pool.push( options.defaultFactory() );\n          }\n        };\n\n        // fill the pool initially to the initial size\n        type.fillPool( options.initialSize );\n      }\n\n      /*\n       * For example: constructorDuplicateFactory:\n       *                function( pool ) {\n       *                  return function( x, y ) {\n       *                    if ( pool.length ) {\n       *                      return pool.pop().set( x, y );\n       *                    } else {\n       *                      return new Vector2( x, y );\n       *                    }\n       *                  }\n       *                }\n       * It allows arbitrary creation (from the constructor / etc) or mutation (from the pooled instance).\n       */\n      if ( options.constructorDuplicateFactory ) {\n        // @public\n        type.createFromPool = options.constructorDuplicateFactory( pool );\n      }\n\n      /*\n       * @public\n       * Frees the object to the pool (instance.freeToPool())\n       */\n      proto.freeToPool = function() {\n        if ( pool.length < options.maxPoolSize ) {\n          pool.push( this );\n        }\n      };\n    }\n  };\n  phetCore.register( 'Poolable', Poolable );\n\n  return Poolable;\n} );\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Utility functions for Dot, placed into the dot.X namespace.\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/Util',['require','DOT/dot'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n  // require( 'DOT/Vector2' ); // Require.js doesn't like the circular reference\n\n  // constants\n  var EPSILON = Number.MIN_VALUE;\n  var TWO_PI = 2 * Math.PI;\n\n  // \"static\" variables used in boxMullerTransform\n  var generate;\n  var z0;\n  var z1;\n\n  var Util = {\n    /**\n     * Returns the original value if it is inclusively within the [max,min] range. If it's below the range, min is\n     * returned, and if it's above the range, max is returned.\n     * @public\n     *\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @returns {number}\n     */\n    clamp: function( value, min, max ) {\n      if ( value < min ) {\n        return min;\n      }\n      else if ( value > max ) {\n        return max;\n      }\n      else {\n        return value;\n      }\n    },\n\n    /**\n     * Returns a number in the range $n\\in[\\mathrm{min},\\mathrm{max})$ with the same equivalence class as the input\n     * value mod (max-min), i.e. for a value $m$, $m\\equiv n\\ (\\mathrm{mod}\\ \\mathrm{max}-\\mathrm{min})$.\n     * @public\n     *\n     * The 'down' indicates that if the value is equal to min or max, the max is returned.\n     *\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @returns {number}\n     */\n    moduloBetweenDown: function( value, min, max ) {\n      assert && assert( max > min, 'max > min required for moduloBetween' );\n\n      var divisor = max - min;\n\n      // get a partial result of value-min between [0,divisor)\n      var partial = ( value - min ) % divisor;\n      if ( partial < 0 ) {\n        // since if value-min < 0, the remainder will give us a negative number\n        partial += divisor;\n      }\n\n      return partial + min; // add back in the minimum value\n    },\n\n    /**\n     * Returns a number in the range $n\\in(\\mathrm{min},\\mathrm{max}]$ with the same equivalence class as the input\n     * value mod (max-min), i.e. for a value $m$, $m\\equiv n\\ (\\mathrm{mod}\\ \\mathrm{max}-\\mathrm{min})$.\n     * @public\n     *\n     * The 'up' indicates that if the value is equal to min or max, the min is returned.\n     *\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @returns {number}\n     */\n    moduloBetweenUp: function( value, min, max ) {\n      return -Util.moduloBetweenDown( -value, -max, -min );\n    },\n\n    /**\n     * Returns an array of integers from A to B (inclusive), e.g. rangeInclusive( 4, 7 ) maps to [ 4, 5, 6, 7 ].\n     * @public\n     *\n     * @param {number} a\n     * @param {number} b\n     * @returns {Array.<number>}\n     */\n    rangeInclusive: function( a, b ) {\n      if ( b < a ) {\n        return [];\n      }\n      var result = new Array( b - a + 1 );\n      for ( var i = a; i <= b; i++ ) {\n        result[ i - a ] = i;\n      }\n      return result;\n    },\n\n    /**\n     * Returns an array of integers from A to B (exclusive), e.g. rangeExclusive( 4, 7 ) maps to [ 5, 6 ].\n     * @public\n     *\n     * @param {number} a\n     * @param {number} b\n     * @returns {Array.<number>}\n     */\n    rangeExclusive: function( a, b ) {\n      return Util.rangeInclusive( a + 1, b - 1 );\n    },\n\n    /**\n     * Converts degrees to radians.\n     * @public\n     *\n     * @param {number} degrees\n     * @returns {number}\n     */\n    toRadians: function( degrees ) {\n      return Math.PI * degrees / 180;\n    },\n\n    /**\n     * Converts radians to degrees.\n     * @public\n     *\n     * @param {number} radians\n     * @returns {number}\n     */\n    toDegrees: function( radians ) {\n      return 180 * radians / Math.PI;\n    },\n\n    /**\n     * Greatest Common Denominator, using https://en.wikipedia.org/wiki/Euclidean_algorithm\n     * @public\n     *\n     * @param {number} a\n     * @param {number} b\n     */\n    gcd: function( a, b ) {\n      return b === 0 ? a : this.gcd( b, a % b );\n    },\n\n    /**\n     * Intersection point between the lines defined by the line segments p1-2 and p3-p4. Currently does not handle\n     * parallel lines.\n     * @public\n     *\n     * @param {Vector2} p1\n     * @param {Vector2} p2\n     * @param {Vector2} p3\n     * @param {Vector2} p4\n     * @returns {Vector2}\n     */\n    lineLineIntersection: function( p1, p2, p3, p4 ) {\n      // Taken from an answer in http://stackoverflow.com/questions/385305/efficient-maths-algorithm-to-calculate-intersections\n      var x12 = p1.x - p2.x;\n      var x34 = p3.x - p4.x;\n      var y12 = p1.y - p2.y;\n      var y34 = p3.y - p4.y;\n\n      var denom = x12 * y34 - y12 * x34;\n\n      var a = p1.x * p2.y - p1.y * p2.x;\n      var b = p3.x * p4.y - p3.y * p4.x;\n\n      return new dot.Vector2(\n        ( a * x34 - x12 * b ) / denom,\n        ( a * y34 - y12 * b ) / denom\n      );\n    },\n\n    /**\n     * Ray-sphere intersection, returning information about the closest intersection. Assumes the sphere is centered\n     * at the origin (for ease of computation), transform the ray to compensate if needed.\n     * @public\n     *\n     * If there is no intersection, null is returned. Otherwise an object will be returned like:\n     * <pre class=\"brush: js\">\n     * {\n     *   distance: {number}, // distance from the ray position to the intersection\n     *   hitPoint: {Vector3}, // location of the intersection\n     *   normal: {Vector3}, // the normal of the sphere's surface at the intersection\n     *   fromOutside: {boolean}, // whether the ray intersected the sphere from outside the sphere first\n     * }\n     * </pre>\n     *\n     * @param {number} radius\n     * @param {Ray3} ray\n     * @param {number} epsilon\n     * @returns {Object}\n     */\n    // assumes a sphere with the specified radius, centered at the origin\n    sphereRayIntersection: function( radius, ray, epsilon ) {\n      epsilon = epsilon === undefined ? 1e-5 : epsilon;\n\n      // center is the origin for now, but leaving in computations so that we can change that in the future. optimize away if needed\n      var center = new dot.Vector3();\n\n      var rayDir = ray.direction;\n      var pos = ray.position;\n      var centerToRay = pos.minus( center );\n\n      // basically, we can use the quadratic equation to solve for both possible hit points (both +- roots are the hit points)\n      var tmp = rayDir.dot( centerToRay );\n      var centerToRayDistSq = centerToRay.magnitudeSquared();\n      var det = 4 * tmp * tmp - 4 * ( centerToRayDistSq - radius * radius );\n      if ( det < epsilon ) {\n        // ray misses sphere entirely\n        return null;\n      }\n\n      var base = rayDir.dot( center ) - rayDir.dot( pos );\n      var sqt = Math.sqrt( det ) / 2;\n\n      // the \"first\" entry point distance into the sphere. if we are inside the sphere, it is behind us\n      var ta = base - sqt;\n\n      // the \"second\" entry point distance\n      var tb = base + sqt;\n\n      if ( tb < epsilon ) {\n        // sphere is behind ray, so don't return an intersection\n        return null;\n      }\n\n      var hitPositionB = ray.pointAtDistance( tb );\n      var normalB = hitPositionB.minus( center ).normalized();\n\n      if ( ta < epsilon ) {\n        // we are inside the sphere\n        // in => out\n        return {\n          distance: tb,\n          hitPoint: hitPositionB,\n          normal: normalB.negated(),\n          fromOutside: false\n        };\n      }\n      else {\n        // two possible hits\n        var hitPositionA = ray.pointAtDistance( ta );\n        var normalA = hitPositionA.minus( center ).normalized();\n\n        // close hit, we have out => in\n        return {\n          distance: ta,\n          hitPoint: hitPositionA,\n          normal: normalA,\n          fromOutside: true\n        };\n      }\n    },\n\n    /**\n     * Returns an array of the real roots of the quadratic equation $ax^2 + bx + c=0$ (there will be between 0 and 2 roots).\n     * @public\n     *\n     * @param {number} a\n     * @param {number} b\n     * @param {number} c\n     * @returns {Array.<number>}\n     */\n    solveQuadraticRootsReal: function( a, b, c ) {\n      var epsilon = 1E7;\n\n      //We need to test whether a is several orders of magnitude less than b or c. If so, return the result as a solution to the linear (easy) equation\n      if ( a === 0 || Math.abs( b / a ) > epsilon || Math.abs( c / a ) > epsilon ) {\n        return [ -c / b ];\n      }\n\n      var discriminant = b * b - 4 * a * c;\n      if ( discriminant < 0 ) {\n        return [];\n      }\n      var sqrt = Math.sqrt( discriminant );\n      // TODO: how to handle if discriminant is 0? give unique root or double it?\n      // TODO: probably just use Complex for the future\n      return [\n        ( -b - sqrt ) / ( 2 * a ),\n        ( -b + sqrt ) / ( 2 * a )\n      ];\n    },\n\n    /**\n     * Returns an array of the real roots of the quadratic equation $ax^3 + bx^2 + cx + d=0$ (there will be between 0 and 3 roots).\n     * @public\n     *\n     * @param {number} a\n     * @param {number} b\n     * @param {number} c\n     * @param {number} d\n     * @returns {Array.<number>}\n     */\n    solveCubicRootsReal: function( a, b, c, d ) {\n      // TODO: a Complex type!\n\n      //We need to test whether a is several orders of magnitude less than b, c, d\n      var epsilon = 1E7;\n\n      if ( a === 0 || Math.abs( b / a ) > epsilon || Math.abs( c / a ) > epsilon || Math.abs( d / a ) > epsilon ) {\n        return Util.solveQuadraticRootsReal( b, c, d );\n      }\n      if ( d === 0 || Math.abs( a / d ) > epsilon || Math.abs( b / d ) > epsilon || Math.abs( c / d ) > epsilon ) {\n        return Util.solveQuadraticRootsReal( a, b, c );\n      }\n\n      b /= a;\n      c /= a;\n      d /= a;\n\n      var q = ( 3.0 * c - ( b * b ) ) / 9;\n      var r = ( -(27 * d) + b * (9 * c - 2 * (b * b)) ) / 54;\n      var discriminant = q * q * q + r * r;\n      var b3 = b / 3;\n\n      if ( discriminant > 0 ) {\n        // a single real root\n        var dsqrt = Math.sqrt( discriminant );\n        return [ Util.cubeRoot( r + dsqrt ) + Util.cubeRoot( r - dsqrt ) - b3 ];\n      }\n\n      // three real roots\n      if ( discriminant === 0 ) {\n        // contains a double root\n        var rsqrt = Util.cubeRoot( r );\n        var doubleRoot = b3 - rsqrt;\n        return [ -b3 + 2 * rsqrt, doubleRoot, doubleRoot ];\n      }\n      else {\n        // all unique\n        var qX = -q * q * q;\n        qX = Math.acos( r / Math.sqrt( qX ) );\n        var rr = 2 * Math.sqrt( -q );\n        return [\n          -b3 + rr * Math.cos( qX / 3 ),\n          -b3 + rr * Math.cos( ( qX + 2 * Math.PI ) / 3 ),\n          -b3 + rr * Math.cos( ( qX + 4 * Math.PI ) / 3 )\n        ];\n      }\n    },\n\n    /**\n     * Returns the unique real cube root of x, such that $y^3=x$.\n     * @public\n     *\n     * @param {number} x\n     * @returns {number}\n     */\n    cubeRoot: function( x ) {\n      return x >= 0 ? Math.pow( x, 1 / 3 ) : -Math.pow( -x, 1 / 3 );\n    },\n\n    /**\n     * Defines and evaluates a linear mapping. The mapping is defined so that $f(a_1)=b_1$ and $f(a_2)=b_2$, and other\n     * values are interpolated along the linear equation. The returned value is $f(a_3)$.\n     * @public\n     *\n     * @param {number} a1\n     * @param {number} a2\n     * @param {number} b1\n     * @param {number} b2\n     * @param {number} a3\n     * @returns {number}\n     */\n    linear: function( a1, a2, b1, b2, a3 ) {\n      return ( b2 - b1 ) / ( a2 - a1 ) * ( a3 - a1 ) + b1;\n    },\n\n    /**\n     * Rounds using \"Round half away from zero\" algorithm. See dot#35.\n     * @public\n     *\n     * JavaScript's Math.round is not symmetric for positive and negative numbers, it uses IEEE 754 \"Round half up\".\n     * See https://en.wikipedia.org/wiki/Rounding#Round_half_up.\n     * For sims, we want to treat positive and negative values symmetrically, which is IEEE 754 \"Round half away from zero\",\n     * See https://en.wikipedia.org/wiki/Rounding#Round_half_away_from_zero\n     *\n     * Note that -0 is rounded to 0, since we typically do not want to display -0 in sims.\n     *\n     * @param {number} value                               `\n     * @returns {number}\n     */\n    roundSymmetric: function( value ) {\n      return ( ( value < 0 ) ? -1 : 1 ) * Math.round( Math.abs( value ) );\n    },\n\n    /**\n     * A predictable implementation of toFixed.\n     * @public\n     *\n     * JavaScript's toFixed is notoriously buggy, behavior differs depending on browser,\n     * because the spec doesn't specify whether to round or floor.\n     * Rounding is symmetric for positive and negative values, see Util.roundSymmetric.\n     *\n     * @param {number} value\n     * @param {number} decimalPlaces\n     * @returns {string}\n     */\n    toFixed: function( value, decimalPlaces ) {\n      var multiplier = Math.pow( 10, decimalPlaces );\n      var newValue = Util.roundSymmetric( value * multiplier ) / multiplier;\n      return newValue.toFixed( decimalPlaces );\n    },\n\n    /**\n     * A predictable implementation of toFixed, where the result is returned as a number instead of a string.\n     * @public\n     *\n     * JavaScript's toFixed is notoriously buggy, behavior differs depending on browser,\n     * because the spec doesn't specify whether to round or floor.\n     * Rounding is symmetric for positive and negative values, see Util.roundSymmetric.\n     *\n     * @param {number} value\n     * @param {number} decimalPlaces\n     * @returns {number}\n     */\n    toFixedNumber: function( value, decimalPlaces ) {\n      return parseFloat( Util.toFixed( value, decimalPlaces ) );\n    },\n\n    /**\n     * Returns whether the input is a number that is an integer (no fractional part).\n     * @public\n     *\n     * @param {number} n\n     * @returns {boolean}\n     */\n    isInteger: function( n ) {\n      return ( typeof n === 'number' ) && ( n % 1 === 0 );\n    },\n\n    /**\n     * Computes the intersection of the two line segments $(x_1,y_1)(x_2,y_2)$ and $(x_3,y_3)(x_4,y_4)$. If there is no\n     * intersection, null is returned.\n     * @public\n     *\n     * @param {number} x1\n     * @param {number} y1\n     * @param {number} x2\n     * @param {number} y2\n     * @param {number} x3\n     * @param {number} y3\n     * @param {number} x4\n     * @param {number} y4\n     * @returns {Vector2|null}\n     */\n    lineSegmentIntersection: function( x1, y1, x2, y2, x3, y3, x4, y4 ) {\n      /*\n       * Algorithm taken from Paul Bourke, 1989:\n       * http://paulbourke.net/geometry/pointlineplane/\n       * http://paulbourke.net/geometry/pointlineplane/pdb.c\n       * Ported from MathUtil.java on 9/20/2013 by @samreid\n       */\n      var numA = ( x4 - x3 ) * ( y1 - y3 ) - ( y4 - y3 ) * ( x1 - x3 );\n      var numB = ( x2 - x1 ) * ( y1 - y3 ) - ( y2 - y1 ) * ( x1 - x3 );\n      var denom = ( y4 - y3 ) * ( x2 - x1 ) - ( x4 - x3 ) * ( y2 - y1 );\n\n      // If denominator is 0, the lines are parallel or coincident\n      if ( denom === 0 ) {\n        return null;\n      }\n      else {\n        var ua = numA / denom;\n        var ub = numB / denom;\n\n        // ua and ub must both be in the range 0 to 1 for the segments to have an intersection pt.\n        if ( !( ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1 ) ) {\n          return null;\n        }\n        else {\n          var x = x1 + ua * ( x2 - x1 );\n          var y = y1 + ua * ( y2 - y1 );\n          return new dot.Vector2( x, y );\n        }\n      }\n    },\n\n    /**\n     * Squared distance from a point to a line segment squared.\n     * See http://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment\n     * @public\n     *\n     * @param {Vector2} point - The point\n     * @param {Vector2} a - Starting point of the line segment\n     * @param {Vector2} b - Ending point of the line segment\n     * @returns {number}\n     */\n    distToSegmentSquared: function( point, a, b ) {\n      var segmentLength = a.distanceSquared( b );\n      if ( segmentLength === 0 ) { return point.distanceSquared( a ); }\n      var t = ((point.x - a.x) * (b.x - a.x) + (point.y - a.y) * (b.y - a.y)) / segmentLength;\n      return t < 0 ? point.distanceSquared( a ) :\n             t > 1 ? point.distanceSquared( b ) :\n             point.distanceSquared( new dot.Vector2( a.x + t * (b.x - a.x), a.y + t * (b.y - a.y) ) );\n    },\n\n    /**\n     * Squared distance from a point to a line segment squared.\n     * @public\n     *\n     * @param {Vector2} point - The point\n     * @param {Vector2} a - Starting point of the line segment\n     * @param {Vector2} b - Ending point of the line segment\n     * @returns {number}\n     */\n    distToSegment: function( point, a, b ) { return Math.sqrt( this.distToSegmentSquared( point, a, b ) ); },\n\n    /**\n     * Determines whether the three points are approximately collinear.\n     * @public\n     *\n     * @param {Vector2} a\n     * @param {Vector2} b\n     * @param {Vector2} c\n     * @param {number} epsilon\n     * @returns {boolean}\n     */\n    arePointsCollinear: function( a, b, c, epsilon ) {\n      if ( epsilon === undefined ) {\n        epsilon = 0;\n      }\n      return Util.triangleArea( a, b, c ) <= epsilon;\n    },\n\n    /**\n     * The area inside the triangle defined by the three vertices.\n     * @public\n     *\n     * @param {Vector2} a\n     * @param {Vector2} b\n     * @param {Vector2} c\n     * @returns {number}\n     */\n    triangleArea: function( a, b, c ) {\n      return Math.abs( Util.triangleAreaSigned( a, b, c ) );\n    },\n\n    /**\n     * The area inside the triangle defined by the three vertices, but with the sign determined by whether the vertices\n     * provided are clockwise or counter-clockwise.\n     * @public\n     *\n     * @param {Vector2} a\n     * @param {Vector2} b\n     * @param {Vector2} c\n     * @returns {number}\n     */\n    triangleAreaSigned: function( a, b, c ) {\n      // TODO: investigate which way we want the sign (Canvas or WebGL style)\n      return a.x * ( b.y - c.y ) + b.x * ( c.y - a.y ) + c.x * ( a.y - b.y );\n    },\n\n    /**\n     * Log base-10, since it wasn't included in every supported browser.\n     * @public\n     *\n     * @param {number} val\n     * @returns {number}\n     */\n    log10: function( val ) {\n      return Math.log( val ) / Math.LN10;\n    },\n\n    /**\n     * Generates a random Gaussian sample with the given mean and standard deviation.\n     * This method relies on the \"static\" variables generate, z0, and z1 defined above.\n     * Random.js is the primary client of this function, but it is defined here so it can be\n     * used other places more easily if need be.\n     * Code inspired by example here: https://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform.\n     * @public\n     *\n     * @param {number} mu - The mean of the Gaussian\n     * @param {number} sigma - The standard deviation of the Gaussian\n     * @returns {number}\n     */\n    boxMullerTransform: function( mu, sigma ) {\n      generate = !generate;\n\n      if ( !generate ) {\n        return z1 * sigma + mu;\n      }\n\n      var u1;\n      var u2;\n      do {\n        u1 = Math.random();\n        u2 = Math.random();\n      }\n      while ( u1 <= EPSILON );\n\n      z0 = Math.sqrt( -2.0 * Math.log( u1 ) ) * Math.cos( TWO_PI * u2 );\n      z1 = Math.sqrt( -2.0 * Math.log( u1 ) ) * Math.sin( TWO_PI * u2 );\n      return z0 * sigma + mu;\n    }\n  };\n  dot.register( 'Util', Util );\n\n  // make these available in the main namespace directly (for now)\n  dot.clamp = Util.clamp;\n  dot.moduloBetweenDown = Util.moduloBetweenDown;\n  dot.moduloBetweenUp = Util.moduloBetweenUp;\n  dot.rangeInclusive = Util.rangeInclusive;\n  dot.rangeExclusive = Util.rangeExclusive;\n  dot.toRadians = Util.toRadians;\n  dot.toDegrees = Util.toDegrees;\n  dot.lineLineIntersection = Util.lineLineIntersection;\n  dot.sphereRayIntersection = Util.sphereRayIntersection;\n  dot.solveQuadraticRootsReal = Util.solveQuadraticRootsReal;\n  dot.solveCubicRootsReal = Util.solveCubicRootsReal;\n  dot.cubeRoot = Util.cubeRoot;\n  dot.linear = Util.linear;\n  dot.boxMullerTransform = Util.boxMullerTransform;\n\n  return Util;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Basic 2-dimensional vector, represented as (x,y).\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/Vector2',['require','DOT/dot','PHET_CORE/inherit','PHET_CORE/Poolable','DOT/Util'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n\n  var inherit = require( 'PHET_CORE/inherit' );\n  var Poolable = require( 'PHET_CORE/Poolable' );\n  require( 'DOT/Util' );\n  // require( 'DOT/Vector3' ); // commented out since Require.js complains about the circular dependency\n\n  /**\n   * Creates a 2-dimensional vector with the specified X and Y values.\n   * @constructor\n   * @public\n   *\n   * @param {number} [x] - X coordinate, defaults to 0 if not provided\n   * @param {number} [y] - Y coordinate, defaults to 0 if not provided\n   */\n  function Vector2( x, y ) {\n    // @public {number} - The X coordinate of the vector.\n    this.x = x !== undefined ? x : 0;\n\n    // @public {number} - The Y coordinate of the vector.\n    this.y = y !== undefined ? y : 0;\n\n    assert && assert( typeof this.x === 'number', 'x needs to be a number' );\n    assert && assert( typeof this.y === 'number', 'y needs to be a number' );\n\n    phetAllocation && phetAllocation( 'Vector2' );\n  }\n\n  dot.register( 'Vector2', Vector2 );\n\n  inherit( Object, Vector2, {\n    // @public (read-only) - Helps to identify the dimension of the vector\n    isVector2: true,\n    dimension: 2,\n\n    /**\n     * The magnitude (Euclidean/L2 Norm) of this vector, i.e. $\\sqrt{x^2+y^2}$.\n     * @public\n     *\n     * @returns {number}\n     */\n    magnitude: function() {\n      return Math.sqrt( this.magnitudeSquared() );\n    },\n\n    /**\n     * The squared magnitude (square of the Euclidean/L2 Norm) of this vector, i.e. $x^2+y^2$.\n     * @public\n     *\n     * @returns {number}\n     */\n    magnitudeSquared: function() {\n      return this.x * this.x + this.y * this.y;\n    },\n\n    /**\n     * The Euclidean distance between this vector (treated as a point) and another point.\n     * @public\n     *\n     * @param {Vector2} point\n     * @returns {number}\n     */\n    distance: function( point ) {\n      return Math.sqrt( this.distanceSquared( point ) );\n    },\n\n    /**\n     * The Euclidean distance between this vector (treated as a point) and another point (x,y).\n     * @public\n     *\n     * @param {number} x\n     * @param {number} y\n     * @returns {number}\n     */\n    distanceXY: function( x, y ) {\n      var dx = this.x - x;\n      var dy = this.y - y;\n      return Math.sqrt( dx * dx + dy * dy );\n    },\n\n    /**\n     * The squared Euclidean distance between this vector (treated as a point) and another point.\n     * @public\n     *\n     * @param {Vector2} point\n     * @returns {number}\n     */\n    distanceSquared: function( point ) {\n      var dx = this.x - point.x;\n      var dy = this.y - point.y;\n      return dx * dx + dy * dy;\n    },\n\n    /**\n     * The squared Euclidean distance between this vector (treated as a point) and another point (x,y).\n     * @public\n     *\n     * @param {Vector2} point\n     * @returns {number}\n     */\n    distanceSquaredXY: function( x, y ) {\n      var dx = this.x - x;\n      var dy = this.y - y;\n      return dx * dx + dy * dy;\n    },\n\n    /**\n     * The dot-product (Euclidean inner product) between this vector and another vector v.\n     * @public\n     *\n     * @param {Vector2} v\n     * @returns {number}\n     */\n    dot: function( v ) {\n      return this.x * v.x + this.y * v.y;\n    },\n\n    /**\n     * The dot-product (Euclidean inner product) between this vector and another vector (x,y).\n     * @public\n     *\n     * @param {number} x\n     * @param {number} y\n     * @returns {number}\n     */\n    dotXY: function( x, y ) {\n      return this.x * x + this.y * y;\n    },\n\n    /**\n     * The angle $\\theta$ of this vector, such that this vector is equal to\n     * $$ u = \\begin{bmatrix} r\\cos\\theta \\\\ r\\sin\\theta \\end{bmatrix} $$\n     * for the magnitude $r \\ge 0$ of the vector, with $\\theta\\in(-\\pi,\\pi]$\n     * @public\n     *\n     * @returns {number}\n     */\n    angle: function() {\n      return Math.atan2( this.y, this.x );\n    },\n\n    /**\n     * The angle between this vector and another vector, in the range $\\theta\\in[0, \\pi]$.\n     * @public\n     *\n     * Equal to $\\theta = \\cos^{-1}( \\hat{u} \\cdot \\hat{v} )$ where $\\hat{u}$ is this vector (normalized) and $\\hat{v}$\n     * is the input vector (normalized).\n     *\n     * @param {Vector2} v\n     * @returns {number}\n     */\n    angleBetween: function( v ) {\n      var thisMagnitude = this.magnitude();\n      var vMagnitude = v.magnitude();\n      return Math.acos( dot.clamp( ( this.x * v.x + this.y * v.y ) / ( thisMagnitude * vMagnitude ), -1, 1 ) );\n    },\n\n    /**\n     * Exact equality comparison between this vector and another vector.\n     * @public\n     *\n     * @param {Vector2} other\n     * @returns {boolean} - Whether the two vectors have equal components\n     */\n    equals: function( other ) {\n      return this.x === other.x && this.y === other.y;\n    },\n\n    /**\n     * Approximate equality comparison between this vector and another vector.\n     * @public\n     *\n     * @param {Vector2} other\n     * @param {number} epsilon\n     * @returns {boolean} - Whether difference between the two vectors has no component with an absolute value greater\n     *                      than epsilon.\n     */\n    equalsEpsilon: function( other, epsilon ) {\n      if ( !epsilon ) {\n        epsilon = 0;\n      }\n      return Math.max( Math.abs( this.x - other.x ), Math.abs( this.y - other.y ) ) <= epsilon;\n    },\n\n    /**\n     * Whether all of the components are numbers (not NaN) that are not infinity or -infinity.\n     * @public\n     *\n     * @returns {boolean}\n     */\n    isFinite: function() {\n      return isFinite( this.x ) && isFinite( this.y );\n    },\n\n    /*---------------------------------------------------------------------------*\n     * Immutables\n     *---------------------------------------------------------------------------*/\n\n    /**\n     * Creates a copy of this vector, or if a vector is passed in, set that vector's values to ours.\n     * @public\n     *\n     * This is the immutable form of the function set(), if a vector is provided. This will return a new vector, and\n     * will not modify this vector.\n     *\n     * @param {Vector2} [vector] - If not provided, creates a new Vector2 with filled in values. Otherwise, fills in the\n     *                             values of the provided vector so that it equals this vector.\n     * @returns {Vector2}\n     */\n    copy: function( vector ) {\n      if ( vector ) {\n        return vector.set( this );\n      }\n      else {\n        return new Vector2( this.x, this.y );\n      }\n    },\n\n    /**\n     * The scalar value of the z-component of the equivalent 3-dimensional cross product:\n     * $$ f( u, v ) = \\left( \\begin{bmatrix} u_x \\\\ u_y \\\\ 0 \\end{bmatrix} \\times \\begin{bmatrix} v_x \\\\ v_y \\\\ 0 \\end{bmatrix} \\right)_z = u_x v_y - u_y v_x $$\n     * @public\n     *\n     * @param {Vector2} v\n     * @returns {number}\n     */\n    crossScalar: function( v ) {\n      return this.x * v.y - this.y * v.x;\n    },\n\n    /**\n     * Normalized (re-scaled) copy of this vector such that its magnitude is 1. If its initial magnitude is zero, an\n     * error is thrown.\n     * @public\n     *\n     * This is the immutable form of the function normalize(). This will return a new vector, and will not modify this\n     * vector.\n     *\n     * @returns {Vector2}\n     */\n    normalized: function() {\n      var mag = this.magnitude();\n      if ( mag === 0 ) {\n        throw new Error( 'Cannot normalize a zero-magnitude vector' );\n      }\n      else {\n        return new Vector2( this.x / mag, this.y / mag );\n      }\n    },\n\n    /**\n     * Re-scaled copy of this vector such that it has the desired magnitude. If its initial magnitude is zero, an error\n     * is thrown. If the passed-in magnitude is negative, the direction of the resulting vector will be reversed.\n     * @public\n     *\n     * This is the immutable form of the function setMagnitude(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} magnitude\n     * @returns {Vector2}\n     */\n    withMagnitude: function( magnitude ) {\n      return this.copy().setMagnitude( magnitude );\n    },\n\n    /**\n     * Copy of this vector, scaled by the desired scalar value.\n     * @public\n     *\n     * This is the immutable form of the function multiplyScalar(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} scalar\n     * @returns {Vector2}\n     */\n    timesScalar: function( scalar ) {\n      return new Vector2( this.x * scalar, this.y * scalar );\n    },\n\n    /**\n     * Same as timesScalar.\n     * @public\n     *\n     * This is the immutable form of the function multiply(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} scalar\n     * @returns {Vector2}\n     */\n    times: function( scalar ) {\n      // make sure it's not a vector!\n      assert && assert( scalar.dimension === undefined );\n      return this.timesScalar( scalar );\n    },\n\n    /**\n     * Copy of this vector, multiplied component-wise by the passed-in vector v.\n     * @public\n     *\n     * This is the immutable form of the function componentMultiply(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {Vector2} v\n     * @returns {Vector2}\n     */\n    componentTimes: function( v ) {\n      return new Vector2( this.x * v.x, this.y * v.y );\n    },\n\n    /**\n     * Addition of this vector and another vector, returning a copy.\n     * @public\n     *\n     * This is the immutable form of the function add(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {Vector2} v\n     * @returns {Vector2}\n     */\n    plus: function( v ) {\n      return new Vector2( this.x + v.x, this.y + v.y );\n    },\n\n    /**\n     * Addition of this vector and another vector (x,y), returning a copy.\n     * @public\n     *\n     * This is the immutable form of the function addXY(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @returns {Vector2}\n     */\n    plusXY: function( x, y ) {\n      return new Vector2( this.x + x, this.y + y );\n    },\n\n    /**\n     * Addition of this vector with a scalar (adds the scalar to every component), returning a copy.\n     * @public\n     *\n     * This is the immutable form of the function addScalar(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} scalar\n     * @returns {Vector2}\n     */\n    plusScalar: function( scalar ) {\n      return new Vector2( this.x + scalar, this.y + scalar );\n    },\n\n    /**\n     * Subtraction of this vector by another vector v, returning a copy.\n     * @public\n     *\n     * This is the immutable form of the function subtract(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {Vector2} v\n     * @returns {Vector2}\n     */\n    minus: function( v ) {\n      return new Vector2( this.x - v.x, this.y - v.y );\n    },\n\n    /**\n     * Subtraction of this vector by another vector (x,y), returning a copy.\n     * @public\n     *\n     * This is the immutable form of the function subtractXY(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @returns {Vector2}\n     */\n    minusXY: function( x, y ) {\n      return new Vector2( this.x - x, this.y - y );\n    },\n\n    /**\n     * Subtraction of this vector by a scalar (subtracts the scalar from every component), returning a copy.\n     * @public\n     *\n     * This is the immutable form of the function subtractScalar(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} scalar\n     * @returns {Vector2}\n     */\n    minusScalar: function( scalar ) {\n      return new Vector2( this.x - scalar, this.y - scalar );\n    },\n\n    /**\n     * Division of this vector by a scalar (divides every component by the scalar), returning a copy.\n     * @public\n     *\n     * This is the immutable form of the function divideScalar(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} scalar\n     * @returns {Vector2}\n     */\n    dividedScalar: function( scalar ) {\n      return new Vector2( this.x / scalar, this.y / scalar );\n    },\n\n    /**\n     * Negated copy of this vector (multiplies every component by -1).\n     * @public\n     *\n     * This is the immutable form of the function negate(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @returns {Vector2}\n     */\n    negated: function() {\n      return new Vector2( -this.x, -this.y );\n    },\n\n    /**\n     * Rotated by -pi/2 (perpendicular to this vector), returned as a copy.\n     * @public\n     *\n     * @returns {Vector2}\n     */\n    perpendicular: function() {\n      return new Vector2( this.y, -this.x );\n    },\n\n    /**\n     * Rotated by an arbitrary angle, in radians. Returned as a copy.\n     * @public\n     *\n     * This is the immutable form of the function rotate(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} angle - In radians\n     * @returns {Vector2}\n     */\n    rotated: function( angle ) {\n      var newAngle = this.angle() + angle;\n      var mag = this.magnitude();\n      return new Vector2( mag * Math.cos( newAngle ), mag * Math.sin( newAngle ) );\n    },\n\n    /**\n     * A linear interpolation between this vector (ratio=0) and another vector (ratio=1).\n     * @public\n     *\n     * @param {Vector2} vector\n     * @param {number} ratio - Not necessarily constrained in [0, 1]\n     * @returns {Vector2}\n     */\n    blend: function( vector, ratio ) {\n      return new Vector2( this.x + (vector.x - this.x) * ratio, this.y + (vector.y - this.y) * ratio );\n    },\n\n    /**\n     * The average (midpoint) between this vector and another vector.\n     * @public\n     *\n     * @param {Vector2} vector\n     * @returns {Vector2}\n     */\n    average: function( vector ) {\n      return this.blend( vector, 0.5 );\n    },\n\n    /**\n     * Debugging string for the vector.\n     * @public\n     *\n     * @returns {string}\n     */\n    toString: function() {\n      return 'Vector2(' + this.x + ', ' + this.y + ')';\n    },\n\n    /**\n     * Converts this to a 3-dimensional vector, with the z-component equal to 0.\n     * @public\n     *\n     * @returns {Vector3}\n     */\n    toVector3: function() {\n      return new dot.Vector3( this.x, this.y, 0 );\n    },\n\n    /*---------------------------------------------------------------------------*\n     * Mutables\n     * - all mutation should go through setXY / setX / setY\n     *---------------------------------------------------------------------------*/\n\n    /**\n     * Sets all of the components of this vector, returning this.\n     * @public\n     *\n     * @param {number} x\n     * @param {number} y\n     * @returns {Vector2}\n     */\n    setXY: function( x, y ) {\n      this.x = x;\n      this.y = y;\n      return this;\n    },\n\n    /**\n     * Sets the x-component of this vector, returning this.\n     * @public\n     *\n     * @param {number} x\n     * @returns {Vector2}\n     */\n    setX: function( x ) {\n      this.x = x;\n      return this;\n    },\n\n    /**\n     * Sets the y-component of this vector, returning this.\n     * @public\n     *\n     * @param {number} y\n     * @returns {Vector2}\n     */\n    setY: function( y ) {\n      this.y = y;\n      return this;\n    },\n\n    /**\n     * Sets this vector to be a copy of another vector.\n     * @public\n     *\n     * This is the mutable form of the function copy(). This will mutate (change) this vector, in addition to returning\n     * this vector itself.\n     *\n     * @param {Vector2} v\n     * @returns {Vector2}\n     */\n    set: function( v ) {\n      return this.setXY( v.x, v.y );\n    },\n\n    /**\n     * Sets the magnitude of this vector. If the passed-in magnitude is negative, this flips the vector and sets its\n     * magnitude to abs( magnitude ).\n     * @public\n     *\n     * This is the mutable form of the function withMagnitude(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} magnitude\n     * @returns {Vector2}\n     */\n    setMagnitude: function( magnitude ) {\n      var scale = magnitude / this.magnitude();\n      return this.multiplyScalar( scale );\n    },\n\n    /**\n     * Adds another vector to this vector, changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function plus(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {Vector2} v\n     * @returns {Vector2}\n     */\n    add: function( v ) {\n      return this.setXY( this.x + v.x, this.y + v.y );\n    },\n\n    /**\n     * Adds another vector (x,y) to this vector, changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function plusXY(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @returns {Vector2}\n     */\n    addXY: function( x, y ) {\n      return this.setXY( this.x + x, this.y + y );\n    },\n\n    /**\n     * Adds a scalar to this vector (added to every component), changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function plusScalar(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} scalar\n     * @returns {Vector2}\n     */\n    addScalar: function( scalar ) {\n      return this.setXY( this.x + scalar, this.y + scalar );\n    },\n\n    /**\n     * Subtracts this vector by another vector, changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function minus(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {Vector2} v\n     * @returns {Vector2}\n     */\n    subtract: function( v ) {\n      return this.setXY( this.x - v.x, this.y - v.y );\n    },\n\n    /**\n     * Subtracts this vector by another vector (x,y), changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function minusXY(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @returns {Vector2}\n     */\n    subtractXY: function( x, y ) {\n      return this.setXY( this.x - x, this.y - y );\n    },\n\n    /**\n     * Subtracts this vector by a scalar (subtracts each component by the scalar), changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function minusScalar(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} scalar\n     * @returns {Vector2}\n     */\n    subtractScalar: function( scalar ) {\n      return this.setXY( this.x - scalar, this.y - scalar );\n    },\n\n    /**\n     * Multiplies this vector by a scalar (multiplies each component by the scalar), changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function timesScalar(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} scalar\n     * @returns {Vector2}\n     */\n    multiplyScalar: function( scalar ) {\n      return this.setXY( this.x * scalar, this.y * scalar );\n    },\n\n    /**\n     * Multiplies this vector by a scalar (multiplies each component by the scalar), changing this vector.\n     * Same as multiplyScalar.\n     * @public\n     *\n     * This is the mutable form of the function times(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} scalar\n     * @returns {Vector2}\n     */\n    multiply: function( scalar ) {\n      // make sure it's not a vector!\n      assert && assert( scalar.dimension === undefined );\n      return this.multiplyScalar( scalar );\n    },\n\n    /**\n     * Multiplies this vector by another vector component-wise, changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function componentTimes(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {Vector2} v\n     * @returns {Vector2}\n     */\n    componentMultiply: function( v ) {\n      return this.setXY( this.x * v.x, this.y * v.y );\n    },\n\n    /**\n     * Divides this vector by a scalar (divides each component by the scalar), changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function dividedScalar(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} scalar\n     * @returns {Vector2}\n     */\n    divideScalar: function( scalar ) {\n      return this.setXY( this.x / scalar, this.y / scalar );\n    },\n\n    /**\n     * Negates this vector (multiplies each component by -1), changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function negated(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @returns {Vector2}\n     */\n    negate: function() {\n      return this.setXY( -this.x, -this.y );\n    },\n\n    /**\n     * Normalizes this vector (rescales to where the magnitude is 1), changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function normalized(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @returns {Vector2}\n     */\n    normalize: function() {\n      var mag = this.magnitude();\n      if ( mag === 0 ) {\n        throw new Error( 'Cannot normalize a zero-magnitude vector' );\n      }\n      else {\n        return this.divideScalar( mag );\n      }\n    },\n\n    /**\n     * Rotates this vector by the angle (in radians), changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function rotated(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} angle - In radians\n     * @returns {Vector2}\n     */\n    rotate: function( angle ) {\n      var newAngle = this.angle() + angle;\n      var mag = this.magnitude();\n      return this.setXY( mag * Math.cos( newAngle ), mag * Math.sin( newAngle ) );\n    },\n\n    /**\n     * Sets this vector's value to be the x,y values matching the given magnitude and angle (in radians), changing\n     * this vector, and returning itself.\n     * @public\n     *\n     * @param {number} magnitude\n     * @param {number} angle - In radians\n     * @returns {Vector2}\n     */\n    setPolar: function( magnitude, angle ) {\n      return this.setXY( magnitude * Math.cos( angle ), magnitude * Math.sin( angle ) );\n    },\n\n    /**\n     * Returns a duck-typed object meant for use with tandem/phet-io serialization.\n     *\n     * @returns {Object}\n     */\n    toStateObject: function() {\n      return { x: this.x, y: this.y };\n    }\n  }, { // static functions on Vector2 itself\n    /**\n     * Returns a Vector2 with the specified magnitude $r$ and angle $\\theta$ (in radians), with the formula:\n     * $$ f( r, \\theta ) = \\begin{bmatrix} r\\cos\\theta \\\\ r\\sin\\theta \\end{bmatrix} $$\n     * @public\n     *\n     * @param {number} magnitude\n     * @param {number} angle\n     * @returns {Vector2}\n     */\n    createPolar: function( magnitude, angle ) {\n      return new Vector2().setPolar( magnitude, angle );\n    },\n\n    /**\n     * Constructs a Vector2 from a duck-typed { x: {number}, y: {number} } object, meant for use with\n     * tandem/phet-io deserialization.\n     * @public\n     *\n     * @param {Object} stateObject - Like { x: {number}, y: {number} }\n     * @returns {Vector2}\n     */\n    fromStateObject: function( stateObject ) {\n      return new Vector2( stateObject.x, stateObject.y );\n    }\n  } );\n\n  // Sets up pooling on Vector2\n  Poolable.mixin( Vector2, {\n    defaultFactory: function() { return new Vector2(); },\n    constructorDuplicateFactory: function( pool ) {\n      return function( x, y ) {\n        if ( pool.length ) {\n          return pool.pop().setXY( x, y );\n        }\n        else {\n          return new Vector2( x, y );\n        }\n      };\n    }\n  } );\n\n  /*---------------------------------------------------------------------------*\n   * Immutable Vector form\n   *---------------------------------------------------------------------------*/\n\n  // @private\n  Vector2.Immutable = function ImmutableVector2( x, y ) {\n    Vector2.call( this, x, y );\n  };\n  var Immutable = Vector2.Immutable;\n\n  inherit( Vector2, Immutable );\n\n  // throw errors whenever a mutable method is called on our immutable vector\n  Immutable.mutableOverrideHelper = function( mutableFunctionName ) {\n    Immutable.prototype[ mutableFunctionName ] = function() {\n      throw new Error( 'Cannot call mutable method \\'' + mutableFunctionName + '\\' on immutable Vector2' );\n    };\n  };\n\n  // TODO: better way to handle this list?\n  Immutable.mutableOverrideHelper( 'setXY' );\n  Immutable.mutableOverrideHelper( 'setX' );\n  Immutable.mutableOverrideHelper( 'setY' );\n\n  /**\n   * Immutable zero vector: $\\begin{bmatrix} 0\\\\0 \\end{bmatrix}$\n   * @public\n   *\n   * @constant {Vector2} ZERO\n   */\n  Vector2.ZERO = assert ? new Immutable( 0, 0 ) : new Vector2( 0, 0 );\n\n  /**\n   * Immutable vector: $\\begin{bmatrix} 1\\\\0 \\end{bmatrix}$\n   * @public\n   *\n   * @constant {Vector2} X_UNIT\n   */\n  Vector2.X_UNIT = assert ? new Immutable( 1, 0 ) : new Vector2( 1, 0 );\n\n  /**\n   * Immutable vector: $\\begin{bmatrix} 0\\\\1 \\end{bmatrix}$\n   * @public\n   *\n   * @constant {Vector2} Y_UNIT\n   */\n  Vector2.Y_UNIT = assert ? new Immutable( 0, 1 ) : new Vector2( 0, 1 );\n\n  return Vector2;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * A 2D rectangle-shaped bounded area (bounding box).\n *\n * There are a number of convenience functions to get locations and points on the Bounds. Currently we do not\n * store these with the Bounds2 instance, since we want to lower the memory footprint.\n *\n * minX, minY, maxX, and maxY are actually stored. We don't do x,y,width,height because this can't properly express\n * semi-infinite bounds (like a half-plane), or easily handle what Bounds2.NOTHING and Bounds2.EVERYTHING do with\n * the constructive solid areas.\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/Bounds2',['require','DOT/dot','DOT/Vector2','PHET_CORE/inherit','PHET_CORE/Poolable'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n  var Vector2 = require( 'DOT/Vector2' );\n  var inherit = require( 'PHET_CORE/inherit' );\n  var Poolable = require( 'PHET_CORE/Poolable' );\n\n  // Temporary instances to be used in the transform method.\n  var scratchVector2 = new dot.Vector2();\n\n  /**\n   * Creates a 2-dimensional bounds (bounding box).\n   * @constructor\n   * @public\n   *\n   * @param {number} minX - The intial minimum X coordinate of the bounds.\n   * @param {number} minY - The intial minimum Y coordinate of the bounds.\n   * @param {number} maxX - The intial maximum X coordinate of the bounds.\n   * @param {number} maxY - The intial maximum Y coordinate of the bounds.\n   */\n  function Bounds2( minX, minY, maxX, maxY ) {\n    assert && assert( maxY !== undefined, 'Bounds2 requires 4 parameters' );\n\n    // @public {number} - The minimum X coordinate of the bounds.\n    this.minX = minX;\n\n    // @public {number} - The minimum Y coordinate of the bounds.\n    this.minY = minY;\n\n    // @public {number} - The maximum X coordinate of the bounds.\n    this.maxX = maxX;\n\n    // @public {number} - The maximum Y coordinate of the bounds.\n    this.maxY = maxY;\n\n    phetAllocation && phetAllocation( 'Bounds2' );\n  }\n\n  dot.register( 'Bounds2', Bounds2 );\n\n  inherit( Object, Bounds2, {\n    // @public (read-only) - Helps to identify the dimension of the bounds\n    isBounds: true,\n    dimension: 2,\n\n    /*---------------------------------------------------------------------------*\n     * Properties\n     *---------------------------------------------------------------------------*/\n\n    /**\n     * The width of the bounds, defined as maxX - minX.\n     * @public\n     *\n     * @returns {number}\n     */\n    getWidth: function() { return this.maxX - this.minX; },\n    get width() { return this.getWidth(); },\n\n    /**\n     * The height of the bounds, defined as maxY - minY.\n     * @public\n     *\n     * @returns {number}\n     */\n    getHeight: function() { return this.maxY - this.minY; },\n    get height() { return this.getHeight(); },\n\n    /*\n     * Convenience locations\n     * upper is in terms of the visual layout in Scenery and other programs, so the minY is the \"upper\", and minY is the \"lower\"\n     *\n     *             minX (x)     centerX        maxX\n     *          ---------------------------------------\n     * minY (y) | leftTop     centerTop     rightTop\n     * centerY  | leftCenter  center        rightCenter\n     * maxY     | leftBottom  centerBottom  rightBottom\n     */\n\n    /**\n     * Alias for minX, when thinking of the bounds as an (x,y,width,height) rectangle.\n     * @public\n     *\n     * @returns {number}\n     */\n    getX: function() { return this.minX; },\n    get x() { return this.getX(); },\n\n    /**\n     * Alias for minY, when thinking of the bounds as an (x,y,width,height) rectangle.\n     * @public\n     *\n     * @returns {number}\n     */\n    getY: function() { return this.minY; },\n    get y() { return this.getY(); },\n\n    /**\n     * Alias for minX, supporting the explicit getter function style.\n     * @public\n     *\n     * @returns {number}\n     */\n    getMinX: function() { return this.minX; },\n\n    /**\n     * Alias for minY, supporting the explicit getter function style.\n     * @public\n     *\n     * @returns {number}\n     */\n    getMinY: function() { return this.minY; },\n\n    /**\n     * Alias for maxX, supporting the explicit getter function style.\n     * @public\n     *\n     * @returns {number}\n     */\n    getMaxX: function() { return this.maxX; },\n\n    /**\n     * Alias for maxY, supporting the explicit getter function style.\n     * @public\n     *\n     * @returns {number}\n     */\n    getMaxY: function() { return this.maxY; },\n\n    /**\n     * Alias for minX, when thinking in the UI-layout manner.\n     * @public\n     *\n     * @returns {number}\n     */\n    getLeft: function() { return this.minX; },\n    get left() { return this.minX; },\n\n    /**\n     * Alias for minY, when thinking in the UI-layout manner.\n     * @public\n     *\n     * @returns {number}\n     */\n    getTop: function() { return this.minY; },\n    get top() { return this.minY; },\n\n    /**\n     * Alias for maxX, when thinking in the UI-layout manner.\n     * @public\n     *\n     * @returns {number}\n     */\n    getRight: function() { return this.maxX; },\n    get right() { return this.maxX; },\n\n    /**\n     * Alias for maxY, when thinking in the UI-layout manner.\n     * @public\n     *\n     * @returns {number}\n     */\n    getBottom: function() { return this.maxY; },\n    get bottom() { return this.maxY; },\n\n    /**\n     * The horizontal (X-coordinate) center of the bounds, averaging the minX and maxX.\n     * @public\n     *\n     * @returns {number}\n     */\n    getCenterX: function() { return ( this.maxX + this.minX ) / 2; },\n    get centerX() { return this.getCenterX(); },\n\n    /**\n     * The vertical (Y-coordinate) center of the bounds, averaging the minY and maxY.\n     * @public\n     *\n     * @returns {number}\n     */\n    getCenterY: function() { return ( this.maxY + this.minY ) / 2; },\n    get centerY() { return this.getCenterY(); },\n\n    /**\n     * The point (minX, minY), in the UI-coordinate upper-left.\n     * @public\n     *\n     * @returns {Vector2}\n     */\n    getLeftTop: function() { return new dot.Vector2( this.minX, this.minY ); },\n    get leftTop() { return this.getLeftTop(); },\n\n    /**\n     * The point (centerX, minY), in the UI-coordinate upper-center.\n     * @public\n     *\n     * @returns {Vector2}\n     */\n    getCenterTop: function() { return new dot.Vector2( this.getCenterX(), this.minY ); },\n    get centerTop() { return this.getCenterTop(); },\n\n    /**\n     * The point (right, minY), in the UI-coordinate upper-right.\n     * @public\n     *\n     * @returns {Vector2}\n     */\n    getRightTop: function() { return new dot.Vector2( this.maxX, this.minY ); },\n    get rightTop() { return this.getRightTop(); },\n\n    /**\n     * The point (left, centerY), in the UI-coordinate center-left.\n     * @public\n     *\n     * @returns {Vector2}\n     */\n    getLeftCenter: function() { return new dot.Vector2( this.minX, this.getCenterY() ); },\n    get leftCenter() { return this.getLeftCenter(); },\n\n    /**\n     * The point (centerX, centerY), in the center of the bounds.\n     * @public\n     *\n     * @returns {Vector2}\n     */\n    getCenter: function() { return new dot.Vector2( this.getCenterX(), this.getCenterY() ); },\n    get center() { return this.getCenter(); },\n\n    /**\n     * The point (maxX, centerY), in the UI-coordinate center-right\n     * @public\n     *\n     * @returns {Vector2}\n     */\n    getRightCenter: function() { return new dot.Vector2( this.maxX, this.getCenterY() ); },\n    get rightCenter() { return this.getRightCenter(); },\n\n    /**\n     * The point (minX, maxY), in the UI-coordinate lower-left\n     * @public\n     *\n     * @returns {Vector2}\n     */\n    getLeftBottom: function() { return new dot.Vector2( this.minX, this.maxY ); },\n    get leftBottom() { return this.getLeftBottom(); },\n\n    /**\n     * The point (centerX, maxY), in the UI-coordinate lower-center\n     * @public\n     *\n     * @returns {Vector2}\n     */\n    getCenterBottom: function() { return new dot.Vector2( this.getCenterX(), this.maxY ); },\n    get centerBottom() { return this.getCenterBottom(); },\n\n    /**\n     * The point (maxX, maxY), in the UI-coordinate lower-right\n     * @public\n     *\n     * @returns {Vector2}\n     */\n    getRightBottom: function() { return new dot.Vector2( this.maxX, this.maxY ); },\n    get rightBottom() { return this.getRightBottom(); },\n\n    /**\n     * Whether we have negative width or height. Bounds2.NOTHING is a prime example of an empty Bounds2.\n     * Bounds with width = height = 0 are considered not empty, since they include the single (0,0) point.\n     * @public\n     *\n     * @returns {boolean}\n     */\n    isEmpty: function() { return this.getWidth() < 0 || this.getHeight() < 0; },\n\n    /**\n     * Whether our minimums and maximums are all finite numbers. This will exclude Bounds2.NOTHING and Bounds2.EVERYTHING.\n     * @public\n     *\n     * @returns {boolean}\n     */\n    isFinite: function() {\n      return isFinite( this.minX ) && isFinite( this.minY ) && isFinite( this.maxX ) && isFinite( this.maxY );\n    },\n\n    /**\n     * Whether this bounds has a non-zero area (non-zero positive width and height).\n     * @public\n     *\n     * @returns {boolean}\n     */\n    hasNonzeroArea: function() {\n      return this.getWidth() > 0 && this.getHeight() > 0;\n    },\n\n    /**\n     * Whether this bounds has a finite and non-negative width and height.\n     * @public\n     *\n     * @returns {boolean}\n     */\n    isValid: function() {\n      return !this.isEmpty() && this.isFinite();\n    },\n\n    /**\n     * If the location is inside the bounds, the location will be returned. Otherwise, this will return a new location\n     * on the edge of the bounds that is the closest to the provided location.\n     * @public\n     *\n     * @param {Vector2} location\n     * @returns {Vector2}\n     */\n    closestPointTo: function( location ) {\n      if ( this.containsCoordinates( location.x, location.y ) ) {\n        return location;\n      }\n      else {\n        var xConstrained = Math.max( Math.min( location.x, this.maxX ), this.x );\n        var yConstrained = Math.max( Math.min( location.y, this.maxY ), this.y );\n        return new Vector2( xConstrained, yConstrained );\n      }\n    },\n\n    /**\n     * Whether the coordinates are contained inside the bounding box, or are on the boundary.\n     * @public\n     *\n     * @param {number} x - X coordinate of the point to check\n     * @param {number} y - Y coordinate of the point to check\n     * @returns {boolean}\n     */\n    containsCoordinates: function( x, y ) {\n      return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;\n    },\n\n    /**\n     * Whether the point is contained inside the bounding box, or is on the boundary.\n     * @public\n     *\n     * @param {Vector2} point\n     * @returns {boolean}\n     */\n    containsPoint: function( point ) {\n      return this.containsCoordinates( point.x, point.y );\n    },\n\n    /**\n     * Whether this bounding box completely contains the bounding box passed as a parameter. The boundary of a box is\n     * considered to be \"contained\".\n     * @public\n     *\n     * @param {Bounds2} bounds\n     * @returns {boolean}\n     */\n    containsBounds: function( bounds ) {\n      return this.minX <= bounds.minX && this.maxX >= bounds.maxX && this.minY <= bounds.minY && this.maxY >= bounds.maxY;\n    },\n\n    /**\n     * Whether this and another bounding box have any points of intersection (including touching boundaries).\n     * @public\n     *\n     * @param {Bounds2} bounds\n     * @returns {boolean}\n     */\n    intersectsBounds: function( bounds ) {\n      var minX = Math.max( this.minX, bounds.minX );\n      var minY = Math.max( this.minY, bounds.minY );\n      var maxX = Math.min( this.maxX, bounds.maxX );\n      var maxY = Math.min( this.maxY, bounds.maxY );\n      return ( maxX - minX ) >= 0 && ( maxY - minY >= 0 );\n    },\n\n    /**\n     * The squared distance from the input point to the point closest to it inside the bounding box.\n     * @public\n     *\n     * @param {Vector2} point\n     * @returns {number}\n     */\n    minimumDistanceToPointSquared: function( point ) {\n      var closeX = point.x < this.minX ? this.minX : ( point.x > this.maxX ? this.maxX : null );\n      var closeY = point.y < this.minY ? this.minY : ( point.y > this.maxY ? this.maxY : null );\n      var d;\n      if ( closeX === null && closeY === null ) {\n        // inside, or on the boundary\n        return 0;\n      }\n      else if ( closeX === null ) {\n        // vertically directly above/below\n        d = closeY - point.y;\n        return d * d;\n      }\n      else if ( closeY === null ) {\n        // horizontally directly to the left/right\n        d = closeX - point.x;\n        return d * d;\n      }\n      else {\n        // corner case\n        var dx = closeX - point.x;\n        var dy = closeY - point.y;\n        return dx * dx + dy * dy;\n      }\n    },\n\n    /**\n     * The squared distance from the input point to the point furthest from it inside the bounding box.\n     * @public\n     *\n     * @param {Vector2} point\n     * @returns {number}\n     */\n    maximumDistanceToPointSquared: function( point ) {\n      var x = point.x > this.getCenterX() ? this.minX : this.maxX;\n      var y = point.y > this.getCenterY() ? this.minY : this.maxY;\n      x -= point.x;\n      y -= point.y;\n      return x * x + y * y;\n    },\n\n    /**\n     * Debugging string for the bounds.\n     * @public\n     *\n     * @returns {string}\n     */\n    toString: function() {\n      return '[x:(' + this.minX + ',' + this.maxX + '),y:(' + this.minY + ',' + this.maxY + ')]';\n    },\n\n    /**\n     * Exact equality comparison between this bounds and another bounds.\n     * @public\n     *\n     * @param {Bounds2} other\n     * @returns {boolean} - Whether the two bounds are equal\n     */\n    equals: function( other ) {\n      return this.minX === other.minX && this.minY === other.minY && this.maxX === other.maxX && this.maxY === other.maxY;\n    },\n\n    /**\n     * Approximate equality comparison between this bounds and another bounds.\n     * @public\n     *\n     * @param {Bounds2} other\n     * @param {number} epsilon\n     * @returns {boolean} - Whether difference between the two bounds has no min/max with an absolute value greater\n     *                      than epsilon.\n     */\n    equalsEpsilon: function( other, epsilon ) {\n      epsilon = epsilon !== undefined ? epsilon : 0;\n      var thisFinite = this.isFinite();\n      var otherFinite = other.isFinite();\n      if ( thisFinite && otherFinite ) {\n        // both are finite, so we can use Math.abs() - it would fail with non-finite values like Infinity\n        return Math.abs( this.minX - other.minX ) < epsilon &&\n               Math.abs( this.minY - other.minY ) < epsilon &&\n               Math.abs( this.maxX - other.maxX ) < epsilon &&\n               Math.abs( this.maxY - other.maxY ) < epsilon;\n      }\n      else if ( thisFinite !== otherFinite ) {\n        return false; // one is finite, the other is not. definitely not equal\n      }\n      else if ( this === other ) {\n        return true; // exact same instance, must be equal\n      }\n      else {\n        // epsilon only applies on finite dimensions. due to JS's handling of isFinite(), it's faster to check the sum of both\n        return ( isFinite( this.minX + other.minX ) ? ( Math.abs( this.minX - other.minX ) < epsilon ) : ( this.minX === other.minX ) ) &&\n               ( isFinite( this.minY + other.minY ) ? ( Math.abs( this.minY - other.minY ) < epsilon ) : ( this.minY === other.minY ) ) &&\n               ( isFinite( this.maxX + other.maxX ) ? ( Math.abs( this.maxX - other.maxX ) < epsilon ) : ( this.maxX === other.maxX ) ) &&\n               ( isFinite( this.maxY + other.maxY ) ? ( Math.abs( this.maxY - other.maxY ) < epsilon ) : ( this.maxY === other.maxY ) );\n      }\n    },\n\n    /*---------------------------------------------------------------------------*\n     * Immutable operations\n     *---------------------------------------------------------------------------*/\n\n    /**\n     * Creates a copy of this bounds, or if a bounds is passed in, set that bounds's values to ours.\n     * @public\n     *\n     * This is the immutable form of the function set(), if a bounds is provided. This will return a new bounds, and\n     * will not modify this bounds.\n     *\n     * @param {Bounds2} [bounds] - If not provided, creates a new Bounds2 with filled in values. Otherwise, fills in the\n     *                             values of the provided bounds so that it equals this bounds.\n     * @returns {Bounds2}\n     */\n    copy: function( bounds ) {\n      if ( bounds ) {\n        return bounds.set( this );\n      }\n      else {\n        return new Bounds2( this.minX, this.minY, this.maxX, this.maxY );\n      }\n    },\n\n    /**\n     * The smallest bounds that contains both this bounds and the input bounds, returned as a copy.\n     * @public\n     *\n     * This is the immutable form of the function includeBounds(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {Bounds2} bounds\n     * @returns {Bounds2}\n     */\n    union: function( bounds ) {\n      return new Bounds2(\n        Math.min( this.minX, bounds.minX ),\n        Math.min( this.minY, bounds.minY ),\n        Math.max( this.maxX, bounds.maxX ),\n        Math.max( this.maxY, bounds.maxY )\n      );\n    },\n\n    /**\n     * The smallest bounds that is contained by both this bounds and the input bounds, returned as a copy.\n     * @public\n     *\n     * This is the immutable form of the function constrainBounds(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {Bounds2} bounds\n     * @returns {Bounds2}\n     */\n    intersection: function( bounds ) {\n      return new Bounds2(\n        Math.max( this.minX, bounds.minX ),\n        Math.max( this.minY, bounds.minY ),\n        Math.min( this.maxX, bounds.maxX ),\n        Math.min( this.maxY, bounds.maxY )\n      );\n    },\n    // TODO: difference should be well-defined, but more logic is needed to compute\n\n    /**\n     * The smallest bounds that contains this bounds and the point (x,y), returned as a copy.\n     * @public\n     *\n     * This is the immutable form of the function addCoordinates(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @returns {Bounds2}\n     */\n    withCoordinates: function( x, y ) {\n      return new Bounds2(\n        Math.min( this.minX, x ),\n        Math.min( this.minY, y ),\n        Math.max( this.maxX, x ),\n        Math.max( this.maxY, y )\n      );\n    },\n\n    /**\n     * The smallest bounds that contains this bounds and the input point, returned as a copy.\n     * @public\n     *\n     * This is the immutable form of the function addPoint(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {Vector2} point\n     * @returns {Bounds2}\n     */\n    withPoint: function( point ) {\n      return this.withCoordinates( point.x, point.y );\n    },\n\n    /**\n     * A copy of this bounds, with minX replaced with the input.\n     * @public\n     *\n     * This is the immutable form of the function setMinX(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} minX\n     * @returns {Bounds2}\n     */\n    withMinX: function( minX ) {\n      return new Bounds2( minX, this.minY, this.maxX, this.maxY );\n    },\n\n    /**\n     * A copy of this bounds, with minY replaced with the input.\n     * @public\n     *\n     * This is the immutable form of the function setMinY(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} minY\n     * @returns {Bounds2}\n     */\n    withMinY: function( minY ) {\n      return new Bounds2( this.minX, minY, this.maxX, this.maxY );\n    },\n\n    /**\n     * A copy of this bounds, with maxX replaced with the input.\n     * @public\n     *\n     * This is the immutable form of the function setMaxX(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} maxX\n     * @returns {Bounds2}\n     */\n    withMaxX: function( maxX ) {\n      return new Bounds2( this.minX, this.minY, maxX, this.maxY );\n    },\n\n    /**\n     * A copy of this bounds, with maxY replaced with the input.\n     * @public\n     *\n     * This is the immutable form of the function setMaxY(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} maxY\n     * @returns {Bounds2}\n     */\n    withMaxY: function( maxY ) {\n      return new Bounds2( this.minX, this.minY, this.maxX, maxY );\n    },\n\n    /**\n     * A copy of this bounds, with the minimum values rounded down to the nearest integer, and the maximum values\n     * rounded up to the nearest integer. This causes the bounds to expand as necessary so that its boundaries\n     * are integer-aligned.\n     * @public\n     *\n     * This is the immutable form of the function roundOut(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @returns {Bounds2}\n     */\n    roundedOut: function() {\n      return new Bounds2(\n        Math.floor( this.minX ),\n        Math.floor( this.minY ),\n        Math.ceil( this.maxX ),\n        Math.ceil( this.maxY )\n      );\n    },\n\n    /**\n     * A copy of this bounds, with the minimum values rounded up to the nearest integer, and the maximum values\n     * rounded down to the nearest integer. This causes the bounds to contract as necessary so that its boundaries\n     * are integer-aligned.\n     * @public\n     *\n     * This is the immutable form of the function roundIn(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @returns {Bounds2}\n     */\n    roundedIn: function() {\n      return new Bounds2(\n        Math.ceil( this.minX ),\n        Math.ceil( this.minY ),\n        Math.floor( this.maxX ),\n        Math.floor( this.maxY )\n      );\n    },\n\n    /**\n     * A bounding box (still axis-aligned) that contains the transformed shape of this bounds, applying the matrix as\n     * an affine transformation.\n     * @pubic\n     *\n     * NOTE: bounds.transformed( matrix ).transformed( inverse ) may be larger than the original box, if it includes\n     * a rotation that isn't a multiple of $\\pi/2$. This is because the returned bounds may expand in area to cover\n     * ALL of the corners of the transformed bounding box.\n     *\n     * This is the immutable form of the function transform(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {Matrix3} matrix\n     * @returns {Bounds2}\n     */\n    transformed: function( matrix ) {\n      return this.copy().transform( matrix );\n    },\n\n    /**\n     * A bounding box that is expanded on all sides by the specified amount.)\n     * @public\n     *\n     * This is the immutable form of the function dilate(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} d\n     * @returns {Bounds2}\n     */\n    dilated: function( d ) {\n      return new Bounds2( this.minX - d, this.minY - d, this.maxX + d, this.maxY + d );\n    },\n\n    /**\n     * A bounding box that is expanded horizontally (on the left and right) by the specified amount.\n     * @public\n     *\n     * This is the immutable form of the function dilateX(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} x\n     * @returns {Bounds2}\n     */\n    dilatedX: function( x ) {\n      return new Bounds2( this.minX - x, this.minY, this.maxX + x, this.maxY );\n    },\n\n    /**\n     * A bounding box that is expanded vertically (on the top and bottom) by the specified amount.\n     * @public\n     *\n     * This is the immutable form of the function dilateY(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} y\n     * @returns {Bounds2}\n     */\n    dilatedY: function( y ) {\n      return new Bounds2( this.minX, this.minY - y, this.maxX, this.maxY + y );\n    },\n\n    /**\n     * A bounding box that is expanded on all sides, with different amounts of expansion horizontally and vertically.\n     * Will be identical to the bounds returned by calling bounds.dilatedX( x ).dilatedY( y ).\n     * @public\n     *\n     * This is the immutable form of the function dilateXY(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} x - Amount to dilate horizontally (for each side)\n     * @param {number} y - Amount to dilate vertically (for each side)\n     * @returns {Bounds2}\n     */\n    dilatedXY: function( x, y ) {\n      return new Bounds2( this.minX - x, this.minY - y, this.maxX + x, this.maxY + y );\n    },\n\n    /**\n     * A bounding box that is contracted on all sides by the specified amount.\n     * @public\n     *\n     * This is the immutable form of the function erode(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} amount\n     * @returns {Bounds2}\n     */\n    eroded: function( d ) { return this.dilated( -d ); },\n\n    /**\n     * A bounding box that is contracted horizontally (on the left and right) by the specified amount.\n     * @public\n     *\n     * This is the immutable form of the function erodeX(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} x\n     * @returns {Bounds2}\n     */\n    erodedX: function( x ) { return this.dilatedX( -x ); },\n\n    /**\n     * A bounding box that is contracted vertically (on the top and bottom) by the specified amount.\n     * @public\n     *\n     * This is the immutable form of the function erodeY(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} y\n     * @returns {Bounds2}\n     */\n    erodedY: function( y ) { return this.dilatedY( -y ); },\n\n    /**\n     * A bounding box that is contracted on all sides, with different amounts of contraction horizontally and vertically.\n     * @public\n     *\n     * This is the immutable form of the function erodeXY(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} x - Amount to erode horizontally (for each side)\n     * @param {number} y - Amount to erode vertically (for each side)\n     * @returns {Bounds2}\n     */\n    erodedXY: function( x, y ) { return this.dilatedXY( -x, -y ); },\n\n    /**\n     * A bounding box that is expanded by a specific amount on all sides (or if some offsets are negative, will contract\n     * those sides).\n     * @public\n     *\n     * This is the immutable form of the function offset(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} left - Amount to expand to the left (subtracts from minX)\n     * @param {number} top - Amount to expand to the top (subtracts from minY)\n     * @param {number} right - Amount to expand to the right (adds to maxX)\n     * @param {number} bottom - Amount to expand to the bottom (adds to maxY)\n     * @returns {Bounds2}\n     */\n    withOffsets: function( left, top, right, bottom ) {\n      return new Bounds2( this.minX - left, this.minY - top, this.maxX + right, this.maxY + bottom );\n    },\n\n    /**\n     * Our bounds, translated horizontally by x, returned as a copy.\n     * @public\n     *\n     * This is the immutable form of the function shiftX(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} x\n     * @returns {Bounds2}\n     */\n    shiftedX: function( x ) {\n      return new Bounds2( this.minX + x, this.minY, this.maxX + x, this.maxY );\n    },\n\n    /**\n     * Our bounds, translated vertically by y, returned as a copy.\n     * @public\n     *\n     * This is the immutable form of the function shiftY(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} y\n     * @returns {Bounds2}\n     */\n    shiftedY: function( y ) {\n      return new Bounds2( this.minX, this.minY + y, this.maxX, this.maxY + y );\n    },\n\n    /**\n     * Our bounds, translated by (x,y), returned as a copy.\n     * @public\n     *\n     * This is the immutable form of the function shift(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @returns {Bounds2}\n     */\n    shifted: function( x, y ) {\n      return new Bounds2( this.minX + x, this.minY + y, this.maxX + x, this.maxY + y );\n    },\n\n    /*---------------------------------------------------------------------------*\n     * Mutable operations\n     *\n     * All mutable operations should call one of the following:\n     *   setMinMax, setMinX, setMinY, setMaxX, setMaxY\n     *---------------------------------------------------------------------------*/\n\n    /**\n     * Sets each value for this bounds, and returns itself.\n     * @public\n     *\n     * @param {number} minX\n     * @param {number} minY\n     * @param {number} maxX\n     * @param {number} maxY\n     * @returns {Bounds2}\n     */\n    setMinMax: function( minX, minY, maxX, maxY ) {\n      this.minX = minX;\n      this.minY = minY;\n      this.maxX = maxX;\n      this.maxY = maxY;\n      return this;\n    },\n\n    /**\n     * Sets the value of minX.\n     * @public\n     *\n     * This is the mutable form of the function withMinX(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} minX\n     * @returns {Bounds2}\n     */\n    setMinX: function( minX ) {\n      this.minX = minX;\n      return this;\n    },\n\n    /**\n     * Sets the value of minY.\n     * @public\n     *\n     * This is the mutable form of the function withMinY(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} minY\n     * @returns {Bounds2}\n     */\n    setMinY: function( minY ) {\n      this.minY = minY;\n      return this;\n    },\n\n    /**\n     * Sets the value of maxX.\n     * @public\n     *\n     * This is the mutable form of the function withMaxX(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} maxX\n     * @returns {Bounds2}\n     */\n    setMaxX: function( maxX ) {\n      this.maxX = maxX;\n      return this;\n    },\n\n    /**\n     * Sets the value of maxY.\n     * @public\n     *\n     * This is the mutable form of the function withMaxY(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} maxY\n     * @returns {Bounds2}\n     */\n    setMaxY: function( maxY ) {\n      this.maxY = maxY;\n      return this;\n    },\n\n    /**\n     * Sets the values of this bounds to be equal to the input bounds.\n     * @public\n     *\n     * This is the mutable form of the function copy(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {Bounds2} bounds\n     * @returns {Bounds2}\n     */\n    set: function( bounds ) {\n      return this.setMinMax( bounds.minX, bounds.minY, bounds.maxX, bounds.maxY );\n    },\n\n    /**\n     * Modifies this bounds so that it contains both its original bounds and the input bounds.\n     * @public\n     *\n     * This is the mutable form of the function union(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {Bounds2} bounds\n     * @returns {Bounds2}\n     */\n    includeBounds: function( bounds ) {\n      return this.setMinMax(\n        Math.min( this.minX, bounds.minX ),\n        Math.min( this.minY, bounds.minY ),\n        Math.max( this.maxX, bounds.maxX ),\n        Math.max( this.maxY, bounds.maxY )\n      );\n    },\n\n    /**\n     * Modifies this bounds so that it is the largest bounds contained both in its original bounds and in the input bounds.\n     * @public\n     *\n     * This is the mutable form of the function intersection(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {Bounds2} bounds\n     * @returns {Bounds2}\n     */\n    constrainBounds: function( bounds ) {\n      return this.setMinMax(\n        Math.max( this.minX, bounds.minX ),\n        Math.max( this.minY, bounds.minY ),\n        Math.min( this.maxX, bounds.maxX ),\n        Math.min( this.maxY, bounds.maxY )\n      );\n    },\n\n    /**\n     * Modifies this bounds so that it contains both its original bounds and the input point (x,y).\n     * @public\n     *\n     * This is the mutable form of the function withCoordinates(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @returns {Bounds2}\n     */\n    addCoordinates: function( x, y ) {\n      return this.setMinMax(\n        Math.min( this.minX, x ),\n        Math.min( this.minY, y ),\n        Math.max( this.maxX, x ),\n        Math.max( this.maxY, y )\n      );\n    },\n\n    /**\n     * Modifies this bounds so that it contains both its original bounds and the input point.\n     * @public\n     *\n     * This is the mutable form of the function withPoint(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {Vector2} point\n     * @returns {Bounds2}\n     */\n    addPoint: function( point ) {\n      return this.addCoordinates( point.x, point.y );\n    },\n\n    /**\n     * Modifies this bounds so that its boundaries are integer-aligned, rounding the minimum boundaries down and the\n     * maximum boundaries up (expanding as necessary).\n     * @public\n     *\n     * This is the mutable form of the function roundedOut(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @returns {Bounds2}\n     */\n    roundOut: function() {\n      return this.setMinMax(\n        Math.floor( this.minX ),\n        Math.floor( this.minY ),\n        Math.ceil( this.maxX ),\n        Math.ceil( this.maxY )\n      );\n    },\n\n    /**\n     * Modifies this bounds so that its boundaries are integer-aligned, rounding the minimum boundaries up and the\n     * maximum boundaries down (contracting as necessary).\n     * @public\n     *\n     * This is the mutable form of the function roundedIn(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @returns {Bounds2}\n     */\n    roundIn: function() {\n      return this.setMinMax(\n        Math.ceil( this.minX ),\n        Math.ceil( this.minY ),\n        Math.floor( this.maxX ),\n        Math.floor( this.maxY )\n      );\n    },\n\n    /**\n     * Modifies this bounds so that it would fully contain a transformed version if its previous value, applying the\n     * matrix as an affine transformation.\n     * @pubic\n     *\n     * NOTE: bounds.transform( matrix ).transform( inverse ) may be larger than the original box, if it includes\n     * a rotation that isn't a multiple of $\\pi/2$. This is because the bounds may expand in area to cover\n     * ALL of the corners of the transformed bounding box.\n     *\n     * This is the mutable form of the function transformed(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {Matrix3} matrix\n     * @returns {Bounds2}\n     */\n    transform: function( matrix ) {\n      // if we contain no area, no change is needed\n      if ( this.isEmpty() ) {\n        return this;\n      }\n\n      // optimization to bail for identity matrices\n      if ( matrix.isIdentity() ) {\n        return this;\n      }\n\n      var minX = this.minX;\n      var minY = this.minY;\n      var maxX = this.maxX;\n      var maxY = this.maxY;\n      this.set( dot.Bounds2.NOTHING );\n\n      // using mutable vector so we don't create excessive instances of Vector2 during this\n      // make sure all 4 corners are inside this transformed bounding box\n\n      this.addPoint( matrix.multiplyVector2( scratchVector2.setXY( minX, minY ) ) );\n      this.addPoint( matrix.multiplyVector2( scratchVector2.setXY( minX, maxY ) ) );\n      this.addPoint( matrix.multiplyVector2( scratchVector2.setXY( maxX, minY ) ) );\n      this.addPoint( matrix.multiplyVector2( scratchVector2.setXY( maxX, maxY ) ) );\n      return this;\n    },\n\n    /**\n     * Expands this bounds on all sides by the specified amount.\n     * @public\n     *\n     * This is the mutable form of the function dilated(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} d\n     * @returns {Bounds2}\n     */\n    dilate: function( d ) {\n      return this.setMinMax( this.minX - d, this.minY - d, this.maxX + d, this.maxY + d );\n    },\n\n    /**\n     * Expands this bounds horizontally (left and right) by the specified amount.\n     * @public\n     *\n     * This is the mutable form of the function dilatedX(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} x\n     * @returns {Bounds2}\n     */\n    dilateX: function( x ) {\n      return this.setMinMax( this.minX - x, this.minY, this.maxX + x, this.maxY );\n    },\n\n    /**\n     * Expands this bounds vertically (top and bottom) by the specified amount.\n     * @public\n     *\n     * This is the mutable form of the function dilatedY(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} y\n     * @returns {Bounds2}\n     */\n    dilateY: function( y ) {\n      return this.setMinMax( this.minX, this.minY - y, this.maxX, this.maxY + y );\n    },\n\n    /**\n     * Expands this bounds independently in the horizontal and vertical directions. Will be equal to calling\n     * bounds.dilateX( x ).dilateY( y ).\n     * @public\n     *\n     * This is the mutable form of the function dilatedXY(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @returns {Bounds2}\n     */\n    dilateXY: function( x, y ) {\n      return this.setMinMax( this.minX - x, this.minY - y, this.maxX + x, this.maxY + y );\n    },\n\n    /**\n     * Contracts this bounds on all sides by the specified amount.\n     * @public\n     *\n     * This is the mutable form of the function eroded(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} d\n     * @returns {Bounds2}\n     */\n    erode: function( d ) { return this.dilate( -d ); },\n\n    /**\n     * Contracts this bounds horizontally (left and right) by the specified amount.\n     * @public\n     *\n     * This is the mutable form of the function erodedX(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} x\n     * @returns {Bounds2}\n     */\n    erodeX: function( x ) { return this.dilateX( -x ); },\n\n    /**\n     * Contracts this bounds vertically (top and bottom) by the specified amount.\n     * @public\n     *\n     * This is the mutable form of the function erodedY(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} y\n     * @returns {Bounds2}\n     */\n    erodeY: function( y ) { return this.dilateY( -y ); },\n\n    /**\n     * Contracts this bounds independently in the horizontal and vertical directions. Will be equal to calling\n     * bounds.erodeX( x ).erodeY( y ).\n     * @public\n     *\n     * This is the mutable form of the function erodedXY(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @returns {Bounds2}\n     */\n    erodeXY: function( x, y ) { return this.dilateXY( -x, -y ); },\n\n    /**\n     * Expands this bounds independently for each side (or if some offsets are negative, will contract those sides).\n     * @public\n     *\n     * This is the mutable form of the function withOffsets(). This will mutate (change) this bounds, in addition to\n     * returning this bounds itself.\n     *\n     * @param {number} left - Amount to expand to the left (subtracts from minX)\n     * @param {number} top - Amount to expand to the top (subtracts from minY)\n     * @param {number} right - Amount to expand to the right (adds to maxX)\n     * @param {number} bottom - Amount to expand to the bottom (adds to maxY)\n     * @returns {Bounds2}\n     */\n    offset: function( left, top, right, bottom ) {\n      return new Bounds2( this.minX - left, this.minY - top, this.maxX + right, this.maxY + bottom );\n    },\n\n    /**\n     * Translates our bounds horizontally by x.\n     * @public\n     *\n     * This is the mutable form of the function shiftedX(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} x\n     * @returns {Bounds2}\n     */\n    shiftX: function( x ) {\n      return this.setMinMax( this.minX + x, this.minY, this.maxX + x, this.maxY );\n    },\n\n    /**\n     * Translates our bounds vertically by y.\n     * @public\n     *\n     * This is the mutable form of the function shiftedY(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} y\n     * @returns {Bounds2}\n     */\n    shiftY: function( y ) {\n      return this.setMinMax( this.minX, this.minY + y, this.maxX, this.maxY + y );\n    },\n\n    /**\n     * Translates our bounds by (x,y).\n     * @public\n     *\n     * This is the mutable form of the function shifted(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @returns {Bounds2}\n     */\n    shift: function( x, y ) {\n      return this.setMinMax( this.minX + x, this.minY + y, this.maxX + x, this.maxY + y );\n    },\n\n    /**\n     * Find a point in the bounds closest to the specified point.\n     * @public\n     *\n     * @param {number} x - X coordinate of the point to test.\n     * @param {number} y - Y coordinate of the point to test.\n     * @param {Vector2} [result] - Vector2 that can store the return value to avoid allocations.\n     * @returns {Vector2}\n     */\n    getClosestPoint: function( x, y, result ) {\n      if ( result ) {\n        result.setXY( x, y );\n      }\n      else {\n        result = new dot.Vector2( x, y );\n      }\n      if ( result.x < this.minX ) { result.x = this.minX; }\n      if ( result.x > this.maxX ) { result.x = this.maxX; }\n      if ( result.y < this.minY ) { result.y = this.minY; }\n      if ( result.y > this.maxY ) { result.y = this.maxY; }\n      return result;\n    }\n  }, {\n    /**\n     * Returns a new Bounds2 object, with the familiar rectangle construction with x, y, width, and height.\n     * @public\n     *\n     * @param {number} x - The minimum value of X for the bounds.\n     * @param {number} y - The minimum value of Y for the bounds.\n     * @param {number} width - The width (maxX - minX) of the bounds.\n     * @param {number} height - The height (maxY - minY) of the bounds.\n     * @returns {Bounds2}\n     */\n    rect: function( x, y, width, height ) {\n      return new Bounds2( x, y, x + width, y + height );\n    },\n\n    /**\n     * Returns a new Bounds2 object that only contains the specified point (x,y). Useful for being dilated to form a\n     * bounding box around a point. Note that the bounds will not be \"empty\" as it contains (x,y), but it will have\n     * zero area.\n     * @public\n     *\n     * @param {number} x\n     * @param {number} y\n     * @returns {Bounds2}\n     */\n    point: function( x, y ) {\n      if ( x instanceof dot.Vector2 ) {\n        var p = x;\n        return new Bounds2( p.x, p.y, p.x, p.y );\n      }\n      else {\n        return new Bounds2( x, y, x, y );\n      }\n    }\n  } );\n\n  Poolable.mixin( Bounds2, {\n    defaultFactory: function() { return Bounds2.NOTHING.copy(); },\n    constructorDuplicateFactory: function( pool ) {\n      return function( minX, minY, maxX, maxY ) {\n        if ( pool.length ) {\n          return pool.pop().setMinMax( minX, minY, maxX, maxY );\n        }\n        else {\n          return new Bounds2( minX, minY, maxX, maxY );\n        }\n      };\n    }\n  } );\n\n  /**\n   * A contant Bounds2 with minimums = $\\infty$, maximums = $-\\infty$, so that it represents \"no bounds whatsoever\".\n   * @public\n   *\n   * This allows us to take the union (union/includeBounds) of this and any other Bounds2 to get the other bounds back,\n   * e.g. Bounds2.NOTHING.union( bounds ).equals( bounds ). This object naturally serves as the base case as a union of\n   * zero bounds objects.\n   *\n   * Additionally, intersections with NOTHING will always return a Bounds2 equivalent to NOTHING.\n   *\n   * @constant {Bounds2} NOTHING\n   */\n  Bounds2.NOTHING = new Bounds2( Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY );\n\n  /**\n   * A contant Bounds2 with minimums = $-\\infty$, maximums = $\\infty$, so that it represents \"all bounds\".\n   * @public\n   *\n   * This allows us to take the intersection (intersection/constrainBounds) of this and any other Bounds2 to get the\n   * other bounds back, e.g. Bounds2.EVERYTHING.intersection( bounds ).equals( bounds ). This object naturally serves as\n   * the base case as an intersection of zero bounds objects.\n   *\n   * Additionally, unions with EVERYTHING will always return a Bounds2 equivalent to EVERYTHING.\n   *\n   * @constant {Bounds2} EVERYTHING\n   */\n  Bounds2.EVERYTHING = new Bounds2( Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY );\n\n  function catchImmutableSetterLowHangingFruit( bounds ) {\n    bounds.setMinMax = function() { throw new Error( 'Attempt to set \\\"setMinMax\\\" of an immutable Bounds2 object' ); };\n    bounds.set = function() { throw new Error( 'Attempt to set \\\"set\\\" of an immutable Bounds2 object' ); };\n    bounds.includeBounds = function() { throw new Error( 'Attempt to set \\\"includeBounds\\\" of an immutable Bounds2 object' ); };\n    bounds.constrainBounds = function() { throw new Error( 'Attempt to set \\\"constrainBounds\\\" of an immutable Bounds2 object' ); };\n    bounds.addCoordinates = function() { throw new Error( 'Attempt to set \\\"addCoordinates\\\" of an immutable Bounds2 object' ); };\n    bounds.transform = function() { throw new Error( 'Attempt to set \\\"transform\\\" of an immutable Bounds2 object' ); };\n  }\n\n  if ( assert ) {\n    catchImmutableSetterLowHangingFruit( Bounds2.EVERYTHING );\n    catchImmutableSetterLowHangingFruit( Bounds2.NOTHING );\n  }\n\n  return Bounds2;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * 2-dimensional ray\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/Ray2',['require','DOT/dot'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n\n  function Ray2( position, direction ) {\n    this.position = position;\n    this.direction = direction;\n\n    assert && assert( Math.abs( direction.magnitude() - 1 ) < 0.01 );\n\n    phetAllocation && phetAllocation( 'Ray2' );\n  }\n\n  dot.register( 'Ray2', Ray2 );\n\n  Ray2.prototype = {\n    constructor: Ray2,\n\n    shifted: function( distance ) {\n      return new Ray2( this.pointAtDistance( distance ), this.direction );\n    },\n\n    pointAtDistance: function( distance ) {\n      return this.position.plus( this.direction.timesScalar( distance ) );\n    },\n\n    toString: function() {\n      return this.position.toString() + ' => ' + this.direction.toString();\n    }\n  };\n\n  return Ray2;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * A segment represents a specific curve with a start and end.\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'KITE/segments/Segment',['require','KITE/kite','PHET_CORE/inherit','AXON/Events','DOT/Util','DOT/Bounds2'],function( require ) {\n  'use strict';\n\n  var kite = require( 'KITE/kite' );\n\n  var inherit = require( 'PHET_CORE/inherit' );\n  var Events = require( 'AXON/Events' );\n  var DotUtil = require( 'DOT/Util' ); // eslint-disable-line require-statement-match\n  var Bounds2 = require( 'DOT/Bounds2' );\n\n  /*\n   * Will contain (for segments):\n   * properties (backed by ES5 getters, created usually lazily):\n   * start        - start point of this segment\n   * end          - end point of this segment\n   * startTangent - the tangent vector (normalized) to the segment at the start, pointing in the direction of motion (from start to end)\n   * endTangent   - the tangent vector (normalized) to the segment at the end, pointing in the direction of motion (from start to end)\n   * bounds       - the bounding box for the segment\n   *\n   * methods:\n   * positionAt( t )          - returns the position parametrically, with 0 <= t <= 1. this does NOT guarantee a constant magnitude tangent... don't feel like adding elliptical functions yet!\n   * tangentAt( t )           - returns the non-normalized tangent (dx/dt, dy/dt) parametrically, with 0 <= t <= 1.\n   * curvatureAt( t )         - returns the signed curvature (positive for visual clockwise - mathematical counterclockwise)\n   * subdivided( t )          - returns an array with 2 sub-segments, split at the parametric t value.\n   * getSVGPathFragment()     - returns a string containing the SVG path. assumes that the start point is already provided, so anything that calls this needs to put the M calls first\n   * strokeLeft( lineWidth )  - returns an array of segments that will draw an offset curve on the logical left side\n   * strokeRight( lineWidth ) - returns an array of segments that will draw an offset curve on the logical right side\n   * windingIntersection      - returns the winding number for intersection with a ray\n   * getInteriorExtremaTs     - returns a list of t values where dx/dt or dy/dt is 0 where 0 < t < 1. subdividing on these will result in monotonic segments\n   *\n   * writeToContext( context ) - draws the segment to the 2D Canvas context, assuming the context's current location is already at the start point\n   * transformed( matrix )     - returns a new segment that represents this segment after transformation by the matrix\n   */\n  function Segment() {\n    Events.call( this );\n  }\n\n  kite.register( 'Segment', Segment );\n\n  var identityFunction = function identityFunction( x ) { return x; };\n\n  inherit( Events, Segment, {\n    /**\n     * Will return true if the start/end tangents are purely vertical or horizontal. If all of the segments of a shape\n     * have this property, then the only line joins will be a multiple of pi/2 (90 degrees), and so all of the types of\n     * line joins will have the same bounds. This means that the stroked bounds will just be a pure dilation of the\n     * regular bounds, by lineWidth / 2.\n     * @public\n     *\n     * @returns {boolean}\n     */\n    areStrokedBoundsDilated: function() {\n      var epsilon = 0.0000001;\n\n      // If the derivative at the start/end are pointing in a cardinal direction (north/south/east/west), then the\n      // endpoints won't trigger non-dilated bounds, and the interior of the curve will not contribute.\n      return Math.abs( this.startTangent.x * this.startTangent.y ) < epsilon && Math.abs( this.endTangent.x * this.endTangent.y ) < epsilon;\n    },\n\n    // TODO: override everywhere so this isn't necessary (it's not particularly efficient!)\n    getBoundsWithTransform: function( matrix ) {\n      var transformedSegment = this.transformed( matrix );\n      return transformedSegment.getBounds();\n    },\n\n    // tList should be a list of sorted t values from 0 <= t <= 1\n    subdivisions: function( tList ) {\n      // this could be solved by recursion, but we don't plan on the JS engine doing tail-call optimization\n      var right = this;\n      var result = [];\n      for ( var i = 0; i < tList.length; i++ ) {\n        // assume binary subdivision\n        var t = tList[ i ];\n        var arr = right.subdivided( t );\n        assert && assert( arr.length === 2 );\n        result.push( arr[ 0 ] );\n        right = arr[ 1 ];\n\n        // scale up the remaining t values\n        for ( var j = i + 1; j < tList.length; j++ ) {\n          tList[ j ] = DotUtil.linear( t, 1, 0, 1, tList[ j ] );\n        }\n      }\n      result.push( right );\n      return result;\n    },\n\n    // return an array of segments from breaking this segment into monotone pieces\n    subdividedIntoMonotone: function() {\n      return this.subdivisions( this.getInteriorExtremaTs() );\n    },\n\n    /*\n     * toPiecewiseLinearSegments( options ), with the following options provided:\n     * - minLevels:                       how many levels to force subdivisions\n     * - maxLevels:                       prevent subdivision past this level\n     * - distanceEpsilon (optional null): controls level of subdivision by attempting to ensure a maximum (squared) deviation from the curve\n     * - curveEpsilon (optional null):    controls level of subdivision by attempting to ensure a maximum curvature change between segments\n     * - pointMap (optional):             function( Vector2 ) : Vector2, represents a (usually non-linear) transformation applied\n     * - methodName (optional):           if the method name is found on the segment, it is called with the expected signature function( options ) : Array[Segment]\n     *                                    instead of using our brute-force logic\n     */\n    toPiecewiseLinearSegments: function( options, minLevels, maxLevels, segments, start, end ) {\n      // for the first call, initialize min/max levels from our options\n      minLevels = minLevels === undefined ? options.minLevels : minLevels;\n      maxLevels = maxLevels === undefined ? options.maxLevels : maxLevels;\n      segments = segments || [];\n      var pointMap = options.pointMap || identityFunction;\n\n      // points mapped by the (possibly-nonlinear) pointMap.\n      start = start || pointMap( this.start );\n      end = end || pointMap( this.end );\n      var middle = pointMap( this.positionAt( 0.5 ) );\n\n      assert && assert( minLevels <= maxLevels );\n      assert && assert( options.distanceEpsilon === null || typeof options.distanceEpsilon === 'number' );\n      assert && assert( options.curveEpsilon === null || typeof options.curveEpsilon === 'number' );\n      assert && assert( !pointMap || typeof pointMap === 'function' );\n\n      // i.e. we will have finished = maxLevels === 0 || ( minLevels <= 0 && epsilonConstraints ), just didn't want to one-line it\n      var finished = maxLevels === 0; // bail out once we reach our maximum number of subdivision levels\n      if ( !finished && minLevels <= 0 ) { // force subdivision if minLevels hasn't been reached\n        // flatness criterion: A=start, B=end, C=midpoint, d0=distance from AB, d1=||B-A||, subdivide if d0/d1 > sqrt(epsilon)\n        finished = ( options.curveEpsilon === null || ( DotUtil.distToSegmentSquared( middle, start, end ) / start.distanceSquared( end ) < options.curveEpsilon ) ) &&\n                   // deviation criterion\n                   ( options.distanceEpsilon === null || ( DotUtil.distToSegmentSquared( middle, start, end ) < options.distanceEpsilon ) );\n      }\n\n      if ( finished ) {\n        segments.push( new kite.Line( start, end ) );\n      }\n      else {\n        var subdividedSegments = this.subdivided( 0.5 );\n        subdividedSegments[ 0 ].toPiecewiseLinearSegments( options, minLevels - 1, maxLevels - 1, segments, start, middle );\n        subdividedSegments[ 1 ].toPiecewiseLinearSegments( options, minLevels - 1, maxLevels - 1, segments, middle, end );\n      }\n      return segments;\n    }\n  } );\n\n  /**\n   * Adds getter/setter function pairs and ES5 pairs, e.g. addInvalidatingGetterSetter( Arc, 'radius' ) would add:\n   * - segment.getRadius()\n   * - segment.setRadius( value )\n   * - segment.radius // getter and setter\n   *\n   * It assumes the following is the internal name: '_' + name\n   *\n   * @param {Function} type - Should be the constructor of the type. We will modify its prototype\n   * @param {string} name - Name of the\n   */\n  Segment.addInvalidatingGetterSetter = function( type, name ) {\n    var internalName = '_' + name;\n    var capitalizedName = name.charAt( 0 ).toUpperCase() + name.slice( 1 );\n    var getterName = 'get' + capitalizedName;\n    var setterName = 'set' + capitalizedName;\n\n    // e.g. getRadius()\n    type.prototype[ getterName ] = function() {\n      return this[ internalName ];\n    };\n\n    // e.g. setRadius( value )\n    type.prototype[ setterName ] = function( value ) {\n      if ( this[ internalName ] !== value ) {\n        this[ internalName ] = value;\n        this.invalidate();\n      }\n      return this; // allow chaining\n    };\n\n    Object.defineProperty( type.prototype, name, {\n      set: type.prototype[ setterName ],\n      get: type.prototype[ getterName ]\n    } );\n  };\n\n  // list of { segment: ..., t: ..., closestPoint: ..., distanceSquared: ... } (since there can be duplicates), threshold is used for subdivision,\n  // where it will exit if all of the segments are shorter than the threshold\n  // TODO: solve segments to determine this analytically!\n  Segment.closestToPoint = function( segments, point, threshold ) {\n    var thresholdSquared = threshold * threshold;\n    var items = [];\n    var bestList = [];\n    var bestDistanceSquared = Number.POSITIVE_INFINITY;\n    var thresholdOk = false;\n\n    _.each( segments, function( segment ) {\n      // if we have an explicit computation for this segment, use it\n      if ( segment.explicitClosestToPoint ) {\n        var infos = segment.explicitClosestToPoint( point );\n        _.each( infos, function( info ) {\n          if ( info.distanceSquared < bestDistanceSquared ) {\n            bestList = [ info ];\n            bestDistanceSquared = info.distanceSquared;\n          }\n          else if ( info.distanceSquared === bestDistanceSquared ) {\n            bestList.push( info );\n          }\n        } );\n      }\n      else {\n        // otherwise, we will split based on monotonicity, so we can subdivide\n        // separate, so we can map the subdivided segments\n        var ts = [ 0 ].concat( segment.getInteriorExtremaTs() ).concat( [ 1 ] );\n        for ( var i = 0; i < ts.length - 1; i++ ) {\n          var ta = ts[ i ];\n          var tb = ts[ i + 1 ];\n          var pa = segment.positionAt( ta );\n          var pb = segment.positionAt( tb );\n          var bounds = Bounds2.point( pa ).addPoint( pb );\n          var minDistanceSquared = bounds.minimumDistanceToPointSquared( point );\n          if ( minDistanceSquared <= bestDistanceSquared ) {\n            var maxDistanceSquared = bounds.maximumDistanceToPointSquared( point );\n            if ( maxDistanceSquared < bestDistanceSquared ) {\n              bestDistanceSquared = maxDistanceSquared;\n              bestList = []; // clear it\n            }\n            items.push( {\n              ta: ta,\n              tb: tb,\n              pa: pa,\n              pb: pb,\n              segment: segment,\n              bounds: bounds,\n              min: minDistanceSquared,\n              max: maxDistanceSquared\n            } );\n          }\n        }\n      }\n    } );\n\n    while ( items.length && !thresholdOk ) {\n      var curItems = items;\n      items = [];\n\n      // whether all of the segments processed are shorter than the threshold\n      thresholdOk = true;\n\n      _.each( curItems, function( item ) {\n        if ( item.minDistanceSquared > bestDistanceSquared ) {\n          return; // drop this item\n        }\n        if ( thresholdOk && item.pa.distanceSquared( item.pb ) > thresholdSquared ) {\n          thresholdOk = false;\n        }\n        var tmid = ( item.ta + item.tb ) / 2;\n        var pmid = item.segment.positionAt( tmid );\n        var boundsA = Bounds2.point( item.pa ).addPoint( pmid );\n        var boundsB = Bounds2.point( item.pb ).addPoint( pmid );\n        var minA = boundsA.minimumDistanceToPointSquared( point );\n        var minB = boundsB.minimumDistanceToPointSquared( point );\n        if ( minA <= bestDistanceSquared ) {\n          var maxA = boundsA.maximumDistanceToPointSquared( point );\n          if ( maxA < bestDistanceSquared ) {\n            bestDistanceSquared = maxA;\n            bestList = []; // clear it\n          }\n          items.push( {\n            ta: item.ta,\n            tb: tmid,\n            pa: item.pa,\n            pb: pmid,\n            segment: item.segment,\n            bounds: boundsA,\n            min: minA,\n            max: maxA\n          } );\n        }\n        if ( minB <= bestDistanceSquared ) {\n          var maxB = boundsB.maximumDistanceToPointSquared( point );\n          if ( maxB < bestDistanceSquared ) {\n            bestDistanceSquared = maxB;\n            bestList = []; // clear it\n          }\n          items.push( {\n            ta: tmid,\n            tb: item.tb,\n            pa: pmid,\n            pb: item.pb,\n            segment: item.segment,\n            bounds: boundsB,\n            min: minB,\n            max: maxB\n          } );\n        }\n      } );\n    }\n\n    // if there are any closest regions, they are within the threshold, so we will add them all\n    _.each( items, function( item ) {\n      var t = ( item.ta + item.tb ) / 2;\n      var closestPoint = item.segment.positionAt( t );\n      bestList.push( {\n        segment: item.segment,\n        t: t,\n        closestPoint: closestPoint,\n        distanceSquared: point.distanceSquared( closestPoint )\n      } );\n    } );\n\n    return bestList;\n  };\n\n  return Segment;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Linear segment\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'KITE/segments/Line',['require','PHET_CORE/inherit','DOT/Bounds2','DOT/Vector2','DOT/Util','KITE/kite','KITE/segments/Segment'],function( require ) {\n  'use strict';\n\n  var inherit = require( 'PHET_CORE/inherit' );\n  var Bounds2 = require( 'DOT/Bounds2' );\n  var Vector2 = require( 'DOT/Vector2' );\n  var Util = require( 'DOT/Util' );\n\n  var kite = require( 'KITE/kite' );\n  var Segment = require( 'KITE/segments/Segment' );\n\n  var scratchVector2 = new Vector2();\n\n  function Line( start, end ) {\n    Segment.call( this );\n\n    this._start = start;\n    this._end = end;\n\n    this.invalidate();\n  }\n\n  kite.register( 'Line', Line );\n\n  inherit( Segment, Line, {\n\n    // @public - Clears cached information, should be called when any of the 'constructor arguments' are mutated.\n    invalidate: function() {\n      // Lazily-computed derived information\n      this._tangent = null; // {Vector2 | null}\n      this._bounds = null; // {Bounds2 | null}\n\n      this.trigger0( 'invalidated' );\n    },\n\n    getStartTangent: function() {\n      if ( this._tangent === null ) {\n        // TODO: allocation reduction\n        this._tangent = this._end.minus( this._start ).normalized();\n      }\n      return this._tangent;\n    },\n    get startTangent() { return this.getStartTangent(); },\n\n    getEndTangent: function() {\n      return this.getStartTangent();\n    },\n    get endTangent() { return this.getEndTangent(); },\n\n    getBounds: function() {\n      // TODO: allocation reduction\n      if ( this._bounds === null ) {\n        this._bounds = Bounds2.NOTHING.copy().addPoint( this._start ).addPoint( this._end );\n      }\n      return this._bounds;\n    },\n    get bounds() { return this.getBounds(); },\n\n    getBoundsWithTransform: function( matrix ) {\n      // uses mutable calls\n      var bounds = Bounds2.NOTHING.copy();\n      bounds.addPoint( matrix.multiplyVector2( scratchVector2.set( this._start ) ) );\n      bounds.addPoint( matrix.multiplyVector2( scratchVector2.set( this._end ) ) );\n      return bounds;\n    },\n\n    getNondegenerateSegments: function() {\n      // if it is degenerate (0-length), just ignore it\n      if ( this._start.equals( this._end ) ) {\n        return [];\n      }\n      else {\n        return [ this ];\n      }\n    },\n\n    positionAt: function( t ) {\n      return this._start.plus( this._end.minus( this._start ).times( t ) );\n    },\n\n    tangentAt: function( t ) {\n      // tangent always the same, just use the start tanget\n      return this.getStartTangent();\n    },\n\n    curvatureAt: function( t ) {\n      return 0; // no curvature on a straight line segment\n    },\n\n    getSVGPathFragment: function() {\n      return 'L ' + kite.svgNumber( this._end.x ) + ' ' + kite.svgNumber( this._end.y );\n    },\n\n    strokeLeft: function( lineWidth ) {\n      var offset = this.getEndTangent().perpendicular().negated().times( lineWidth / 2 );\n      return [ new kite.Line( this._start.plus( offset ), this._end.plus( offset ) ) ];\n    },\n\n    strokeRight: function( lineWidth ) {\n      var offset = this.getStartTangent().perpendicular().times( lineWidth / 2 );\n      return [ new kite.Line( this._end.plus( offset ), this._start.plus( offset ) ) ];\n    },\n\n    // lines are already monotone\n    getInteriorExtremaTs: function() { return []; },\n\n    subdivided: function( t ) {\n      var pt = this.positionAt( t );\n      return [\n        new kite.Line( this._start, pt ),\n        new kite.Line( pt, this._end )\n      ];\n    },\n\n    intersection: function( ray ) {\n      // We solve for the parametric line-line intersection, and then ensure the parameters are within both\n      // the line segment and forwards from the ray.\n\n      var result = [];\n\n      var start = this._start;\n      var end = this._end;\n\n      var diff = end.minus( start );\n\n      if ( diff.magnitudeSquared() === 0 ) {\n        return result;\n      }\n\n      var denom = ray.direction.y * diff.x - ray.direction.x * diff.y;\n\n      // If denominator is 0, the lines are parallel or coincident\n      if ( denom === 0 ) {\n        return result;\n      }\n\n      // linear parameter where start (0) to end (1)\n      var t = ( ray.direction.x * ( start.y - ray.position.y ) - ray.direction.y * ( start.x - ray.position.x ) ) / denom;\n\n      // check that the intersection point is between the line segment's endpoints\n      if ( t < 0 || t >= 1 ) {\n        return result;\n      }\n\n      // linear parameter where ray.position (0) to ray.position+ray.direction (1)\n      var s = ( diff.x * ( start.y - ray.position.y ) - diff.y * ( start.x - ray.position.x ) ) / denom;\n\n      // bail if it is behind our ray\n      if ( s < 0.00000001 ) {\n        return result;\n      }\n\n      // return the proper winding direction depending on what way our line intersection is \"pointed\"\n      var perp = diff.perpendicular();\n      result.push( {\n        distance: s,\n        point: start.plus( diff.times( t ) ),\n        normal: perp.dot( ray.direction ) > 0 ? perp.negated() : perp,\n        wind: ray.direction.perpendicular().dot( diff ) < 0 ? 1 : -1,\n        segment: this\n      } );\n      return result;\n    },\n\n    // returns the resultant winding number of this ray intersecting this segment.\n    windingIntersection: function( ray ) {\n      var hits = this.intersection( ray );\n      if ( hits.length ) {\n        return hits[ 0 ].wind;\n      }\n      else {\n        return 0;\n      }\n    },\n\n    // assumes the current position is at start\n    writeToContext: function( context ) {\n      context.lineTo( this._end.x, this._end.y );\n    },\n\n    transformed: function( matrix ) {\n      return new kite.Line( matrix.timesVector2( this._start ), matrix.timesVector2( this._end ) );\n    },\n\n    explicitClosestToPoint: function( point ) {\n      var diff = this._end.minus( this._start );\n      var t = point.minus( this._start ).dot( diff ) / diff.magnitudeSquared();\n      t = Util.clamp( t, 0, 1 );\n      var closestPoint = this.positionAt( t );\n      return [\n        {\n          segment: this,\n          t: t,\n          closestPoint: closestPoint,\n          distanceSquared: point.distanceSquared( closestPoint )\n        }\n      ];\n    },\n\n    // given the current curve parameterized by t, will return a curve parameterized by x where t = a * x + b\n    reparameterized: function( a, b ) {\n      return new kite.Line( this.positionAt( b ), this.positionAt( a + b ) );\n    },\n\n    polarToCartesian: function( options ) {\n      if ( this._start.x === this._end.x ) {\n        // angle is the same, we are still a line segment!\n        return [ new kite.Line( Vector2.createPolar( this._start.y, this._start.x ), Vector2.createPolar( this._end.y, this._end.x ) ) ];\n      }\n      else if ( this._start.y === this._end.y ) {\n        // we have a constant radius, so we are a circular arc\n        return [ new kite.Arc( Vector2.ZERO, this._start.y, this._start.x, this._end.x, this._start.x > this._end.x ) ];\n      }\n      else {\n        return this.toPiecewiseLinearSegments( options );\n      }\n    }\n  } );\n\n  Segment.addInvalidatingGetterSetter( Line, 'start' );\n  Segment.addInvalidatingGetterSetter( Line, 'end' );\n\n  return Line;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Arc segment\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'KITE/segments/Arc',['require','PHET_CORE/inherit','DOT/Vector2','DOT/Bounds2','DOT/Util','KITE/kite','KITE/segments/Segment'],function( require ) {\n  'use strict';\n\n  var inherit = require( 'PHET_CORE/inherit' );\n  var Vector2 = require( 'DOT/Vector2' );\n  var Bounds2 = require( 'DOT/Bounds2' );\n  var DotUtil = require( 'DOT/Util' ); // eslint-disable-line require-statement-match\n\n  var kite = require( 'KITE/kite' );\n  var Segment = require( 'KITE/segments/Segment' );\n\n  /**\n   * Creates a circular arc (or circle if the startAngle/endAngle difference is ~2pi).\n   * See http://www.w3.org/TR/2dcontext/#dom-context-2d-arc for detailed information on the parameters.\n   *\n   * @param {Vector2} center - Center of the arc (every point on the arc is equally far from the center)\n   * @param {number} radius - How far from the center the arc will be\n   * @param {number} startAngle - Angle (radians) of the start of the arc\n   * @param {number} endAngle - Angle (radians) of the end of the arc\n   * @param {boolean} anticlockwise - Decides which direction the arc takes around the center\n   * @constructor\n   */\n  function Arc( center, radius, startAngle, endAngle, anticlockwise ) {\n    Segment.call( this );\n\n    this._center = center;\n    this._radius = radius;\n    this._startAngle = startAngle;\n    this._endAngle = endAngle;\n    this._anticlockwise = anticlockwise;\n\n    this.invalidate();\n  }\n\n  kite.register( 'Arc', Arc );\n\n  inherit( Segment, Arc, {\n    // @public - Clears cached information, should be called when any of the 'constructor arguments' are mutated.\n    invalidate: function() {\n      // Lazily-computed derived information\n      this._start = null; // {Vector2 | null}\n      this._end = null; // {Vector2 | null}\n      this._startTangent = null; // {Vector2 | null}\n      this._endTangent = null; // {Vector2 | null}\n      this._actualEndAngle = null; // {number | null} - End angle in relation to our start angle (can get remapped)\n      this._isFullPerimeter = null; // {boolean | null} - Whether it's a full circle (and not just an arc)\n      this._angleDifference = null; // {number | null}\n      this._bounds = null; // {Bounds2 | null}\n\n      // Remap negative radius to a positive radius\n      if ( this._radius < 0 ) {\n        // support this case since we might actually need to handle it inside of strokes?\n        this._radius = -this._radius;\n        this._startAngle += Math.PI;\n        this._endAngle += Math.PI;\n      }\n\n      // Constraints that should always be satisfied\n      assert && assert( !( ( !this.anticlockwise && this.endAngle - this.startAngle <= -Math.PI * 2 ) ||\n                           ( this.anticlockwise && this.startAngle - this.endAngle <= -Math.PI * 2 ) ),\n        'Not handling arcs with start/end angles that show differences in-between browser handling' );\n      assert && assert( !( ( !this.anticlockwise && this.endAngle - this.startAngle > Math.PI * 2 ) ||\n                           ( this.anticlockwise && this.startAngle - this.endAngle > Math.PI * 2 ) ),\n        'Not handling arcs with start/end angles that show differences in-between browser handling' );\n\n      this.trigger0( 'invalidated' );\n    },\n\n    getStart: function() {\n      if ( this._start === null ) {\n        this._start = this.positionAtAngle( this._startAngle );\n      }\n      return this._start;\n    },\n    get start() { return this.getStart(); },\n\n    getEnd: function() {\n      if ( this._end === null ) {\n        this._end = this.positionAtAngle( this._endAngle );\n      }\n      return this._end;\n    },\n    get end() { return this.getEnd(); },\n\n    getStartTangent: function() {\n      if ( this._startTangent === null ) {\n        this._startTangent = this.tangentAtAngle( this._startAngle );\n      }\n      return this._startTangent;\n    },\n    get startTangent() { return this.getStartTangent(); },\n\n    getEndTangent: function() {\n      if ( this._endTangent === null ) {\n        this._endTangent = this.tangentAtAngle( this._endAngle );\n      }\n      return this._endTangent;\n    },\n    get endTangent() { return this.getEndTangent(); },\n\n    getActualEndAngle: function() {\n      if ( this._actualEndAngle === null ) {\n        // compute an actual end angle so that we can smoothly go from this._startAngle to this._actualEndAngle\n        if ( this._anticlockwise ) {\n          // angle is 'decreasing'\n          // -2pi <= end - start < 2pi\n          if ( this._startAngle > this._endAngle ) {\n            this._actualEndAngle = this._endAngle;\n          }\n          else if ( this._startAngle < this._endAngle ) {\n            this._actualEndAngle = this._endAngle - 2 * Math.PI;\n          }\n          else {\n            // equal\n            this._actualEndAngle = this._startAngle;\n          }\n        }\n        else {\n          // angle is 'increasing'\n          // -2pi < end - start <= 2pi\n          if ( this._startAngle < this._endAngle ) {\n            this._actualEndAngle = this._endAngle;\n          }\n          else if ( this._startAngle > this._endAngle ) {\n            this._actualEndAngle = this._endAngle + Math.PI * 2;\n          }\n          else {\n            // equal\n            this._actualEndAngle = this._startAngle;\n          }\n        }\n      }\n      return this._actualEndAngle;\n    },\n    get actualEndAngle() { return this.getActualEndAngle(); },\n\n    getIsFullPerimeter: function() {\n      if ( this._isFullPerimeter === null ) {\n        this._isFullPerimeter = ( !this._anticlockwise && this._endAngle - this._startAngle >= Math.PI * 2 ) || ( this._anticlockwise && this._startAngle - this._endAngle >= Math.PI * 2 );\n      }\n      return this._isFullPerimeter;\n    },\n    get isFullPerimeter() { return this.getIsFullPerimeter(); },\n\n    getAngleDifference: function() {\n      if ( this._angleDifference === null ) {\n        // compute an angle difference that represents how \"much\" of the circle our arc covers\n        this._angleDifference = this._anticlockwise ? this._startAngle - this._endAngle : this._endAngle - this._startAngle;\n        if ( this._angleDifference < 0 ) {\n          this._angleDifference += Math.PI * 2;\n        }\n        assert && assert( this._angleDifference >= 0 ); // now it should always be zero or positive\n      }\n      return this._angleDifference;\n    },\n    get angleDifference() { return this.getAngleDifference(); },\n\n    getBounds: function() {\n      if ( this._bounds === null ) {\n        // acceleration for intersection\n        this._bounds = Bounds2.NOTHING.copy().withPoint( this.getStart() )\n          .withPoint( this.getEnd() );\n\n        // if the angles are different, check extrema points\n        if ( this._startAngle !== this._endAngle ) {\n          // check all of the extrema points\n          this.includeBoundsAtAngle( 0 );\n          this.includeBoundsAtAngle( Math.PI / 2 );\n          this.includeBoundsAtAngle( Math.PI );\n          this.includeBoundsAtAngle( 3 * Math.PI / 2 );\n        }\n      }\n      return this._bounds;\n    },\n    get bounds() { return this.getBounds(); },\n\n    getNondegenerateSegments: function() {\n      if ( this._radius <= 0 || this._startAngle === this._endAngle ) {\n        return [];\n      }\n      else {\n        return [ this ]; // basically, Arcs aren't really degenerate that easily\n      }\n    },\n\n    includeBoundsAtAngle: function( angle ) {\n      if ( this.containsAngle( angle ) ) {\n        // the boundary point is in the arc\n        this._bounds = this._bounds.withPoint( this._center.plus( Vector2.createPolar( this._radius, angle ) ) );\n      }\n    },\n\n    // maps a contained angle to between [startAngle,actualEndAngle), even if the end angle is lower.\n    mapAngle: function( angle ) {\n      // consider an assert that we contain that angle?\n      return ( this._startAngle > this.getActualEndAngle() ) ?\n             DotUtil.moduloBetweenUp( angle, this._startAngle - 2 * Math.PI, this._startAngle ) :\n             DotUtil.moduloBetweenDown( angle, this._startAngle, this._startAngle + 2 * Math.PI );\n    },\n\n    tAtAngle: function( angle ) {\n      return ( this.mapAngle( angle ) - this._startAngle ) / ( this.getActualEndAngle() - this._startAngle );\n    },\n\n    angleAt: function( t ) {\n      return this._startAngle + ( this.getActualEndAngle() - this._startAngle ) * t;\n    },\n\n    positionAt: function( t ) {\n      return this.positionAtAngle( this.angleAt( t ) );\n    },\n\n    tangentAt: function( t ) {\n      return this.tangentAtAngle( this.angleAt( t ) );\n    },\n\n    curvatureAt: function( t ) {\n      return ( this._anticlockwise ? -1 : 1 ) / this._radius;\n    },\n\n    positionAtAngle: function( angle ) {\n      return this._center.plus( Vector2.createPolar( this._radius, angle ) );\n    },\n\n    tangentAtAngle: function( angle ) {\n      var normal = Vector2.createPolar( 1, angle );\n\n      return this._anticlockwise ? normal.perpendicular() : normal.perpendicular().negated();\n    },\n\n    // TODO: refactor? shared with EllipticalArc (use this improved version)\n    containsAngle: function( angle ) {\n      // transform the angle into the appropriate coordinate form\n      // TODO: check anticlockwise version!\n      var normalizedAngle = this._anticlockwise ? angle - this._endAngle : angle - this._startAngle;\n\n      // get the angle between 0 and 2pi\n      var positiveMinAngle = DotUtil.moduloBetweenDown( normalizedAngle, 0, Math.PI * 2 );\n\n      return positiveMinAngle <= this.angleDifference;\n    },\n\n    getSVGPathFragment: function() {\n      // see http://www.w3.org/TR/SVG/paths.html#PathDataEllipticalArcCommands for more info\n      // rx ry x-axis-rotation large-arc-flag sweep-flag x y\n\n      var epsilon = 0.01; // allow some leeway to render things as 'almost circles'\n      var sweepFlag = this._anticlockwise ? '0' : '1';\n      var largeArcFlag;\n      if ( this.angleDifference < Math.PI * 2 - epsilon ) {\n        largeArcFlag = this.angleDifference < Math.PI ? '0' : '1';\n        return 'A ' + kite.svgNumber( this._radius ) + ' ' + kite.svgNumber( this._radius ) + ' 0 ' + largeArcFlag +\n               ' ' + sweepFlag + ' ' + kite.svgNumber( this.end.x ) + ' ' + kite.svgNumber( this.end.y );\n      }\n      else {\n        // circle (or almost-circle) case needs to be handled differently\n        // since SVG will not be able to draw (or know how to draw) the correct circle if we just have a start and end, we need to split it into two circular arcs\n\n        // get the angle that is between and opposite of both of the points\n        var splitOppositeAngle = ( this._startAngle + this._endAngle ) / 2; // this _should_ work for the modular case?\n        var splitPoint = this._center.plus( Vector2.createPolar( this._radius, splitOppositeAngle ) );\n\n        largeArcFlag = '0'; // since we split it in 2, it's always the small arc\n\n        var firstArc = 'A ' + kite.svgNumber( this._radius ) + ' ' + kite.svgNumber( this._radius ) + ' 0 ' +\n                       largeArcFlag + ' ' + sweepFlag + ' ' + kite.svgNumber( splitPoint.x ) + ' ' + kite.svgNumber( splitPoint.y );\n        var secondArc = 'A ' + kite.svgNumber( this._radius ) + ' ' + kite.svgNumber( this._radius ) + ' 0 ' +\n                        largeArcFlag + ' ' + sweepFlag + ' ' + kite.svgNumber( this.end.x ) + ' ' + kite.svgNumber( this.end.y );\n\n        return firstArc + ' ' + secondArc;\n      }\n    },\n\n    strokeLeft: function( lineWidth ) {\n      return [ new kite.Arc( this._center, this._radius + ( this._anticlockwise ? 1 : -1 ) * lineWidth / 2, this._startAngle, this._endAngle, this._anticlockwise ) ];\n    },\n\n    strokeRight: function( lineWidth ) {\n      return [ new kite.Arc( this._center, this._radius + ( this._anticlockwise ? -1 : 1 ) * lineWidth / 2, this._endAngle, this._startAngle, !this._anticlockwise ) ];\n    },\n\n    // not including 0 and 1\n    getInteriorExtremaTs: function() {\n      var that = this;\n      var result = [];\n      _.each( [ 0, Math.PI / 2, Math.PI, 3 * Math.PI / 2 ], function( angle ) {\n        if ( that.containsAngle( angle ) ) {\n          var t = that.tAtAngle( angle );\n          var epsilon = 0.0000000001; // TODO: general kite epsilon?\n          if ( t > epsilon && t < 1 - epsilon ) {\n            result.push( t );\n          }\n        }\n      } );\n      return result.sort(); // modifies original, which is OK\n    },\n\n    subdivided: function( t ) {\n      // TODO: verify that we don't need to switch anticlockwise here, or subtract 2pi off any angles\n      var angle0 = this.angleAt( 0 );\n      var angleT = this.angleAt( t );\n      var angle1 = this.angleAt( 1 );\n      return [\n        new kite.Arc( this._center, this._radius, angle0, angleT, this._anticlockwise ),\n        new kite.Arc( this._center, this._radius, angleT, angle1, this._anticlockwise )\n      ];\n    },\n\n    intersection: function( ray ) {\n      var result = []; // hits in order\n\n      // left here, if in the future we want to better-handle boundary points\n      var epsilon = 0;\n\n      // Run a general circle-intersection routine, then we can test the angles later.\n      // Solves for the two solutions t such that ray.position + ray.direction * t is on the circle.\n      // Then we check whether the angle at each possible hit point is in our arc.\n      var centerToRay = ray.position.minus( this._center );\n      var tmp = ray.direction.dot( centerToRay );\n      var centerToRayDistSq = centerToRay.magnitudeSquared();\n      var discriminant = 4 * tmp * tmp - 4 * ( centerToRayDistSq - this._radius * this._radius );\n      if ( discriminant < epsilon ) {\n        // ray misses circle entirely\n        return result;\n      }\n      var base = ray.direction.dot( this._center ) - ray.direction.dot( ray.position );\n      var sqt = Math.sqrt( discriminant ) / 2;\n      var ta = base - sqt;\n      var tb = base + sqt;\n\n      if ( tb < epsilon ) {\n        // circle is behind ray\n        return result;\n      }\n\n      var pointB = ray.pointAtDistance( tb );\n      var normalB = pointB.minus( this._center ).normalized();\n\n      if ( ta < epsilon ) {\n        // we are inside the circle, so only one intersection is possible\n        if ( this.containsAngle( normalB.angle() ) ) {\n          result.push( {\n            distance: tb,\n            point: pointB,\n            normal: normalB.negated(), // normal is towards the ray\n            wind: this._anticlockwise ? -1 : 1 // since we are inside, wind this way\n          } );\n        }\n      }\n      else {\n        // two possible hits (outside circle)\n        var pointA = ray.pointAtDistance( ta );\n        var normalA = pointA.minus( this._center ).normalized();\n\n        if ( this.containsAngle( normalA.angle() ) ) {\n          result.push( {\n            distance: ta,\n            point: pointA,\n            normal: normalA,\n            wind: this._anticlockwise ? 1 : -1 // hit from outside\n          } );\n        }\n        if ( this.containsAngle( normalB.angle() ) ) {\n          result.push( {\n            distance: tb,\n            point: pointB,\n            normal: normalB.negated(),\n            wind: this._anticlockwise ? -1 : 1 // this is the far hit, which winds the opposite way\n          } );\n        }\n      }\n\n      return result;\n    },\n\n    // returns the resultant winding number of this ray intersecting this segment.\n    windingIntersection: function( ray ) {\n      var wind = 0;\n      var hits = this.intersection( ray );\n      _.each( hits, function( hit ) {\n        wind += hit.wind;\n      } );\n      return wind;\n    },\n\n    writeToContext: function( context ) {\n      context.arc( this._center.x, this._center.y, this._radius, this._startAngle, this._endAngle, this._anticlockwise );\n    },\n\n    // TODO: test various transform types, especially rotations, scaling, shears, etc.\n    transformed: function( matrix ) {\n      // so we can handle reflections in the transform, we do the general case handling for start/end angles\n      var startAngle = matrix.timesVector2( Vector2.createPolar( 1, this._startAngle ) ).minus( matrix.timesVector2( Vector2.ZERO ) ).angle();\n      var endAngle = matrix.timesVector2( Vector2.createPolar( 1, this._endAngle ) ).minus( matrix.timesVector2( Vector2.ZERO ) ).angle();\n\n      // reverse the 'clockwiseness' if our transform includes a reflection\n      var anticlockwise = matrix.getDeterminant() >= 0 ? this._anticlockwise : !this._anticlockwise;\n\n      if ( Math.abs( this._endAngle - this._startAngle ) === Math.PI * 2 ) {\n        endAngle = anticlockwise ? startAngle - Math.PI * 2 : startAngle + Math.PI * 2;\n      }\n\n      var scaleVector = matrix.getScaleVector();\n      if ( scaleVector.x !== scaleVector.y ) {\n        var radiusX = scaleVector.x * this._radius;\n        var radiusY = scaleVector.y * this._radius;\n        return new kite.EllipticalArc( matrix.timesVector2( this._center ), radiusX, radiusY, 0, startAngle, endAngle, anticlockwise );\n      }\n      else {\n        var radius = scaleVector.x * this._radius;\n        return new kite.Arc( matrix.timesVector2( this._center ), radius, startAngle, endAngle, anticlockwise );\n      }\n    }\n  } );\n\n  Segment.addInvalidatingGetterSetter( Arc, 'center' );\n  Segment.addInvalidatingGetterSetter( Arc, 'radius' );\n  Segment.addInvalidatingGetterSetter( Arc, 'startAngle' );\n  Segment.addInvalidatingGetterSetter( Arc, 'endAngle' );\n  Segment.addInvalidatingGetterSetter( Arc, 'anticlockwise' );\n\n  return Arc;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Styles needed to determine a stroked line shape.\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'KITE/util/LineStyles',['require','KITE/kite','DOT/Util','PHET_CORE/inherit','KITE/segments/Arc','KITE/segments/Line'],function( require ) {\n  'use strict';\n\n  var kite = require( 'KITE/kite' );\n  var lineLineIntersection = require( 'DOT/Util' ).lineLineIntersection;\n  var inherit = require( 'PHET_CORE/inherit' );\n\n  var Arc = require( 'KITE/segments/Arc' );\n  var Line = require( 'KITE/segments/Line' );\n\n  function LineStyles( args ) {\n    if ( args === undefined ) {\n      args = {};\n    }\n    this.lineWidth = args.lineWidth !== undefined ? args.lineWidth : 1;\n    this.lineCap = args.lineCap !== undefined ? args.lineCap : 'butt'; // butt, round, square\n    this.lineJoin = args.lineJoin !== undefined ? args.lineJoin : 'miter'; // miter, round, bevel\n    this.lineDash = args.lineDash ? args.lineDash : []; // [] is default, otherwise an array of numbers\n    this.lineDashOffset = args.lineDashOffset !== undefined ? args.lineDashOffset : 0; // 0 default, any number\n    this.miterLimit = args.miterLimit !== undefined ? args.miterLimit : 10; // see https://svgwg.org/svg2-draft/painting.html for miterLimit computations\n\n    assert && assert( Array.isArray( this.lineDash ) );\n  }\n\n  kite.register( 'LineStyles', LineStyles );\n\n  inherit( Object, LineStyles, {\n\n    equals: function( other ) {\n      var typical = this.lineWidth === other.lineWidth &&\n                    this.lineCap === other.lineCap &&\n                    this.lineJoin === other.lineJoin &&\n                    this.miterLimit === other.miterLimit &&\n                    this.lineDashOffset === other.lineDashOffset;\n      if ( !typical ) {\n        return false;\n      }\n\n      if ( this.lineDash.length === other.lineDash.length ) {\n        for ( var i = 0; i < this.lineDash.length; i++ ) {\n          if ( this.lineDash[ i ] !== other.lineDash[ i ] ) {\n            return false;\n          }\n        }\n      }\n      else {\n        // line dashes must be different\n        return false;\n      }\n\n      return true;\n    },\n\n    /*\n     * Creates an array of Segments that make up a line join, to the left side.\n     *\n     * Joins two segments together on the logical \"left\" side, at 'center' (where they meet), and un-normalized tangent\n     * vectors in the direction of the stroking. To join on the \"right\" side, switch the tangent order and negate them.\n     */\n    leftJoin: function( center, fromTangent, toTangent ) {\n      fromTangent = fromTangent.normalized();\n      toTangent = toTangent.normalized();\n\n      // where our join path starts and ends\n      var fromPoint = center.plus( fromTangent.perpendicular().negated().times( this.lineWidth / 2 ) );\n      var toPoint = center.plus( toTangent.perpendicular().negated().times( this.lineWidth / 2 ) );\n\n      var bevel = ( fromPoint.equals( toPoint ) ? [] : [ new Line( fromPoint, toPoint ) ] );\n\n      // only insert a join on the non-acute-angle side\n      if ( fromTangent.perpendicular().dot( toTangent ) > 0 ) {\n        switch( this.lineJoin ) {\n          case 'round':\n            var fromAngle = fromTangent.angle() + Math.PI / 2;\n            var toAngle = toTangent.angle() + Math.PI / 2;\n            return [ new Arc( center, this.lineWidth / 2, fromAngle, toAngle, true ) ];\n          case 'miter':\n            var theta = fromTangent.angleBetween( toTangent.negated() );\n            if ( 1 / Math.sin( theta / 2 ) <= this.miterLimit && theta < Math.PI - 0.00001 ) {\n              // draw the miter\n              var miterPoint = lineLineIntersection( fromPoint, fromPoint.plus( fromTangent ), toPoint, toPoint.plus( toTangent ) );\n              return [\n                new Line( fromPoint, miterPoint ),\n                new Line( miterPoint, toPoint )\n              ];\n            }\n            else {\n              // angle too steep, use bevel instead. same as below, but copied for linter\n              return bevel;\n            }\n            break;\n          case 'bevel':\n            return bevel;\n        }\n      }\n      else {\n        // no join necessary here since we have the acute angle. just simple lineTo for now so that the next segment starts from the right place\n        // TODO: can we prevent self-intersection here?\n        return bevel;\n      }\n    },\n\n    /*\n     * Creates an array of Segments that make up a line join, to the right side.\n     *\n     * Joins two segments together on the logical \"right\" side, at 'center' (where they meet), and normalized tangent\n     * vectors in the direction of the stroking. To join on the \"left\" side, switch the tangent order and negate them.\n     */\n    rightJoin: function( center, fromTangent, toTangent ) {\n      return this.leftJoin( center, toTangent.negated(), fromTangent.negated() );\n    },\n\n    /*\n     * Creates an array of Segments that make up a line cap from the endpoint 'center' in the direction of the tangent\n     */\n    cap: function( center, tangent ) {\n      tangent = tangent.normalized();\n\n      var fromPoint = center.plus( tangent.perpendicular().times( -this.lineWidth / 2 ) );\n      var toPoint = center.plus( tangent.perpendicular().times( this.lineWidth / 2 ) );\n\n      switch( this.lineCap ) {\n        case 'butt':\n          return [ new Line( fromPoint, toPoint ) ];\n        case 'round':\n          var tangentAngle = tangent.angle();\n          return [ new Arc( center, this.lineWidth / 2, tangentAngle + Math.PI / 2, tangentAngle - Math.PI / 2, true ) ];\n        case 'square':\n          var toLeft = tangent.perpendicular().negated().times( this.lineWidth / 2 );\n          var toRight = tangent.perpendicular().times( this.lineWidth / 2 );\n          var toFront = tangent.times( this.lineWidth / 2 );\n\n          var left = center.plus( toLeft ).plus( toFront );\n          var right = center.plus( toRight ).plus( toFront );\n          return [\n            new Line( fromPoint, left ),\n            new Line( left, right ),\n            new Line( right, toPoint )\n          ];\n      }\n    }\n  } );\n\n  return kite.LineStyles;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * A Canvas-style stateful (mutable) subpath, which tracks segments in addition to the points.\n *\n * See http://www.w3.org/TR/2dcontext/#concept-path\n * for the path / subpath Canvas concept.\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'KITE/util/Subpath',['require','DOT/Bounds2','PHET_CORE/inherit','AXON/Events','KITE/kite','KITE/segments/Line','KITE/segments/Arc','KITE/util/LineStyles'],function( require ) {\n  'use strict';\n\n  var Bounds2 = require( 'DOT/Bounds2' );\n  var inherit = require( 'PHET_CORE/inherit' );\n  var Events = require( 'AXON/Events' );\n\n  var kite = require( 'KITE/kite' );\n\n  var Line = require( 'KITE/segments/Line' );\n  var Arc = require( 'KITE/segments/Arc' );\n  var LineStyles = require( 'KITE/util/LineStyles' );\n\n  // all arguments optional (they are for the copy() method)\n  function Subpath( segments, points, closed ) {\n    Events.call( this );\n\n    var self = this;\n\n    this.segments = [];\n\n    // recombine points if necessary, based off of start points of segments + the end point of the last segment\n    this.points = points || ( ( segments && segments.length ) ? _.map( segments, function( segment ) { return segment.start; } ).concat( segments[ segments.length - 1 ].end ) : [] );\n    this.closed = !!closed;\n\n    // cached stroked shape (so hit testing can be done quickly on stroked shapes)\n    this._strokedSubpaths = null;\n    this._strokedSubpathsComputed = false;\n    this._strokedStyles = null;\n\n    this._bounds = null; // {Bounds2 | null} - If non-null, the bounds of the subpath\n\n    this._invalidateListener = this.invalidate.bind( this );\n    this._invalidatingPoints = false; // So we can invalidate all of the points without firing invalidation tons of times\n\n    // Add all segments directly (hooks up invalidation listeners properly)\n    if ( segments ) {\n      for ( var i = 0; i < segments.length; i++ ) {\n        _.each( segments[ i ].getNondegenerateSegments(), function( segment ) {\n          self.addSegmentDirectly( segment );\n        } );\n      }\n    }\n  }\n\n  kite.register( 'Subpath', Subpath );\n\n  inherit( Events, Subpath, {\n    getBounds: function() {\n      if ( this._bounds === null ) {\n        var bounds = Bounds2.NOTHING.copy();\n        _.each( this.segments, function( segment ) {\n          bounds.includeBounds( segment.getBounds() );\n        } );\n        this._bounds = bounds;\n      }\n      return this._bounds;\n    },\n    get bounds() { return this.getBounds(); },\n\n    copy: function() {\n      return new Subpath( this.segments.slice( 0 ), this.points.slice( 0 ), this.closed );\n    },\n\n    invalidatePoints: function() {\n      this._invalidatingPoints = true;\n\n      var numSegments = this.segments.length;\n      for ( var i = 0; i < numSegments; i++ ) {\n        this.segments[ i ].invalidate();\n      }\n\n      this._invalidatingPoints = false;\n      this.invalidate();\n    },\n\n    invalidate: function() {\n      if ( !this._invalidatingPoints ) {\n        this._bounds = null;\n        this._strokedSubpathsComputed = false;\n        this.trigger0( 'invalidated' );\n      }\n    },\n\n    addPoint: function( point ) {\n      this.points.push( point );\n\n      return this; // allow chaining\n    },\n\n    // @private - REALLY! Make sure we invalidate() after this is called\n    addSegmentDirectly: function( segment ) {\n      assert && assert( segment.start.isFinite(), 'Segment start is infinite' );\n      assert && assert( segment.end.isFinite(), 'Segment end is infinite' );\n      assert && assert( segment.startTangent.isFinite(), 'Segment startTangent is infinite' );\n      assert && assert( segment.endTangent.isFinite(), 'Segment endTangent is infinite' );\n      assert && assert( segment.bounds.isEmpty() || segment.bounds.isFinite(), 'Segment bounds is infinite and non-empty' );\n      this.segments.push( segment );\n\n      // Hook up an invalidation listener, so if this segment is invalidated, it will invalidate our subpath!\n      // NOTE: if we add removal of segments, we'll need to remove these listeners, or we'll leak!\n      segment.onStatic( 'invalidated', this._invalidateListener );\n\n      return this; // allow chaining\n    },\n\n    addSegment: function( segment ) {\n      var nondegenerateSegments = segment.getNondegenerateSegments();\n      var numNondegenerateSegments = nondegenerateSegments.length;\n      for ( var i = 0; i < numNondegenerateSegments; i++ ) {\n        this.addSegmentDirectly( segment );\n      }\n      this.invalidate(); // need to invalidate after addSegmentDirectly\n\n      return this; // allow chaining\n    },\n\n    // Adds a line segment from the start to end (if non-zero length) and marks the subpath as closed.\n    // NOTE: normally you just want to mark the subpath as closed, and not generate the closing segment this way?\n    addClosingSegment: function() {\n      if ( this.hasClosingSegment() ) {\n        var closingSegment = this.getClosingSegment();\n        this.addSegmentDirectly( closingSegment );\n        this.invalidate(); // need to invalidate after addSegmentDirectly\n        this.addPoint( this.getFirstPoint() );\n        this.closed = true;\n      }\n    },\n\n    // TODO: consider always adding a closing segment into our segments list for easier processing!! see addClosingSegment()\n    close: function() {\n      this.closed = true;\n    },\n\n    getLength: function() {\n      return this.points.length;\n    },\n\n    getFirstPoint: function() {\n      return _.first( this.points );\n    },\n\n    getLastPoint: function() {\n      return _.last( this.points );\n    },\n\n    getFirstSegment: function() {\n      return _.first( this.segments );\n    },\n\n    getLastSegment: function() {\n      return _.last( this.segments );\n    },\n\n    isDrawable: function() {\n      return this.segments.length > 0;\n    },\n\n    isClosed: function() {\n      return this.closed;\n    },\n\n    hasClosingSegment: function() {\n      return !this.getFirstPoint().equalsEpsilon( this.getLastPoint(), 0.000000001 );\n    },\n\n    getClosingSegment: function() {\n      assert && assert( this.hasClosingSegment(), 'Implicit closing segment unnecessary on a fully closed path' );\n      return new Line( this.getLastPoint(), this.getFirstPoint() );\n    },\n\n    writeToContext: function( context ) {\n      if ( this.isDrawable() ) {\n        var startPoint = this.getFirstSegment().start;\n        context.moveTo( startPoint.x, startPoint.y ); // the segments assume the current context position is at their start\n\n        var len = this.segments.length;\n        for ( var i = 0; i < len; i++ ) {\n          this.segments[ i ].writeToContext( context );\n        }\n\n        if ( this.closed ) {\n          context.closePath();\n        }\n      }\n    },\n\n    // see Segment.toPiecewiseLinearSegments for documentation\n    toPiecewiseLinear: function( options ) {\n      assert && assert( !options.pointMap, 'For use with pointMap, please use nonlinearTransformed' );\n      return new Subpath( _.flatten( _.map( this.segments, function( segment ) {\n        return segment.toPiecewiseLinearSegments( options );\n      } ) ), null, this.closed );\n    },\n\n    transformed: function( matrix ) {\n      return new Subpath(\n        _.map( this.segments, function( segment ) { return segment.transformed( matrix ); } ),\n        _.map( this.points, function( point ) { return matrix.timesVector2( point ); } ),\n        this.closed\n      );\n    },\n\n    // see Segment.toPiecewiseLinearSegments for documentation\n    nonlinearTransformed: function( options ) {\n      // specify an actual closing segment, so it can be mapped properly by any non-linear transforms\n      // TODO: always create and add the closing segments when the subpath is closed!!!\n      if ( this.closed && this.hasClosingSegment() ) {\n        this.addClosingSegment();\n      }\n\n      return new Subpath( _.flatten( _.map( this.segments, function( segment ) {\n        // check for this segment's support for the specific transform or discretization being applied\n        if ( options.methodName && segment[ options.methodName ] ) {\n          return segment[ options.methodName ]( options );\n        }\n        else {\n          return segment.toPiecewiseLinearSegments( options );\n        }\n      } ) ), null, this.closed );\n    },\n\n    getBoundsWithTransform: function( matrix ) {\n      var bounds = Bounds2.NOTHING.copy();\n      var numSegments = this.segments.length;\n      for ( var i = 0; i < numSegments; i++ ) {\n        bounds.includeBounds( this.segments[ i ].getBoundsWithTransform( matrix ) );\n      }\n      return bounds;\n    },\n\n    // {experimental} returns a subpath\n    offset: function( distance ) {\n      if ( !this.isDrawable() ) {\n        return new Subpath( [], null, this.closed );\n      }\n      if ( distance === 0 ) {\n        return new Subpath( this.segments.slice(), null, this.closed );\n      }\n\n      var i;\n\n      var regularSegments = this.segments.slice();\n      if ( this.closed && this.hasClosingSegment() ) {\n        regularSegments.push( this.getClosingSegment() );\n      }\n      var offsets = [];\n\n      for ( i = 0; i < regularSegments.length; i++ ) {\n        offsets.push( regularSegments[ i ].strokeLeft( 2 * distance ) );\n      }\n\n      var segments = [];\n      for ( i = 0; i < regularSegments.length; i++ ) {\n        if ( this.closed || i > 0 ) {\n          var previousI = ( i > 0 ? i : regularSegments.length ) - 1;\n          var center = regularSegments[ i ].start;\n          var fromTangent = regularSegments[ previousI ].endTangent;\n          var toTangent = regularSegments[ i ].startTangent;\n\n          var startAngle = fromTangent.perpendicular().negated().times( distance ).angle();\n          var endAngle = toTangent.perpendicular().negated().times( distance ).angle();\n          var anticlockwise = fromTangent.perpendicular().dot( toTangent ) > 0;\n          segments.push( new Arc( center, Math.abs( distance ), startAngle, endAngle, anticlockwise ) );\n        }\n        segments = segments.concat( offsets[ i ] );\n      }\n\n      return new Subpath( segments, null, this.closed );\n    },\n\n    // returns an array of subpaths (one if open, two if closed) that represent a stroked copy of this subpath.\n    stroked: function( lineStyles ) {\n      // non-drawable subpaths convert to empty subpaths\n      if ( !this.isDrawable() ) {\n        return [];\n      }\n\n      if ( lineStyles === undefined ) {\n        lineStyles = new LineStyles();\n      }\n\n      // return a cached version if possible\n      if ( this._strokedSubpathsComputed && this._strokedStyles.equals( lineStyles ) ) {\n        return this._strokedSubpaths;\n      }\n\n      var lineWidth = lineStyles.lineWidth;\n\n      var i;\n      var leftSegments = [];\n      var rightSegments = [];\n      var firstSegment = this.getFirstSegment();\n      var lastSegment = this.getLastSegment();\n\n      function appendLeftSegments( segments ) {\n        leftSegments = leftSegments.concat( segments );\n      }\n\n      function appendRightSegments( segments ) {\n        rightSegments = rightSegments.concat( segments );\n      }\n\n      // we don't need to insert an implicit closing segment if the start and end points are the same\n      var alreadyClosed = lastSegment.end.equals( firstSegment.start );\n      // if there is an implicit closing segment\n      var closingSegment = alreadyClosed ? null : new Line( this.segments[ this.segments.length - 1 ].end, this.segments[ 0 ].start );\n\n      // stroke the logical \"left\" side of our path\n      for ( i = 0; i < this.segments.length; i++ ) {\n        if ( i > 0 ) {\n          appendLeftSegments( lineStyles.leftJoin( this.segments[ i ].start, this.segments[ i - 1 ].endTangent, this.segments[ i ].startTangent ) );\n        }\n        appendLeftSegments( this.segments[ i ].strokeLeft( lineWidth ) );\n      }\n\n      // stroke the logical \"right\" side of our path\n      for ( i = this.segments.length - 1; i >= 0; i-- ) {\n        if ( i < this.segments.length - 1 ) {\n          appendRightSegments( lineStyles.rightJoin( this.segments[ i ].end, this.segments[ i ].endTangent, this.segments[ i + 1 ].startTangent ) );\n        }\n        appendRightSegments( this.segments[ i ].strokeRight( lineWidth ) );\n      }\n\n      var subpaths;\n      if ( this.closed ) {\n        if ( alreadyClosed ) {\n          // add the joins between the start and end\n          appendLeftSegments( lineStyles.leftJoin( lastSegment.end, lastSegment.endTangent, firstSegment.startTangent ) );\n          appendRightSegments( lineStyles.rightJoin( lastSegment.end, lastSegment.endTangent, firstSegment.startTangent ) );\n        }\n        else {\n          // logical \"left\" stroke on the implicit closing segment\n          appendLeftSegments( lineStyles.leftJoin( closingSegment.start, lastSegment.endTangent, closingSegment.startTangent ) );\n          appendLeftSegments( closingSegment.strokeLeft( lineWidth ) );\n          appendLeftSegments( lineStyles.leftJoin( closingSegment.end, closingSegment.endTangent, firstSegment.startTangent ) );\n\n          // logical \"right\" stroke on the implicit closing segment\n          appendRightSegments( lineStyles.rightJoin( closingSegment.end, closingSegment.endTangent, firstSegment.startTangent ) );\n          appendRightSegments( closingSegment.strokeRight( lineWidth ) );\n          appendRightSegments( lineStyles.rightJoin( closingSegment.start, lastSegment.endTangent, closingSegment.startTangent ) );\n        }\n        subpaths = [\n          new Subpath( leftSegments, null, true ),\n          new Subpath( rightSegments, null, true )\n        ];\n      }\n      else {\n        subpaths = [\n          new Subpath( leftSegments.concat( lineStyles.cap( lastSegment.end, lastSegment.endTangent ) )\n            .concat( rightSegments )\n            .concat( lineStyles.cap( firstSegment.start, firstSegment.startTangent.negated() ) ),\n            null, true )\n        ];\n      }\n\n      this._strokedSubpaths = subpaths;\n      this._strokedSubpathsComputed = true;\n      this._strokedStyles = new LineStyles( lineStyles ); // shallow copy, since we consider linestyles to be mutable\n\n      return subpaths;\n    }\n  } );\n\n  return kite.Subpath;\n} );\n\n","// NOTE: Generated from svgPath.pegjs using PEG.js, with added kite namespace and require.js compatibility.\n// See svgPath.pegjs for more documentation, or run \"grunt generate-svgPath-parser\" to regenerate.\n\ndefine( 'KITE/parser/svgPath',['require','KITE/kite'],function( require ) {\n  var kite = require( 'KITE/kite' );\n\n  /*\n   * Generated by PEG.js 0.7.0.\n   *\n   * http://pegjs.majda.cz/\n   */\n\n  function quote( s ) {\n    /*\n     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a\n     * string literal except for the closing quote character, backslash,\n     * carriage return, line separator, paragraph separator, and line feed.\n     * Any character may appear in the form of an escape sequence.\n     *\n     * For portability, we also escape escape all control and non-ASCII\n     * characters. Note that \"\\0\" and \"\\v\" escape sequences are not used\n     * because JSHint does not like the first and IE the second.\n     */\n    return '\"' + s\n        .replace( /\\\\/g, '\\\\\\\\' )  // backslash\n        .replace( /\"/g, '\\\\\"' )    // closing quote character\n        .replace( /\\x08/g, '\\\\b' ) // backspace\n        .replace( /\\t/g, '\\\\t' )   // horizontal tab\n        .replace( /\\n/g, '\\\\n' )   // line feed\n        .replace( /\\f/g, '\\\\f' )   // form feed\n        .replace( /\\r/g, '\\\\r' )   // carriage return\n        .replace( /[\\x00-\\x07\\x0B\\x0E-\\x1F\\x80-\\uFFFF]/g, escape )\n           + '\"';\n  }\n\n  var result = {\n    /*\n     * Parses the input with a generated parser. If the parsing is successfull,\n     * returns a value explicitly or implicitly specified by the grammar from\n     * which the parser was generated (see |PEG.buildParser|). If the parsing is\n     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.\n     */\n    parse: function( input, startRule ) {\n      var parseFunctions = {\n        \"svgPath\": parse_svgPath,\n        \"movetoDrawtoCommandGroups\": parse_movetoDrawtoCommandGroups,\n        \"movetoDrawtoCommandGroup\": parse_movetoDrawtoCommandGroup,\n        \"drawtoCommands\": parse_drawtoCommands,\n        \"drawtoCommand\": parse_drawtoCommand,\n        \"moveto\": parse_moveto,\n        \"movetoArgumentSequence\": parse_movetoArgumentSequence,\n        \"closepath\": parse_closepath,\n        \"lineto\": parse_lineto,\n        \"linetoArgumentSequence\": parse_linetoArgumentSequence,\n        \"horizontalLineto\": parse_horizontalLineto,\n        \"horizontalLinetoArgumentSequence\": parse_horizontalLinetoArgumentSequence,\n        \"verticalLineto\": parse_verticalLineto,\n        \"verticalLinetoArgumentSequence\": parse_verticalLinetoArgumentSequence,\n        \"curveto\": parse_curveto,\n        \"curvetoArgumentSequence\": parse_curvetoArgumentSequence,\n        \"curvetoArgument\": parse_curvetoArgument,\n        \"smoothCurveto\": parse_smoothCurveto,\n        \"smoothCurvetoArgumentSequence\": parse_smoothCurvetoArgumentSequence,\n        \"smoothCurvetoArgument\": parse_smoothCurvetoArgument,\n        \"quadraticBezierCurveto\": parse_quadraticBezierCurveto,\n        \"quadraticBezierCurvetoArgumentSequence\": parse_quadraticBezierCurvetoArgumentSequence,\n        \"quadraticBezierCurvetoArgument\": parse_quadraticBezierCurvetoArgument,\n        \"smoothQuadraticBezierCurveto\": parse_smoothQuadraticBezierCurveto,\n        \"smoothQuadraticBezierCurvetoArgumentSequence\": parse_smoothQuadraticBezierCurvetoArgumentSequence,\n        \"ellipticalArc\": parse_ellipticalArc,\n        \"ellipticalArcArgumentSequence\": parse_ellipticalArcArgumentSequence,\n        \"ellipticalArcArgument\": parse_ellipticalArcArgument,\n        \"coordinatePair\": parse_coordinatePair,\n        \"nonnegativeNumber\": parse_nonnegativeNumber,\n        \"number\": parse_number,\n        \"flag\": parse_flag,\n        \"commaWsp\": parse_commaWsp,\n        \"comma\": parse_comma,\n        \"floatingPointConstant\": parse_floatingPointConstant,\n        \"fractionalConstant\": parse_fractionalConstant,\n        \"exponent\": parse_exponent,\n        \"sign\": parse_sign,\n        \"digitSequence\": parse_digitSequence,\n        \"digit\": parse_digit,\n        \"wsp\": parse_wsp\n      };\n\n      if ( startRule !== undefined ) {\n        if ( parseFunctions[ startRule ] === undefined ) {\n          throw new Error( \"Invalid rule name: \" + quote( startRule ) + \".\" );\n        }\n      }\n      else {\n        startRule = \"svgPath\";\n      }\n\n      var pos = 0;\n      var reportFailures = 0;\n      var rightmostFailuresPos = 0;\n      var rightmostFailuresExpected = [];\n\n      function padLeft( input, padding, length ) {\n        var result = input;\n\n        var padLength = length - input.length;\n        for ( var i = 0; i < padLength; i++ ) {\n          result = padding + result;\n        }\n\n        return result;\n      }\n\n      function escape( ch ) {\n        var charCode = ch.charCodeAt( 0 );\n        var escapeChar;\n        var length;\n\n        if ( charCode <= 0xFF ) {\n          escapeChar = 'x';\n          length = 2;\n        }\n        else {\n          escapeChar = 'u';\n          length = 4;\n        }\n\n        return '\\\\' + escapeChar + padLeft( charCode.toString( 16 ).toUpperCase(), '0', length );\n      }\n\n      function matchFailed( failure ) {\n        if ( pos < rightmostFailuresPos ) {\n          return;\n        }\n\n        if ( pos > rightmostFailuresPos ) {\n          rightmostFailuresPos = pos;\n          rightmostFailuresExpected = [];\n        }\n\n        rightmostFailuresExpected.push( failure );\n      }\n\n      function parse_svgPath() {\n        var result0, result1, result2, result3;\n        var pos0, pos1;\n\n        pos0 = pos;\n        pos1 = pos;\n        result0 = [];\n        result1 = parse_wsp();\n        while ( result1 !== null ) {\n          result0.push( result1 );\n          result1 = parse_wsp();\n        }\n        if ( result0 !== null ) {\n          result1 = parse_movetoDrawtoCommandGroups();\n          result1 = result1 !== null ? result1 : \"\";\n          if ( result1 !== null ) {\n            result2 = [];\n            result3 = parse_wsp();\n            while ( result3 !== null ) {\n              result2.push( result3 );\n              result3 = parse_wsp();\n            }\n            if ( result2 !== null ) {\n              result0 = [ result0, result1, result2 ];\n            }\n            else {\n              result0 = null;\n              pos = pos1;\n            }\n          }\n          else {\n            result0 = null;\n            pos = pos1;\n          }\n        }\n        else {\n          result0 = null;\n          pos = pos1;\n        }\n        if ( result0 !== null ) {\n          result0 = (function( offset, path ) { return path ? path : []; })( pos0, result0[ 1 ] );\n        }\n        if ( result0 === null ) {\n          pos = pos0;\n        }\n        return result0;\n      }\n\n      function parse_movetoDrawtoCommandGroups() {\n        var result0, result1, result2;\n        var pos0, pos1;\n\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_movetoDrawtoCommandGroup();\n        if ( result0 !== null ) {\n          result1 = [];\n          result2 = parse_wsp();\n          while ( result2 !== null ) {\n            result1.push( result2 );\n            result2 = parse_wsp();\n          }\n          if ( result1 !== null ) {\n            result2 = parse_movetoDrawtoCommandGroups();\n            if ( result2 !== null ) {\n              result0 = [ result0, result1, result2 ];\n            }\n            else {\n              result0 = null;\n              pos = pos1;\n            }\n          }\n          else {\n            result0 = null;\n            pos = pos1;\n          }\n        }\n        else {\n          result0 = null;\n          pos = pos1;\n        }\n        if ( result0 !== null ) {\n          result0 = (function( offset, a, b ) { return a.concat( b ); })( pos0, result0[ 0 ], result0[ 2 ] );\n        }\n        if ( result0 === null ) {\n          pos = pos0;\n        }\n        if ( result0 === null ) {\n          pos0 = pos;\n          result0 = parse_movetoDrawtoCommandGroup();\n          if ( result0 !== null ) {\n            result0 = (function( offset, a ) { return a; })( pos0, result0 );\n          }\n          if ( result0 === null ) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n\n      function parse_movetoDrawtoCommandGroup() {\n        var result0, result1, result2;\n        var pos0, pos1;\n\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_moveto();\n        if ( result0 !== null ) {\n          result1 = [];\n          result2 = parse_wsp();\n          while ( result2 !== null ) {\n            result1.push( result2 );\n            result2 = parse_wsp();\n          }\n          if ( result1 !== null ) {\n            result2 = parse_drawtoCommands();\n            result2 = result2 !== null ? result2 : \"\";\n            if ( result2 !== null ) {\n              result0 = [ result0, result1, result2 ];\n            }\n            else {\n              result0 = null;\n              pos = pos1;\n            }\n          }\n          else {\n            result0 = null;\n            pos = pos1;\n          }\n        }\n        else {\n          result0 = null;\n          pos = pos1;\n        }\n        if ( result0 !== null ) {\n          result0 = (function( offset, m, c ) { return c.length ? m.concat( c ) : m; })( pos0, result0[ 0 ], result0[ 2 ] );\n        }\n        if ( result0 === null ) {\n          pos = pos0;\n        }\n        return result0;\n      }\n\n      function parse_drawtoCommands() {\n        var result0, result1, result2;\n        var pos0, pos1;\n\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_drawtoCommand();\n        if ( result0 !== null ) {\n          result1 = [];\n          result2 = parse_wsp();\n          while ( result2 !== null ) {\n            result1.push( result2 );\n            result2 = parse_wsp();\n          }\n          if ( result1 !== null ) {\n            result2 = parse_drawtoCommands();\n            if ( result2 !== null ) {\n              result0 = [ result0, result1, result2 ];\n            }\n            else {\n              result0 = null;\n              pos = pos1;\n            }\n          }\n          else {\n            result0 = null;\n            pos = pos1;\n          }\n        }\n        else {\n          result0 = null;\n          pos = pos1;\n        }\n        if ( result0 !== null ) {\n          result0 = (function( offset, cmd, cmds ) { return cmd.concat( cmds ); })( pos0, result0[ 0 ], result0[ 2 ] );\n        }\n        if ( result0 === null ) {\n          pos = pos0;\n        }\n        if ( result0 === null ) {\n          pos0 = pos;\n          result0 = parse_drawtoCommand();\n          if ( result0 !== null ) {\n            result0 = (function( offset, cmd ) { return cmd; })( pos0, result0 );\n          }\n          if ( result0 === null ) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n\n      function parse_drawtoCommand() {\n        var result0;\n\n        result0 = parse_closepath();\n        if ( result0 === null ) {\n          result0 = parse_lineto();\n          if ( result0 === null ) {\n            result0 = parse_horizontalLineto();\n            if ( result0 === null ) {\n              result0 = parse_verticalLineto();\n              if ( result0 === null ) {\n                result0 = parse_curveto();\n                if ( result0 === null ) {\n                  result0 = parse_smoothCurveto();\n                  if ( result0 === null ) {\n                    result0 = parse_quadraticBezierCurveto();\n                    if ( result0 === null ) {\n                      result0 = parse_smoothQuadraticBezierCurveto();\n                      if ( result0 === null ) {\n                        result0 = parse_ellipticalArc();\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        return result0;\n      }\n\n      function parse_moveto() {\n        var result0, result1, result2;\n        var pos0, pos1;\n\n        pos0 = pos;\n        pos1 = pos;\n        if ( input.charCodeAt( pos ) === 77 ) {\n          result0 = \"M\";\n          pos++;\n        }\n        else {\n          result0 = null;\n          if ( reportFailures === 0 ) {\n            matchFailed( \"\\\"M\\\"\" );\n          }\n        }\n        if ( result0 !== null ) {\n          result1 = [];\n          result2 = parse_wsp();\n          while ( result2 !== null ) {\n            result1.push( result2 );\n            result2 = parse_wsp();\n          }\n          if ( result1 !== null ) {\n            result2 = parse_movetoArgumentSequence();\n            if ( result2 !== null ) {\n              result0 = [ result0, result1, result2 ];\n            }\n            else {\n              result0 = null;\n              pos = pos1;\n            }\n          }\n          else {\n            result0 = null;\n            pos = pos1;\n          }\n        }\n        else {\n          result0 = null;\n          pos = pos1;\n        }\n        if ( result0 !== null ) {\n          result0 = (function( offset, args ) { return createMoveTo( args, false ); })( pos0, result0[ 2 ] );\n        }\n        if ( result0 === null ) {\n          pos = pos0;\n        }\n        if ( result0 === null ) {\n          pos0 = pos;\n          pos1 = pos;\n          if ( input.charCodeAt( pos ) === 109 ) {\n            result0 = \"m\";\n            pos++;\n          }\n          else {\n            result0 = null;\n            if ( reportFailures === 0 ) {\n              matchFailed( \"\\\"m\\\"\" );\n            }\n          }\n          if ( result0 !== null ) {\n            result1 = [];\n            result2 = parse_wsp();\n            while ( result2 !== null ) {\n              result1.push( result2 );\n              result2 = parse_wsp();\n            }\n            if ( result1 !== null ) {\n              result2 = parse_movetoArgumentSequence();\n              if ( result2 !== null ) {\n                result0 = [ result0, result1, result2 ];\n              }\n              else {\n                result0 = null;\n                pos = pos1;\n              }\n            }\n            else {\n              result0 = null;\n              pos = pos1;\n            }\n          }\n          else {\n            result0 = null;\n            pos = pos1;\n          }\n          if ( result0 !== null ) {\n            result0 = (function( offset, args ) { return createMoveTo( args, true ); })( pos0, result0[ 2 ] );\n          }\n          if ( result0 === null ) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n\n      function parse_movetoArgumentSequence() {\n        var result0, result1, result2;\n        var pos0, pos1;\n\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_coordinatePair();\n        if ( result0 !== null ) {\n          result1 = parse_commaWsp();\n          result1 = result1 !== null ? result1 : \"\";\n          if ( result1 !== null ) {\n            result2 = parse_linetoArgumentSequence();\n            if ( result2 !== null ) {\n              result0 = [ result0, result1, result2 ];\n            }\n            else {\n              result0 = null;\n              pos = pos1;\n            }\n          }\n          else {\n            result0 = null;\n            pos = pos1;\n          }\n        }\n        else {\n          result0 = null;\n          pos = pos1;\n        }\n        if ( result0 !== null ) {\n          result0 = (function( offset, pair, list ) { return [ pair ].concat( list ); })( pos0, result0[ 0 ], result0[ 2 ] );\n        }\n        if ( result0 === null ) {\n          pos = pos0;\n        }\n        if ( result0 === null ) {\n          pos0 = pos;\n          result0 = parse_coordinatePair();\n          if ( result0 !== null ) {\n            result0 = (function( offset, pair ) { return [ pair ]; })( pos0, result0 );\n          }\n          if ( result0 === null ) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n\n      function parse_closepath() {\n        var result0;\n        var pos0;\n\n        pos0 = pos;\n        if ( input.charCodeAt( pos ) === 90 ) {\n          result0 = \"Z\";\n          pos++;\n        }\n        else {\n          result0 = null;\n          if ( reportFailures === 0 ) {\n            matchFailed( \"\\\"Z\\\"\" );\n          }\n        }\n        if ( result0 === null ) {\n          if ( input.charCodeAt( pos ) === 122 ) {\n            result0 = \"z\";\n            pos++;\n          }\n          else {\n            result0 = null;\n            if ( reportFailures === 0 ) {\n              matchFailed( \"\\\"z\\\"\" );\n            }\n          }\n        }\n        if ( result0 !== null ) {\n          result0 = (function( offset, command ) { return { cmd: 'close' }; })( pos0, result0 );\n        }\n        if ( result0 === null ) {\n          pos = pos0;\n        }\n        return result0;\n      }\n\n      function parse_lineto() {\n        var result0, result1, result2;\n        var pos0, pos1;\n\n        pos0 = pos;\n        pos1 = pos;\n        if ( input.charCodeAt( pos ) === 76 ) {\n          result0 = \"L\";\n          pos++;\n        }\n        else {\n          result0 = null;\n          if ( reportFailures === 0 ) {\n            matchFailed( \"\\\"L\\\"\" );\n          }\n        }\n        if ( result0 !== null ) {\n          result1 = [];\n          result2 = parse_wsp();\n          while ( result2 !== null ) {\n            result1.push( result2 );\n            result2 = parse_wsp();\n          }\n          if ( result1 !== null ) {\n            result2 = parse_linetoArgumentSequence();\n            if ( result2 !== null ) {\n              result0 = [ result0, result1, result2 ];\n            }\n            else {\n              result0 = null;\n              pos = pos1;\n            }\n          }\n          else {\n            result0 = null;\n            pos = pos1;\n          }\n        }\n        else {\n          result0 = null;\n          pos = pos1;\n        }\n        if ( result0 !== null ) {\n          result0 = (function( offset, args ) {\n            return args.map( function( arg ) {\n              return {\n                cmd: 'lineTo',\n                args: [ arg.x, arg.y ]\n              };\n            } );\n          })( pos0, result0[ 2 ] );\n        }\n        if ( result0 === null ) {\n          pos = pos0;\n        }\n        if ( result0 === null ) {\n          pos0 = pos;\n          pos1 = pos;\n          if ( input.charCodeAt( pos ) === 108 ) {\n            result0 = \"l\";\n            pos++;\n          }\n          else {\n            result0 = null;\n            if ( reportFailures === 0 ) {\n              matchFailed( \"\\\"l\\\"\" );\n            }\n          }\n          if ( result0 !== null ) {\n            result1 = [];\n            result2 = parse_wsp();\n            while ( result2 !== null ) {\n              result1.push( result2 );\n              result2 = parse_wsp();\n            }\n            if ( result1 !== null ) {\n              result2 = parse_linetoArgumentSequence();\n              if ( result2 !== null ) {\n                result0 = [ result0, result1, result2 ];\n              }\n              else {\n                result0 = null;\n                pos = pos1;\n              }\n            }\n            else {\n              result0 = null;\n              pos = pos1;\n            }\n          }\n          else {\n            result0 = null;\n            pos = pos1;\n          }\n          if ( result0 !== null ) {\n            result0 = (function( offset, args ) {\n              return args.map( function( arg ) {\n                return {\n                  cmd: 'lineToRelative',\n                  args: [ arg.x, arg.y ]\n                };\n              } );\n            })( pos0, result0[ 2 ] );\n          }\n          if ( result0 === null ) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n\n      function parse_linetoArgumentSequence() {\n        var result0, result1, result2;\n        var pos0, pos1;\n\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_coordinatePair();\n        if ( result0 !== null ) {\n          result1 = parse_commaWsp();\n          result1 = result1 !== null ? result1 : \"\";\n          if ( result1 !== null ) {\n            result2 = parse_linetoArgumentSequence();\n            if ( result2 !== null ) {\n              result0 = [ result0, result1, result2 ];\n            }\n            else {\n              result0 = null;\n              pos = pos1;\n            }\n          }\n          else {\n            result0 = null;\n            pos = pos1;\n          }\n        }\n        else {\n          result0 = null;\n          pos = pos1;\n        }\n        if ( result0 !== null ) {\n          result0 = (function( offset, a, b ) { return [ a ].concat( b ); })( pos0, result0[ 0 ], result0[ 2 ] );\n        }\n        if ( result0 === null ) {\n          pos = pos0;\n        }\n        if ( result0 === null ) {\n          pos0 = pos;\n          result0 = parse_coordinatePair();\n          if ( result0 !== null ) {\n            result0 = (function( offset, a ) { return [ a ]; })( pos0, result0 );\n          }\n          if ( result0 === null ) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n\n      function parse_horizontalLineto() {\n        var result0, result1, result2;\n        var pos0, pos1;\n\n        pos0 = pos;\n        pos1 = pos;\n        if ( input.charCodeAt( pos ) === 72 ) {\n          result0 = \"H\";\n          pos++;\n        }\n        else {\n          result0 = null;\n          if ( reportFailures === 0 ) {\n            matchFailed( \"\\\"H\\\"\" );\n          }\n        }\n        if ( result0 !== null ) {\n          result1 = [];\n          result2 = parse_wsp();\n          while ( result2 !== null ) {\n            result1.push( result2 );\n            result2 = parse_wsp();\n          }\n          if ( result1 !== null ) {\n            result2 = parse_horizontalLinetoArgumentSequence();\n            if ( result2 !== null ) {\n              result0 = [ result0, result1, result2 ];\n            }\n            else {\n              result0 = null;\n              pos = pos1;\n            }\n          }\n          else {\n            result0 = null;\n            pos = pos1;\n          }\n        }\n        else {\n          result0 = null;\n          pos = pos1;\n        }\n        if ( result0 !== null ) {\n          result0 = (function( offset, args ) {\n            return args.map( function( arg ) {\n              return {\n                cmd: 'horizontalLineTo',\n                args: [ arg ]\n              }\n            } );\n          })( pos0, result0[ 2 ] );\n        }\n        if ( result0 === null ) {\n          pos = pos0;\n        }\n        if ( result0 === null ) {\n          pos0 = pos;\n          pos1 = pos;\n          if ( input.charCodeAt( pos ) === 104 ) {\n            result0 = \"h\";\n            pos++;\n          }\n          else {\n            result0 = null;\n            if ( reportFailures === 0 ) {\n              matchFailed( \"\\\"h\\\"\" );\n            }\n          }\n          if ( result0 !== null ) {\n            result1 = [];\n            result2 = parse_wsp();\n            while ( result2 !== null ) {\n              result1.push( result2 );\n              result2 = parse_wsp();\n            }\n            if ( result1 !== null ) {\n              result2 = parse_horizontalLinetoArgumentSequence();\n              if ( result2 !== null ) {\n                result0 = [ result0, result1, result2 ];\n              }\n              else {\n                result0 = null;\n                pos = pos1;\n              }\n            }\n            else {\n              result0 = null;\n              pos = pos1;\n            }\n          }\n          else {\n            result0 = null;\n            pos = pos1;\n          }\n          if ( result0 !== null ) {\n            result0 = (function( offset, args ) {\n              return args.map( function( arg ) {\n                return {\n                  cmd: 'horizontalLineToRelative',\n                  args: [ arg ]\n                }\n              } );\n            })( pos0, result0[ 2 ] );\n          }\n          if ( result0 === null ) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n\n      function parse_horizontalLinetoArgumentSequence() {\n        var result0, result1, result2;\n        var pos0, pos1;\n\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_number();\n        if ( result0 !== null ) {\n          result1 = parse_commaWsp();\n          result1 = result1 !== null ? result1 : \"\";\n          if ( result1 !== null ) {\n            result2 = parse_horizontalLinetoArgumentSequence();\n            if ( result2 !== null ) {\n              result0 = [ result0, result1, result2 ];\n            }\n            else {\n              result0 = null;\n              pos = pos1;\n            }\n          }\n          else {\n            result0 = null;\n            pos = pos1;\n          }\n        }\n        else {\n          result0 = null;\n          pos = pos1;\n        }\n        if ( result0 !== null ) {\n          result0 = (function( offset, a, b ) { return [ a ].concat( b ); })( pos0, result0[ 0 ], result0[ 2 ] );\n        }\n        if ( result0 === null ) {\n          pos = pos0;\n        }\n        if ( result0 === null ) {\n          pos0 = pos;\n          result0 = parse_number();\n          if ( result0 !== null ) {\n            result0 = (function( offset, a ) { return [ a ]; })( pos0, result0 );\n          }\n          if ( result0 === null ) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n\n      function parse_verticalLineto() {\n        var result0, result1, result2;\n        var pos0, pos1;\n\n        pos0 = pos;\n        pos1 = pos;\n        if ( input.charCodeAt( pos ) === 86 ) {\n          result0 = \"V\";\n          pos++;\n        }\n        else {\n          result0 = null;\n          if ( reportFailures === 0 ) {\n            matchFailed( \"\\\"V\\\"\" );\n          }\n        }\n        if ( result0 !== null ) {\n          result1 = [];\n          result2 = parse_wsp();\n          while ( result2 !== null ) {\n            result1.push( result2 );\n            result2 = parse_wsp();\n          }\n          if ( result1 !== null ) {\n            result2 = parse_verticalLinetoArgumentSequence();\n            if ( result2 !== null ) {\n              result0 = [ result0, result1, result2 ];\n            }\n            else {\n              result0 = null;\n              pos = pos1;\n            }\n          }\n          else {\n            result0 = null;\n            pos = pos1;\n          }\n        }\n        else {\n          result0 = null;\n          pos = pos1;\n        }\n        if ( result0 !== null ) {\n          result0 = (function( offset, args ) {\n            return args.map( function( arg ) {\n              return {\n                cmd: 'verticalLineTo',\n                args: [ arg ]\n              }\n            } );\n          })( pos0, result0[ 2 ] );\n        }\n        if ( result0 === null ) {\n          pos = pos0;\n        }\n        if ( result0 === null ) {\n          pos0 = pos;\n          pos1 = pos;\n          if ( input.charCodeAt( pos ) === 118 ) {\n            result0 = \"v\";\n            pos++;\n          }\n          else {\n            result0 = null;\n            if ( reportFailures === 0 ) {\n              matchFailed( \"\\\"v\\\"\" );\n            }\n          }\n          if ( result0 !== null ) {\n            result1 = [];\n            result2 = parse_wsp();\n            while ( result2 !== null ) {\n              result1.push( result2 );\n              result2 = parse_wsp();\n            }\n            if ( result1 !== null ) {\n              result2 = parse_verticalLinetoArgumentSequence();\n              if ( result2 !== null ) {\n                result0 = [ result0, result1, result2 ];\n              }\n              else {\n                result0 = null;\n                pos = pos1;\n              }\n            }\n            else {\n              result0 = null;\n              pos = pos1;\n            }\n          }\n          else {\n            result0 = null;\n            pos = pos1;\n          }\n          if ( result0 !== null ) {\n            result0 = (function( offset, args ) {\n              return args.map( function( arg ) {\n                return {\n                  cmd: 'verticalLineToRelative',\n                  args: [ arg ]\n                }\n              } );\n            })( pos0, result0[ 2 ] );\n          }\n          if ( result0 === null ) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n\n      function parse_verticalLinetoArgumentSequence() {\n        var result0, result1, result2;\n        var pos0, pos1;\n\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_number();\n        if ( result0 !== null ) {\n          result1 = parse_commaWsp();\n          result1 = result1 !== null ? result1 : \"\";\n          if ( result1 !== null ) {\n            result2 = parse_verticalLinetoArgumentSequence();\n            if ( result2 !== null ) {\n              result0 = [ result0, result1, result2 ];\n            }\n            else {\n              result0 = null;\n              pos = pos1;\n            }\n          }\n          else {\n            result0 = null;\n            pos = pos1;\n          }\n        }\n        else {\n          result0 = null;\n          pos = pos1;\n        }\n        if ( result0 !== null ) {\n          result0 = (function( offset, a, b ) { return [ a ].concat( b ); })( pos0, result0[ 0 ], result0[ 2 ] );\n        }\n        if ( result0 === null ) {\n          pos = pos0;\n        }\n        if ( result0 === null ) {\n          pos0 = pos;\n          result0 = parse_number();\n          if ( result0 !== null ) {\n            result0 = (function( offset, a ) { return [ a ]; })( pos0, result0 );\n          }\n          if ( result0 === null ) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n\n      function parse_curveto() {\n        var result0, result1, result2;\n        var pos0, pos1;\n\n        pos0 = pos;\n        pos1 = pos;\n        if ( input.charCodeAt( pos ) === 67 ) {\n          result0 = \"C\";\n          pos++;\n        }\n        else {\n          result0 = null;\n          if ( reportFailures === 0 ) {\n            matchFailed( \"\\\"C\\\"\" );\n          }\n        }\n        if ( result0 !== null ) {\n          result1 = [];\n          result2 = parse_wsp();\n          while ( result2 !== null ) {\n            result1.push( result2 );\n            result2 = parse_wsp();\n          }\n          if ( result1 !== null ) {\n            result2 = parse_curvetoArgumentSequence();\n            if ( result2 !== null ) {\n              result0 = [ result0, result1, result2 ];\n            }\n            else {\n              result0 = null;\n              pos = pos1;\n            }\n          }\n          else {\n            result0 = null;\n            pos = pos1;\n          }\n        }\n        else {\n          result0 = null;\n          pos = pos1;\n        }\n        if ( result0 !== null ) {\n          result0 = (function( offset, args ) {\n            return args.map( function( arg ) {\n              return {\n                cmd: 'cubicCurveTo',\n                args: arg\n              }\n            } );\n          })( pos0, result0[ 2 ] );\n        }\n        if ( result0 === null ) {\n          pos = pos0;\n        }\n        if ( result0 === null ) {\n          pos0 = pos;\n          pos1 = pos;\n          if ( input.charCodeAt( pos ) === 99 ) {\n            result0 = \"c\";\n            pos++;\n          }\n          else {\n            result0 = null;\n            if ( reportFailures === 0 ) {\n              matchFailed( \"\\\"c\\\"\" );\n            }\n          }\n          if ( result0 !== null ) {\n            result1 = [];\n            result2 = parse_wsp();\n            while ( result2 !== null ) {\n              result1.push( result2 );\n              result2 = parse_wsp();\n            }\n            if ( result1 !== null ) {\n              result2 = parse_curvetoArgumentSequence();\n              if ( result2 !== null ) {\n                result0 = [ result0, result1, result2 ];\n              }\n              else {\n                result0 = null;\n                pos = pos1;\n              }\n            }\n            else {\n              result0 = null;\n              pos = pos1;\n            }\n          }\n          else {\n            result0 = null;\n            pos = pos1;\n          }\n          if ( result0 !== null ) {\n            result0 = (function( offset, args ) {\n              return args.map( function( arg ) {\n                return {\n                  cmd: 'cubicCurveToRelative',\n                  args: arg\n                }\n              } );\n            })( pos0, result0[ 2 ] );\n          }\n          if ( result0 === null ) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n\n      function parse_curvetoArgumentSequence() {\n        var result0, result1, result2;\n        var pos0, pos1;\n\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_curvetoArgument();\n        if ( result0 !== null ) {\n          result1 = parse_commaWsp();\n          result1 = result1 !== null ? result1 : \"\";\n          if ( result1 !== null ) {\n            result2 = parse_curvetoArgumentSequence();\n            if ( result2 !== null ) {\n              result0 = [ result0, result1, result2 ];\n            }\n            else {\n              result0 = null;\n              pos = pos1;\n            }\n          }\n          else {\n            result0 = null;\n            pos = pos1;\n          }\n        }\n        else {\n          result0 = null;\n          pos = pos1;\n        }\n        if ( result0 !== null ) {\n          result0 = (function( offset, a, list ) { return [ a ].concat( list ); })( pos0, result0[ 0 ], result0[ 2 ] );\n        }\n        if ( result0 === null ) {\n          pos = pos0;\n        }\n        if ( result0 === null ) {\n          pos0 = pos;\n          result0 = parse_curvetoArgument();\n          if ( result0 !== null ) {\n            result0 = (function( offset, a ) { return [ a ]; })( pos0, result0 );\n          }\n          if ( result0 === null ) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n\n      function parse_curvetoArgument() {\n        var result0, result1, result2, result3, result4;\n        var pos0, pos1;\n\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_coordinatePair();\n        if ( result0 !== null ) {\n          result1 = parse_commaWsp();\n          result1 = result1 !== null ? result1 : \"\";\n          if ( result1 !== null ) {\n            result2 = parse_coordinatePair();\n            if ( result2 !== null ) {\n              result3 = parse_commaWsp();\n              result3 = result3 !== null ? result3 : \"\";\n              if ( result3 !== null ) {\n                result4 = parse_coordinatePair();\n                if ( result4 !== null ) {\n                  result0 = [ result0, result1, result2, result3, result4 ];\n                }\n                else {\n                  result0 = null;\n                  pos = pos1;\n                }\n              }\n              else {\n                result0 = null;\n                pos = pos1;\n              }\n            }\n            else {\n              result0 = null;\n              pos = pos1;\n            }\n          }\n          else {\n            result0 = null;\n            pos = pos1;\n          }\n        }\n        else {\n          result0 = null;\n          pos = pos1;\n        }\n        if ( result0 !== null ) {\n          result0 = (function( offset, a, b, c ) { return [ a.x, a.y, b.x, b.y, c.x, c.y ]; })( pos0, result0[ 0 ], result0[ 2 ], result0[ 4 ] );\n        }\n        if ( result0 === null ) {\n          pos = pos0;\n        }\n        return result0;\n      }\n\n      function parse_smoothCurveto() {\n        var result0, result1, result2;\n        var pos0, pos1;\n\n        pos0 = pos;\n        pos1 = pos;\n        if ( input.charCodeAt( pos ) === 83 ) {\n          result0 = \"S\";\n          pos++;\n        }\n        else {\n          result0 = null;\n          if ( reportFailures === 0 ) {\n            matchFailed( \"\\\"S\\\"\" );\n          }\n        }\n        if ( result0 !== null ) {\n          result1 = [];\n          result2 = parse_wsp();\n          while ( result2 !== null ) {\n            result1.push( result2 );\n            result2 = parse_wsp();\n          }\n          if ( result1 !== null ) {\n            result2 = parse_smoothCurvetoArgumentSequence();\n            if ( result2 !== null ) {\n              result0 = [ result0, result1, result2 ];\n            }\n            else {\n              result0 = null;\n              pos = pos1;\n            }\n          }\n          else {\n            result0 = null;\n            pos = pos1;\n          }\n        }\n        else {\n          result0 = null;\n          pos = pos1;\n        }\n        if ( result0 !== null ) {\n          result0 = (function( offset, args ) {\n            return args.map( function( arg ) {\n              return {\n                cmd: 'smoothCubicCurveTo',\n                args: arg\n              }\n            } );\n          })( pos0, result0[ 2 ] );\n        }\n        if ( result0 === null ) {\n          pos = pos0;\n        }\n        if ( result0 === null ) {\n          pos0 = pos;\n          pos1 = pos;\n          if ( input.charCodeAt( pos ) === 115 ) {\n            result0 = \"s\";\n            pos++;\n          }\n          else {\n            result0 = null;\n            if ( reportFailures === 0 ) {\n              matchFailed( \"\\\"s\\\"\" );\n            }\n          }\n          if ( result0 !== null ) {\n            result1 = [];\n            result2 = parse_wsp();\n            while ( result2 !== null ) {\n              result1.push( result2 );\n              result2 = parse_wsp();\n            }\n            if ( result1 !== null ) {\n              result2 = parse_smoothCurvetoArgumentSequence();\n              if ( result2 !== null ) {\n                result0 = [ result0, result1, result2 ];\n              }\n              else {\n                result0 = null;\n                pos = pos1;\n              }\n            }\n            else {\n              result0 = null;\n              pos = pos1;\n            }\n          }\n          else {\n            result0 = null;\n            pos = pos1;\n          }\n          if ( result0 !== null ) {\n            result0 = (function( offset, args ) {\n              return args.map( function( arg ) {\n                return {\n                  cmd: 'smoothCubicCurveToRelative',\n                  args: arg\n                }\n              } );\n            })( pos0, result0[ 2 ] );\n          }\n          if ( result0 === null ) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n\n      function parse_smoothCurvetoArgumentSequence() {\n        var result0, result1, result2;\n        var pos0, pos1;\n\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_smoothCurvetoArgument();\n        if ( result0 !== null ) {\n          result1 = parse_commaWsp();\n          result1 = result1 !== null ? result1 : \"\";\n          if ( result1 !== null ) {\n            result2 = parse_smoothCurvetoArgumentSequence();\n            if ( result2 !== null ) {\n              result0 = [ result0, result1, result2 ];\n            }\n            else {\n              result0 = null;\n              pos = pos1;\n            }\n          }\n          else {\n            result0 = null;\n            pos = pos1;\n          }\n        }\n        else {\n          result0 = null;\n          pos = pos1;\n        }\n        if ( result0 !== null ) {\n          result0 = (function( offset, a, list ) { return [ a ].concat( list ); })( pos0, result0[ 0 ], result0[ 2 ] );\n        }\n        if ( result0 === null ) {\n          pos = pos0;\n        }\n        if ( result0 === null ) {\n          pos0 = pos;\n          result0 = parse_smoothCurvetoArgument();\n          if ( result0 !== null ) {\n            result0 = (function( offset, a ) { return [ a ]; })( pos0, result0 );\n          }\n          if ( result0 === null ) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n\n      function parse_smoothCurvetoArgument() {\n        var result0, result1, result2;\n        var pos0, pos1;\n\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_coordinatePair();\n        if ( result0 !== null ) {\n          result1 = parse_commaWsp();\n          result1 = result1 !== null ? result1 : \"\";\n          if ( result1 !== null ) {\n            result2 = parse_coordinatePair();\n            if ( result2 !== null ) {\n              result0 = [ result0, result1, result2 ];\n            }\n            else {\n              result0 = null;\n              pos = pos1;\n            }\n          }\n          else {\n            result0 = null;\n            pos = pos1;\n          }\n        }\n        else {\n          result0 = null;\n          pos = pos1;\n        }\n        if ( result0 !== null ) {\n          result0 = (function( offset, a, b ) { return [ a.x, a.y, b.x, b.y ]; })( pos0, result0[ 0 ], result0[ 2 ] );\n        }\n        if ( result0 === null ) {\n          pos = pos0;\n        }\n        return result0;\n      }\n\n      function parse_quadraticBezierCurveto() {\n        var result0, result1, result2;\n        var pos0, pos1;\n\n        pos0 = pos;\n        pos1 = pos;\n        if ( input.charCodeAt( pos ) === 81 ) {\n          result0 = \"Q\";\n          pos++;\n        }\n        else {\n          result0 = null;\n          if ( reportFailures === 0 ) {\n            matchFailed( \"\\\"Q\\\"\" );\n          }\n        }\n        if ( result0 !== null ) {\n          result1 = [];\n          result2 = parse_wsp();\n          while ( result2 !== null ) {\n            result1.push( result2 );\n            result2 = parse_wsp();\n          }\n          if ( result1 !== null ) {\n            result2 = parse_quadraticBezierCurvetoArgumentSequence();\n            if ( result2 !== null ) {\n              result0 = [ result0, result1, result2 ];\n            }\n            else {\n              result0 = null;\n              pos = pos1;\n            }\n          }\n          else {\n            result0 = null;\n            pos = pos1;\n          }\n        }\n        else {\n          result0 = null;\n          pos = pos1;\n        }\n        if ( result0 !== null ) {\n          result0 = (function( offset, args ) {\n            return args.map( function( arg ) {\n              return {\n                cmd: 'quadraticCurveTo',\n                args: arg\n              }\n            } );\n          })( pos0, result0[ 2 ] );\n        }\n        if ( result0 === null ) {\n          pos = pos0;\n        }\n        if ( result0 === null ) {\n          pos0 = pos;\n          pos1 = pos;\n          if ( input.charCodeAt( pos ) === 113 ) {\n            result0 = \"q\";\n            pos++;\n          }\n          else {\n            result0 = null;\n            if ( reportFailures === 0 ) {\n              matchFailed( \"\\\"q\\\"\" );\n            }\n          }\n          if ( result0 !== null ) {\n            result1 = [];\n            result2 = parse_wsp();\n            while ( result2 !== null ) {\n              result1.push( result2 );\n              result2 = parse_wsp();\n            }\n            if ( result1 !== null ) {\n              result2 = parse_quadraticBezierCurvetoArgumentSequence();\n              if ( result2 !== null ) {\n                result0 = [ result0, result1, result2 ];\n              }\n              else {\n                result0 = null;\n                pos = pos1;\n              }\n            }\n            else {\n              result0 = null;\n              pos = pos1;\n            }\n          }\n          else {\n            result0 = null;\n            pos = pos1;\n          }\n          if ( result0 !== null ) {\n            result0 = (function( offset, args ) {\n              return args.map( function( arg ) {\n                return {\n                  cmd: 'quadraticCurveToRelative',\n                  args: arg\n                }\n              } );\n            })( pos0, result0[ 2 ] );\n          }\n          if ( result0 === null ) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n\n      function parse_quadraticBezierCurvetoArgumentSequence() {\n        var result0, result1, result2;\n        var pos0, pos1;\n\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_quadraticBezierCurvetoArgument();\n        if ( result0 !== null ) {\n          result1 = parse_commaWsp();\n          result1 = result1 !== null ? result1 : \"\";\n          if ( result1 !== null ) {\n            result2 = parse_quadraticBezierCurvetoArgumentSequence();\n            if ( result2 !== null ) {\n              result0 = [ result0, result1, result2 ];\n            }\n            else {\n              result0 = null;\n              pos = pos1;\n            }\n          }\n          else {\n            result0 = null;\n            pos = pos1;\n          }\n        }\n        else {\n          result0 = null;\n          pos = pos1;\n        }\n        if ( result0 !== null ) {\n          result0 = (function( offset, a, list ) { return [ a ].concat( list ); })( pos0, result0[ 0 ], result0[ 2 ] );\n        }\n        if ( result0 === null ) {\n          pos = pos0;\n        }\n        if ( result0 === null ) {\n          pos0 = pos;\n          result0 = parse_quadraticBezierCurvetoArgument();\n          if ( result0 !== null ) {\n            result0 = (function( offset, a ) { return [ a ]; })( pos0, result0 );\n          }\n          if ( result0 === null ) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n\n      function parse_quadraticBezierCurvetoArgument() {\n        var result0, result1, result2;\n        var pos0, pos1;\n\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_coordinatePair();\n        if ( result0 !== null ) {\n          result1 = parse_commaWsp();\n          result1 = result1 !== null ? result1 : \"\";\n          if ( result1 !== null ) {\n            result2 = parse_coordinatePair();\n            if ( result2 !== null ) {\n              result0 = [ result0, result1, result2 ];\n            }\n            else {\n              result0 = null;\n              pos = pos1;\n            }\n          }\n          else {\n            result0 = null;\n            pos = pos1;\n          }\n        }\n        else {\n          result0 = null;\n          pos = pos1;\n        }\n        if ( result0 !== null ) {\n          result0 = (function( offset, a, b ) { return [ a.x, a.y, b.x, b.y ]; })( pos0, result0[ 0 ], result0[ 2 ] );\n        }\n        if ( result0 === null ) {\n          pos = pos0;\n        }\n        return result0;\n      }\n\n      function parse_smoothQuadraticBezierCurveto() {\n        var result0, result1, result2;\n        var pos0, pos1;\n\n        pos0 = pos;\n        pos1 = pos;\n        if ( input.charCodeAt( pos ) === 84 ) {\n          result0 = \"T\";\n          pos++;\n        }\n        else {\n          result0 = null;\n          if ( reportFailures === 0 ) {\n            matchFailed( \"\\\"T\\\"\" );\n          }\n        }\n        if ( result0 !== null ) {\n          result1 = [];\n          result2 = parse_wsp();\n          while ( result2 !== null ) {\n            result1.push( result2 );\n            result2 = parse_wsp();\n          }\n          if ( result1 !== null ) {\n            result2 = parse_smoothQuadraticBezierCurvetoArgumentSequence();\n            if ( result2 !== null ) {\n              result0 = [ result0, result1, result2 ];\n            }\n            else {\n              result0 = null;\n              pos = pos1;\n            }\n          }\n          else {\n            result0 = null;\n            pos = pos1;\n          }\n        }\n        else {\n          result0 = null;\n          pos = pos1;\n        }\n        if ( result0 !== null ) {\n          result0 = (function( offset, args ) {\n            return args.map( function( arg ) {\n              return {\n                cmd: 'smoothQuadraticCurveTo',\n                args: [ arg.x, arg.y ]\n              }\n            } );\n          })( pos0, result0[ 2 ] );\n        }\n        if ( result0 === null ) {\n          pos = pos0;\n        }\n        if ( result0 === null ) {\n          pos0 = pos;\n          pos1 = pos;\n          if ( input.charCodeAt( pos ) === 116 ) {\n            result0 = \"t\";\n            pos++;\n          }\n          else {\n            result0 = null;\n            if ( reportFailures === 0 ) {\n              matchFailed( \"\\\"t\\\"\" );\n            }\n          }\n          if ( result0 !== null ) {\n            result1 = [];\n            result2 = parse_wsp();\n            while ( result2 !== null ) {\n              result1.push( result2 );\n              result2 = parse_wsp();\n            }\n            if ( result1 !== null ) {\n              result2 = parse_smoothQuadraticBezierCurvetoArgumentSequence();\n              if ( result2 !== null ) {\n                result0 = [ result0, result1, result2 ];\n              }\n              else {\n                result0 = null;\n                pos = pos1;\n              }\n            }\n            else {\n              result0 = null;\n              pos = pos1;\n            }\n          }\n          else {\n            result0 = null;\n            pos = pos1;\n          }\n          if ( result0 !== null ) {\n            result0 = (function( offset, args ) {\n              return args.map( function( arg ) {\n                return {\n                  cmd: 'smoothQuadraticCurveToRelative',\n                  args: [ arg.x, arg.y ]\n                }\n              } );\n            })( pos0, result0[ 2 ] );\n          }\n          if ( result0 === null ) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n\n      function parse_smoothQuadraticBezierCurvetoArgumentSequence() {\n        var result0, result1, result2;\n        var pos0, pos1;\n\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_coordinatePair();\n        if ( result0 !== null ) {\n          result1 = parse_commaWsp();\n          result1 = result1 !== null ? result1 : \"\";\n          if ( result1 !== null ) {\n            result2 = parse_smoothQuadraticBezierCurvetoArgumentSequence();\n            if ( result2 !== null ) {\n              result0 = [ result0, result1, result2 ];\n            }\n            else {\n              result0 = null;\n              pos = pos1;\n            }\n          }\n          else {\n            result0 = null;\n            pos = pos1;\n          }\n        }\n        else {\n          result0 = null;\n          pos = pos1;\n        }\n        if ( result0 !== null ) {\n          result0 = (function( offset, a, list ) { return [ a ].concat( list ); })( pos0, result0[ 0 ], result0[ 2 ] );\n        }\n        if ( result0 === null ) {\n          pos = pos0;\n        }\n        if ( result0 === null ) {\n          pos0 = pos;\n          result0 = parse_coordinatePair();\n          if ( result0 !== null ) {\n            result0 = (function( offset, a ) { return [ a ]; })( pos0, result0 );\n          }\n          if ( result0 === null ) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n\n      function parse_ellipticalArc() {\n        var result0, result1, result2;\n        var pos0, pos1;\n\n        pos0 = pos;\n        pos1 = pos;\n        if ( input.charCodeAt( pos ) === 65 ) {\n          result0 = \"A\";\n          pos++;\n        }\n        else {\n          result0 = null;\n          if ( reportFailures === 0 ) {\n            matchFailed( \"\\\"A\\\"\" );\n          }\n        }\n        if ( result0 !== null ) {\n          result1 = [];\n          result2 = parse_wsp();\n          while ( result2 !== null ) {\n            result1.push( result2 );\n            result2 = parse_wsp();\n          }\n          if ( result1 !== null ) {\n            result2 = parse_ellipticalArcArgumentSequence();\n            if ( result2 !== null ) {\n              result0 = [ result0, result1, result2 ];\n            }\n            else {\n              result0 = null;\n              pos = pos1;\n            }\n          }\n          else {\n            result0 = null;\n            pos = pos1;\n          }\n        }\n        else {\n          result0 = null;\n          pos = pos1;\n        }\n        if ( result0 !== null ) {\n          result0 = (function( offset, args ) {\n            return args.map( function( arg ) {\n              return {\n                cmd: 'ellipticalArcTo',\n                args: arg\n              }\n            } );\n          })( pos0, result0[ 2 ] );\n        }\n        if ( result0 === null ) {\n          pos = pos0;\n        }\n        if ( result0 === null ) {\n          pos0 = pos;\n          pos1 = pos;\n          if ( input.charCodeAt( pos ) === 97 ) {\n            result0 = \"a\";\n            pos++;\n          }\n          else {\n            result0 = null;\n            if ( reportFailures === 0 ) {\n              matchFailed( \"\\\"a\\\"\" );\n            }\n          }\n          if ( result0 !== null ) {\n            result1 = [];\n            result2 = parse_wsp();\n            while ( result2 !== null ) {\n              result1.push( result2 );\n              result2 = parse_wsp();\n            }\n            if ( result1 !== null ) {\n              result2 = parse_ellipticalArcArgumentSequence();\n              if ( result2 !== null ) {\n                result0 = [ result0, result1, result2 ];\n              }\n              else {\n                result0 = null;\n                pos = pos1;\n              }\n            }\n            else {\n              result0 = null;\n              pos = pos1;\n            }\n          }\n          else {\n            result0 = null;\n            pos = pos1;\n          }\n          if ( result0 !== null ) {\n            result0 = (function( offset, args ) {\n              return args.map( function( arg ) {\n                return {\n                  cmd: 'ellipticalArcToRelative',\n                  args: arg\n                }\n              } );\n            })( pos0, result0[ 2 ] );\n          }\n          if ( result0 === null ) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n\n      function parse_ellipticalArcArgumentSequence() {\n        var result0, result1, result2;\n        var pos0, pos1;\n\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_ellipticalArcArgument();\n        if ( result0 !== null ) {\n          result1 = parse_commaWsp();\n          result1 = result1 !== null ? result1 : \"\";\n          if ( result1 !== null ) {\n            result2 = parse_ellipticalArcArgumentSequence();\n            if ( result2 !== null ) {\n              result0 = [ result0, result1, result2 ];\n            }\n            else {\n              result0 = null;\n              pos = pos1;\n            }\n          }\n          else {\n            result0 = null;\n            pos = pos1;\n          }\n        }\n        else {\n          result0 = null;\n          pos = pos1;\n        }\n        if ( result0 !== null ) {\n          result0 = (function( offset, a, list ) { return [ a ].concat( list ); })( pos0, result0[ 0 ], result0[ 2 ] );\n        }\n        if ( result0 === null ) {\n          pos = pos0;\n        }\n        if ( result0 === null ) {\n          pos0 = pos;\n          result0 = parse_ellipticalArcArgument();\n          if ( result0 !== null ) {\n            result0 = (function( offset, a ) { return [ a ]; })( pos0, result0 );\n          }\n          if ( result0 === null ) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n\n      function parse_ellipticalArcArgument() {\n        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10;\n        var pos0, pos1;\n\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_nonnegativeNumber();\n        if ( result0 !== null ) {\n          result1 = parse_commaWsp();\n          result1 = result1 !== null ? result1 : \"\";\n          if ( result1 !== null ) {\n            result2 = parse_nonnegativeNumber();\n            if ( result2 !== null ) {\n              result3 = parse_commaWsp();\n              result3 = result3 !== null ? result3 : \"\";\n              if ( result3 !== null ) {\n                result4 = parse_number();\n                if ( result4 !== null ) {\n                  result5 = parse_commaWsp();\n                  if ( result5 !== null ) {\n                    result6 = parse_flag();\n                    if ( result6 !== null ) {\n                      result7 = parse_commaWsp();\n                      result7 = result7 !== null ? result7 : \"\";\n                      if ( result7 !== null ) {\n                        result8 = parse_flag();\n                        if ( result8 !== null ) {\n                          result9 = parse_commaWsp();\n                          result9 = result9 !== null ? result9 : \"\";\n                          if ( result9 !== null ) {\n                            result10 = parse_coordinatePair();\n                            if ( result10 !== null ) {\n                              result0 = [ result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10 ];\n                            }\n                            else {\n                              result0 = null;\n                              pos = pos1;\n                            }\n                          }\n                          else {\n                            result0 = null;\n                            pos = pos1;\n                          }\n                        }\n                        else {\n                          result0 = null;\n                          pos = pos1;\n                        }\n                      }\n                      else {\n                        result0 = null;\n                        pos = pos1;\n                      }\n                    }\n                    else {\n                      result0 = null;\n                      pos = pos1;\n                    }\n                  }\n                  else {\n                    result0 = null;\n                    pos = pos1;\n                  }\n                }\n                else {\n                  result0 = null;\n                  pos = pos1;\n                }\n              }\n              else {\n                result0 = null;\n                pos = pos1;\n              }\n            }\n            else {\n              result0 = null;\n              pos = pos1;\n            }\n          }\n          else {\n            result0 = null;\n            pos = pos1;\n          }\n        }\n        else {\n          result0 = null;\n          pos = pos1;\n        }\n        if ( result0 !== null ) {\n          result0 = (function( offset, rx, ry, rot, largeArc, sweep, to ) { return [ rx, ry, rot, largeArc, sweep, to.x, to.y ] })( pos0, result0[ 0 ], result0[ 2 ], result0[ 4 ], result0[ 6 ], result0[ 8 ], result0[ 10 ] );\n        }\n        if ( result0 === null ) {\n          pos = pos0;\n        }\n        return result0;\n      }\n\n      function parse_coordinatePair() {\n        var result0, result1, result2;\n        var pos0, pos1;\n\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_number();\n        if ( result0 !== null ) {\n          result1 = parse_commaWsp();\n          result1 = result1 !== null ? result1 : \"\";\n          if ( result1 !== null ) {\n            result2 = parse_number();\n            if ( result2 !== null ) {\n              result0 = [ result0, result1, result2 ];\n            }\n            else {\n              result0 = null;\n              pos = pos1;\n            }\n          }\n          else {\n            result0 = null;\n            pos = pos1;\n          }\n        }\n        else {\n          result0 = null;\n          pos = pos1;\n        }\n        if ( result0 !== null ) {\n          result0 = (function( offset, a, b ) { return { x: a, y: b }; })( pos0, result0[ 0 ], result0[ 2 ] );\n        }\n        if ( result0 === null ) {\n          pos = pos0;\n        }\n        return result0;\n      }\n\n      function parse_nonnegativeNumber() {\n        var result0;\n        var pos0;\n\n        pos0 = pos;\n        result0 = parse_floatingPointConstant();\n        if ( result0 !== null ) {\n          result0 = (function( offset, number ) { return parseFloat( number, 10 ); })( pos0, result0 );\n        }\n        if ( result0 === null ) {\n          pos = pos0;\n        }\n        if ( result0 === null ) {\n          pos0 = pos;\n          result0 = parse_digitSequence();\n          if ( result0 !== null ) {\n            result0 = (function( offset, number ) { return parseInt( number, 10 ); })( pos0, result0 );\n          }\n          if ( result0 === null ) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n\n      function parse_number() {\n        var result0, result1;\n        var pos0, pos1;\n\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_sign();\n        result0 = result0 !== null ? result0 : \"\";\n        if ( result0 !== null ) {\n          result1 = parse_floatingPointConstant();\n          if ( result1 !== null ) {\n            result0 = [ result0, result1 ];\n          }\n          else {\n            result0 = null;\n            pos = pos1;\n          }\n        }\n        else {\n          result0 = null;\n          pos = pos1;\n        }\n        if ( result0 !== null ) {\n          result0 = (function( offset, sign, number ) { return parseFloat( sign + number, 10 ); })( pos0, result0[ 0 ], result0[ 1 ] );\n        }\n        if ( result0 === null ) {\n          pos = pos0;\n        }\n        if ( result0 === null ) {\n          pos0 = pos;\n          pos1 = pos;\n          result0 = parse_sign();\n          result0 = result0 !== null ? result0 : \"\";\n          if ( result0 !== null ) {\n            result1 = parse_digitSequence();\n            if ( result1 !== null ) {\n              result0 = [ result0, result1 ];\n            }\n            else {\n              result0 = null;\n              pos = pos1;\n            }\n          }\n          else {\n            result0 = null;\n            pos = pos1;\n          }\n          if ( result0 !== null ) {\n            result0 = (function( offset, sign, number ) { return parseInt( sign + number, 10 ); })( pos0, result0[ 0 ], result0[ 1 ] );\n          }\n          if ( result0 === null ) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n\n      function parse_flag() {\n        var result0;\n        var pos0;\n\n        pos0 = pos;\n        if ( input.charCodeAt( pos ) === 48 ) {\n          result0 = \"0\";\n          pos++;\n        }\n        else {\n          result0 = null;\n          if ( reportFailures === 0 ) {\n            matchFailed( \"\\\"0\\\"\" );\n          }\n        }\n        if ( result0 !== null ) {\n          result0 = (function( offset ) { return false; })( pos0 );\n        }\n        if ( result0 === null ) {\n          pos = pos0;\n        }\n        if ( result0 === null ) {\n          pos0 = pos;\n          if ( input.charCodeAt( pos ) === 49 ) {\n            result0 = \"1\";\n            pos++;\n          }\n          else {\n            result0 = null;\n            if ( reportFailures === 0 ) {\n              matchFailed( \"\\\"1\\\"\" );\n            }\n          }\n          if ( result0 !== null ) {\n            result0 = (function( offset ) { return true; })( pos0 );\n          }\n          if ( result0 === null ) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n\n      function parse_commaWsp() {\n        var result0, result1, result2, result3;\n        var pos0;\n\n        pos0 = pos;\n        result1 = parse_wsp();\n        if ( result1 !== null ) {\n          result0 = [];\n          while ( result1 !== null ) {\n            result0.push( result1 );\n            result1 = parse_wsp();\n          }\n        }\n        else {\n          result0 = null;\n        }\n        if ( result0 !== null ) {\n          result1 = parse_comma();\n          result1 = result1 !== null ? result1 : \"\";\n          if ( result1 !== null ) {\n            result2 = [];\n            result3 = parse_wsp();\n            while ( result3 !== null ) {\n              result2.push( result3 );\n              result3 = parse_wsp();\n            }\n            if ( result2 !== null ) {\n              result0 = [ result0, result1, result2 ];\n            }\n            else {\n              result0 = null;\n              pos = pos0;\n            }\n          }\n          else {\n            result0 = null;\n            pos = pos0;\n          }\n        }\n        else {\n          result0 = null;\n          pos = pos0;\n        }\n        if ( result0 === null ) {\n          pos0 = pos;\n          result0 = parse_comma();\n          if ( result0 !== null ) {\n            result1 = [];\n            result2 = parse_wsp();\n            while ( result2 !== null ) {\n              result1.push( result2 );\n              result2 = parse_wsp();\n            }\n            if ( result1 !== null ) {\n              result0 = [ result0, result1 ];\n            }\n            else {\n              result0 = null;\n              pos = pos0;\n            }\n          }\n          else {\n            result0 = null;\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n\n      function parse_comma() {\n        var result0;\n\n        if ( input.charCodeAt( pos ) === 44 ) {\n          result0 = \",\";\n          pos++;\n        }\n        else {\n          result0 = null;\n          if ( reportFailures === 0 ) {\n            matchFailed( \"\\\",\\\"\" );\n          }\n        }\n        return result0;\n      }\n\n      function parse_floatingPointConstant() {\n        var result0, result1;\n        var pos0, pos1;\n\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_fractionalConstant();\n        if ( result0 !== null ) {\n          result1 = parse_exponent();\n          result1 = result1 !== null ? result1 : \"\";\n          if ( result1 !== null ) {\n            result0 = [ result0, result1 ];\n          }\n          else {\n            result0 = null;\n            pos = pos1;\n          }\n        }\n        else {\n          result0 = null;\n          pos = pos1;\n        }\n        if ( result0 !== null ) {\n          result0 = (function( offset, a, b ) { return a + b; })( pos0, result0[ 0 ], result0[ 1 ] );\n        }\n        if ( result0 === null ) {\n          pos = pos0;\n        }\n        if ( result0 === null ) {\n          pos0 = pos;\n          pos1 = pos;\n          result0 = parse_digitSequence();\n          if ( result0 !== null ) {\n            result1 = parse_exponent();\n            if ( result1 !== null ) {\n              result0 = [ result0, result1 ];\n            }\n            else {\n              result0 = null;\n              pos = pos1;\n            }\n          }\n          else {\n            result0 = null;\n            pos = pos1;\n          }\n          if ( result0 !== null ) {\n            result0 = (function( offset, a, b ) { return a + b; })( pos0, result0[ 0 ], result0[ 1 ] );\n          }\n          if ( result0 === null ) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n\n      function parse_fractionalConstant() {\n        var result0, result1, result2;\n        var pos0, pos1;\n\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_digitSequence();\n        result0 = result0 !== null ? result0 : \"\";\n        if ( result0 !== null ) {\n          if ( input.charCodeAt( pos ) === 46 ) {\n            result1 = \".\";\n            pos++;\n          }\n          else {\n            result1 = null;\n            if ( reportFailures === 0 ) {\n              matchFailed( \"\\\".\\\"\" );\n            }\n          }\n          if ( result1 !== null ) {\n            result2 = parse_digitSequence();\n            if ( result2 !== null ) {\n              result0 = [ result0, result1, result2 ];\n            }\n            else {\n              result0 = null;\n              pos = pos1;\n            }\n          }\n          else {\n            result0 = null;\n            pos = pos1;\n          }\n        }\n        else {\n          result0 = null;\n          pos = pos1;\n        }\n        if ( result0 !== null ) {\n          result0 = (function( offset, a, b ) { return a + '.' + b; })( pos0, result0[ 0 ], result0[ 2 ] );\n        }\n        if ( result0 === null ) {\n          pos = pos0;\n        }\n        if ( result0 === null ) {\n          pos0 = pos;\n          pos1 = pos;\n          result0 = parse_digitSequence();\n          if ( result0 !== null ) {\n            if ( input.charCodeAt( pos ) === 46 ) {\n              result1 = \".\";\n              pos++;\n            }\n            else {\n              result1 = null;\n              if ( reportFailures === 0 ) {\n                matchFailed( \"\\\".\\\"\" );\n              }\n            }\n            if ( result1 !== null ) {\n              result0 = [ result0, result1 ];\n            }\n            else {\n              result0 = null;\n              pos = pos1;\n            }\n          }\n          else {\n            result0 = null;\n            pos = pos1;\n          }\n          if ( result0 !== null ) {\n            result0 = (function( offset, a ) { return a })( pos0, result0[ 0 ] );\n          }\n          if ( result0 === null ) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n\n      function parse_exponent() {\n        var result0, result1, result2;\n        var pos0, pos1;\n\n        pos0 = pos;\n        pos1 = pos;\n        if ( input.charCodeAt( pos ) === 101 ) {\n          result0 = \"e\";\n          pos++;\n        }\n        else {\n          result0 = null;\n          if ( reportFailures === 0 ) {\n            matchFailed( \"\\\"e\\\"\" );\n          }\n        }\n        if ( result0 === null ) {\n          if ( input.charCodeAt( pos ) === 69 ) {\n            result0 = \"E\";\n            pos++;\n          }\n          else {\n            result0 = null;\n            if ( reportFailures === 0 ) {\n              matchFailed( \"\\\"E\\\"\" );\n            }\n          }\n        }\n        if ( result0 !== null ) {\n          result1 = parse_sign();\n          result1 = result1 !== null ? result1 : \"\";\n          if ( result1 !== null ) {\n            result2 = parse_digitSequence();\n            if ( result2 !== null ) {\n              result0 = [ result0, result1, result2 ];\n            }\n            else {\n              result0 = null;\n              pos = pos1;\n            }\n          }\n          else {\n            result0 = null;\n            pos = pos1;\n          }\n        }\n        else {\n          result0 = null;\n          pos = pos1;\n        }\n        if ( result0 !== null ) {\n          result0 = (function( offset, a, b, c ) { return a + b + c; })( pos0, result0[ 0 ], result0[ 1 ], result0[ 2 ] );\n        }\n        if ( result0 === null ) {\n          pos = pos0;\n        }\n        return result0;\n      }\n\n      function parse_sign() {\n        var result0;\n\n        if ( input.charCodeAt( pos ) === 43 ) {\n          result0 = \"+\";\n          pos++;\n        }\n        else {\n          result0 = null;\n          if ( reportFailures === 0 ) {\n            matchFailed( \"\\\"+\\\"\" );\n          }\n        }\n        if ( result0 === null ) {\n          if ( input.charCodeAt( pos ) === 45 ) {\n            result0 = \"-\";\n            pos++;\n          }\n          else {\n            result0 = null;\n            if ( reportFailures === 0 ) {\n              matchFailed( \"\\\"-\\\"\" );\n            }\n          }\n        }\n        return result0;\n      }\n\n      function parse_digitSequence() {\n        var result0, result1;\n        var pos0, pos1;\n\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_digit();\n        if ( result0 !== null ) {\n          result1 = parse_digitSequence();\n          if ( result1 !== null ) {\n            result0 = [ result0, result1 ];\n          }\n          else {\n            result0 = null;\n            pos = pos1;\n          }\n        }\n        else {\n          result0 = null;\n          pos = pos1;\n        }\n        if ( result0 !== null ) {\n          result0 = (function( offset, a, b ) { return a + b; })( pos0, result0[ 0 ], result0[ 1 ] );\n        }\n        if ( result0 === null ) {\n          pos = pos0;\n        }\n        if ( result0 === null ) {\n          result0 = parse_digit();\n        }\n        return result0;\n      }\n\n      function parse_digit() {\n        var result0;\n\n        if ( /^[0-9]/.test( input.charAt( pos ) ) ) {\n          result0 = input.charAt( pos );\n          pos++;\n        }\n        else {\n          result0 = null;\n          if ( reportFailures === 0 ) {\n            matchFailed( \"[0-9]\" );\n          }\n        }\n        return result0;\n      }\n\n      function parse_wsp() {\n        var result0;\n\n        if ( input.charCodeAt( pos ) === 32 ) {\n          result0 = \" \";\n          pos++;\n        }\n        else {\n          result0 = null;\n          if ( reportFailures === 0 ) {\n            matchFailed( \"\\\" \\\"\" );\n          }\n        }\n        if ( result0 === null ) {\n          if ( input.charCodeAt( pos ) === 9 ) {\n            result0 = \"\\t\";\n            pos++;\n          }\n          else {\n            result0 = null;\n            if ( reportFailures === 0 ) {\n              matchFailed( \"\\\"\\\\t\\\"\" );\n            }\n          }\n          if ( result0 === null ) {\n            if ( input.charCodeAt( pos ) === 13 ) {\n              result0 = \"\\r\";\n              pos++;\n            }\n            else {\n              result0 = null;\n              if ( reportFailures === 0 ) {\n                matchFailed( \"\\\"\\\\r\\\"\" );\n              }\n            }\n            if ( result0 === null ) {\n              if ( input.charCodeAt( pos ) === 10 ) {\n                result0 = \"\\n\";\n                pos++;\n              }\n              else {\n                result0 = null;\n                if ( reportFailures === 0 ) {\n                  matchFailed( \"\\\"\\\\n\\\"\" );\n                }\n              }\n            }\n          }\n        }\n        return result0;\n      }\n\n\n      function cleanupExpected( expected ) {\n        expected.sort();\n\n        var lastExpected = null;\n        var cleanExpected = [];\n        for ( var i = 0; i < expected.length; i++ ) {\n          if ( expected[ i ] !== lastExpected ) {\n            cleanExpected.push( expected[ i ] );\n            lastExpected = expected[ i ];\n          }\n        }\n        return cleanExpected;\n      }\n\n      function computeErrorPosition() {\n        /*\n         * The first idea was to use |String.split| to break the input up to the\n         * error position along newlines and derive the line and column from\n         * there. However IE's |split| implementation is so broken that it was\n         * enough to prevent it.\n         */\n\n        var line = 1;\n        var column = 1;\n        var seenCR = false;\n\n        for ( var i = 0; i < Math.max( pos, rightmostFailuresPos ); i++ ) {\n          var ch = input.charAt( i );\n          if ( ch === \"\\n\" ) {\n            if ( !seenCR ) { line++; }\n            column = 1;\n            seenCR = false;\n          }\n          else if ( ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\" ) {\n            line++;\n            column = 1;\n            seenCR = true;\n          }\n          else {\n            column++;\n            seenCR = false;\n          }\n        }\n\n        return { line: line, column: column };\n      }\n\n\n      function createMoveTo( args, isRelative ) {\n        var result = [ {\n          cmd: isRelative ? 'moveToRelative' : 'moveTo',\n          args: [ args[ 0 ].x, args[ 0 ].y ]\n        } ];\n\n        // any other coordinate pairs are implicit lineTos\n        if ( args.length > 1 ) {\n          for ( var i = 1; i < args.length; i++ ) {\n            result.push( {\n              cmd: isRelative ? 'lineToRelative' : 'lineTo',\n              args: [ args[ i ].x, args[ i ].y ]\n            } );\n          }\n        }\n        return result;\n      }\n\n\n      var result = parseFunctions[ startRule ]();\n\n      /*\n       * The parser is now in one of the following three states:\n       *\n       * 1. The parser successfully parsed the whole input.\n       *\n       *    - |result !== null|\n       *    - |pos === input.length|\n       *    - |rightmostFailuresExpected| may or may not contain something\n       *\n       * 2. The parser successfully parsed only a part of the input.\n       *\n       *    - |result !== null|\n       *    - |pos < input.length|\n       *    - |rightmostFailuresExpected| may or may not contain something\n       *\n       * 3. The parser did not successfully parse any part of the input.\n       *\n       *   - |result === null|\n       *   - |pos === 0|\n       *   - |rightmostFailuresExpected| contains at least one failure\n       *\n       * All code following this comment (including called functions) must\n       * handle these states.\n       */\n      if ( result === null || pos !== input.length ) {\n        var offset = Math.max( pos, rightmostFailuresPos );\n        var found = offset < input.length ? input.charAt( offset ) : null;\n        var errorPosition = computeErrorPosition();\n\n        throw new this.SyntaxError(\n          cleanupExpected( rightmostFailuresExpected ),\n          found,\n          offset,\n          errorPosition.line,\n          errorPosition.column\n        );\n      }\n\n      return result;\n    },\n\n    /* Returns the parser source code. */\n    toSource: function() { return this._source; }\n  };\n\n  /* Thrown when a parser encounters a syntax error. */\n\n  result.SyntaxError = function( expected, found, offset, line, column ) {\n    function buildMessage( expected, found ) {\n      var expectedHumanized, foundHumanized;\n\n      switch( expected.length ) {\n        case 0:\n          expectedHumanized = \"end of input\";\n          break;\n        case 1:\n          expectedHumanized = expected[ 0 ];\n          break;\n        default:\n          expectedHumanized = expected.slice( 0, expected.length - 1 ).join( \", \" )\n                              + \" or \"\n                              + expected[ expected.length - 1 ];\n      }\n\n      foundHumanized = found ? quote( found ) : \"end of input\";\n\n      return \"Expected \" + expectedHumanized + \" but \" + foundHumanized + \" found.\";\n    }\n\n    this.name = \"SyntaxError\";\n    this.expected = expected;\n    this.found = found;\n    this.message = buildMessage( expected, found );\n    this.offset = offset;\n    this.line = line;\n    this.column = column;\n  };\n\n  result.SyntaxError.prototype = Error.prototype;\n\n  kite.register( 'svgPath', result );\n  return kite.svgPath;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Basic 4-dimensional vector, represented as (x,y).\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/Vector4',['require','DOT/dot','PHET_CORE/inherit','PHET_CORE/Poolable','DOT/Util'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n\n  var inherit = require( 'PHET_CORE/inherit' );\n  var Poolable = require( 'PHET_CORE/Poolable' );\n\n  require( 'DOT/Util' );\n  // require( 'DOT/Vector3' ); // commented out so Require.js doesn't complain about the circular dependency\n\n  /**\n   * Creates a 4-dimensional vector with the specified X, Y, Z and W values.\n   * @constructor\n   * @public\n   *\n   * @param {number} [x] - X coordinate, defaults to 0 if not provided\n   * @param {number} [y] - Y coordinate, defaults to 0 if not provided\n   * @param {number} [z] - Z coordinate, defaults to 0 if not provided\n   * @param {number} [w] - W coordinate, defaults to 1 if not provided (convenience for homogeneous coordinates)\n   */\n  function Vector4( x, y, z, w ) {\n    // @public {number} - The X coordinate of the vector.\n    this.x = x !== undefined ? x : 0;\n\n    // @public {number} - The Y coordinate of the vector.\n    this.y = y !== undefined ? y : 0;\n\n    // @public {number} - The Z coordinate of the vector.\n    this.z = z !== undefined ? z : 0;\n\n    // @public {number} - The W coordinate of the vector. Default is 1, for ease with homogeneous coordinates.\n    this.w = w !== undefined ? w : 1;\n\n    assert && assert( typeof this.x === 'number', 'x needs to be a number' );\n    assert && assert( typeof this.y === 'number', 'y needs to be a number' );\n    assert && assert( typeof this.z === 'number', 'z needs to be a number' );\n    assert && assert( typeof this.w === 'number', 'w needs to be a number' );\n\n    phetAllocation && phetAllocation( 'Vector4' );\n  }\n\n  dot.register( 'Vector4', Vector4 );\n\n  inherit( Object, Vector4, {\n    // @public (read-only) - Helps to identify the dimension of the vector\n    isVector4: true,\n    dimension: 4,\n\n    /**\n     * The magnitude (Euclidean/L2 Norm) of this vector, i.e. $\\sqrt{x^2+y^2+z^2+w^2}$.\n     * @public\n     *\n     * @returns {number}\n     */\n    magnitude: function() {\n      return Math.sqrt( this.magnitudeSquared() );\n    },\n\n    /**\n     * The squared magnitude (square of the Euclidean/L2 Norm) of this vector, i.e. $x^2+y^2+z^2+w^2$.\n     * @public\n     *\n     * @returns {number}\n     */\n    magnitudeSquared: function() {\n      this.dot( this );\n    },\n\n    /**\n     * The Euclidean distance between this vector (treated as a point) and another point.\n     * @public\n     *\n     * @param {Vector4} point\n     * @returns {number}\n     */\n    distance: function( point ) {\n      return this.minus( point ).magnitude();\n    },\n\n    /**\n     * The Euclidean distance between this vector (treated as a point) and another point (x,y,z,w).\n     * @public\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @param {number} w\n     * @returns {number}\n     */\n    distanceXYZW: function( x, y, z, w ) {\n      var dx = this.x - x;\n      var dy = this.y - y;\n      var dz = this.z - z;\n      var dw = this.w - w;\n      return Math.sqrt( dx * dx + dy * dy + dz * dz + dw * dw );\n    },\n\n    /**\n     * The squared Euclidean distance between this vector (treated as a point) and another point.\n     * @public\n     *\n     * @param {Vector4} point\n     * @returns {number}\n     */\n    distanceSquared: function( point ) {\n      return this.minus( point ).magnitudeSquared();\n    },\n\n    /**\n     * The squared Euclidean distance between this vector (treated as a point) and another point (x,y,z,w).\n     * @public\n     *\n     * @param {Vector4} point\n     * @returns {number}\n     */\n    distanceSquaredXYZW: function( x, y, z, w ) {\n      var dx = this.x - x;\n      var dy = this.y - y;\n      var dz = this.z - z;\n      var dw = this.w - w;\n      return dx * dx + dy * dy + dz * dz + dw * dw;\n    },\n\n    /**\n     * The dot-product (Euclidean inner product) between this vector and another vector v.\n     * @public\n     *\n     * @param {Vector4} v\n     * @returns {number}\n     */\n    dot: function( v ) {\n      return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n    },\n\n    /**\n     * The dot-product (Euclidean inner product) between this vector and another vector (x,y,z,w).\n     * @public\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @param {number} w\n     * @returns {number}\n     */\n    dotXYZW: function( x, y, z, w ) {\n      return this.x * x + this.y * y + this.z * z + this.w * w;\n    },\n\n    /**\n     * The angle between this vector and another vector, in the range $\\theta\\in[0, \\pi]$.\n     * @public\n     *\n     * Equal to $\\theta = \\cos^{-1}( \\hat{u} \\cdot \\hat{v} )$ where $\\hat{u}$ is this vector (normalized) and $\\hat{v}$\n     * is the input vector (normalized).\n     *\n     * @param {Vector4} v\n     * @returns {number}\n     */\n    angleBetween: function( v ) {\n      return Math.acos( dot.clamp( this.normalized().dot( v.normalized() ), -1, 1 ) );\n    },\n\n    /**\n     * Exact equality comparison between this vector and another vector.\n     * @public\n     *\n     * @param {Vector4} other\n     * @returns {boolean} - Whether the two vectors have equal components\n     */\n    equals: function( other ) {\n      return this.x === other.x && this.y === other.y && this.z === other.z && this.w === other.w;\n    },\n\n    /**\n     * Approximate equality comparison between this vector and another vector.\n     * @public\n     *\n     * @param {Vector4} other\n     * @param {number} epsilon\n     * @returns {boolean} - Whether difference between the two vectors has no component with an absolute value greater\n     *                      than epsilon.\n     */\n    equalsEpsilon: function( other, epsilon ) {\n      if ( !epsilon ) {\n        epsilon = 0;\n      }\n      return Math.abs( this.x - other.x ) + Math.abs( this.y - other.y ) + Math.abs( this.z - other.z ) + Math.abs( this.w - other.w ) <= epsilon;\n    },\n\n    /**\n     * Whether all of the components are numbers (not NaN) that are not infinity or -infinity.\n     * @public\n     *\n     * @returns {boolean}\n     */\n    isFinite: function() {\n      return isFinite( this.x ) && isFinite( this.y ) && isFinite( this.z ) && isFinite( this.w );\n    },\n\n    /*---------------------------------------------------------------------------*\n     * Immutables\n     *---------------------------------------------------------------------------*/\n\n    /**\n     * Creates a copy of this vector, or if a vector is passed in, set that vector's values to ours.\n     * @public\n     *\n     * This is the immutable form of the function set(), if a vector is provided. This will return a new vector, and\n     * will not modify this vector.\n     *\n     * @param {Vector4} [vector] - If not provided, creates a new Vector4 with filled in values. Otherwise, fills in the\n     *                             values of the provided vector so that it equals this vector.\n     * @returns {Vector4}\n     */\n    copy: function( vector ) {\n      if ( vector ) {\n        return vector.set( this );\n      }\n      else {\n        return new Vector4( this.x, this.y, this.z, this.w );\n      }\n    },\n\n    /**\n     * Normalized (re-scaled) copy of this vector such that its magnitude is 1. If its initial magnitude is zero, an\n     * error is thrown.\n     * @public\n     *\n     * This is the immutable form of the function normalize(). This will return a new vector, and will not modify this\n     * vector.\n     *\n     * @returns {Vector4}\n     */\n    normalized: function() {\n      var mag = this.magnitude();\n      if ( mag === 0 ) {\n        throw new Error( 'Cannot normalize a zero-magnitude vector' );\n      }\n      else {\n        return new Vector4( this.x / mag, this.y / mag, this.z / mag, this.w / mag );\n      }\n    },\n\n    /**\n     * Re-scaled copy of this vector such that it has the desired magnitude. If its initial magnitude is zero, an error\n     * is thrown. If the passed-in magnitude is negative, the direction of the resulting vector will be reversed.\n     * @public\n     *\n     * This is the immutable form of the function setMagnitude(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} magnitude\n     * @returns {Vector4}\n     */\n    withMagnitude: function( magnitude ) {\n      return this.copy().setMagnitude( magnitude );\n    },\n\n    /**\n     * Copy of this vector, scaled by the desired scalar value.\n     * @public\n     *\n     * This is the immutable form of the function multiplyScalar(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} scalar\n     * @returns {Vector4}\n     */\n    timesScalar: function( scalar ) {\n      return new Vector4( this.x * scalar, this.y * scalar, this.z * scalar, this.w * scalar );\n    },\n\n    /**\n     * Same as timesScalar.\n     * @public\n     *\n     * This is the immutable form of the function multiply(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} scalar\n     * @returns {Vector4}\n     */\n    times: function( scalar ) {\n      // make sure it's not a vector!\n      assert && assert( scalar.dimension === undefined );\n      return this.timesScalar( scalar );\n    },\n\n    /**\n     * Copy of this vector, multiplied component-wise by the passed-in vector v.\n     * @public\n     *\n     * This is the immutable form of the function componentMultiply(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {Vector4} v\n     * @returns {Vector4}\n     */\n    componentTimes: function( v ) {\n      return new Vector4( this.x * v.x, this.y * v.y, this.z * v.z, this.w * v.w );\n    },\n\n    /**\n     * Addition of this vector and another vector, returning a copy.\n     * @public\n     *\n     * This is the immutable form of the function add(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {Vector4} v\n     * @returns {Vector4}\n     */\n    plus: function( v ) {\n      return new Vector4( this.x + v.x, this.y + v.y, this.z + v.z, this.w + v.w );\n    },\n\n    /**\n     * Addition of this vector and another vector (x,y,z,w), returning a copy.\n     * @public\n     *\n     * This is the immutable form of the function addXYZW(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @param {number} w\n     * @returns {Vector4}\n     */\n    plusXYZW: function( x, y, z, w ) {\n      return new Vector4( this.x + x, this.y + y, this.z + z, this.w + w );\n    },\n\n    /**\n     * Addition of this vector with a scalar (adds the scalar to every component), returning a copy.\n     * @public\n     *\n     * This is the immutable form of the function addScalar(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} scalar\n     * @returns {Vector4}\n     */\n    plusScalar: function( scalar ) {\n      return new Vector4( this.x + scalar, this.y + scalar, this.z + scalar, this.w + scalar );\n    },\n\n    /**\n     * Subtraction of this vector by another vector v, returning a copy.\n     * @public\n     *\n     * This is the immutable form of the function subtract(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {Vector4} v\n     * @returns {Vector4}\n     */\n    minus: function( v ) {\n      return new Vector4( this.x - v.x, this.y - v.y, this.z - v.z, this.w - v.w );\n    },\n\n    /**\n     * Subtraction of this vector by another vector (x,y,z,w), returning a copy.\n     * @public\n     *\n     * This is the immutable form of the function subtractXYZW(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @param {number} w\n     * @returns {Vector4}\n     */\n    minusXYZW: function( x, y, z, w ) {\n      return new Vector4( this.x - x, this.y - y, this.z - z, this.w - w );\n    },\n\n    /**\n     * Subtraction of this vector by a scalar (subtracts the scalar from every component), returning a copy.\n     * @public\n     *\n     * This is the immutable form of the function subtractScalar(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} scalar\n     * @returns {Vector4}\n     */\n    minusScalar: function( scalar ) {\n      return new Vector4( this.x - scalar, this.y - scalar, this.z - scalar, this.w - scalar );\n    },\n\n    /**\n     * Division of this vector by a scalar (divides every component by the scalar), returning a copy.\n     * @public\n     *\n     * This is the immutable form of the function divideScalar(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} scalar\n     * @returns {Vector4}\n     */\n    dividedScalar: function( scalar ) {\n      return new Vector4( this.x / scalar, this.y / scalar, this.z / scalar, this.w / scalar );\n    },\n\n    /**\n     * Negated copy of this vector (multiplies every component by -1).\n     * @public\n     *\n     * This is the immutable form of the function negate(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @returns {Vector4}\n     */\n    negated: function() {\n      return new Vector4( -this.x, -this.y, -this.z, -this.w );\n    },\n\n    /**\n     * A linear interpolation between this vector (ratio=0) and another vector (ratio=1).\n     * @public\n     *\n     * @param {Vector4} vector\n     * @param {number} ratio - Not necessarily constrained in [0, 1]\n     * @returns {Vector4}\n     */\n    blend: function( vector, ratio ) {\n      return this.plus( vector.minus( this ).times( ratio ) );\n    },\n\n    /**\n     * The average (midpoint) between this vector and another vector.\n     * @public\n     *\n     * @param {Vector4} vector\n     * @returns {Vector4}\n     */\n    average: function( vector ) {\n      return this.blend( vector, 0.5 );\n    },\n\n    /**\n     * Debugging string for the vector.\n     * @public\n     *\n     * @returns {string}\n     */\n    toString: function() {\n      return 'Vector4(' + this.x + ', ' + this.y + ', ' + this.z + ', ' + this.w + ')';\n    },\n\n    /**\n     * Converts this to a 3-dimensional vector, discarding the w-component.\n     * @public\n     *\n     * @returns {Vector3}\n     */\n    toVector3: function() {\n      return new dot.Vector3( this.x, this.y, this.z );\n    },\n\n    /*---------------------------------------------------------------------------*\n     * Mutables\n     * - all mutation should go through setXYZW / setX / setY / setZ / setW\n     *---------------------------------------------------------------------------*/\n\n    /**\n     * Sets all of the components of this vector, returning this.\n     * @public\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @param {number} w\n     * @returns {Vector4}\n     */\n    setXYZW: function( x, y, z, w ) {\n      this.x = x;\n      this.y = y;\n      this.z = z;\n      this.w = w;\n      return this;\n    },\n\n    /**\n     * Sets the x-component of this vector, returning this.\n     * @public\n     *\n     * @param {number} x\n     * @returns {Vector4}\n     */\n    setX: function( x ) {\n      this.x = x;\n      return this;\n    },\n\n    /**\n     * Sets the y-component of this vector, returning this.\n     * @public\n     *\n     * @param {number} y\n     * @returns {Vector4}\n     */\n    setY: function( y ) {\n      this.y = y;\n      return this;\n    },\n\n    /**\n     * Sets the z-component of this vector, returning this.\n     * @public\n     *\n     * @param {number} z\n     * @returns {Vector4}\n     */\n    setZ: function( z ) {\n      this.z = z;\n      return this;\n    },\n\n    /**\n     * Sets the w-component of this vector, returning this.\n     * @public\n     *\n     * @param {number} w\n     * @returns {Vector4}\n     */\n    setW: function( w ) {\n      this.w = w;\n      return this;\n    },\n\n    /**\n     * Sets this vector to be a copy of another vector.\n     * @public\n     *\n     * This is the mutable form of the function copy(). This will mutate (change) this vector, in addition to returning\n     * this vector itself.\n     *\n     * @param {Vector4} v\n     * @returns {Vector4}\n     */\n    set: function( v ) {\n      return this.setXYZW( v.x, v.y, v.z, v.w );\n    },\n\n    /**\n     * Sets the magnitude of this vector. If the passed-in magnitude is negative, this flips the vector and sets its\n     * magnitude to abs( magnitude ).\n     * @public\n     *\n     * This is the mutable form of the function withMagnitude(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} magnitude\n     * @returns {Vector4}\n     */\n    setMagnitude: function( magnitude ) {\n      var scale = magnitude / this.magnitude();\n      return this.multiplyScalar( scale );\n    },\n\n    /**\n     * Adds another vector to this vector, changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function plus(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {Vector4} v\n     * @returns {Vector4}\n     */\n    add: function( v ) {\n      return this.setXYZW( this.x + v.x, this.y + v.y, this.z + v.z, this.w + v.w );\n    },\n\n    /**\n     * Adds another vector (x,y,z,w) to this vector, changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function plusXYZW(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @param {number} w\n     * @returns {Vector4}\n     */\n    addXYZW: function( x, y, z, w ) {\n      return this.setXYZW( this.x + x, this.y + y, this.z + z, this.w + w );\n    },\n\n    /**\n     * Adds a scalar to this vector (added to every component), changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function plusScalar(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} scalar\n     * @returns {Vector4}\n     */\n    addScalar: function( scalar ) {\n      return this.setXYZW( this.x + scalar, this.y + scalar, this.z + scalar, this.w + scalar );\n    },\n\n    /**\n     * Subtracts this vector by another vector, changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function minus(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {Vector4} v\n     * @returns {Vector4}\n     */\n    subtract: function( v ) {\n      return this.setXYZW( this.x - v.x, this.y - v.y, this.z - v.z, this.w - v.w );\n    },\n\n    /**\n     * Subtracts this vector by another vector (x,y,z,w), changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function minusXYZW(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @param {number} w\n     * @returns {Vector4}\n     */\n    subtractXYZW: function( x, y, z, w ) {\n      return this.setXYZW( this.x - x, this.y - y, this.z - z, this.w - w );\n    },\n\n    /**\n     * Subtracts this vector by a scalar (subtracts each component by the scalar), changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function minusScalar(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} scalar\n     * @returns {Vector4}\n     */\n    subtractScalar: function( scalar ) {\n      return this.setXYZW( this.x - scalar, this.y - scalar, this.z - scalar, this.w - scalar );\n    },\n\n    /**\n     * Multiplies this vector by a scalar (multiplies each component by the scalar), changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function timesScalar(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} scalar\n     * @returns {Vector4}\n     */\n    multiplyScalar: function( scalar ) {\n      return this.setXYZW( this.x * scalar, this.y * scalar, this.z * scalar, this.w * scalar );\n    },\n\n    /**\n     * Multiplies this vector by a scalar (multiplies each component by the scalar), changing this vector.\n     * Same as multiplyScalar.\n     * @public\n     *\n     * This is the mutable form of the function times(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} scalar\n     * @returns {Vector4}\n     */\n    multiply: function( scalar ) {\n      // make sure it's not a vector!\n      assert && assert( scalar.dimension === undefined );\n      return this.multiplyScalar( scalar );\n    },\n\n    /**\n     * Multiplies this vector by another vector component-wise, changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function componentTimes(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {Vector4} v\n     * @returns {Vector4}\n     */\n    componentMultiply: function( v ) {\n      return this.setXYZW( this.x * v.x, this.y * v.y, this.z * v.z, this.w * v.w );\n    },\n\n    /**\n     * Divides this vector by a scalar (divides each component by the scalar), changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function dividedScalar(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} scalar\n     * @returns {Vector4}\n     */\n    divideScalar: function( scalar ) {\n      return this.setXYZW( this.x / scalar, this.y / scalar, this.z / scalar, this.w / scalar );\n    },\n\n    /**\n     * Negates this vector (multiplies each component by -1), changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function negated(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @returns {Vector4}\n     */\n    negate: function() {\n      return this.setXYZW( -this.x, -this.y, -this.z, -this.w );\n    },\n\n    /**\n     * Normalizes this vector (rescales to where the magnitude is 1), changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function normalized(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @returns {Vector4}\n     */\n    normalize: function() {\n      var mag = this.magnitude();\n      if ( mag === 0 ) {\n        throw new Error( 'Cannot normalize a zero-magnitude vector' );\n      }\n      else {\n        return this.divideScalar( mag );\n      }\n      return this;\n    }\n  } );\n\n  // Sets up pooling on Vector4\n  Poolable.mixin( Vector4, {\n    defaultFactory: function() { return new Vector4(); },\n    constructorDuplicateFactory: function( pool ) {\n      return function( x, y, z, w ) {\n        if ( pool.length ) {\n          return pool.pop().setXY( x, y, z, w );\n        }\n        else {\n          return new Vector4( x, y, z, w );\n        }\n      };\n    }\n  } );\n\n  /*---------------------------------------------------------------------------*\n   * Immutable Vector form\n   *---------------------------------------------------------------------------*/\n\n  // @private\n  Vector4.Immutable = function( x, y, z, w ) {\n    this.x = x !== undefined ? x : 0;\n    this.y = y !== undefined ? y : 0;\n    this.z = z !== undefined ? z : 0;\n    this.w = w !== undefined ? w : 1;\n  };\n  var Immutable = Vector4.Immutable;\n\n  inherit( Vector4, Immutable );\n\n  // throw errors whenever a mutable method is called on our immutable vector\n  Immutable.mutableOverrideHelper = function( mutableFunctionName ) {\n    Immutable.prototype[ mutableFunctionName ] = function() {\n      throw new Error( 'Cannot call mutable method \\'' + mutableFunctionName + '\\' on immutable Vector4' );\n    };\n  };\n\n  // TODO: better way to handle this list?\n  Immutable.mutableOverrideHelper( 'setXYZW' );\n  Immutable.mutableOverrideHelper( 'setX' );\n  Immutable.mutableOverrideHelper( 'setY' );\n  Immutable.mutableOverrideHelper( 'setZ' );\n  Immutable.mutableOverrideHelper( 'setW' );\n\n  // @public {Vector4} - helpful immutable constants\n  Vector4.ZERO = assert ? new Immutable( 0, 0, 0, 0 ) : new Vector4( 0, 0, 0, 0 );\n  Vector4.X_UNIT = assert ? new Immutable( 1, 0, 0, 0 ) : new Vector4( 1, 0, 0, 0 );\n  Vector4.Y_UNIT = assert ? new Immutable( 0, 1, 0, 0 ) : new Vector4( 0, 1, 0, 0 );\n  Vector4.Z_UNIT = assert ? new Immutable( 0, 0, 1, 0 ) : new Vector4( 0, 0, 1, 0 );\n  Vector4.W_UNIT = assert ? new Immutable( 0, 0, 0, 1 ) : new Vector4( 0, 0, 0, 1 );\n\n  return Vector4;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Basic 3-dimensional vector, represented as (x,y).\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/Vector3',['require','DOT/dot','PHET_CORE/inherit','PHET_CORE/Poolable','DOT/Util','DOT/Vector2','DOT/Vector4'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n\n  var inherit = require( 'PHET_CORE/inherit' );\n  var Poolable = require( 'PHET_CORE/Poolable' );\n\n  require( 'DOT/Util' );\n  require( 'DOT/Vector2' );\n  require( 'DOT/Vector4' );\n\n  /**\n   * Creates a 3-dimensional vector with the specified X, Y and Z values.\n   * @constructor\n   * @public\n   *\n   * @param {number} [x] - X coordinate, defaults to 0 if not provided\n   * @param {number} [y] - Y coordinate, defaults to 0 if not provided\n   * @param {number} [z] - Z coordinate, defaults to 0 if not provided\n   */\n  function Vector3( x, y, z ) {\n    // @public {number} - The X coordinate of the vector.\n    this.x = x !== undefined ? x : 0;\n\n    // @public {number} - The Y coordinate of the vector.\n    this.y = y !== undefined ? y : 0;\n\n    // @public {number} - The Z coordinate of the vector.\n    this.z = z !== undefined ? z : 0;\n\n    assert && assert( typeof this.x === 'number', 'x needs to be a number' );\n    assert && assert( typeof this.y === 'number', 'y needs to be a number' );\n    assert && assert( typeof this.z === 'number', 'z needs to be a number' );\n\n    phetAllocation && phetAllocation( 'Vector3' );\n  }\n\n  dot.register( 'Vector3', Vector3 );\n\n  inherit( Object, Vector3, {\n    // @public (read-only) - Helps to identify the dimension of the vector\n    isVector3: true,\n    dimension: 3,\n\n    /**\n     * The magnitude (Euclidean/L2 Norm) of this vector, i.e. $\\sqrt{x^2+y^2+z^2}$.\n     * @public\n     *\n     * @returns {number}\n     */\n    magnitude: function() {\n      return Math.sqrt( this.magnitudeSquared() );\n    },\n\n    /**\n     * T squared magnitude (square of the Euclidean/L2 Norm) of this vector, i.e. $x^2+y^2+z^2$.\n     * @public\n     *\n     * @returns {number}\n     */\n    magnitudeSquared: function() {\n      return this.dot( this );\n    },\n\n    /**\n     * The Euclidean distance between this vector (treated as a point) and another point.\n     * @public\n     *\n     * @param {Vector3} point\n     * @returns {number}\n     */\n    distance: function( point ) {\n      return Math.sqrt( this.distanceSquared( point ) );\n    },\n\n    /**\n     * The Euclidean distance between this vector (treated as a point) and another point (x,y,z).\n     * @public\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @returns {number}\n     */\n    distanceXYZ: function( x, y, z ) {\n      var dx = this.x - x;\n      var dy = this.y - y;\n      var dz = this.z - z;\n      return Math.sqrt( dx * dx + dy * dy + dz * dz );\n    },\n\n    /**\n     * The squared Euclidean distance between this vector (treated as a point) and another point.\n     * @public\n     *\n     * @param {Vector3} point\n     * @returns {number}\n     */\n    distanceSquared: function( point ) {\n      var dx = this.x - point.x;\n      var dy = this.y - point.y;\n      var dz = this.z - point.z;\n      return dx * dx + dy * dy + dz * dz;\n    },\n\n    /**\n     * The squared Euclidean distance between this vector (treated as a point) and another point (x,y,z).\n     * @public\n     *\n     * @param {Vector3} point\n     * @returns {number}\n     */\n    distanceSquaredXYZ: function( x, y, z ) {\n      var dx = this.x - x;\n      var dy = this.y - y;\n      var dz = this.z - z;\n      return dx * dx + dy * dy + dz * dz;\n    },\n\n    /**\n     * The dot-product (Euclidean inner product) between this vector and another vector v.\n     * @public\n     *\n     * @param {Vector3} v\n     * @returns {number}\n     */\n    dot: function( v ) {\n      return this.x * v.x + this.y * v.y + this.z * v.z;\n    },\n\n    /**\n     * The dot-product (Euclidean inner product) between this vector and another vector (x,y,z).\n     * @public\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @returns {number}\n     */\n    dotXYZ: function( x, y, z ) {\n      return this.x * x + this.y * y + this.z * z;\n    },\n\n    /**\n     * The angle between this vector and another vector, in the range $\\theta\\in[0, \\pi]$.\n     * @public\n     *\n     * Equal to $\\theta = \\cos^{-1}( \\hat{u} \\cdot \\hat{v} )$ where $\\hat{u}$ is this vector (normalized) and $\\hat{v}$\n     * is the input vector (normalized).\n     *\n     * @param {Vector3} v\n     * @returns {number}\n     */\n    angleBetween: function( v ) {\n      return Math.acos( dot.clamp( this.normalized().dot( v.normalized() ), -1, 1 ) );\n    },\n\n    /**\n     * Exact equality comparison between this vector and another vector.\n     * @public\n     *\n     * @param {Vector3} other\n     * @returns {boolean} - Whether the two vectors have equal components\n     */\n    equals: function( other ) {\n      return this.x === other.x && this.y === other.y && this.z === other.z;\n    },\n\n    /**\n     * Approximate equality comparison between this vector and another vector.\n     * @public\n     *\n     * @param {Vector3} other\n     * @param {number} epsilon\n     * @returns {boolean} - Whether difference between the two vectors has no component with an absolute value greater\n     *                      than epsilon.\n     */\n    equalsEpsilon: function( other, epsilon ) {\n      if ( !epsilon ) {\n        epsilon = 0;\n      }\n      return Math.abs( this.x - other.x ) + Math.abs( this.y - other.y ) + Math.abs( this.z - other.z ) <= epsilon;\n    },\n\n    /**\n     * Whether all of the components are numbers (not NaN) that are not infinity or -infinity.\n     * @public\n     *\n     * @returns {boolean}\n     */\n    isFinite: function() {\n      return isFinite( this.x ) && isFinite( this.y ) && isFinite( this.z );\n    },\n\n    /*---------------------------------------------------------------------------*\n     * Immutables\n     *---------------------------------------------------------------------------*/\n\n    /**\n     * Creates a copy of this vector, or if a vector is passed in, set that vector's values to ours.\n     * @public\n     *\n     * This is the immutable form of the function set(), if a vector is provided. This will return a new vector, and\n     * will not modify this vector.\n     *\n     * @param {Vector3} [vector] - If not provided, creates a new Vector3 with filled in values. Otherwise, fills in the\n     *                             values of the provided vector so that it equals this vector.\n     * @returns {Vector3}\n     */\n    copy: function( vector ) {\n      if ( vector ) {\n        return vector.set( this );\n      }\n      else {\n        return new Vector3( this.x, this.y, this.z );\n      }\n    },\n\n    /**\n     * The Euclidean 3-dimensional cross-product of this vector by the passed-in vector.\n     * @public\n     *\n     * @param {Vector3} v\n     * @returns {Vector3}\n     */\n    cross: function( v ) {\n      return new Vector3(\n        this.y * v.z - this.z * v.y,\n        this.z * v.x - this.x * v.z,\n        this.x * v.y - this.y * v.x\n      );\n    },\n\n    /**\n     * Normalized (re-scaled) copy of this vector such that its magnitude is 1. If its initial magnitude is zero, an\n     * error is thrown.\n     * @public\n     *\n     * This is the immutable form of the function normalize(). This will return a new vector, and will not modify this\n     * vector.\n     *\n     * @returns {Vector3}\n     */\n    normalized: function() {\n      var mag = this.magnitude();\n      if ( mag === 0 ) {\n        throw new Error( 'Cannot normalize a zero-magnitude vector' );\n      }\n      else {\n        return new Vector3( this.x / mag, this.y / mag, this.z / mag );\n      }\n    },\n\n    /**\n     * Re-scaled copy of this vector such that it has the desired magnitude. If its initial magnitude is zero, an error\n     * is thrown. If the passed-in magnitude is negative, the direction of the resulting vector will be reversed.\n     * @public\n     *\n     * This is the immutable form of the function setMagnitude(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} magnitude\n     * @returns {Vector3}\n     */\n    withMagnitude: function( magnitude ) {\n      return this.copy().setMagnitude( magnitude );\n    },\n\n    /**\n     * Copy of this vector, scaled by the desired scalar value.\n     * @public\n     *\n     * This is the immutable form of the function multiplyScalar(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} scalar\n     * @returns {Vector3}\n     */\n    timesScalar: function( scalar ) {\n      return new Vector3( this.x * scalar, this.y * scalar, this.z * scalar );\n    },\n\n    /**\n     * Same as timesScalar.\n     * @public\n     *\n     * This is the immutable form of the function multiply(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} scalar\n     * @returns {Vector3}\n     */\n    times: function( scalar ) {\n      // make sure it's not a vector!\n      assert && assert( scalar.dimension === undefined );\n      return this.timesScalar( scalar );\n    },\n\n    /**\n     * Copy of this vector, multiplied component-wise by the passed-in vector v.\n     * @public\n     *\n     * This is the immutable form of the function componentMultiply(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {Vector3} v\n     * @returns {Vector3}\n     */\n    componentTimes: function( v ) {\n      return new Vector3( this.x * v.x, this.y * v.y, this.z * v.z );\n    },\n\n    /**\n     * Addition of this vector and another vector, returning a copy.\n     * @public\n     *\n     * This is the immutable form of the function add(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {Vector3} v\n     * @returns {Vector3}\n     */\n    plus: function( v ) {\n      return new Vector3( this.x + v.x, this.y + v.y, this.z + v.z );\n    },\n\n    /**\n     * Addition of this vector and another vector (x,y,z), returning a copy.\n     * @public\n     *\n     * This is the immutable form of the function addXYZ(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @returns {Vector3}\n     */\n    plusXYZ: function( x, y, z ) {\n      return new Vector3( this.x + x, this.y + y, this.z + z );\n    },\n\n    /**\n     * Addition of this vector with a scalar (adds the scalar to every component), returning a copy.\n     * @public\n     *\n     * This is the immutable form of the function addScalar(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} scalar\n     * @returns {Vector3}\n     */\n    plusScalar: function( scalar ) {\n      return new Vector3( this.x + scalar, this.y + scalar, this.z + scalar );\n    },\n\n    /**\n     * Subtraction of this vector by another vector v, returning a copy.\n     * @public\n     *\n     * This is the immutable form of the function subtract(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {Vector3} v\n     * @returns {Vector3}\n     */\n    minus: function( v ) {\n      return new Vector3( this.x - v.x, this.y - v.y, this.z - v.z );\n    },\n\n    /**\n     * Subtraction of this vector by another vector (x,y,z), returning a copy.\n     * @public\n     *\n     * This is the immutable form of the function subtractXYZ(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @returns {Vector3}\n     */\n    minusXYZ: function( x, y, z ) {\n      return new Vector3( this.x - x, this.y - y, this.z - z );\n    },\n\n    /**\n     * Subtraction of this vector by a scalar (subtracts the scalar from every component), returning a copy.\n     * @public\n     *\n     * This is the immutable form of the function subtractScalar(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} scalar\n     * @returns {Vector3}\n     */\n    minusScalar: function( scalar ) {\n      return new Vector3( this.x - scalar, this.y - scalar, this.z - scalar );\n    },\n\n    /**\n     * Division of this vector by a scalar (divides every component by the scalar), returning a copy.\n     * @public\n     *\n     * This is the immutable form of the function divideScalar(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @param {number} scalar\n     * @returns {Vector3}\n     */\n    dividedScalar: function( scalar ) {\n      return new Vector3( this.x / scalar, this.y / scalar, this.z / scalar );\n    },\n\n    /**\n     * Negated copy of this vector (multiplies every component by -1).\n     * @public\n     *\n     * This is the immutable form of the function negate(). This will return a new vector, and will not modify\n     * this vector.\n     *\n     * @returns {Vector3}\n     */\n    negated: function() {\n      return new Vector3( -this.x, -this.y, -this.z );\n    },\n\n    /**\n     * A linear interpolation between this vector (ratio=0) and another vector (ratio=1).\n     * @public\n     *\n     * @param {Vector3} vector\n     * @param {number} ratio - Not necessarily constrained in [0, 1]\n     * @returns {Vector3}\n     */\n    blend: function( vector, ratio ) {\n      return this.plus( vector.minus( this ).times( ratio ) );\n    },\n\n    /**\n     * The average (midpoint) between this vector and another vector.\n     * @public\n     *\n     * @param {Vector3} vector\n     * @returns {Vector3}\n     */\n    average: function( vector ) {\n      return this.blend( vector, 0.5 );\n    },\n\n    /**\n     * Debugging string for the vector.\n     * @public\n     *\n     * @returns {string}\n     */\n    toString: function() {\n      return 'Vector3(' + this.x + ', ' + this.y + ', ' + this.z + ')';\n    },\n\n    /**\n     * Converts this to a 2-dimensional vector, discarding the z-component.\n     * @public\n     *\n     * @returns {Vector2}\n     */\n    toVector2: function() {\n      return new dot.Vector2( this.x, this.y );\n    },\n\n    /**\n     * Converts this to a 4-dimensional vector, with the z-component equal to 1 (useful for homogeneous coordinates).\n     * @public\n     *\n     * @returns {Vector4}\n     */\n    toVector4: function() {\n      return new dot.Vector4( this.x, this.y, this.z, 1 );\n    },\n\n    /*---------------------------------------------------------------------------*\n     * Mutables\n     * - all mutation should go through setXYZ / setX / setY / setZ\n     *---------------------------------------------------------------------------*/\n\n    /**\n     * Sets all of the components of this vector, returning this.\n     * @public\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @returns {Vector3}\n     */\n    setXYZ: function( x, y, z ) {\n      this.x = x;\n      this.y = y;\n      this.z = z;\n      return this;\n    },\n\n    /**\n     * Sets the x-component of this vector, returning this.\n     * @public\n     *\n     * @param {number} x\n     * @returns {Vector3}\n     */\n    setX: function( x ) {\n      this.x = x;\n      return this;\n    },\n\n    /**\n     * Sets the y-component of this vector, returning this.\n     * @public\n     *\n     * @param {number} y\n     * @returns {Vector3}\n     */\n    setY: function( y ) {\n      this.y = y;\n      return this;\n    },\n\n    /**\n     * Sets the z-component of this vector, returning this.\n     * @public\n     *\n     * @param {number} z\n     * @returns {Vector3}\n     */\n    setZ: function( z ) {\n      this.z = z;\n      return this;\n    },\n\n    /**\n     * Sets this vector to be a copy of another vector.\n     * @public\n     *\n     * This is the mutable form of the function copy(). This will mutate (change) this vector, in addition to returning\n     * this vector itself.\n     *\n     * @param {Vector3} v\n     * @returns {Vector3}\n     */\n    set: function( v ) {\n      return this.setXYZ( v.x, v.y, v.z );\n    },\n\n    /**\n     * Sets the magnitude of this vector. If the passed-in magnitude is negative, this flips the vector and sets its\n     * magnitude to abs( magnitude ).\n     * @public\n     *\n     * This is the mutable form of the function withMagnitude(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} magnitude\n     * @returns {Vector3}\n     */\n    setMagnitude: function( magnitude ) {\n      var scale = magnitude / this.magnitude();\n      return this.multiplyScalar( scale );\n    },\n\n    /**\n     * Adds another vector to this vector, changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function plus(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {Vector2} v\n     * @returns {Vector2}\n     */\n    add: function( v ) {\n      return this.setXYZ( this.x + v.x, this.y + v.y, this.z + v.z );\n    },\n\n    /**\n     * Adds another vector (x,y,z) to this vector, changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function plusXYZ(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @returns {Vector3}\n     */\n    addXYZ: function( x, y, z ) {\n      return this.setXYZ( this.x + x, this.y + y, this.z + z );\n    },\n\n    /**\n     * Adds a scalar to this vector (added to every component), changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function plusScalar(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} scalar\n     * @returns {Vector3}\n     */\n    addScalar: function( scalar ) {\n      return this.setXYZ( this.x + scalar, this.y + scalar, this.z + scalar );\n    },\n\n    /**\n     * Subtracts this vector by another vector, changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function minus(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {Vector3} v\n     * @returns {Vector3}\n     */\n    subtract: function( v ) {\n      return this.setXYZ( this.x - v.x, this.y - v.y, this.z - v.z );\n    },\n\n    /**\n     * Subtracts this vector by another vector (x,y,z), changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function minusXYZ(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @returns {Vector3}\n     */\n    subtractXYZ: function( x, y, z ) {\n      return this.setXYZ( this.x - x, this.y - y, this.z - z );\n    },\n\n    /**\n     * Subtracts this vector by a scalar (subtracts each component by the scalar), changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function minusScalar(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} scalar\n     * @returns {Vector3}\n     */\n    subtractScalar: function( scalar ) {\n      return this.setXYZ( this.x - scalar, this.y - scalar, this.z - scalar );\n    },\n\n    /**\n     * Multiplies this vector by a scalar (multiplies each component by the scalar), changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function timesScalar(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} scalar\n     * @returns {Vector3}\n     */\n    multiplyScalar: function( scalar ) {\n      return this.setXYZ( this.x * scalar, this.y * scalar, this.z * scalar );\n    },\n\n    /**\n     * Multiplies this vector by a scalar (multiplies each component by the scalar), changing this vector.\n     * Same as multiplyScalar.\n     * @public\n     *\n     * This is the mutable form of the function times(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} scalar\n     * @returns {Vector3}\n     */\n    multiply: function( scalar ) {\n      // make sure it's not a vector!\n      assert && assert( scalar.dimension === undefined );\n      return this.multiplyScalar( scalar );\n    },\n\n    /**\n     * Multiplies this vector by another vector component-wise, changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function componentTimes(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {Vector3} v\n     * @returns {Vector3}\n     */\n    componentMultiply: function( v ) {\n      return this.setXYZ( this.x * v.x, this.y * v.y, this.z * v.z );\n    },\n\n    /**\n     * Divides this vector by a scalar (divides each component by the scalar), changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function dividedScalar(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @param {number} scalar\n     * @returns {Vector3}\n     */\n    divideScalar: function( scalar ) {\n      return this.setXYZ( this.x / scalar, this.y / scalar, this.z / scalar );\n    },\n\n    /**\n     * Negates this vector (multiplies each component by -1), changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function negated(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @returns {Vector3}\n     */\n    negate: function() {\n      return this.setXYZ( -this.x, -this.y, -this.z );\n    },\n\n    /**\n     * Normalizes this vector (rescales to where the magnitude is 1), changing this vector.\n     * @public\n     *\n     * This is the mutable form of the function normalized(). This will mutate (change) this vector, in addition to\n     * returning this vector itself.\n     *\n     * @returns {Vector3}\n     */\n    normalize: function() {\n      var mag = this.magnitude();\n      if ( mag === 0 ) {\n        throw new Error( 'Cannot normalize a zero-magnitude vector' );\n      }\n      else {\n        return this.divideScalar( mag );\n      }\n    }\n  }, {\n    /**\n     * Spherical linear interpolation between two unit vectors.\n     * @public\n     *\n     * @param {Vector3} start - Start unit vector\n     * @param {Vector3} end - End unit vector\n     * @param {number} ratio  - Between 0 (at start vector) and 1 (at end vector)\n     * @return Spherical linear interpolation between the start and end\n     */\n    slerp: function( start, end, ratio ) {\n      // NOTE: we can't create a require() loop here\n      return dot.Quaternion.slerp( new dot.Quaternion(), dot.Quaternion.getRotationQuaternion( start, end ), ratio ).timesVector3( start );\n    }\n  } );\n\n  // Sets up pooling on Vector3\n  Poolable.mixin( Vector3, {\n    defaultFactory: function() { return new Vector3(); },\n    constructorDuplicateFactory: function( pool ) {\n      return function( x, y, z ) {\n        if ( pool.length ) {\n          return pool.pop().setXY( x, y, z );\n        }\n        else {\n          return new Vector3( x, y, z );\n        }\n      };\n    }\n  } );\n\n  /*---------------------------------------------------------------------------*\n   * Immutable Vector form\n   *---------------------------------------------------------------------------*/\n\n  // @private\n  Vector3.Immutable = function( x, y, z ) {\n    this.x = x !== undefined ? x : 0;\n    this.y = y !== undefined ? y : 0;\n    this.z = z !== undefined ? z : 0;\n  };\n  var Immutable = Vector3.Immutable;\n\n  inherit( Vector3, Immutable );\n\n  // throw errors whenever a mutable method is called on our immutable vector\n  Immutable.mutableOverrideHelper = function( mutableFunctionName ) {\n    Immutable.prototype[ mutableFunctionName ] = function() {\n      throw new Error( 'Cannot call mutable method \\'' + mutableFunctionName + '\\' on immutable Vector3' );\n    };\n  };\n\n  // TODO: better way to handle this list?\n  Immutable.mutableOverrideHelper( 'setXYZ' );\n  Immutable.mutableOverrideHelper( 'setX' );\n  Immutable.mutableOverrideHelper( 'setY' );\n  Immutable.mutableOverrideHelper( 'setZ' );\n\n  // @public {Vector3} - helpful immutable constants\n  Vector3.ZERO = assert ? new Immutable( 0, 0, 0 ) : new Vector3( 0, 0, 0 );\n  Vector3.X_UNIT = assert ? new Immutable( 1, 0, 0 ) : new Vector3( 1, 0, 0 );\n  Vector3.Y_UNIT = assert ? new Immutable( 0, 1, 0 ) : new Vector3( 0, 1, 0 );\n  Vector3.Z_UNIT = assert ? new Immutable( 0, 0, 1 ) : new Vector3( 0, 0, 1 );\n\n  return Vector3;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * 4-dimensional Matrix\n *\n * TODO: consider adding affine flag if it will help performance (a la Matrix3)\n * TODO: get rotation angles\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/Matrix4',['require','DOT/dot','DOT/Vector3','DOT/Vector4'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n\n  require( 'DOT/Vector3' );\n  require( 'DOT/Vector4' );\n\n  var Float32Array = window.Float32Array || Array;\n\n  function Matrix4( v00, v01, v02, v03, v10, v11, v12, v13, v20, v21, v22, v23, v30, v31, v32, v33, type ) {\n\n    // entries stored in column-major format\n    this.entries = new Float32Array( 16 );\n\n    this.rowMajor(\n      v00 !== undefined ? v00 : 1, v01 !== undefined ? v01 : 0, v02 !== undefined ? v02 : 0, v03 !== undefined ? v03 : 0,\n      v10 !== undefined ? v10 : 0, v11 !== undefined ? v11 : 1, v12 !== undefined ? v12 : 0, v13 !== undefined ? v13 : 0,\n      v20 !== undefined ? v20 : 0, v21 !== undefined ? v21 : 0, v22 !== undefined ? v22 : 1, v23 !== undefined ? v23 : 0,\n      v30 !== undefined ? v30 : 0, v31 !== undefined ? v31 : 0, v32 !== undefined ? v32 : 0, v33 !== undefined ? v33 : 1,\n      type );\n  }\n\n  dot.register( 'Matrix4', Matrix4 );\n\n  Matrix4.Types = {\n    OTHER: 0, // default\n    IDENTITY: 1,\n    TRANSLATION_3D: 2,\n    SCALING: 3,\n    AFFINE: 4\n\n    // TODO: possibly add rotations\n  };\n\n  var Types = Matrix4.Types;\n\n  Matrix4.identity = function() {\n    return new Matrix4(\n      1, 0, 0, 0,\n      0, 1, 0, 0,\n      0, 0, 1, 0,\n      0, 0, 0, 1,\n      Types.IDENTITY );\n  };\n\n  Matrix4.translation = function( x, y, z ) {\n    return new Matrix4(\n      1, 0, 0, x,\n      0, 1, 0, y,\n      0, 0, 1, z,\n      0, 0, 0, 1,\n      Types.TRANSLATION_3D );\n  };\n\n  Matrix4.translationFromVector = function( v ) { return Matrix4.translation( v.x, v.y, v.z ); };\n\n  Matrix4.scaling = function( x, y, z ) {\n    // allow using one parameter to scale everything\n    y = y === undefined ? x : y;\n    z = z === undefined ? x : z;\n\n    return new Matrix4(\n      x, 0, 0, 0,\n      0, y, 0, 0,\n      0, 0, z, 0,\n      0, 0, 0, 1,\n      Types.SCALING );\n  };\n\n  // axis is a normalized Vector3, angle in radians.\n  Matrix4.rotationAxisAngle = function( axis, angle ) {\n    var c = Math.cos( angle );\n    var s = Math.sin( angle );\n    var C = 1 - c;\n\n    return new Matrix4(\n      axis.x * axis.x * C + c, axis.x * axis.y * C - axis.z * s, axis.x * axis.z * C + axis.y * s, 0,\n      axis.y * axis.x * C + axis.z * s, axis.y * axis.y * C + c, axis.y * axis.z * C - axis.x * s, 0,\n      axis.z * axis.x * C - axis.y * s, axis.z * axis.y * C + axis.x * s, axis.z * axis.z * C + c, 0,\n      0, 0, 0, 1,\n      Types.AFFINE );\n  };\n\n  // TODO: add in rotation from quaternion, and from quat + translation\n\n  Matrix4.rotationX = function( angle ) {\n    var c = Math.cos( angle );\n    var s = Math.sin( angle );\n\n    return new Matrix4(\n      1, 0, 0, 0,\n      0, c, -s, 0,\n      0, s, c, 0,\n      0, 0, 0, 1,\n      Types.AFFINE );\n  };\n\n  Matrix4.rotationY = function( angle ) {\n    var c = Math.cos( angle );\n    var s = Math.sin( angle );\n\n    return new Matrix4(\n      c, 0, s, 0,\n      0, 1, 0, 0,\n      -s, 0, c, 0,\n      0, 0, 0, 1,\n      Types.AFFINE );\n  };\n\n  Matrix4.rotationZ = function( angle ) {\n    var c = Math.cos( angle );\n    var s = Math.sin( angle );\n\n    return new Matrix4(\n      c, -s, 0, 0,\n      s, c, 0, 0,\n      0, 0, 1, 0,\n      0, 0, 0, 1,\n      Types.AFFINE );\n  };\n\n  // aspect === width / height\n  Matrix4.gluPerspective = function( fovYRadians, aspect, zNear, zFar ) {\n    var cotangent = Math.cos( fovYRadians ) / Math.sin( fovYRadians );\n\n    return new Matrix4(\n      cotangent / aspect, 0, 0, 0,\n      0, cotangent, 0, 0,\n      0, 0, ( zFar + zNear ) / ( zNear - zFar ), ( 2 * zFar * zNear ) / ( zNear - zFar ),\n      0, 0, -1, 0 );\n  };\n\n  Matrix4.prototype = {\n    constructor: Matrix4,\n\n    rowMajor: function( v00, v01, v02, v03, v10, v11, v12, v13, v20, v21, v22, v23, v30, v31, v32, v33, type ) {\n      this.entries[ 0 ] = v00;\n      this.entries[ 1 ] = v10;\n      this.entries[ 2 ] = v20;\n      this.entries[ 3 ] = v30;\n      this.entries[ 4 ] = v01;\n      this.entries[ 5 ] = v11;\n      this.entries[ 6 ] = v21;\n      this.entries[ 7 ] = v31;\n      this.entries[ 8 ] = v02;\n      this.entries[ 9 ] = v12;\n      this.entries[ 10 ] = v22;\n      this.entries[ 11 ] = v32;\n      this.entries[ 12 ] = v03;\n      this.entries[ 13 ] = v13;\n      this.entries[ 14 ] = v23;\n      this.entries[ 15 ] = v33;\n\n      // TODO: consider performance of the affine check here\n      this.type = type === undefined ? ( ( v30 === 0 && v31 === 0 && v32 === 0 && v33 === 1 ) ? Types.AFFINE : Types.OTHER ) : type;\n      return this;\n    },\n\n    columnMajor: function( v00, v10, v20, v30, v01, v11, v21, v31, v02, v12, v22, v32, v03, v13, v23, v33, type ) {\n      return this.rowMajor( v00, v01, v02, v03, v10, v11, v12, v13, v20, v21, v22, v23, v30, v31, v32, v33, type );\n    },\n\n    set: function( matrix ) {\n      return this.rowMajor(\n        matrix.m00(), matrix.m01(), matrix.m02(), matrix.m03(),\n        matrix.m10(), matrix.m11(), matrix.m12(), matrix.m13(),\n        matrix.m20(), matrix.m21(), matrix.m22(), matrix.m23(),\n        matrix.m30(), matrix.m31(), matrix.m32(), matrix.m33(),\n        matrix.type );\n    },\n\n    // convenience getters. inline usages of these when performance is critical? TODO: test performance of inlining these, with / without closure compiler\n    m00: function() { return this.entries[ 0 ]; },\n    m01: function() { return this.entries[ 4 ]; },\n    m02: function() { return this.entries[ 8 ]; },\n    m03: function() { return this.entries[ 12 ]; },\n    m10: function() { return this.entries[ 1 ]; },\n    m11: function() { return this.entries[ 5 ]; },\n    m12: function() { return this.entries[ 9 ]; },\n    m13: function() { return this.entries[ 13 ]; },\n    m20: function() { return this.entries[ 2 ]; },\n    m21: function() { return this.entries[ 6 ]; },\n    m22: function() { return this.entries[ 10 ]; },\n    m23: function() { return this.entries[ 14 ]; },\n    m30: function() { return this.entries[ 3 ]; },\n    m31: function() { return this.entries[ 7 ]; },\n    m32: function() { return this.entries[ 11 ]; },\n    m33: function() { return this.entries[ 15 ]; },\n\n    isFinite: function() {\n      return isFinite( this.m00() ) &&\n             isFinite( this.m01() ) &&\n             isFinite( this.m02() ) &&\n             isFinite( this.m03() ) &&\n             isFinite( this.m10() ) &&\n             isFinite( this.m11() ) &&\n             isFinite( this.m12() ) &&\n             isFinite( this.m13() ) &&\n             isFinite( this.m20() ) &&\n             isFinite( this.m21() ) &&\n             isFinite( this.m22() ) &&\n             isFinite( this.m23() ) &&\n             isFinite( this.m30() ) &&\n             isFinite( this.m31() ) &&\n             isFinite( this.m32() ) &&\n             isFinite( this.m33() );\n    },\n\n    // the 3D translation, assuming multiplication with a homogeneous vector\n    getTranslation: function() {\n      return new dot.Vector3( this.m03(), this.m13(), this.m23() );\n    },\n    get translation() { return this.getTranslation(); },\n\n    // returns a vector that is equivalent to ( T(1,0,0).magnitude(), T(0,1,0).magnitude(), T(0,0,1).magnitude() )\n    // where T is a relative transform\n    getScaleVector: function() {\n      var m0003 = this.m00() + this.m03();\n      var m1013 = this.m10() + this.m13();\n      var m2023 = this.m20() + this.m23();\n      var m3033 = this.m30() + this.m33();\n      var m0103 = this.m01() + this.m03();\n      var m1113 = this.m11() + this.m13();\n      var m2123 = this.m21() + this.m23();\n      var m3133 = this.m31() + this.m33();\n      var m0203 = this.m02() + this.m03();\n      var m1213 = this.m12() + this.m13();\n      var m2223 = this.m22() + this.m23();\n      var m3233 = this.m32() + this.m33();\n      return new dot.Vector3(\n        Math.sqrt( m0003 * m0003 + m1013 * m1013 + m2023 * m2023 + m3033 * m3033 ),\n        Math.sqrt( m0103 * m0103 + m1113 * m1113 + m2123 * m2123 + m3133 * m3133 ),\n        Math.sqrt( m0203 * m0203 + m1213 * m1213 + m2223 * m2223 + m3233 * m3233 ) );\n    },\n    get scaleVector() { return this.getScaleVector(); },\n\n    getCSSTransform: function() {\n      // See http://www.w3.org/TR/css3-transforms/, particularly Section 13 that discusses the SVG compatibility\n\n      // We need to prevent the numbers from being in an exponential toString form, since the CSS transform does not support that\n      // 20 is the largest guaranteed number of digits according to https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Number/toFixed\n      // See https://github.com/phetsims/dot/issues/36\n\n      // the inner part of a CSS3 transform, but remember to add the browser-specific parts!\n      // NOTE: the toFixed calls are inlined for performance reasons\n      return 'matrix3d(' +\n             this.entries[ 0 ].toFixed( 20 ) + ',' +\n             this.entries[ 1 ].toFixed( 20 ) + ',' +\n             this.entries[ 2 ].toFixed( 20 ) + ',' +\n             this.entries[ 3 ].toFixed( 20 ) + ',' +\n             this.entries[ 4 ].toFixed( 20 ) + ',' +\n             this.entries[ 5 ].toFixed( 20 ) + ',' +\n             this.entries[ 6 ].toFixed( 20 ) + ',' +\n             this.entries[ 7 ].toFixed( 20 ) + ',' +\n             this.entries[ 8 ].toFixed( 20 ) + ',' +\n             this.entries[ 9 ].toFixed( 20 ) + ',' +\n             this.entries[ 10 ].toFixed( 20 ) + ',' +\n             this.entries[ 11 ].toFixed( 20 ) + ',' +\n             this.entries[ 12 ].toFixed( 20 ) + ',' +\n             this.entries[ 13 ].toFixed( 20 ) + ',' +\n             this.entries[ 14 ].toFixed( 20 ) + ',' +\n             this.entries[ 15 ].toFixed( 20 ) + ')';\n    },\n    get cssTransform() { return this.getCSSTransform(); },\n\n    // exact equality\n    equals: function( m ) {\n      return this.m00() === m.m00() && this.m01() === m.m01() && this.m02() === m.m02() && this.m03() === m.m03() &&\n             this.m10() === m.m10() && this.m11() === m.m11() && this.m12() === m.m12() && this.m13() === m.m13() &&\n             this.m20() === m.m20() && this.m21() === m.m21() && this.m22() === m.m22() && this.m23() === m.m23() &&\n             this.m30() === m.m30() && this.m31() === m.m31() && this.m32() === m.m32() && this.m33() === m.m33();\n    },\n\n    // equality within a margin of error\n    equalsEpsilon: function( m, epsilon ) {\n      return Math.abs( this.m00() - m.m00() ) < epsilon &&\n             Math.abs( this.m01() - m.m01() ) < epsilon &&\n             Math.abs( this.m02() - m.m02() ) < epsilon &&\n             Math.abs( this.m03() - m.m03() ) < epsilon &&\n             Math.abs( this.m10() - m.m10() ) < epsilon &&\n             Math.abs( this.m11() - m.m11() ) < epsilon &&\n             Math.abs( this.m12() - m.m12() ) < epsilon &&\n             Math.abs( this.m13() - m.m13() ) < epsilon &&\n             Math.abs( this.m20() - m.m20() ) < epsilon &&\n             Math.abs( this.m21() - m.m21() ) < epsilon &&\n             Math.abs( this.m22() - m.m22() ) < epsilon &&\n             Math.abs( this.m23() - m.m23() ) < epsilon &&\n             Math.abs( this.m30() - m.m30() ) < epsilon &&\n             Math.abs( this.m31() - m.m31() ) < epsilon &&\n             Math.abs( this.m32() - m.m32() ) < epsilon &&\n             Math.abs( this.m33() - m.m33() ) < epsilon;\n    },\n\n    /*---------------------------------------------------------------------------*\n     * Immutable operations (returning a new matrix)\n     *----------------------------------------------------------------------------*/\n\n    copy: function() {\n      return new Matrix4(\n        this.m00(), this.m01(), this.m02(), this.m03(),\n        this.m10(), this.m11(), this.m12(), this.m13(),\n        this.m20(), this.m21(), this.m22(), this.m23(),\n        this.m30(), this.m31(), this.m32(), this.m33(),\n        this.type\n      );\n    },\n\n    plus: function( m ) {\n      return new Matrix4(\n        this.m00() + m.m00(), this.m01() + m.m01(), this.m02() + m.m02(), this.m03() + m.m03(),\n        this.m10() + m.m10(), this.m11() + m.m11(), this.m12() + m.m12(), this.m13() + m.m13(),\n        this.m20() + m.m20(), this.m21() + m.m21(), this.m22() + m.m22(), this.m23() + m.m23(),\n        this.m30() + m.m30(), this.m31() + m.m31(), this.m32() + m.m32(), this.m33() + m.m33()\n      );\n    },\n\n    minus: function( m ) {\n      return new Matrix4(\n        this.m00() - m.m00(), this.m01() - m.m01(), this.m02() - m.m02(), this.m03() - m.m03(),\n        this.m10() - m.m10(), this.m11() - m.m11(), this.m12() - m.m12(), this.m13() - m.m13(),\n        this.m20() - m.m20(), this.m21() - m.m21(), this.m22() - m.m22(), this.m23() - m.m23(),\n        this.m30() - m.m30(), this.m31() - m.m31(), this.m32() - m.m32(), this.m33() - m.m33()\n      );\n    },\n\n    transposed: function() {\n      return new Matrix4(\n        this.m00(), this.m10(), this.m20(), this.m30(),\n        this.m01(), this.m11(), this.m21(), this.m31(),\n        this.m02(), this.m12(), this.m22(), this.m32(),\n        this.m03(), this.m13(), this.m23(), this.m33() );\n    },\n\n    negated: function() {\n      return new Matrix4(\n        -this.m00(), -this.m01(), -this.m02(), -this.m03(),\n        -this.m10(), -this.m11(), -this.m12(), -this.m13(),\n        -this.m20(), -this.m21(), -this.m22(), -this.m23(),\n        -this.m30(), -this.m31(), -this.m32(), -this.m33() );\n    },\n\n    inverted: function() {\n      switch( this.type ) {\n        case Types.IDENTITY:\n          return this;\n        case Types.TRANSLATION_3D:\n          return new Matrix4(\n            1, 0, 0, -this.m03(),\n            0, 1, 0, -this.m13(),\n            0, 0, 1, -this.m23(),\n            0, 0, 0, 1, Types.TRANSLATION_3D );\n        case Types.SCALING:\n          return new Matrix4(\n            1 / this.m00(), 0, 0, 0,\n            0, 1 / this.m11(), 0, 0,\n            0, 0, 1 / this.m22(), 0,\n            0, 0, 0, 1 / this.m33(), Types.SCALING );\n        case Types.AFFINE:\n        case Types.OTHER:\n          var det = this.getDeterminant();\n          if ( det !== 0 ) {\n            return new Matrix4(\n              ( -this.m31() * this.m22() * this.m13() + this.m21() * this.m32() * this.m13() + this.m31() * this.m12() * this.m23() - this.m11() * this.m32() * this.m23() - this.m21() * this.m12() * this.m33() + this.m11() * this.m22() * this.m33() ) / det,\n              ( this.m31() * this.m22() * this.m03() - this.m21() * this.m32() * this.m03() - this.m31() * this.m02() * this.m23() + this.m01() * this.m32() * this.m23() + this.m21() * this.m02() * this.m33() - this.m01() * this.m22() * this.m33() ) / det,\n              ( -this.m31() * this.m12() * this.m03() + this.m11() * this.m32() * this.m03() + this.m31() * this.m02() * this.m13() - this.m01() * this.m32() * this.m13() - this.m11() * this.m02() * this.m33() + this.m01() * this.m12() * this.m33() ) / det,\n              ( this.m21() * this.m12() * this.m03() - this.m11() * this.m22() * this.m03() - this.m21() * this.m02() * this.m13() + this.m01() * this.m22() * this.m13() + this.m11() * this.m02() * this.m23() - this.m01() * this.m12() * this.m23() ) / det,\n              ( this.m30() * this.m22() * this.m13() - this.m20() * this.m32() * this.m13() - this.m30() * this.m12() * this.m23() + this.m10() * this.m32() * this.m23() + this.m20() * this.m12() * this.m33() - this.m10() * this.m22() * this.m33() ) / det,\n              ( -this.m30() * this.m22() * this.m03() + this.m20() * this.m32() * this.m03() + this.m30() * this.m02() * this.m23() - this.m00() * this.m32() * this.m23() - this.m20() * this.m02() * this.m33() + this.m00() * this.m22() * this.m33() ) / det,\n              ( this.m30() * this.m12() * this.m03() - this.m10() * this.m32() * this.m03() - this.m30() * this.m02() * this.m13() + this.m00() * this.m32() * this.m13() + this.m10() * this.m02() * this.m33() - this.m00() * this.m12() * this.m33() ) / det,\n              ( -this.m20() * this.m12() * this.m03() + this.m10() * this.m22() * this.m03() + this.m20() * this.m02() * this.m13() - this.m00() * this.m22() * this.m13() - this.m10() * this.m02() * this.m23() + this.m00() * this.m12() * this.m23() ) / det,\n              ( -this.m30() * this.m21() * this.m13() + this.m20() * this.m31() * this.m13() + this.m30() * this.m11() * this.m23() - this.m10() * this.m31() * this.m23() - this.m20() * this.m11() * this.m33() + this.m10() * this.m21() * this.m33() ) / det,\n              ( this.m30() * this.m21() * this.m03() - this.m20() * this.m31() * this.m03() - this.m30() * this.m01() * this.m23() + this.m00() * this.m31() * this.m23() + this.m20() * this.m01() * this.m33() - this.m00() * this.m21() * this.m33() ) / det,\n              ( -this.m30() * this.m11() * this.m03() + this.m10() * this.m31() * this.m03() + this.m30() * this.m01() * this.m13() - this.m00() * this.m31() * this.m13() - this.m10() * this.m01() * this.m33() + this.m00() * this.m11() * this.m33() ) / det,\n              ( this.m20() * this.m11() * this.m03() - this.m10() * this.m21() * this.m03() - this.m20() * this.m01() * this.m13() + this.m00() * this.m21() * this.m13() + this.m10() * this.m01() * this.m23() - this.m00() * this.m11() * this.m23() ) / det,\n              ( this.m30() * this.m21() * this.m12() - this.m20() * this.m31() * this.m12() - this.m30() * this.m11() * this.m22() + this.m10() * this.m31() * this.m22() + this.m20() * this.m11() * this.m32() - this.m10() * this.m21() * this.m32() ) / det,\n              ( -this.m30() * this.m21() * this.m02() + this.m20() * this.m31() * this.m02() + this.m30() * this.m01() * this.m22() - this.m00() * this.m31() * this.m22() - this.m20() * this.m01() * this.m32() + this.m00() * this.m21() * this.m32() ) / det,\n              ( this.m30() * this.m11() * this.m02() - this.m10() * this.m31() * this.m02() - this.m30() * this.m01() * this.m12() + this.m00() * this.m31() * this.m12() + this.m10() * this.m01() * this.m32() - this.m00() * this.m11() * this.m32() ) / det,\n              ( -this.m20() * this.m11() * this.m02() + this.m10() * this.m21() * this.m02() + this.m20() * this.m01() * this.m12() - this.m00() * this.m21() * this.m12() - this.m10() * this.m01() * this.m22() + this.m00() * this.m11() * this.m22() ) / det\n            );\n          }\n          else {\n            throw new Error( 'Matrix could not be inverted, determinant === 0' );\n          }\n          break;\n        default:\n          throw new Error( 'Matrix3.inverted with unknown type: ' + this.type );\n      }\n    },\n\n    timesMatrix: function( m ) {\n      // I * M === M * I === I (the identity)\n      if ( this.type === Types.IDENTITY || m.type === Types.IDENTITY ) {\n        return this.type === Types.IDENTITY ? m : this;\n      }\n\n      if ( this.type === m.type ) {\n        // currently two matrices of the same type will result in the same result type\n        if ( this.type === Types.TRANSLATION_3D ) {\n          // faster combination of translations\n          return new Matrix4(\n            1, 0, 0, this.m03() + m.m02(),\n            0, 1, 0, this.m13() + m.m12(),\n            0, 0, 1, this.m23() + m.m23(),\n            0, 0, 0, 1, Types.TRANSLATION_3D );\n        }\n        else if ( this.type === Types.SCALING ) {\n          // faster combination of scaling\n          return new Matrix4(\n            this.m00() * m.m00(), 0, 0, 0,\n            0, this.m11() * m.m11(), 0, 0,\n            0, 0, this.m22() * m.m22(), 0,\n            0, 0, 0, 1, Types.SCALING );\n        }\n      }\n\n      if ( this.type !== Types.OTHER && m.type !== Types.OTHER ) {\n        // currently two matrices that are anything but \"other\" are technically affine, and the result will be affine\n\n        // affine case\n        return new Matrix4(\n          this.m00() * m.m00() + this.m01() * m.m10() + this.m02() * m.m20(),\n          this.m00() * m.m01() + this.m01() * m.m11() + this.m02() * m.m21(),\n          this.m00() * m.m02() + this.m01() * m.m12() + this.m02() * m.m22(),\n          this.m00() * m.m03() + this.m01() * m.m13() + this.m02() * m.m23() + this.m03(),\n          this.m10() * m.m00() + this.m11() * m.m10() + this.m12() * m.m20(),\n          this.m10() * m.m01() + this.m11() * m.m11() + this.m12() * m.m21(),\n          this.m10() * m.m02() + this.m11() * m.m12() + this.m12() * m.m22(),\n          this.m10() * m.m03() + this.m11() * m.m13() + this.m12() * m.m23() + this.m13(),\n          this.m20() * m.m00() + this.m21() * m.m10() + this.m22() * m.m20(),\n          this.m20() * m.m01() + this.m21() * m.m11() + this.m22() * m.m21(),\n          this.m20() * m.m02() + this.m21() * m.m12() + this.m22() * m.m22(),\n          this.m20() * m.m03() + this.m21() * m.m13() + this.m22() * m.m23() + this.m23(),\n          0, 0, 0, 1, Types.AFFINE );\n      }\n\n      // general case\n      return new Matrix4(\n        this.m00() * m.m00() + this.m01() * m.m10() + this.m02() * m.m20() + this.m03() * m.m30(),\n        this.m00() * m.m01() + this.m01() * m.m11() + this.m02() * m.m21() + this.m03() * m.m31(),\n        this.m00() * m.m02() + this.m01() * m.m12() + this.m02() * m.m22() + this.m03() * m.m32(),\n        this.m00() * m.m03() + this.m01() * m.m13() + this.m02() * m.m23() + this.m03() * m.m33(),\n        this.m10() * m.m00() + this.m11() * m.m10() + this.m12() * m.m20() + this.m13() * m.m30(),\n        this.m10() * m.m01() + this.m11() * m.m11() + this.m12() * m.m21() + this.m13() * m.m31(),\n        this.m10() * m.m02() + this.m11() * m.m12() + this.m12() * m.m22() + this.m13() * m.m32(),\n        this.m10() * m.m03() + this.m11() * m.m13() + this.m12() * m.m23() + this.m13() * m.m33(),\n        this.m20() * m.m00() + this.m21() * m.m10() + this.m22() * m.m20() + this.m23() * m.m30(),\n        this.m20() * m.m01() + this.m21() * m.m11() + this.m22() * m.m21() + this.m23() * m.m31(),\n        this.m20() * m.m02() + this.m21() * m.m12() + this.m22() * m.m22() + this.m23() * m.m32(),\n        this.m20() * m.m03() + this.m21() * m.m13() + this.m22() * m.m23() + this.m23() * m.m33(),\n        this.m30() * m.m00() + this.m31() * m.m10() + this.m32() * m.m20() + this.m33() * m.m30(),\n        this.m30() * m.m01() + this.m31() * m.m11() + this.m32() * m.m21() + this.m33() * m.m31(),\n        this.m30() * m.m02() + this.m31() * m.m12() + this.m32() * m.m22() + this.m33() * m.m32(),\n        this.m30() * m.m03() + this.m31() * m.m13() + this.m32() * m.m23() + this.m33() * m.m33() );\n    },\n\n    timesVector4: function( v ) {\n      var x = this.m00() * v.x + this.m01() * v.y + this.m02() * v.z + this.m03() * v.w;\n      var y = this.m10() * v.x + this.m11() * v.y + this.m12() * v.z + this.m13() * v.w;\n      var z = this.m20() * v.x + this.m21() * v.y + this.m22() * v.z + this.m23() * v.w;\n      var w = this.m30() * v.x + this.m31() * v.y + this.m32() * v.z + this.m33() * v.w;\n      return new dot.Vector4( x, y, z, w );\n    },\n\n    timesVector3: function( v ) {\n      return this.timesVector4( v.toVector4() ).toVector3();\n    },\n\n    timesTransposeVector4: function( v ) {\n      var x = this.m00() * v.x + this.m10() * v.y + this.m20() * v.z + this.m30() * v.w;\n      var y = this.m01() * v.x + this.m11() * v.y + this.m21() * v.z + this.m31() * v.w;\n      var z = this.m02() * v.x + this.m12() * v.y + this.m22() * v.z + this.m32() * v.w;\n      var w = this.m03() * v.x + this.m13() * v.y + this.m23() * v.z + this.m33() * v.w;\n      return new dot.Vector4( x, y, z, w );\n    },\n\n    timesTransposeVector3: function( v ) {\n      return this.timesTransposeVector4( v.toVector4() ).toVector3();\n    },\n\n    timesRelativeVector3: function( v ) {\n      var x = this.m00() * v.x + this.m10() * v.y + this.m20() * v.z;\n      var y = this.m01() * v.y + this.m11() * v.y + this.m21() * v.z;\n      var z = this.m02() * v.z + this.m12() * v.y + this.m22() * v.z;\n      return new dot.Vector3( x, y, z );\n    },\n\n    getDeterminant: function() {\n      return this.m03() * this.m12() * this.m21() * this.m30() -\n             this.m02() * this.m13() * this.m21() * this.m30() -\n             this.m03() * this.m11() * this.m22() * this.m30() +\n             this.m01() * this.m13() * this.m22() * this.m30() +\n             this.m02() * this.m11() * this.m23() * this.m30() -\n             this.m01() * this.m12() * this.m23() * this.m30() -\n             this.m03() * this.m12() * this.m20() * this.m31() +\n             this.m02() * this.m13() * this.m20() * this.m31() +\n             this.m03() * this.m10() * this.m22() * this.m31() -\n             this.m00() * this.m13() * this.m22() * this.m31() -\n             this.m02() * this.m10() * this.m23() * this.m31() +\n             this.m00() * this.m12() * this.m23() * this.m31() +\n             this.m03() * this.m11() * this.m20() * this.m32() -\n             this.m01() * this.m13() * this.m20() * this.m32() -\n             this.m03() * this.m10() * this.m21() * this.m32() +\n             this.m00() * this.m13() * this.m21() * this.m32() +\n             this.m01() * this.m10() * this.m23() * this.m32() -\n             this.m00() * this.m11() * this.m23() * this.m32() -\n             this.m02() * this.m11() * this.m20() * this.m33() +\n             this.m01() * this.m12() * this.m20() * this.m33() +\n             this.m02() * this.m10() * this.m21() * this.m33() -\n             this.m00() * this.m12() * this.m21() * this.m33() -\n             this.m01() * this.m10() * this.m22() * this.m33() +\n             this.m00() * this.m11() * this.m22() * this.m33();\n    },\n    get determinant() { return this.getDeterminant(); },\n\n    toString: function() {\n      return this.m00() + ' ' + this.m01() + ' ' + this.m02() + ' ' + this.m03() + '\\n' +\n             this.m10() + ' ' + this.m11() + ' ' + this.m12() + ' ' + this.m13() + '\\n' +\n             this.m20() + ' ' + this.m21() + ' ' + this.m22() + ' ' + this.m23() + '\\n' +\n             this.m30() + ' ' + this.m31() + ' ' + this.m32() + ' ' + this.m33();\n    },\n\n    makeImmutable: function() {\n      this.rowMajor = function() {\n        throw new Error( 'Cannot modify immutable matrix' );\n      };\n    }\n  };\n\n  // create an immutable\n  Matrix4.IDENTITY = new Matrix4();\n  Matrix4.IDENTITY.makeImmutable();\n\n  return Matrix4;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * 3-dimensional Matrix\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/Matrix3',['require','DOT/dot','PHET_CORE/Poolable','DOT/Vector2','DOT/Vector3','DOT/Matrix4'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n  var Poolable = require( 'PHET_CORE/Poolable' );\n\n  var FastArray = dot.FastArray;\n\n  require( 'DOT/Vector2' );\n  require( 'DOT/Vector3' );\n  require( 'DOT/Matrix4' );\n\n  var identityFastArray = new FastArray( 9 );\n  identityFastArray[ 0 ] = 1;\n  identityFastArray[ 4 ] = 1;\n  identityFastArray[ 8 ] = 1;\n\n  var createIdentityArray = FastArray === Array ?\n                            function() {\n                              return [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\n                            } :\n                            function() {\n                              return new FastArray( identityFastArray );\n                            };\n\n  // Create an identity matrix\n  function Matrix3( argumentsShouldNotExist ) {\n\n    //Make sure no clients are expecting to create a matrix with non-identity values\n    assert && assert( !argumentsShouldNotExist, 'Matrix3 constructor should not be called with any arguments.  Use Matrix3.createFromPool()/Matrix3.identity()/etc.' );\n\n    // entries stored in column-major format\n    this.entries = createIdentityArray();\n\n    phetAllocation && phetAllocation( 'Matrix3' );\n    this.type = Types.IDENTITY;\n  }\n\n  dot.register( 'Matrix3', Matrix3 );\n\n  Matrix3.Types = {\n    // NOTE: if an inverted matrix of a type is not that type, change inverted()!\n    // NOTE: if two matrices with identical types are multiplied, the result should have the same type. if not, changed timesMatrix()!\n    // NOTE: on adding a type, exaustively check all type usage\n    OTHER: 0, // default\n    IDENTITY: 1,\n    TRANSLATION_2D: 2,\n    SCALING: 3,\n    AFFINE: 4\n\n    // TODO: possibly add rotations\n  };\n\n  var Types = Matrix3.Types;\n\n  Matrix3.identity = function() { return Matrix3.dirtyFromPool().setToIdentity(); };\n  Matrix3.translation = function( x, y ) { return Matrix3.dirtyFromPool().setToTranslation( x, y ); };\n  Matrix3.translationFromVector = function( v ) { return Matrix3.translation( v.x, v.y ); };\n  Matrix3.scaling = function( x, y ) { return Matrix3.dirtyFromPool().setToScale( x, y ); };\n  Matrix3.scale = Matrix3.scaling;\n  Matrix3.affine = function( m00, m10, m01, m11, m02, m12 ) { return Matrix3.dirtyFromPool().setToAffine( m00, m01, m02, m10, m11, m12 ); };\n  Matrix3.rowMajor = function( v00, v01, v02, v10, v11, v12, v20, v21, v22, type ) { return Matrix3.dirtyFromPool().rowMajor( v00, v01, v02, v10, v11, v12, v20, v21, v22, type ); };\n\n  // axis is a normalized Vector3, angle in radians.\n  Matrix3.rotationAxisAngle = function( axis, angle ) { return Matrix3.dirtyFromPool().setToRotationAxisAngle( axis, angle ); };\n\n  Matrix3.rotationX = function( angle ) { return Matrix3.dirtyFromPool().setToRotationX( angle ); };\n  Matrix3.rotationY = function( angle ) { return Matrix3.dirtyFromPool().setToRotationY( angle ); };\n  Matrix3.rotationZ = function( angle ) { return Matrix3.dirtyFromPool().setToRotationZ( angle ); };\n\n  // standard 2d rotation\n  Matrix3.rotation2 = Matrix3.rotationZ;\n\n  Matrix3.rotationAround = function( angle, x, y ) {\n    return Matrix3.translation( x, y ).timesMatrix( Matrix3.rotation2( angle ) ).timesMatrix( Matrix3.translation( -x, -y ) );\n  };\n\n  Matrix3.rotationAroundPoint = function( angle, point ) {\n    return Matrix3.rotationAround( angle, point.x, point.y );\n  };\n\n  Matrix3.fromSVGMatrix = function( svgMatrix ) { return Matrix3.dirtyFromPool().setToSVGMatrix( svgMatrix ); };\n\n  // a rotation matrix that rotates A to B, by rotating about the axis A.cross( B ) -- Shortest path. ideally should be unit vectors\n  Matrix3.rotateAToB = function( a, b ) { return Matrix3.dirtyFromPool().setRotationAToB( a, b ); };\n\n  Matrix3.prototype = {\n    constructor: Matrix3,\n\n    /*---------------------------------------------------------------------------*\n     * \"Properties\"\n     *----------------------------------------------------------------------------*/\n\n    // convenience getters. inline usages of these when performance is critical? TODO: test performance of inlining these, with / without closure compiler\n    m00: function() { return this.entries[ 0 ]; },\n    m01: function() { return this.entries[ 3 ]; },\n    m02: function() { return this.entries[ 6 ]; },\n    m10: function() { return this.entries[ 1 ]; },\n    m11: function() { return this.entries[ 4 ]; },\n    m12: function() { return this.entries[ 7 ]; },\n    m20: function() { return this.entries[ 2 ]; },\n    m21: function() { return this.entries[ 5 ]; },\n    m22: function() { return this.entries[ 8 ]; },\n\n    isIdentity: function() {\n      return this.type === Types.IDENTITY || this.equals( Matrix3.IDENTITY );\n    },\n\n    // returning false means \"inconclusive, may be identity or not\"\n    isFastIdentity: function() {\n      return this.type === Types.IDENTITY;\n    },\n\n    isAffine: function() {\n      return this.type === Types.AFFINE || ( this.m20() === 0 && this.m21() === 0 && this.m22() === 1 );\n    },\n\n    // if it's an affine matrix where the components of transforms are independent\n    // i.e. constructed from arbitrary component scaling and translation.\n    isAligned: function() {\n      // non-diagonal non-translation entries should all be zero.\n      return this.isAffine() && this.m01() === 0 && this.m10() === 0;\n    },\n\n    // if it's an affine matrix where the components of transforms are independent, but may be switched (unlike isAligned)\n    // i.e. the 2x2 rotational sub-matrix is of one of the two forms:\n    // A 0  or  0  A\n    // 0 B      B  0\n    // This means that moving a transformed point by (x,0) or (0,y) will result in a motion along one of the axes.\n    isAxisAligned: function() {\n      return this.isAffine() && ( ( this.m01() === 0 && this.m10() === 0 ) || ( this.m00() === 0 && this.m11() === 0 ) );\n    },\n\n    isFinite: function() {\n      return isFinite( this.m00() ) &&\n             isFinite( this.m01() ) &&\n             isFinite( this.m02() ) &&\n             isFinite( this.m10() ) &&\n             isFinite( this.m11() ) &&\n             isFinite( this.m12() ) &&\n             isFinite( this.m20() ) &&\n             isFinite( this.m21() ) &&\n             isFinite( this.m22() );\n    },\n\n    getDeterminant: function() {\n      return this.m00() * this.m11() * this.m22() + this.m01() * this.m12() * this.m20() + this.m02() * this.m10() * this.m21() - this.m02() * this.m11() * this.m20() - this.m01() * this.m10() * this.m22() - this.m00() * this.m12() * this.m21();\n    },\n    get determinant() { return this.getDeterminant(); },\n\n    // the 2D translation, assuming multiplication with a homogeneous vector\n    getTranslation: function() {\n      return new dot.Vector2( this.m02(), this.m12() );\n    },\n    get translation() { return this.getTranslation(); },\n\n    // returns a vector that is equivalent to ( T(1,0).magnitude(), T(0,1).magnitude() ) where T is a relative transform\n    getScaleVector: function() {\n      return new dot.Vector2(\n        Math.sqrt( this.m00() * this.m00() + this.m10() * this.m10() ),\n        Math.sqrt( this.m01() * this.m01() + this.m11() * this.m11() ) );\n    },\n    get scaleVector() { return this.getScaleVector(); },\n\n    // angle in radians for the 2d rotation from this matrix, between pi, -pi\n    getRotation: function() {\n      return Math.atan2( this.m10(), this.m00() );\n    },\n    get rotation() { return this.getRotation(); },\n\n    toMatrix4: function() {\n      return new dot.Matrix4(\n        this.m00(), this.m01(), this.m02(), 0,\n        this.m10(), this.m11(), this.m12(), 0,\n        this.m20(), this.m21(), this.m22(), 0,\n        0, 0, 0, 1 );\n    },\n\n    toAffineMatrix4: function() {\n      return new dot.Matrix4(\n        this.m00(), this.m01(), 0, this.m02(),\n        this.m10(), this.m11(), 0, this.m12(),\n        0, 0, 1, 0,\n        0, 0, 0, 1 );\n    },\n\n    toString: function() {\n      return this.m00() + ' ' + this.m01() + ' ' + this.m02() + '\\n' +\n             this.m10() + ' ' + this.m11() + ' ' + this.m12() + '\\n' +\n             this.m20() + ' ' + this.m21() + ' ' + this.m22();\n    },\n\n    toSVGMatrix: function() {\n      var result = document.createElementNS( 'http://www.w3.org/2000/svg', 'svg' ).createSVGMatrix();\n\n      // top two rows\n      result.a = this.m00();\n      result.b = this.m10();\n      result.c = this.m01();\n      result.d = this.m11();\n      result.e = this.m02();\n      result.f = this.m12();\n\n      return result;\n    },\n\n    getCSSTransform: function() {\n      // See http://www.w3.org/TR/css3-transforms/, particularly Section 13 that discusses the SVG compatibility\n\n      // We need to prevent the numbers from being in an exponential toString form, since the CSS transform does not support that\n      // 20 is the largest guaranteed number of digits according to https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Number/toFixed\n      // See https://github.com/phetsims/dot/issues/36\n\n      // the inner part of a CSS3 transform, but remember to add the browser-specific parts!\n      // NOTE: the toFixed calls are inlined for performance reasons\n      return 'matrix(' + this.entries[ 0 ].toFixed( 20 ) + ',' + this.entries[ 1 ].toFixed( 20 ) + ',' + this.entries[ 3 ].toFixed( 20 ) + ',' + this.entries[ 4 ].toFixed( 20 ) + ',' + this.entries[ 6 ].toFixed( 20 ) + ',' + this.entries[ 7 ].toFixed( 20 ) + ')';\n    },\n    get cssTransform() { return this.getCSSTransform(); },\n\n    getSVGTransform: function() {\n      // SVG transform presentation attribute. See http://www.w3.org/TR/SVG/coords.html#TransformAttribute\n\n      // we need to prevent the numbers from being in an exponential toString form, since the CSS transform does not support that\n      function svgNumber( number ) {\n        // Largest guaranteed number of digits according to https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Number/toFixed\n        // See https://github.com/phetsims/dot/issues/36\n        return number.toFixed( 20 );\n      }\n\n      switch( this.type ) {\n        case Types.IDENTITY:\n          return '';\n        case Types.TRANSLATION_2D:\n          return 'translate(' + svgNumber( this.entries[ 6 ] ) + ',' + svgNumber( this.entries[ 7 ] ) + ')';\n        case Types.SCALING:\n          return 'scale(' + svgNumber( this.entries[ 0 ] ) + ( this.entries[ 0 ] === this.entries[ 4 ] ? '' : ',' + svgNumber( this.entries[ 4 ] ) ) + ')';\n        default:\n          return 'matrix(' + svgNumber( this.entries[ 0 ] ) + ',' + svgNumber( this.entries[ 1 ] ) + ',' + svgNumber( this.entries[ 3 ] ) + ',' + svgNumber( this.entries[ 4 ] ) + ',' + svgNumber( this.entries[ 6 ] ) + ',' + svgNumber( this.entries[ 7 ] ) + ')';\n      }\n    },\n    get svgTransform() { return this.getSVGTransform(); },\n\n    // returns a parameter object suitable for use with jQuery's .css()\n    getCSSTransformStyles: function() {\n      var transformCSS = this.getCSSTransform();\n\n      // notes on triggering hardware acceleration: http://creativejs.com/2011/12/day-2-gpu-accelerate-your-dom-elements/\n      return {\n        // force iOS hardware acceleration\n        '-webkit-perspective': 1000,\n        '-webkit-backface-visibility': 'hidden',\n\n        '-webkit-transform': transformCSS + ' translateZ(0)', // trigger hardware acceleration if possible\n        '-moz-transform': transformCSS + ' translateZ(0)', // trigger hardware acceleration if possible\n        '-ms-transform': transformCSS,\n        '-o-transform': transformCSS,\n        'transform': transformCSS,\n        'transform-origin': 'top left', // at the origin of the component. consider 0px 0px instead. Critical, since otherwise this defaults to 50% 50%!!! see https://developer.mozilla.org/en-US/docs/CSS/transform-origin\n        '-ms-transform-origin': 'top left' // TODO: do we need other platform-specific transform-origin styles?\n      };\n    },\n    get cssTransformStyles() { return this.getCSSTransformStyles(); },\n\n    // exact equality\n    equals: function( m ) {\n      return this.m00() === m.m00() && this.m01() === m.m01() && this.m02() === m.m02() &&\n             this.m10() === m.m10() && this.m11() === m.m11() && this.m12() === m.m12() &&\n             this.m20() === m.m20() && this.m21() === m.m21() && this.m22() === m.m22();\n    },\n\n    // equality within a margin of error\n    equalsEpsilon: function( m, epsilon ) {\n      return Math.abs( this.m00() - m.m00() ) < epsilon && Math.abs( this.m01() - m.m01() ) < epsilon && Math.abs( this.m02() - m.m02() ) < epsilon &&\n             Math.abs( this.m10() - m.m10() ) < epsilon && Math.abs( this.m11() - m.m11() ) < epsilon && Math.abs( this.m12() - m.m12() ) < epsilon &&\n             Math.abs( this.m20() - m.m20() ) < epsilon && Math.abs( this.m21() - m.m21() ) < epsilon && Math.abs( this.m22() - m.m22() ) < epsilon;\n    },\n\n    /*---------------------------------------------------------------------------*\n     * Immutable operations (returns a new matrix)\n     *----------------------------------------------------------------------------*/\n\n    copy: function() {\n      return Matrix3.createFromPool(\n        this.m00(), this.m01(), this.m02(),\n        this.m10(), this.m11(), this.m12(),\n        this.m20(), this.m21(), this.m22(),\n        this.type\n      );\n    },\n\n    plus: function( m ) {\n      return Matrix3.createFromPool(\n        this.m00() + m.m00(), this.m01() + m.m01(), this.m02() + m.m02(),\n        this.m10() + m.m10(), this.m11() + m.m11(), this.m12() + m.m12(),\n        this.m20() + m.m20(), this.m21() + m.m21(), this.m22() + m.m22()\n      );\n    },\n\n    minus: function( m ) {\n      return Matrix3.createFromPool(\n        this.m00() - m.m00(), this.m01() - m.m01(), this.m02() - m.m02(),\n        this.m10() - m.m10(), this.m11() - m.m11(), this.m12() - m.m12(),\n        this.m20() - m.m20(), this.m21() - m.m21(), this.m22() - m.m22()\n      );\n    },\n\n    transposed: function() {\n      return Matrix3.createFromPool(\n        this.m00(), this.m10(), this.m20(),\n        this.m01(), this.m11(), this.m21(),\n        this.m02(), this.m12(), this.m22(), ( this.type === Types.IDENTITY || this.type === Types.SCALING ) ? this.type : undefined\n      );\n    },\n\n    negated: function() {\n      return Matrix3.createFromPool(\n        -this.m00(), -this.m01(), -this.m02(),\n        -this.m10(), -this.m11(), -this.m12(),\n        -this.m20(), -this.m21(), -this.m22()\n      );\n    },\n\n    inverted: function() {\n      var det;\n\n      switch( this.type ) {\n        case Types.IDENTITY:\n          return this;\n        case Types.TRANSLATION_2D:\n          return Matrix3.createFromPool(\n            1, 0, -this.m02(),\n            0, 1, -this.m12(),\n            0, 0, 1, Types.TRANSLATION_2D );\n        case Types.SCALING:\n          return Matrix3.createFromPool(\n            1 / this.m00(), 0, 0,\n            0, 1 / this.m11(), 0,\n            0, 0, 1 / this.m22(), Types.SCALING );\n        case Types.AFFINE:\n          det = this.getDeterminant();\n          if ( det !== 0 ) {\n            return Matrix3.createFromPool(\n              ( -this.m12() * this.m21() + this.m11() * this.m22() ) / det,\n              ( this.m02() * this.m21() - this.m01() * this.m22() ) / det,\n              ( -this.m02() * this.m11() + this.m01() * this.m12() ) / det,\n              ( this.m12() * this.m20() - this.m10() * this.m22() ) / det,\n              ( -this.m02() * this.m20() + this.m00() * this.m22() ) / det,\n              ( this.m02() * this.m10() - this.m00() * this.m12() ) / det,\n              0, 0, 1, Types.AFFINE\n            );\n          }\n          else {\n            throw new Error( 'Matrix could not be inverted, determinant === 0' );\n          }\n          break;\n        case Types.OTHER:\n          det = this.getDeterminant();\n          if ( det !== 0 ) {\n            return Matrix3.createFromPool(\n              ( -this.m12() * this.m21() + this.m11() * this.m22() ) / det,\n              ( this.m02() * this.m21() - this.m01() * this.m22() ) / det,\n              ( -this.m02() * this.m11() + this.m01() * this.m12() ) / det,\n              ( this.m12() * this.m20() - this.m10() * this.m22() ) / det,\n              ( -this.m02() * this.m20() + this.m00() * this.m22() ) / det,\n              ( this.m02() * this.m10() - this.m00() * this.m12() ) / det,\n              ( -this.m11() * this.m20() + this.m10() * this.m21() ) / det,\n              ( this.m01() * this.m20() - this.m00() * this.m21() ) / det,\n              ( -this.m01() * this.m10() + this.m00() * this.m11() ) / det,\n              Types.OTHER\n            );\n          }\n          else {\n            throw new Error( 'Matrix could not be inverted, determinant === 0' );\n          }\n          break;\n        default:\n          throw new Error( 'Matrix3.inverted with unknown type: ' + this.type );\n      }\n    },\n\n    timesMatrix: function( m ) {\n      // I * M === M * I === M (the identity)\n      if ( this.type === Types.IDENTITY || m.type === Types.IDENTITY ) {\n        return this.type === Types.IDENTITY ? m : this;\n      }\n\n      if ( this.type === m.type ) {\n        // currently two matrices of the same type will result in the same result type\n        if ( this.type === Types.TRANSLATION_2D ) {\n          // faster combination of translations\n          return Matrix3.createFromPool(\n            1, 0, this.m02() + m.m02(),\n            0, 1, this.m12() + m.m12(),\n            0, 0, 1, Types.TRANSLATION_2D );\n        }\n        else if ( this.type === Types.SCALING ) {\n          // faster combination of scaling\n          return Matrix3.createFromPool(\n            this.m00() * m.m00(), 0, 0,\n            0, this.m11() * m.m11(), 0,\n            0, 0, 1, Types.SCALING );\n        }\n      }\n\n      if ( this.type !== Types.OTHER && m.type !== Types.OTHER ) {\n        // currently two matrices that are anything but \"other\" are technically affine, and the result will be affine\n\n        // affine case\n        return Matrix3.createFromPool(\n          this.m00() * m.m00() + this.m01() * m.m10(),\n          this.m00() * m.m01() + this.m01() * m.m11(),\n          this.m00() * m.m02() + this.m01() * m.m12() + this.m02(),\n          this.m10() * m.m00() + this.m11() * m.m10(),\n          this.m10() * m.m01() + this.m11() * m.m11(),\n          this.m10() * m.m02() + this.m11() * m.m12() + this.m12(),\n          0, 0, 1, Types.AFFINE );\n      }\n\n      // general case\n      return Matrix3.createFromPool(\n        this.m00() * m.m00() + this.m01() * m.m10() + this.m02() * m.m20(),\n        this.m00() * m.m01() + this.m01() * m.m11() + this.m02() * m.m21(),\n        this.m00() * m.m02() + this.m01() * m.m12() + this.m02() * m.m22(),\n        this.m10() * m.m00() + this.m11() * m.m10() + this.m12() * m.m20(),\n        this.m10() * m.m01() + this.m11() * m.m11() + this.m12() * m.m21(),\n        this.m10() * m.m02() + this.m11() * m.m12() + this.m12() * m.m22(),\n        this.m20() * m.m00() + this.m21() * m.m10() + this.m22() * m.m20(),\n        this.m20() * m.m01() + this.m21() * m.m11() + this.m22() * m.m21(),\n        this.m20() * m.m02() + this.m21() * m.m12() + this.m22() * m.m22() );\n    },\n\n    /*---------------------------------------------------------------------------*\n     * Immutable operations (returns new form of a parameter)\n     *----------------------------------------------------------------------------*/\n\n    timesVector2: function( v ) {\n      var x = this.m00() * v.x + this.m01() * v.y + this.m02();\n      var y = this.m10() * v.x + this.m11() * v.y + this.m12();\n      return new dot.Vector2( x, y );\n    },\n\n    timesVector3: function( v ) {\n      var x = this.m00() * v.x + this.m01() * v.y + this.m02() * v.z;\n      var y = this.m10() * v.x + this.m11() * v.y + this.m12() * v.z;\n      var z = this.m20() * v.x + this.m21() * v.y + this.m22() * v.z;\n      return new dot.Vector3( x, y, z );\n    },\n\n    timesTransposeVector2: function( v ) {\n      var x = this.m00() * v.x + this.m10() * v.y;\n      var y = this.m01() * v.x + this.m11() * v.y;\n      return new dot.Vector2( x, y );\n    },\n\n    // TODO: this operation seems to not work for transformDelta2, should be vetted\n    timesRelativeVector2: function( v ) {\n      var x = this.m00() * v.x + this.m01() * v.y;\n      var y = this.m10() * v.y + this.m11() * v.y;\n      return new dot.Vector2( x, y );\n    },\n\n    /*---------------------------------------------------------------------------*\n     * Mutable operations (changes this matrix)\n     *----------------------------------------------------------------------------*/\n\n    // every mutable method goes through rowMajor\n    rowMajor: function( v00, v01, v02, v10, v11, v12, v20, v21, v22, type ) {\n      this.entries[ 0 ] = v00;\n      this.entries[ 1 ] = v10;\n      this.entries[ 2 ] = v20;\n      this.entries[ 3 ] = v01;\n      this.entries[ 4 ] = v11;\n      this.entries[ 5 ] = v21;\n      this.entries[ 6 ] = v02;\n      this.entries[ 7 ] = v12;\n      this.entries[ 8 ] = v22;\n\n      // TODO: consider performance of the affine check here\n      this.type = type === undefined ? ( ( v20 === 0 && v21 === 0 && v22 === 1 ) ? Types.AFFINE : Types.OTHER ) : type;\n      return this;\n    },\n\n    set: function( matrix ) {\n      return this.rowMajor(\n        matrix.m00(), matrix.m01(), matrix.m02(),\n        matrix.m10(), matrix.m11(), matrix.m12(),\n        matrix.m20(), matrix.m21(), matrix.m22(),\n        matrix.type );\n    },\n\n    setArray: function( array ) {\n      return this.rowMajor(\n        array[ 0 ], array[ 3 ], array[ 6 ],\n        array[ 1 ], array[ 4 ], array[ 7 ],\n        array[ 2 ], array[ 5 ], array[ 8 ] );\n    },\n\n    // component setters\n    set00: function( value ) {\n      this.entries[ 0 ] = value;\n      return this;\n    },\n    set01: function( value ) {\n      this.entries[ 3 ] = value;\n      return this;\n    },\n    set02: function( value ) {\n      this.entries[ 6 ] = value;\n      return this;\n    },\n    set10: function( value ) {\n      this.entries[ 1 ] = value;\n      return this;\n    },\n    set11: function( value ) {\n      this.entries[ 4 ] = value;\n      return this;\n    },\n    set12: function( value ) {\n      this.entries[ 7 ] = value;\n      return this;\n    },\n    set20: function( value ) {\n      this.entries[ 2 ] = value;\n      return this;\n    },\n    set21: function( value ) {\n      this.entries[ 5 ] = value;\n      return this;\n    },\n    set22: function( value ) {\n      this.entries[ 8 ] = value;\n      return this;\n    },\n\n    makeImmutable: function() {\n      this.rowMajor = function() {\n        throw new Error( 'Cannot modify immutable matrix' );\n      };\n      return this;\n    },\n\n    columnMajor: function( v00, v10, v20, v01, v11, v21, v02, v12, v22, type ) {\n      return this.rowMajor( v00, v01, v02, v10, v11, v12, v20, v21, v22, type );\n    },\n\n    add: function( m ) {\n      return this.rowMajor(\n        this.m00() + m.m00(), this.m01() + m.m01(), this.m02() + m.m02(),\n        this.m10() + m.m10(), this.m11() + m.m11(), this.m12() + m.m12(),\n        this.m20() + m.m20(), this.m21() + m.m21(), this.m22() + m.m22()\n      );\n    },\n\n    subtract: function( m ) {\n      return this.rowMajor(\n        this.m00() - m.m00(), this.m01() - m.m01(), this.m02() - m.m02(),\n        this.m10() - m.m10(), this.m11() - m.m11(), this.m12() - m.m12(),\n        this.m20() - m.m20(), this.m21() - m.m21(), this.m22() - m.m22()\n      );\n    },\n\n    transpose: function() {\n      return this.rowMajor(\n        this.m00(), this.m10(), this.m20(),\n        this.m01(), this.m11(), this.m21(),\n        this.m02(), this.m12(), this.m22(),\n        ( this.type === Types.IDENTITY || this.type === Types.SCALING ) ? this.type : undefined\n      );\n    },\n\n    negate: function() {\n      return this.rowMajor(\n        -this.m00(), -this.m01(), -this.m02(),\n        -this.m10(), -this.m11(), -this.m12(),\n        -this.m20(), -this.m21(), -this.m22()\n      );\n    },\n\n    invert: function() {\n      var det;\n\n      switch( this.type ) {\n        case Types.IDENTITY:\n          return this;\n        case Types.TRANSLATION_2D:\n          return this.rowMajor(\n            1, 0, -this.m02(),\n            0, 1, -this.m12(),\n            0, 0, 1, Types.TRANSLATION_2D );\n        case Types.SCALING:\n          return this.rowMajor(\n            1 / this.m00(), 0, 0,\n            0, 1 / this.m11(), 0,\n            0, 0, 1 / this.m22(), Types.SCALING );\n        case Types.AFFINE:\n          det = this.getDeterminant();\n          if ( det !== 0 ) {\n            return this.rowMajor(\n              ( -this.m12() * this.m21() + this.m11() * this.m22() ) / det,\n              ( this.m02() * this.m21() - this.m01() * this.m22() ) / det,\n              ( -this.m02() * this.m11() + this.m01() * this.m12() ) / det,\n              ( this.m12() * this.m20() - this.m10() * this.m22() ) / det,\n              ( -this.m02() * this.m20() + this.m00() * this.m22() ) / det,\n              ( this.m02() * this.m10() - this.m00() * this.m12() ) / det,\n              0, 0, 1, Types.AFFINE\n            );\n          }\n          else {\n            throw new Error( 'Matrix could not be inverted, determinant === 0' );\n          }\n          break;\n        case Types.OTHER:\n          det = this.getDeterminant();\n          if ( det !== 0 ) {\n            return this.rowMajor(\n              ( -this.m12() * this.m21() + this.m11() * this.m22() ) / det,\n              ( this.m02() * this.m21() - this.m01() * this.m22() ) / det,\n              ( -this.m02() * this.m11() + this.m01() * this.m12() ) / det,\n              ( this.m12() * this.m20() - this.m10() * this.m22() ) / det,\n              ( -this.m02() * this.m20() + this.m00() * this.m22() ) / det,\n              ( this.m02() * this.m10() - this.m00() * this.m12() ) / det,\n              ( -this.m11() * this.m20() + this.m10() * this.m21() ) / det,\n              ( this.m01() * this.m20() - this.m00() * this.m21() ) / det,\n              ( -this.m01() * this.m10() + this.m00() * this.m11() ) / det,\n              Types.OTHER\n            );\n          }\n          else {\n            throw new Error( 'Matrix could not be inverted, determinant === 0' );\n          }\n          break;\n        default:\n          throw new Error( 'Matrix3.inverted with unknown type: ' + this.type );\n      }\n    },\n\n    multiplyMatrix: function( m ) {\n      // M * I === M (the identity)\n      if ( m.type === Types.IDENTITY ) {\n        // no change needed\n        return this;\n      }\n\n      // I * M === M (the identity)\n      if ( this.type === Types.IDENTITY ) {\n        // copy the other matrix to us\n        return this.set( m );\n      }\n\n      if ( this.type === m.type ) {\n        // currently two matrices of the same type will result in the same result type\n        if ( this.type === Types.TRANSLATION_2D ) {\n          // faster combination of translations\n          return this.rowMajor(\n            1, 0, this.m02() + m.m02(),\n            0, 1, this.m12() + m.m12(),\n            0, 0, 1, Types.TRANSLATION_2D );\n        }\n        else if ( this.type === Types.SCALING ) {\n          // faster combination of scaling\n          return this.rowMajor(\n            this.m00() * m.m00(), 0, 0,\n            0, this.m11() * m.m11(), 0,\n            0, 0, 1, Types.SCALING );\n        }\n      }\n\n      if ( this.type !== Types.OTHER && m.type !== Types.OTHER ) {\n        // currently two matrices that are anything but \"other\" are technically affine, and the result will be affine\n\n        // affine case\n        return this.rowMajor(\n          this.m00() * m.m00() + this.m01() * m.m10(),\n          this.m00() * m.m01() + this.m01() * m.m11(),\n          this.m00() * m.m02() + this.m01() * m.m12() + this.m02(),\n          this.m10() * m.m00() + this.m11() * m.m10(),\n          this.m10() * m.m01() + this.m11() * m.m11(),\n          this.m10() * m.m02() + this.m11() * m.m12() + this.m12(),\n          0, 0, 1, Types.AFFINE );\n      }\n\n      // general case\n      return this.rowMajor(\n        this.m00() * m.m00() + this.m01() * m.m10() + this.m02() * m.m20(),\n        this.m00() * m.m01() + this.m01() * m.m11() + this.m02() * m.m21(),\n        this.m00() * m.m02() + this.m01() * m.m12() + this.m02() * m.m22(),\n        this.m10() * m.m00() + this.m11() * m.m10() + this.m12() * m.m20(),\n        this.m10() * m.m01() + this.m11() * m.m11() + this.m12() * m.m21(),\n        this.m10() * m.m02() + this.m11() * m.m12() + this.m12() * m.m22(),\n        this.m20() * m.m00() + this.m21() * m.m10() + this.m22() * m.m20(),\n        this.m20() * m.m01() + this.m21() * m.m11() + this.m22() * m.m21(),\n        this.m20() * m.m02() + this.m21() * m.m12() + this.m22() * m.m22() );\n    },\n\n    prependTranslation: function( x, y ) {\n      this.set02( this.m02() + x );\n      this.set12( this.m12() + y );\n\n      if ( this.type === Types.IDENTITY || this.type === Types.TRANSLATION_2D ) {\n        this.type = Types.TRANSLATION_2D;\n      }\n      else if ( this.type === Types.OTHER ) {\n        this.type = Types.OTHER;\n      }\n      else {\n        this.type = Types.AFFINE;\n      }\n      return this; // for chaining\n    },\n\n    setToIdentity: function() {\n      return this.rowMajor(\n        1, 0, 0,\n        0, 1, 0,\n        0, 0, 1,\n        Types.IDENTITY );\n    },\n\n    setToTranslation: function( x, y ) {\n      return this.rowMajor(\n        1, 0, x,\n        0, 1, y,\n        0, 0, 1,\n        Types.TRANSLATION_2D );\n    },\n\n    setToScale: function( x, y ) {\n      // allow using one parameter to scale everything\n      y = y === undefined ? x : y;\n\n      return this.rowMajor(\n        x, 0, 0,\n        0, y, 0,\n        0, 0, 1,\n        Types.SCALING );\n    },\n\n    // row major\n    setToAffine: function( m00, m01, m02, m10, m11, m12 ) {\n      return this.rowMajor( m00, m01, m02, m10, m11, m12, 0, 0, 1, Types.AFFINE );\n    },\n\n    // axis is a normalized Vector3, angle in radians.\n    setToRotationAxisAngle: function( axis, angle ) {\n      var c = Math.cos( angle );\n      var s = Math.sin( angle );\n      var C = 1 - c;\n\n      return this.rowMajor(\n        axis.x * axis.x * C + c, axis.x * axis.y * C - axis.z * s, axis.x * axis.z * C + axis.y * s,\n        axis.y * axis.x * C + axis.z * s, axis.y * axis.y * C + c, axis.y * axis.z * C - axis.x * s,\n        axis.z * axis.x * C - axis.y * s, axis.z * axis.y * C + axis.x * s, axis.z * axis.z * C + c,\n        Types.OTHER );\n    },\n\n    setToRotationX: function( angle ) {\n      var c = Math.cos( angle );\n      var s = Math.sin( angle );\n\n      return this.rowMajor(\n        1, 0, 0,\n        0, c, -s,\n        0, s, c,\n        Types.OTHER );\n    },\n\n    setToRotationY: function( angle ) {\n      var c = Math.cos( angle );\n      var s = Math.sin( angle );\n\n      return this.rowMajor(\n        c, 0, s,\n        0, 1, 0,\n        -s, 0, c,\n        Types.OTHER );\n    },\n\n    setToRotationZ: function( angle ) {\n      var c = Math.cos( angle );\n      var s = Math.sin( angle );\n\n      return this.rowMajor(\n        c, -s, 0,\n        s, c, 0,\n        0, 0, 1,\n        Types.AFFINE );\n    },\n\n    setToSVGMatrix: function( svgMatrix ) {\n      return this.rowMajor(\n        svgMatrix.a, svgMatrix.c, svgMatrix.e,\n        svgMatrix.b, svgMatrix.d, svgMatrix.f,\n        0, 0, 1,\n        Types.AFFINE );\n    },\n\n    // a rotation matrix that rotates A to B (Vector3 instances), by rotating about the axis A.cross( B ) -- Shortest path. ideally should be unit vectors\n    setRotationAToB: function( a, b ) {\n      // see http://graphics.cs.brown.edu/~jfh/papers/Moller-EBA-1999/paper.pdf for information on this implementation\n      var start = a;\n      var end = b;\n\n      var epsilon = 0.0001;\n\n      var e;\n      var h;\n      var f;\n\n      var v = start.cross( end );\n      e = start.dot( end );\n      f = ( e < 0 ) ? -e : e;\n\n      // if \"from\" and \"to\" vectors are nearly parallel\n      if ( f > 1.0 - epsilon ) {\n        var c1;\n        var c2;\n        var c3;\n\n        var x = new dot.Vector3(\n          ( start.x > 0.0 ) ? start.x : -start.x,\n          ( start.y > 0.0 ) ? start.y : -start.y,\n          ( start.z > 0.0 ) ? start.z : -start.z\n        );\n\n        if ( x.x < x.y ) {\n          if ( x.x < x.z ) {\n            x = dot.Vector3.X_UNIT;\n          }\n          else {\n            x = dot.Vector3.Z_UNIT;\n          }\n        }\n        else {\n          if ( x.y < x.z ) {\n            x = dot.Vector3.Y_UNIT;\n          }\n          else {\n            x = dot.Vector3.Z_UNIT;\n          }\n        }\n\n        var u = x.minus( start );\n        v = x.minus( end );\n\n        c1 = 2.0 / u.dot( u );\n        c2 = 2.0 / v.dot( v );\n        c3 = c1 * c2 * u.dot( v );\n\n        return this.rowMajor(\n          -c1 * u.x * u.x - c2 * v.x * v.x + c3 * v.x * u.x + 1,\n          -c1 * u.x * u.y - c2 * v.x * v.y + c3 * v.x * u.y,\n          -c1 * u.x * u.z - c2 * v.x * v.z + c3 * v.x * u.z,\n          -c1 * u.y * u.x - c2 * v.y * v.x + c3 * v.y * u.x,\n          -c1 * u.y * u.y - c2 * v.y * v.y + c3 * v.y * u.y + 1,\n          -c1 * u.y * u.z - c2 * v.y * v.z + c3 * v.y * u.z,\n          -c1 * u.z * u.x - c2 * v.z * v.x + c3 * v.z * u.x,\n          -c1 * u.z * u.y - c2 * v.z * v.y + c3 * v.z * u.y,\n          -c1 * u.z * u.z - c2 * v.z * v.z + c3 * v.z * u.z + 1\n        );\n      }\n      else {\n        // the most common case, unless \"start\"=\"end\", or \"start\"=-\"end\"\n        var hvx;\n        var hvz;\n        var hvxy;\n        var hvxz;\n        var hvyz;\n        h = 1.0 / ( 1.0 + e );\n        hvx = h * v.x;\n        hvz = h * v.z;\n        hvxy = hvx * v.y;\n        hvxz = hvx * v.z;\n        hvyz = hvz * v.y;\n\n        return this.rowMajor(\n          e + hvx * v.x, hvxy - v.z, hvxz + v.y,\n          hvxy + v.z, e + h * v.y * v.y, hvyz - v.x,\n          hvxz - v.y, hvyz + v.x, e + hvz * v.z\n        );\n      }\n    },\n\n    setTo32Bit: function() {\n      if ( window.Float32Array ) {\n        this.entries = new window.Float32Array( this.entries );\n      }\n      return this;\n    },\n\n    setTo64Bit: function() {\n      if ( window.Float64Array ) {\n        this.entries = new window.Float64Array( this.entries );\n      }\n      return this;\n    },\n\n    /*---------------------------------------------------------------------------*\n     * Mutable operations (changes the parameter)\n     *----------------------------------------------------------------------------*/\n\n    multiplyVector2: function( v ) {\n      return v.setXY(\n        this.m00() * v.x + this.m01() * v.y + this.m02(),\n        this.m10() * v.x + this.m11() * v.y + this.m12() );\n    },\n\n    multiplyVector3: function( v ) {\n      return v.setXYZ(\n        this.m00() * v.x + this.m01() * v.y + this.m02() * v.z,\n        this.m10() * v.x + this.m11() * v.y + this.m12() * v.z,\n        this.m20() * v.x + this.m21() * v.y + this.m22() * v.z );\n    },\n\n    multiplyTransposeVector2: function( v ) {\n      return v.setXY(\n        this.m00() * v.x + this.m10() * v.y,\n        this.m01() * v.x + this.m11() * v.y );\n    },\n\n    multiplyRelativeVector2: function( v ) {\n      return v.setXY(\n        this.m00() * v.x + this.m01() * v.y,\n        this.m10() * v.y + this.m11() * v.y );\n    },\n\n    // sets the transform of a Canvas 2D rendering context to the affine part of this matrix\n    canvasSetTransform: function( context ) {\n      context.setTransform(\n        // inlined array entries\n        this.entries[ 0 ],\n        this.entries[ 1 ],\n        this.entries[ 3 ],\n        this.entries[ 4 ],\n        this.entries[ 6 ],\n        this.entries[ 7 ]\n      );\n    },\n\n    // appends the affine part of this matrix to the Canvas 2D rendering context\n    canvasAppendTransform: function( context ) {\n      if ( this.type !== Types.IDENTITY ) {\n        context.transform(\n          // inlined array entries\n          this.entries[ 0 ],\n          this.entries[ 1 ],\n          this.entries[ 3 ],\n          this.entries[ 4 ],\n          this.entries[ 6 ],\n          this.entries[ 7 ]\n        );\n      }\n    }\n  };\n\n  Poolable.mixin( Matrix3, {\n\n    //The default factory creates an identity matrix\n    defaultFactory: function() { return new Matrix3(); },\n\n    constructorDuplicateFactory: function( pool ) {\n      return function( v00, v01, v02, v10, v11, v12, v20, v21, v22, type ) {\n        var instance = pool.length ? pool.pop() : new Matrix3();\n        return instance.rowMajor( v00, v01, v02, v10, v11, v12, v20, v21, v22, type );\n      };\n    }\n  } );\n\n  // create an immutable\n  Matrix3.IDENTITY = Matrix3.identity();\n  Matrix3.IDENTITY.makeImmutable();\n\n  Matrix3.X_REFLECTION = Matrix3.createFromPool(\n    -1, 0, 0,\n    0, 1, 0,\n    0, 0, 1,\n    Types.AFFINE );\n  Matrix3.X_REFLECTION.makeImmutable();\n\n  Matrix3.Y_REFLECTION = Matrix3.createFromPool(\n    1, 0, 0,\n    0, -1, 0,\n    0, 0, 1,\n    Types.AFFINE );\n  Matrix3.Y_REFLECTION.makeImmutable();\n\n  //Shortcut for translation times a matrix (without allocating a translation matrix), see scenery#119\n  Matrix3.translationTimesMatrix = function( x, y, m ) {\n    var type;\n    if ( m.type === Types.IDENTITY || m.type === Types.TRANSLATION_2D ) {\n      return Matrix3.createFromPool(\n        1, 0, m.m02() + x,\n        0, 1, m.m12() + y,\n        0, 0, 1,\n        Types.TRANSLATION_2D );\n    }\n    else if ( m.type === Types.OTHER ) {\n      type = Types.OTHER;\n    }\n    else {\n      type = Types.AFFINE;\n    }\n    return Matrix3.createFromPool(\n      m.m00(), m.m01(), m.m02() + x,\n      m.m10(), m.m11(), m.m12() + y,\n      m.m20(), m.m21(), m.m22(),\n      type );\n  };\n\n  Matrix3.printer = {\n    print: function( matrix ) {\n      console.log( matrix.toString() );\n    }\n  };\n\n  return Matrix3;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Quadratic Bezier segment\n *\n * Good reference: http://cagd.cs.byu.edu/~557/text/ch2.pdf\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'KITE/segments/Quadratic',['require','PHET_CORE/inherit','DOT/Bounds2','DOT/Matrix3','DOT/Util','DOT/Util','KITE/kite','KITE/segments/Segment'],function( require ) {\n  'use strict';\n\n  var inherit = require( 'PHET_CORE/inherit' );\n  var Bounds2 = require( 'DOT/Bounds2' );\n  var Matrix3 = require( 'DOT/Matrix3' );\n  var solveQuadraticRootsReal = require( 'DOT/Util' ).solveQuadraticRootsReal;\n  var arePointsCollinear = require( 'DOT/Util' ).arePointsCollinear;\n\n  var kite = require( 'KITE/kite' );\n  var Segment = require( 'KITE/segments/Segment' );\n\n  function Quadratic( start, control, end ) {\n    Segment.call( this );\n\n    this._start = start;\n    this._control = control;\n    this._end = end;\n\n    this.invalidate();\n  }\n\n  kite.register( 'Quadratic', Quadratic );\n\n  inherit( Segment, Quadratic, {\n\n    degree: 2,\n\n    // @public - Clears cached information, should be called when any of the 'constructor arguments' are mutated.\n    invalidate: function() {\n      // Lazily-computed derived information\n      this._startTangent = null; // {Vector2 | null}\n      this._endTangent = null; // {Vector2 | null}\n      this._tCriticalX = null; // {number | null} T where x-derivative is 0 (replaced with NaN if not in range)\n      this._tCriticalY = null; // {number | null} T where y-derivative is 0 (replaced with NaN if not in range)\n\n      this._bounds = null; // {Bounds2 | null}\n\n      this.trigger0( 'invalidated' );\n    },\n\n    getStartTangent: function() {\n      if ( this._startTangent === null ) {\n        var controlIsStart = this._start.equals( this._control );\n        // TODO: allocation reduction\n        this._startTangent = controlIsStart ?\n                             this._end.minus( this._start ).normalized() :\n                             this._control.minus( this._start ).normalized();\n      }\n      return this._startTangent;\n    },\n    get startTangent() { return this.getStartTangent(); },\n\n    getEndTangent: function() {\n      if ( this._endTangent === null ) {\n        var controlIsEnd = this._end.equals( this._control );\n        // TODO: allocation reduction\n        this._endTangent = controlIsEnd ?\n                           this._end.minus( this._start ).normalized() :\n                           this._end.minus( this._control ).normalized();\n      }\n      return this._endTangent;\n    },\n    get endTangent() { return this.getEndTangent(); },\n\n    getTCriticalX: function() {\n      // compute x where the derivative is 0 (used for bounds and other things)\n      if ( this._tCriticalX === null ) {\n        this._tCriticalX = Quadratic.extremaT( this._start.x, this._control.x, this._end.x );\n      }\n      return this._tCriticalX;\n    },\n    get tCriticalX() { return this.getTCriticalX(); },\n\n    getTCriticalY: function() {\n      // compute y where the derivative is 0 (used for bounds and other things)\n      if ( this._tCriticalY === null ) {\n        this._tCriticalY = Quadratic.extremaT( this._start.y, this._control.y, this._end.y );\n      }\n      return this._tCriticalY;\n    },\n    get tCriticalY() { return this.getTCriticalY(); },\n\n    getNondegenerateSegments: function() {\n      var start = this._start;\n      var control = this._control;\n      var end = this._end;\n\n      var startIsEnd = start.equals( end );\n      var startIsControl = start.equals( control );\n      var endIsControl = start.equals( control );\n\n      if ( startIsEnd && startIsControl ) {\n        // all same points\n        return [];\n      }\n      else if ( startIsEnd ) {\n        // this is a special collinear case, we basically line out to the farthest point and back\n        var halfPoint = this.positionAt( 0.5 );\n        return [\n          new kite.Line( start, halfPoint ),\n          new kite.Line( halfPoint, end )\n        ];\n      }\n      else if ( arePointsCollinear( start, control, end ) ) {\n        // if they are collinear, we can reduce to start->control and control->end, or if control is between, just one line segment\n        // also, start !== end (handled earlier)\n        if ( startIsControl || endIsControl ) {\n          // just a line segment!\n          return [ new kite.Line( start, end ) ]; // no extra nondegenerate check since start !== end\n        }\n        // now control point must be unique. we check to see if our rendered path will be outside of the start->end line segment\n        var delta = end.minus( start );\n        var p1d = control.minus( start ).dot( delta.normalized ) / delta.magnitude();\n        var t = Quadratic.extremaT( 0, p1d, 1 );\n        if ( !isNaN( t ) && t > 0 && t < 1 ) {\n          // we have a local max inside the range, indicating that our extrema point is outside of start->end\n          // we'll line to and from it\n          var pt = this.positionAt( t );\n          return _.flatten( [\n            new kite.Line( start, pt ).getNondegenerateSegments(),\n            new kite.Line( pt, end ).getNondegenerateSegments()\n          ] );\n        }\n        else {\n          // just provide a line segment, our rendered path doesn't go outside of this\n          return [ new kite.Line( start, end ) ]; // no extra nondegenerate check since start !== end\n        }\n      }\n      else {\n        return [ this ];\n      }\n    },\n\n    getBounds: function() {\n      // calculate our temporary guaranteed lower bounds based on the end points\n      if ( this._bounds === null ) {\n        this._bounds = new Bounds2( Math.min( this._start.x, this._end.x ), Math.min( this._start.y, this._end.y ), Math.max( this._start.x, this._end.x ), Math.max( this._start.y, this._end.y ) );\n\n        // compute x and y where the derivative is 0, so we can include this in the bounds\n        var tCriticalX = this.getTCriticalX();\n        var tCriticalY = this.getTCriticalY();\n\n        if ( !isNaN( tCriticalX ) && tCriticalX > 0 && tCriticalX < 1 ) {\n          this._bounds = this._bounds.withPoint( this.positionAt( tCriticalX ) );\n        }\n        if ( !isNaN( tCriticalY ) && tCriticalY > 0 && tCriticalY < 1 ) {\n          this._bounds = this._bounds.withPoint( this.positionAt( tCriticalY ) );\n        }\n      }\n      return this._bounds;\n    },\n    get bounds() { return this.getBounds(); },\n\n    // can be described from t=[0,1] as: (1-t)^2 start + 2(1-t)t control + t^2 end\n    positionAt: function( t ) {\n      var mt = 1 - t;\n      // TODO: allocation reduction\n      return this._start.times( mt * mt ).plus( this._control.times( 2 * mt * t ) ).plus( this._end.times( t * t ) );\n    },\n\n    // derivative: 2(1-t)( control - start ) + 2t( end - control )\n    tangentAt: function( t ) {\n      // TODO: allocation reduction\n      return this._control.minus( this._start ).times( 2 * ( 1 - t ) ).plus( this._end.minus( this._control ).times( 2 * t ) );\n    },\n\n    curvatureAt: function( t ) {\n      // see http://cagd.cs.byu.edu/~557/text/ch2.pdf p31\n      // TODO: remove code duplication with Cubic\n      var epsilon = 0.0000001;\n      if ( Math.abs( t - 0.5 ) > 0.5 - epsilon ) {\n        var isZero = t < 0.5;\n        var p0 = isZero ? this._start : this._end;\n        var p1 = this._control;\n        var p2 = isZero ? this._end : this._start;\n        var d10 = p1.minus( p0 );\n        var a = d10.magnitude();\n        var h = ( isZero ? -1 : 1 ) * d10.perpendicular().normalized().dot( p2.minus( p1 ) );\n        return ( h * ( this.degree - 1 ) ) / ( this.degree * a * a );\n      }\n      else {\n        return this.subdivided( t, true )[ 0 ].curvatureAt( 1 );\n      }\n    },\n\n    // see http://www.visgraf.impa.br/sibgrapi96/trabs/pdf/a14.pdf\n    // and http://math.stackexchange.com/questions/12186/arc-length-of-bezier-curves for curvature / arc length\n\n    offsetTo: function( r, reverse ) {\n      // TODO: implement more accurate method at http://www.antigrain.com/research/adaptive_bezier/index.html\n      // TODO: or more recently (and relevantly): http://www.cis.usouthal.edu/~hain/general/Publications/Bezier/BezierFlattening.pdf\n      var curves = [ this ];\n\n      // subdivide this curve\n      var depth = 5; // generates 2^depth curves\n      for ( var i = 0; i < depth; i++ ) {\n        curves = _.flatten( _.map( curves, function( curve ) {\n          return curve.subdivided( 0.5, true );\n        } ) );\n      }\n\n      var offsetCurves = _.map( curves, function( curve ) { return curve.approximateOffset( r ); } );\n\n      if ( reverse ) {\n        offsetCurves.reverse();\n        offsetCurves = _.map( offsetCurves, function( curve ) { return curve.reversed( true ); } );\n      }\n\n      return offsetCurves;\n    },\n\n    subdivided: function( t ) {\n      // de Casteljau method\n      var leftMid = this._start.blend( this._control, t );\n      var rightMid = this._control.blend( this._end, t );\n      var mid = leftMid.blend( rightMid, t );\n      return [\n        new kite.Quadratic( this._start, leftMid, mid ),\n        new kite.Quadratic( mid, rightMid, this._end )\n      ];\n    },\n\n    // elevation of this quadratic Bezier curve to a cubic Bezier curve\n    degreeElevated: function() {\n      // TODO: allocation reduction\n      return new kite.Cubic(\n        this._start,\n        this._start.plus( this._control.timesScalar( 2 ) ).dividedScalar( 3 ),\n        this._end.plus( this._control.timesScalar( 2 ) ).dividedScalar( 3 ),\n        this._end\n      );\n    },\n\n    reversed: function() {\n      return new kite.Quadratic( this._end, this._control, this._start );\n    },\n\n    approximateOffset: function( r ) {\n      return new kite.Quadratic(\n        this._start.plus( ( this._start.equals( this._control ) ? this._end.minus( this._start ) : this._control.minus( this._start ) ).perpendicular().normalized().times( r ) ),\n        this._control.plus( this._end.minus( this._start ).perpendicular().normalized().times( r ) ),\n        this._end.plus( ( this._end.equals( this._control ) ? this._end.minus( this._start ) : this._end.minus( this._control ) ).perpendicular().normalized().times( r ) )\n      );\n    },\n\n    getSVGPathFragment: function() {\n      return 'Q ' + kite.svgNumber( this._control.x ) + ' ' + kite.svgNumber( this._control.y ) + ' ' +\n             kite.svgNumber( this._end.x ) + ' ' + kite.svgNumber( this._end.y );\n    },\n\n    strokeLeft: function( lineWidth ) {\n      return this.offsetTo( -lineWidth / 2, false );\n    },\n\n    strokeRight: function( lineWidth ) {\n      return this.offsetTo( lineWidth / 2, true );\n    },\n\n    getInteriorExtremaTs: function() {\n      // TODO: we assume here we are reduce, so that a criticalX doesn't equal a criticalY?\n      var result = [];\n      var epsilon = 0.0000000001; // TODO: general kite epsilon?\n\n      var criticalX = this.getTCriticalX();\n      var criticalY = this.getTCriticalY();\n\n      if ( !isNaN( criticalX ) && criticalX > epsilon && criticalX < 1 - epsilon ) {\n        result.push( this.tCriticalX );\n      }\n      if ( !isNaN( criticalY ) && criticalY > epsilon && criticalY < 1 - epsilon ) {\n        result.push( this.tCriticalY );\n      }\n      return result.sort();\n    },\n\n    // returns the resultant winding number of this ray intersecting this segment.\n    intersection: function( ray ) {\n      var self = this;\n      var result = [];\n\n      // find the rotation that will put our ray in the direction of the x-axis so we can only solve for y=0 for intersections\n      var inverseMatrix = Matrix3.rotation2( -ray.direction.angle() ).timesMatrix( Matrix3.translation( -ray.position.x, -ray.position.y ) );\n\n      var p0 = inverseMatrix.timesVector2( this._start );\n      var p1 = inverseMatrix.timesVector2( this._control );\n      var p2 = inverseMatrix.timesVector2( this._end );\n\n      //(1-t)^2 start + 2(1-t)t control + t^2 end\n      var a = p0.y - 2 * p1.y + p2.y;\n      var b = -2 * p0.y + 2 * p1.y;\n      var c = p0.y;\n\n      var ts = solveQuadraticRootsReal( a, b, c );\n\n      _.each( ts, function( t ) {\n        if ( t >= 0 && t <= 1 ) {\n          var hitPoint = self.positionAt( t );\n          var unitTangent = self.tangentAt( t ).normalized();\n          var perp = unitTangent.perpendicular();\n          var toHit = hitPoint.minus( ray.position );\n\n          // make sure it's not behind the ray\n          if ( toHit.dot( ray.direction ) > 0 ) {\n            result.push( {\n              distance: toHit.magnitude(),\n              point: hitPoint,\n              normal: perp.dot( ray.direction ) > 0 ? perp.negated() : perp,\n              wind: ray.direction.perpendicular().dot( unitTangent ) < 0 ? 1 : -1\n            } );\n          }\n        }\n      } );\n      return result;\n    },\n\n    windingIntersection: function( ray ) {\n      var wind = 0;\n      var hits = this.intersection( ray );\n      _.each( hits, function( hit ) {\n        wind += hit.wind;\n      } );\n      return wind;\n    },\n\n    // assumes the current position is at start\n    writeToContext: function( context ) {\n      context.quadraticCurveTo( this._control.x, this._control.y, this._end.x, this._end.y );\n    },\n\n    transformed: function( matrix ) {\n      return new kite.Quadratic( matrix.timesVector2( this._start ), matrix.timesVector2( this._control ), matrix.timesVector2( this._end ) );\n    },\n\n    // given the current curve parameterized by t, will return a curve parameterized by x where t = a * x + b\n    reparameterized: function( a, b ) {\n      // to the polynomial pt^2 + qt + r:\n      var p = this._start.plus( this._end.plus( this._control.timesScalar( -2 ) ) );\n      var q = this._control.minus( this._start ).timesScalar( 2 );\n      var r = this._start;\n\n      // to the polynomial alpha*x^2 + beta*x + gamma:\n      var alpha = p.timesScalar( a * a );\n      var beta = p.timesScalar( a * b ).timesScalar( 2 ).plus( q.timesScalar( a ) );\n      var gamma = p.timesScalar( b * b ).plus( q.timesScalar( b ) ).plus( r );\n\n      // back to the form start,control,end\n      return new kite.Quadratic( gamma, beta.timesScalar( 0.5 ).plus( gamma ), alpha.plus( beta ).plus( gamma ) );\n    }\n  } );\n\n  Segment.addInvalidatingGetterSetter( Quadratic, 'start' );\n  Segment.addInvalidatingGetterSetter( Quadratic, 'control' );\n  Segment.addInvalidatingGetterSetter( Quadratic, 'end' );\n\n  // one-dimensional solution to extrema\n  Quadratic.extremaT = function( start, control, end ) {\n    // compute t where the derivative is 0 (used for bounds and other things)\n    var divisorX = 2 * ( end - 2 * control + start );\n    if ( divisorX !== 0 ) {\n      return -2 * ( control - start ) / divisorX;\n    }\n    else {\n      return NaN;\n    }\n  };\n\n  return Quadratic;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Cubic Bezier segment.\n *\n * See http://www.cis.usouthal.edu/~hain/general/Publications/Bezier/BezierFlattening.pdf for info\n *\n * Good reference: http://cagd.cs.byu.edu/~557/text/ch2.pdf\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'KITE/segments/Cubic',['require','PHET_CORE/inherit','DOT/Bounds2','DOT/Vector2','DOT/Matrix3','DOT/Util','DOT/Util','DOT/Util','KITE/kite','KITE/segments/Segment','KITE/segments/Quadratic'],function( require ) {\n  'use strict';\n\n  var inherit = require( 'PHET_CORE/inherit' );\n  var Bounds2 = require( 'DOT/Bounds2' );\n  var Vector2 = require( 'DOT/Vector2' );\n  var Matrix3 = require( 'DOT/Matrix3' );\n  var solveQuadraticRootsReal = require( 'DOT/Util' ).solveQuadraticRootsReal;\n  var solveCubicRootsReal = require( 'DOT/Util' ).solveCubicRootsReal;\n  var arePointsCollinear = require( 'DOT/Util' ).arePointsCollinear;\n\n  var kite = require( 'KITE/kite' );\n  var Segment = require( 'KITE/segments/Segment' );\n  require( 'KITE/segments/Quadratic' );\n\n  var scratchVector1 = new Vector2();\n  var scratchVector2 = new Vector2();\n  var scratchVector3 = new Vector2();\n\n  /**\n   * @param {Vector2} start - Start point of the cubic bezier\n   * @param {Vector2} control1 - First control point\n   * @param {Vector2} control2 - Second control point\n   * @param {Vector2} end - End point of the cubic bezier\n   * @constructor\n   */\n  function Cubic( start, control1, control2, end ) {\n    Segment.call( this );\n\n    this._start = start;\n    this._control1 = control1;\n    this._control2 = control2;\n    this._end = end;\n\n    this.invalidate();\n  }\n\n  kite.register( 'Cubic', Cubic );\n\n  inherit( Segment, Cubic, {\n\n    degree: 3,\n\n    // @public - Clears cached information, should be called when any of the 'constructor arguments' are mutated.\n    invalidate: function() {\n      // Lazily-computed derived information\n      this._startTangent = null; // {Vector2 | null}\n      this._endTangent = null; // {Vector2 | null}\n      this._r = null; // {number | null}\n      this._s = null; // {number | null}\n\n      // Cusp-specific information\n      this._tCusp = null; // {number | null} - T value for a potential cusp\n      this._tDeterminant = null; // {number | null}\n      this._tInflection1 = null; // {number | null} - NaN if not applicable\n      this._tInflection2 = null; // {number | null} - NaN if not applicable\n      this._startQuadratic = null; // {Quadratic | null}\n      this._endQuadratic = null; // {Quadratic | null}\n\n      // T-values where X and Y (respectively) reach an extrema (not necessarily including 0 and 1)\n      this._xExtremaT = null; // {Array.<number> | null}\n      this._yExtremaT = null; // {Array.<number> | null}\n\n      this._bounds = null; // {Bounds2 | null}\n\n      this.trigger0( 'invalidated' );\n    },\n\n    getStartTangent: function() {\n      if ( this._startTangent === null ) {\n        this._startTangent = this.tangentAt( 0 ).normalized();\n      }\n      return this._startTangent;\n    },\n    get startTangent() { return this.getStartTangent(); },\n\n    getEndTangent: function() {\n      if ( this._endTangent === null ) {\n        this._endTangent = this.tangentAt( 1 ).normalized();\n      }\n      return this._endTangent;\n    },\n    get endTangent() { return this.getEndTangent(); },\n\n    getR: function() {\n      // from http://www.cis.usouthal.edu/~hain/general/Publications/Bezier/BezierFlattening.pdf\n      if ( this._r === null ) {\n        this._r = this._control1.minus( this._start ).normalized();\n      }\n      return this._r;\n    },\n    get r() { return this.getR(); },\n\n    getS: function() {\n      // from http://www.cis.usouthal.edu/~hain/general/Publications/Bezier/BezierFlattening.pdf\n      if ( this._s === null ) {\n        this._s = this.getR().perpendicular();\n      }\n      return this._s;\n    },\n    get s() { return this.getS(); },\n\n    getTCusp: function() {\n      if ( this._tCusp === null ) {\n        this.computeCuspInfo();\n      }\n      assert && assert( this._tCusp !== null );\n      return this._tCusp;\n    },\n    get tCusp() { return this.getTCusp(); },\n\n    getTDeterminant: function() {\n      if ( this._tDeterminant === null ) {\n        this.computeCuspInfo();\n      }\n      assert && assert( this._tDeterminant !== null );\n      return this._tDeterminant;\n    },\n    get tDeterminant() { return this.getTDeterminant(); },\n\n    getTInflection1: function() {\n      if ( this._tInflection1 === null ) {\n        this.computeCuspInfo();\n      }\n      assert && assert( this._tInflection1 !== null );\n      return this._tInflection1;\n    },\n    get tInflection1() { return this.getTInflection1(); },\n\n    getTInflection2: function() {\n      if ( this._tInflection2 === null ) {\n        this.computeCuspInfo();\n      }\n      assert && assert( this._tInflection2 !== null );\n      return this._tInflection2;\n    },\n    get tInflection2() { return this.getTInflection2(); },\n\n    getStartQuadratic: function() {\n      if ( this._startQuadratic === null ) {\n        this.computeCuspSegments();\n      }\n      assert && assert( this._startQuadratic !== null );\n      return this._startQuadratic;\n    },\n    get startQuadratic() { return this.getStartQuadratic(); },\n\n    getEndQuadratic: function() {\n      if ( this._endQuadratic === null ) {\n        this.computeCuspSegments();\n      }\n      assert && assert( this._endQuadratic !== null );\n      return this._endQuadratic;\n    },\n    get endQuadratic() { return this.getEndQuadratic(); },\n\n    getXExtremaT: function() {\n      if ( this._xExtremaT === null ) {\n        this._xExtremaT = Cubic.extremaT( this._start.x, this._control1.x, this._control2.x, this._end.x );\n      }\n      return this._xExtremaT;\n    },\n    get xExtremaT() { return this.getXExtremaT(); },\n\n    getYExtremaT: function() {\n      if ( this._yExtremaT === null ) {\n        this._yExtremaT = Cubic.extremaT( this._start.y, this._control1.y, this._control2.y, this._end.y );\n      }\n      return this._yExtremaT;\n    },\n    get yExtremaT() { return this.getYExtremaT(); },\n\n    getBounds: function() {\n      if ( this._bounds === null ) {\n        this._bounds = Bounds2.NOTHING;\n        this._bounds = this._bounds.withPoint( this._start );\n        this._bounds = this._bounds.withPoint( this._end );\n\n        var cubic = this;\n        _.each( this.getXExtremaT(), function( t ) {\n          if ( t >= 0 && t <= 1 ) {\n            cubic._bounds = cubic._bounds.withPoint( cubic.positionAt( t ) );\n          }\n        } );\n        _.each( this.getYExtremaT(), function( t ) {\n          if ( t >= 0 && t <= 1 ) {\n            cubic._bounds = cubic._bounds.withPoint( cubic.positionAt( t ) );\n          }\n        } );\n\n        if ( this.hasCusp() ) {\n          this._bounds = this._bounds.withPoint( this.positionAt( this.getTCusp() ) );\n        }\n      }\n      return this._bounds;\n    },\n    get bounds() { return this.getBounds(); },\n\n    // t value for the cusp, and the related determinant and inflection points\n    computeCuspInfo: function() {\n      // from http://www.cis.usouthal.edu/~hain/general/Publications/Bezier/BezierFlattening.pdf\n      // TODO: allocation reduction\n      var a = this._start.times( -1 ).plus( this._control1.times( 3 ) ).plus( this._control2.times( -3 ) ).plus( this._end );\n      var b = this._start.times( 3 ).plus( this._control1.times( -6 ) ).plus( this._control2.times( 3 ) );\n      var c = this._start.times( -3 ).plus( this._control1.times( 3 ) );\n\n      var aPerp = a.perpendicular();\n      var bPerp = b.perpendicular();\n      var aPerpDotB = aPerp.dot( b );\n\n      this._tCusp = -0.5 * ( aPerp.dot( c ) / aPerpDotB );\n      this._tDeterminant = this._tCusp * this._tCusp - ( 1 / 3 ) * ( bPerp.dot( c ) / aPerpDotB );\n      if ( this._tDeterminant >= 0 ) {\n        var sqrtDet = Math.sqrt( this._tDeterminant );\n        this._tInflection1 = this._tCusp - sqrtDet;\n        this._tInflection2 = this._tCusp + sqrtDet;\n      }\n      else {\n        this._tInflection1 = NaN;\n        this._tInflection2 = NaN;\n      }\n    },\n\n    // the cusp allows us to split into 2 quadratic Bezier curves\n    computeCuspSegments: function() {\n      if ( this.hasCusp() ) {\n        // if there is a cusp, we'll split at the cusp into two quadratic bezier curves.\n        // see http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.94.8088&rep=rep1&type=pdf (Singularities of rational Bezier curves - J Monterde, 2001)\n        var subdividedAtCusp = this.subdivided( this.getTCusp );\n        this._startQuadratic = new kite.Quadratic( subdividedAtCusp[ 0 ].start, subdividedAtCusp[ 0 ].control1, subdividedAtCusp[ 0 ].end, false );\n        this._endQuadratic = new kite.Quadratic( subdividedAtCusp[ 1 ].start, subdividedAtCusp[ 1 ].control2, subdividedAtCusp[ 1 ].end, false );\n      }\n      else {\n        this._startQuadratic = null;\n        this._endQuadratic = null;\n      }\n    },\n\n    getNondegenerateSegments: function() {\n      var self = this;\n\n      var start = this._start;\n      var control1 = this._control1;\n      var control2 = this._control2;\n      var end = this._end;\n\n      var reduced = this.degreeReduced( 1e-9 );\n\n      if ( start.equals( end ) && start.equals( control1 ) && start.equals( control2 ) ) {\n        // degenerate point\n        return [];\n      }\n      else if ( this.hasCusp() ) {\n        return _.flatten( [\n          this._startQuadratic.getNondegenerateSegments(),\n          this._endQuadratic.getNondegenerateSegments()\n        ] );\n      }\n      else if ( reduced ) {\n        // if we can reduce to a quadratic Bezier, always do this (and make sure it is non-degenerate)\n        return reduced.getNondegenerateSegments();\n      }\n      else if ( arePointsCollinear( start, control1, end ) && arePointsCollinear( start, control2, end ) ) {\n        var extremaPoints = this.getXExtremaT().concat( this.getYExtremaT() ).sort().map( function( t ) {\n          return self.positionAt( t );\n        } );\n\n        var segments = [];\n        var lastPoint = start;\n        if ( extremaPoints.length ) {\n          segments.push( new kite.Line( start, extremaPoints[ 0 ] ) );\n          lastPoint = extremaPoints[ 0 ];\n        }\n        for ( var i = 1; i < extremaPoints.length; i++ ) {\n          segments.push( new kite.Line( extremaPoints[ i - 1 ], extremaPoints[ i ] ) );\n          lastPoint = extremaPoints[ i ];\n        }\n        segments.push( new kite.Line( lastPoint, end ) );\n\n        return _.flatten( segments.map( function( segment ) { return segment.getNondegenerateSegments(); } ), true );\n      }\n      else {\n        return [ this ];\n      }\n    },\n\n    hasCusp: function() {\n      var tCusp = this.getTCusp();\n\n      var epsilon = 1e-7; // TODO: make this available to change?\n      return this.tangentAt( tCusp ).magnitude() < epsilon && tCusp >= 0 && tCusp <= 1;\n    },\n\n    // position: (1 - t)^3*start + 3*(1 - t)^2*t*control1 + 3*(1 - t) t^2*control2 + t^3*end\n    positionAt: function( t ) {\n      var mt = 1 - t;\n      return this._start.times( mt * mt * mt ).plus( this._control1.times( 3 * mt * mt * t ) ).plus( this._control2.times( 3 * mt * t * t ) ).plus( this._end.times( t * t * t ) );\n    },\n\n    // derivative: -3 p0 (1 - t)^2 + 3 p1 (1 - t)^2 - 6 p1 (1 - t) t + 6 p2 (1 - t) t - 3 p2 t^2 + 3 p3 t^2\n    tangentAt: function( t ) {\n      var mt = 1 - t;\n      var result = new Vector2();\n      return result.set( this._start ).multiplyScalar( -3 * mt * mt )\n        .add( scratchVector1.set( this._control1 ).multiplyScalar( 3 * mt * mt - 6 * mt * t ) )\n        .add( scratchVector1.set( this._control2 ).multiplyScalar( 6 * mt * t - 3 * t * t ) )\n        .add( scratchVector1.set( this._end ).multiplyScalar( 3 * t * t ) );\n    },\n\n    curvatureAt: function( t ) {\n      // see http://cagd.cs.byu.edu/~557/text/ch2.pdf p31\n      // TODO: remove code duplication with Quadratic\n      var epsilon = 0.0000001;\n      if ( Math.abs( t - 0.5 ) > 0.5 - epsilon ) {\n        var isZero = t < 0.5;\n        var p0 = isZero ? this._start : this._end;\n        var p1 = isZero ? this._control1 : this._control2;\n        var p2 = isZero ? this._control2 : this._control1;\n        var d10 = p1.minus( p0 );\n        var a = d10.magnitude();\n        var h = ( isZero ? -1 : 1 ) * d10.perpendicular().normalized().dot( p2.minus( p1 ) );\n        return ( h * ( this.degree - 1 ) ) / ( this.degree * a * a );\n      }\n      else {\n        return this.subdivided( t )[ 0 ].curvatureAt( 1 );\n      }\n    },\n\n    toRS: function( point ) {\n      var firstVector = point.minus( this._start );\n      return new Vector2( firstVector.dot( this.getR() ), firstVector.dot( this.getS() ) );\n    },\n\n    subdivided: function( t ) {\n      // de Casteljau method\n      // TODO: add a 'bisect' or 'between' method for vectors?\n      var left = this._start.blend( this._control1, t );\n      var right = this._control2.blend( this._end, t );\n      var middle = this._control1.blend( this._control2, t );\n      var leftMid = left.blend( middle, t );\n      var rightMid = middle.blend( right, t );\n      var mid = leftMid.blend( rightMid, t );\n      return [\n        new kite.Cubic( this._start, left, leftMid, mid ),\n        new kite.Cubic( mid, rightMid, right, this._end )\n      ];\n    },\n\n    offsetTo: function( r, reverse ) {\n      // TODO: implement more accurate method at http://www.antigrain.com/research/adaptive_bezier/index.html\n      // TODO: or more recently (and relevantly): http://www.cis.usouthal.edu/~hain/general/Publications/Bezier/BezierFlattening.pdf\n\n      // how many segments to create (possibly make this more adaptive?)\n      var quantity = 32;\n\n      var points = [];\n      var result = [];\n      for ( var i = 0; i < quantity; i++ ) {\n        var t = i / ( quantity - 1 );\n        if ( reverse ) {\n          t = 1 - t;\n        }\n\n        points.push( this.positionAt( t ).plus( this.tangentAt( t ).perpendicular().normalized().times( r ) ) );\n        if ( i > 0 ) {\n          result.push( new kite.Line( points[ i - 1 ], points[ i ] ) );\n        }\n      }\n\n      return result;\n    },\n\n    getSVGPathFragment: function() {\n      return 'C ' + kite.svgNumber( this._control1.x ) + ' ' + kite.svgNumber( this._control1.y ) + ' ' +\n             kite.svgNumber( this._control2.x ) + ' ' + kite.svgNumber( this._control2.y ) + ' ' +\n             kite.svgNumber( this._end.x ) + ' ' + kite.svgNumber( this._end.y );\n    },\n\n    strokeLeft: function( lineWidth ) {\n      return this.offsetTo( -lineWidth / 2, false );\n    },\n\n    strokeRight: function( lineWidth ) {\n      return this.offsetTo( lineWidth / 2, true );\n    },\n\n    getInteriorExtremaTs: function() {\n      var ts = this.getXExtremaT().concat( this.getYExtremaT() );\n      var result = [];\n      _.each( ts, function( t ) {\n        var epsilon = 0.0000000001; // TODO: general kite epsilon?\n        if ( t > epsilon && t < 1 - epsilon ) {\n          // don't add duplicate t values\n          if ( _.every( result, function( otherT ) { return Math.abs( t - otherT ) > epsilon; } ) ) {\n            result.push( t );\n          }\n        }\n      } );\n      return result.sort();\n    },\n\n    // returns the resultant winding number of this ray intersecting this segment.\n    intersection: function( ray ) {\n      var self = this;\n      var result = [];\n\n      // find the rotation that will put our ray in the direction of the x-axis so we can only solve for y=0 for intersections\n      var inverseMatrix = Matrix3.rotation2( -ray.direction.angle() ).timesMatrix( Matrix3.translation( -ray.position.x, -ray.position.y ) );\n\n      var p0 = inverseMatrix.timesVector2( this._start );\n      var p1 = inverseMatrix.timesVector2( this._control1 );\n      var p2 = inverseMatrix.timesVector2( this._control2 );\n      var p3 = inverseMatrix.timesVector2( this._end );\n\n      // polynomial form of cubic: start + (3 control1 - 3 start) t + (-6 control1 + 3 control2 + 3 start) t^2 + (3 control1 - 3 control2 + end - start) t^3\n      var a = -p0.y + 3 * p1.y - 3 * p2.y + p3.y;\n      var b = 3 * p0.y - 6 * p1.y + 3 * p2.y;\n      var c = -3 * p0.y + 3 * p1.y;\n      var d = p0.y;\n\n      var ts = solveCubicRootsReal( a, b, c, d );\n\n      _.each( ts, function( t ) {\n        if ( t >= 0 && t <= 1 ) {\n          var hitPoint = self.positionAt( t );\n          var unitTangent = self.tangentAt( t ).normalized();\n          var perp = unitTangent.perpendicular();\n          var toHit = hitPoint.minus( ray.position );\n\n          // make sure it's not behind the ray\n          if ( toHit.dot( ray.direction ) > 0 ) {\n            result.push( {\n              distance: toHit.magnitude(),\n              point: hitPoint,\n              normal: perp.dot( ray.direction ) > 0 ? perp.negated() : perp,\n              wind: ray.direction.perpendicular().dot( unitTangent ) < 0 ? 1 : -1\n            } );\n          }\n        }\n      } );\n      return result;\n    },\n\n    windingIntersection: function( ray ) {\n      var wind = 0;\n      var hits = this.intersection( ray );\n      _.each( hits, function( hit ) {\n        wind += hit.wind;\n      } );\n      return wind;\n    },\n\n    // assumes the current position is at start\n    writeToContext: function( context ) {\n      context.bezierCurveTo( this._control1.x, this._control1.y, this._control2.x, this._control2.y, this._end.x, this._end.y );\n    },\n\n    transformed: function( matrix ) {\n      return new kite.Cubic( matrix.timesVector2( this._start ), matrix.timesVector2( this._control1 ), matrix.timesVector2( this._control2 ), matrix.timesVector2( this._end ) );\n    },\n\n    // returns a degree-reduced quadratic Bezier if possible, otherwise it returns null\n    degreeReduced: function( epsilon ) {\n      epsilon = epsilon || 0; // if not provided, use an exact version\n      var controlA = scratchVector1.set( this._control1 ).multiplyScalar( 3 ).subtract( this._start ).divideScalar( 2 );\n      var controlB = scratchVector2.set( this._control2 ).multiplyScalar( 3 ).subtract( this._end ).divideScalar( 2 );\n      var difference = scratchVector3.set( controlA ).subtract( controlB );\n      if ( difference.magnitude() <= epsilon ) {\n        return new kite.Quadratic(\n          this._start,\n          controlA.average( controlB ), // average the control points for stability. they should be almost identical\n          this._end\n        );\n      }\n      else {\n        // the two options for control points are too far away, this curve isn't easily reducible.\n        return null;\n      }\n    }\n\n    // returns the resultant winding number of this ray intersecting this segment.\n    // windingIntersection: function( ray ) {\n    //   // find the rotation that will put our ray in the direction of the x-axis so we can only solve for y=0 for intersections\n    //   var inverseMatrix = Matrix3.rotation2( -ray.direction.angle() );\n    //   assert && assert( inverseMatrix.timesVector2( ray.direction ).x > 0.99 ); // verify that we transform the unit vector to the x-unit\n\n    //   var y0 = inverseMatrix.timesVector2( this._start ).y;\n    //   var y1 = inverseMatrix.timesVector2( this._control1 ).y;\n    //   var y2 = inverseMatrix.timesVector2( this._control2 ).y;\n    //   var y3 = inverseMatrix.timesVector2( this._end ).y;\n\n    //   // polynomial form of cubic: start + (3 control1 - 3 start) t + (-6 control1 + 3 control2 + 3 start) t^2 + (3 control1 - 3 control2 + end - start) t^3\n    //   var a = -y0 + 3 * y1 - 3 * y2 + y3;\n    //   var b = 3 * y0 - 6 * y1 + 3 * y2;\n    //   var c = -3 * y0 + 3 * y1;\n    //   var d = y0;\n\n    //   // solve cubic roots\n    //   var ts = solveCubicRootsReal( a, b, c, d );\n\n    //   var result = 0;\n\n    //   // for each hit\n    //   _.each( ts, function( t ) {\n    //     if ( t >= 0 && t <= 1 ) {\n    //       result += ray.direction.perpendicular().dot( this.tangentAt( t ) ) < 0 ? 1 : -1;\n    //     }\n    //   } );\n\n    //   return result;\n    // }\n  } );\n\n  Segment.addInvalidatingGetterSetter( Cubic, 'start' );\n  Segment.addInvalidatingGetterSetter( Cubic, 'control1' );\n  Segment.addInvalidatingGetterSetter( Cubic, 'control2' );\n  Segment.addInvalidatingGetterSetter( Cubic, 'end' );\n\n  // finds what t values the cubic extrema are at (if any). This is just the 1-dimensional case, used for multiple purposes\n  Cubic.extremaT = function( v0, v1, v2, v3 ) {\n    if ( v0 === v1 && v0 === v2 && v0 === v3 ) {\n      return [];\n    }\n\n    // coefficients of derivative\n    var a = -3 * v0 + 9 * v1 - 9 * v2 + 3 * v3;\n    var b = 6 * v0 - 12 * v1 + 6 * v2;\n    var c = -3 * v0 + 3 * v1;\n\n    return solveQuadraticRootsReal( a, b, c );\n  };\n\n  return Cubic;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Forward and inverse transforms with 3x3 matrices. Methods starting with 'transform' will apply the transform from our\n * primary matrix, while methods starting with 'inverse' will apply the transform from the inverse of our matrix.\n *\n * Generally, this means transform.inverseThing( transform.transformThing( thing ) ).equals( thing ).\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/Transform3',['require','PHET_CORE/inherit','AXON/Events','DOT/dot','DOT/Matrix3','DOT/Vector2','DOT/Ray2'],function( require ) {\n  'use strict';\n\n  var inherit = require( 'PHET_CORE/inherit' );\n  var Events = require( 'AXON/Events' );\n  var dot = require( 'DOT/dot' );\n\n  require( 'DOT/Matrix3' );\n  require( 'DOT/Vector2' );\n  require( 'DOT/Ray2' );\n\n  var scratchMatrix = new dot.Matrix3();\n\n  function checkMatrix( matrix ) {\n    return ( matrix instanceof dot.Matrix3 ) && matrix.isFinite();\n  }\n\n  /**\n   * Creates a transform based around an initial matrix.\n   * @constructor\n   * @public\n   *\n   * @param {Matrix3} matrix\n   */\n  function Transform3( matrix ) {\n    Events.call( this );\n\n    // @private {Matrix3} - The primary matrix used for the transform\n    this.matrix = dot.Matrix3.IDENTITY.copy();\n\n    // @private {Matrix3} - The inverse of the primary matrix, computed lazily\n    this.inverse = dot.Matrix3.IDENTITY.copy();\n\n    // @private {Matrix3} - The transpose of the primary matrix, computed lazily\n    this.matrixTransposed = dot.Matrix3.IDENTITY.copy();\n\n    // @private {Matrix3} - The inverse of the transposed primary matrix, computed lazily\n    this.inverseTransposed = dot.Matrix3.IDENTITY.copy();\n\n\n    // @private {boolean} - Whether this.inverse has been computed based on the latest primary matrix\n    this.inverseValid = true;\n\n    // @private {boolean} - Whether this.matrixTransposed has been computed based on the latest primary matrix\n    this.transposeValid = true;\n\n    // @private {boolean} - Whether this.inverseTransposed has been computed based on the latest primary matrix\n    this.inverseTransposeValid = true;\n\n    if ( matrix ) {\n      this.setMatrix( matrix );\n    }\n\n    phetAllocation && phetAllocation( 'Transform3' );\n  }\n\n  dot.register( 'Transform3', Transform3 );\n\n  inherit( Events, Transform3, {\n    /*---------------------------------------------------------------------------*\n     * mutators\n     *---------------------------------------------------------------------------*/\n\n    /**\n     * Sets the value of the primary matrix directly from a Matrix3. Does not change the Matrix3 instance of this\n     * Transform3.\n     * @public\n     *\n     * @param {Matrix3} matrix\n     */\n    setMatrix: function( matrix ) {\n      assert && assert( checkMatrix( matrix ), 'Matrix has NaNs, non-finite values, or isn\\'t a matrix!' );\n\n      // copy the matrix over to our matrix\n      this.matrix.set( matrix );\n\n      // set flags and notify\n      this.invalidate();\n    },\n\n    /**\n     * This should be called after our internal matrix is changed. It marks the other dependent matrices as invalid,\n     * and sends out notifications of the change.\n     * @private\n     */\n    invalidate: function() {\n      // sanity check\n      assert && assert( this.matrix.isFinite() );\n\n      // dependent matrices now invalid\n      this.inverseValid = false;\n      this.transposeValid = false;\n      this.inverseTransposeValid = false;\n\n      this.trigger0( 'change' );\n    },\n\n    /**\n     * Modifies the primary matrix such that: this.matrix = matrix * this.matrix.\n     * @public\n     *\n     * @param {Matrix3} matrix\n     */\n    prepend: function( matrix ) {\n      assert && assert( checkMatrix( matrix ), 'Matrix has NaNs, non-finite values, or isn\\'t a matrix!' );\n\n      // In the absence of a prepend-multiply function in Matrix3, copy over to a scratch matrix instead\n      // TODO: implement a prepend-multiply directly in Matrix3 for a performance increase\n      scratchMatrix.set( this.matrix );\n      this.matrix.set( matrix );\n      this.matrix.multiplyMatrix( scratchMatrix );\n\n      // set flags and notify\n      this.invalidate();\n    },\n\n    /**\n     * Optimized prepended translation such that: this.matrix = translation( x, y ) * this.matrix.\n     * @public\n     *\n     * @param {Matrix3} matrix\n     */\n    prependTranslation: function( x, y ) {\n      // See scenery#119 for more details on the need.\n\n      assert && assert( typeof x === 'number' && typeof y === 'number' && isFinite( x ) && isFinite( y ),\n        'Attempted to prepend non-finite or non-number (x,y) to the transform' );\n\n      this.matrix.prependTranslation( x, y );\n\n      // set flags and notify\n      this.invalidate();\n    },\n\n    /**\n     * Modifies the primary matrix such that: this.matrix = this.matrix * matrix\n     * @public\n     *\n     * @param {Matrix3} matrix\n     */\n    append: function( matrix ) {\n      assert && assert( checkMatrix( matrix ), 'Matrix has NaNs, non-finite values, or isn\\'t a matrix!' );\n\n      this.matrix.multiplyMatrix( matrix );\n\n      // set flags and notify\n      this.invalidate();\n    },\n\n    /**\n     * Like prepend(), but prepends the other transform's matrix.\n     * @public\n     *\n     * @param {Transform3} transform\n     */\n    prependTransform: function( transform ) {\n      this.prepend( transform.matrix );\n    },\n\n    /**\n     * Like append(), but appends the other transform's matrix.\n     * @public\n     *\n     * @param {Transform3} transform\n     */\n    appendTransform: function( transform ) {\n      this.append( transform.matrix );\n    },\n\n    /**\n     * Sets the transform of a Canvas context to be equivalent to this transform.\n     * @public\n     *\n     * @param {CanvasRenderingContext2D} context\n     */\n    applyToCanvasContext: function( context ) {\n      context.setTransform( this.matrix.m00(), this.matrix.m10(), this.matrix.m01(), this.matrix.m11(), this.matrix.m02(), this.matrix.m12() );\n    },\n\n    /*---------------------------------------------------------------------------*\n     * getters\n     *---------------------------------------------------------------------------*/\n\n    /**\n     * Creates a copy of this transform.\n     * @public\n     *\n     * @returns {Transform3}\n     */\n    copy: function() {\n      var transform = new Transform3( this.matrix );\n\n      transform.inverse = this.inverse;\n      transform.matrixTransposed = this.matrixTransposed;\n      transform.inverseTransposed = this.inverseTransposed;\n\n      transform.inverseValid = this.inverseValid;\n      transform.transposeValid = this.transposeValid;\n      transform.inverseTransposeValid = this.inverseTransposeValid;\n    },\n\n    /**\n     * Returns the primary matrix of this transform.\n     * @public\n     *\n     * @returns {Matrix3}\n     */\n    getMatrix: function() {\n      return this.matrix;\n    },\n\n    /**\n     * Returns the inverse of the primary matrix of this transform.\n     * @public\n     *\n     * @returns {Matrix3}\n     */\n    getInverse: function() {\n      if ( !this.inverseValid ) {\n        this.inverseValid = true;\n\n        this.inverse.set( this.matrix );\n        this.inverse.invert();\n      }\n      return this.inverse;\n    },\n\n    /**\n     * Returns the transpose of the primary matrix of this transform.\n     * @public\n     *\n     * @returns {Matrix3}\n     */\n    getMatrixTransposed: function() {\n      if ( !this.transposeValid ) {\n        this.transposeValid = true;\n\n        this.matrixTransposed.set( this.matrix );\n        this.matrixTransposed.transpose();\n      }\n      return this.matrixTransposed;\n    },\n\n    /**\n     * Returns the inverse of the transpose of matrix of this transform.\n     * @public\n     *\n     * @returns {Matrix3}\n     */\n    getInverseTransposed: function() {\n      if ( !this.inverseTransposeValid ) {\n        this.inverseTransposeValid = true;\n\n        this.inverseTransposed.set( this.getInverse() ); // triggers inverse to be valid\n        this.inverseTransposed.transpose();\n      }\n      return this.inverseTransposed;\n    },\n\n    /**\n     * Returns whether our primary matrix is known to be an identity matrix. If false is returned, it doesn't necessarily\n     * mean our matrix isn't an identity matrix, just that it is unlikely in normal usage.\n     * @public\n     *\n     * @returns {boolean}\n     */\n    isIdentity: function() {\n      return this.matrix.type === dot.Matrix3.Types.IDENTITY;\n    },\n\n    /**\n     * Returns whether any components of our primary matrix are either infinite or NaN.\n     * @public\n     *\n     * @returns {boolean}\n     */\n    isFinite: function() {\n      return this.matrix.isFinite();\n    },\n\n    /*---------------------------------------------------------------------------*\n     * forward transforms (for Vector2 or scalar)\n     *---------------------------------------------------------------------------*/\n\n    /**\n     * Transforms a 2-dimensional vector like it is a point with a position (translation is applied).\n     * @public\n     *\n     * For an affine matrix $M$, the result is the homogeneous multiplication $M\\begin{bmatrix} x \\\\ y \\\\ 1 \\end{bmatrix}$.\n     *\n     * @param {Vector2} v\n     * @returns {Vector2}\n     */\n    transformPosition2: function( v ) {\n      return this.matrix.timesVector2( v );\n    },\n\n    /**\n     * Transforms a 2-dimensional vector like position is irrelevant (translation is not applied).\n     * @public\n     *\n     * For an affine matrix $\\begin{bmatrix} a & b & c \\\\ d & e & f \\\\ 0 & 0 & 1 \\end{bmatrix}$,\n     * the result is $\\begin{bmatrix} a & b & 0 \\\\ d & e & 0 \\\\ 0 & 0 & 1 \\end{bmatrix} \\begin{bmatrix} x \\\\ y \\\\ 1 \\end{bmatrix}$.\n     *\n     * @param {Vector2} v\n     * @returns {Vector2}\n     */\n    transformDelta2: function( v ) {\n      var m = this.getMatrix();\n      // m . v - m . Vector2.ZERO\n      return new dot.Vector2( m.m00() * v.x + m.m01() * v.y, m.m10() * v.x + m.m11() * v.y );\n    },\n\n    /**\n     * Transforms a 2-dimensional vector like it is a normal to a curve (so that the curve is transformed, and the new\n     * normal to the curve at the transformed point is returned).\n     * @public\n     *\n     * For an affine matrix $\\begin{bmatrix} a & b & c \\\\ d & e & f \\\\ 0 & 0 & 1 \\end{bmatrix}$,\n     * the result is $\\begin{bmatrix} a & e & 0 \\\\ d & b & 0 \\\\ 0 & 0 & 1 \\end{bmatrix}^{-1} \\begin{bmatrix} x \\\\ y \\\\ 1 \\end{bmatrix}$.\n     * This is essentially the transposed inverse with translation removed.\n     *\n     * @param {Vector2} v\n     * @returns {Vector2}\n     */\n    transformNormal2: function( v ) {\n      return this.getInverse().timesTransposeVector2( v ).normalize();\n    },\n\n    /**\n     * Returns the resulting x-coordinate of the transformation of all vectors with the initial input x-coordinate. If\n     * this is not well-defined (the x value depends on y), an assertion is thrown (and y is assumed to be 0).\n     * @public\n     *\n     * @param {number} x\n     * @returns {number}\n     */\n    transformX: function( x ) {\n      var m = this.getMatrix();\n      assert && assert( !m.m01(), 'Transforming an X value with a rotation/shear is ill-defined' );\n      return m.m00() * x + m.m02();\n    },\n\n    /**\n     * Returns the resulting y-coordinate of the transformation of all vectors with the initial input y-coordinate. If\n     * this is not well-defined (the y value depends on x), an assertion is thrown (and x is assumed to be 0).\n     * @public\n     *\n     * @param {number} y\n     * @returns {number}\n     */\n    transformY: function( y ) {\n      var m = this.getMatrix();\n      assert && assert( !m.m10(), 'Transforming a Y value with a rotation/shear is ill-defined' );\n      return m.m11() * y + m.m12();\n    },\n\n    /**\n     * Returns the x-coordinate difference for two transformed vectors, which add the x-coordinate difference of the input\n     * x (and same y values) beforehand.\n     * @public\n     *\n     * @param {number} x\n     * @returns {number}\n     */\n    transformDeltaX: function( x ) {\n      var m = this.getMatrix();\n      // same as this.transformDelta2( new dot.Vector2( x, 0 ) ).x;\n      return m.m00() * x;\n    },\n\n    /**\n     * Returns the y-coordinate difference for two transformed vectors, which add the y-coordinate difference of the input\n     * y (and same x values) beforehand.\n     * @public\n     *\n     * @param {number} y\n     * @returns {number}\n     */\n    transformDeltaY: function( y ) {\n      var m = this.getMatrix();\n      // same as this.transformDelta2( new dot.Vector2( 0, y ) ).y;\n      return m.m11() * y;\n    },\n\n    /**\n     * Returns bounds (axis-aligned) that contains the transformed bounds rectangle.\n     * @pubic\n     *\n     * NOTE: transform.inverseBounds2( transform.transformBounds2( bounds ) ) may be larger than the original box,\n     * if it includes a rotation that isn't a multiple of $\\pi/2$. This is because the returned bounds may expand in\n     * area to cover ALL of the corners of the transformed bounding box.\n     *\n     * @param {Bounds2} bounds\n     * @returns {Bounds2}\n     */\n    transformBounds2: function( bounds ) {\n      return bounds.transformed( this.matrix );\n    },\n\n    /**\n     * Returns a transformed kite.Shape.\n     * @pubic\n     *\n     * @param {Shape} shape\n     * @returns {Shape}\n     */\n    transformShape: function( shape ) {\n      return shape.transformed( this.matrix );\n    },\n\n    /**\n     * Returns a transformed ray.\n     * @pubic\n     *\n     * @param {Ray2} ray\n     * @returns {Ray2}\n     */\n    transformRay2: function( ray ) {\n      return new dot.Ray2( this.transformPosition2( ray.position ), this.transformDelta2( ray.direction ).normalized() );\n    },\n\n    /*---------------------------------------------------------------------------*\n     * inverse transforms (for Vector2 or scalar)\n     *---------------------------------------------------------------------------*/\n\n    /**\n     * Transforms a 2-dimensional vector by the inverse of our transform like it is a point with a position (translation is applied).\n     * @public\n     *\n     * For an affine matrix $M$, the result is the homogeneous multiplication $M^{-1}\\begin{bmatrix} x \\\\ y \\\\ 1 \\end{bmatrix}$.\n     *\n     * This is the inverse of transformPosition2().\n     *\n     * @param {Vector2} v\n     * @returns {Vector2}\n     */\n    inversePosition2: function( v ) {\n      return this.getInverse().timesVector2( v );\n    },\n\n    /**\n     * Transforms a 2-dimensional vector by the inverse of our transform like position is irrelevant (translation is not applied).\n     * @public\n     *\n     * For an affine matrix $\\begin{bmatrix} a & b & c \\\\ d & e & f \\\\ 0 & 0 & 1 \\end{bmatrix}$,\n     * the result is $\\begin{bmatrix} a & b & 0 \\\\ d & e & 0 \\\\ 0 & 0 & 1 \\end{bmatrix}^{-1} \\begin{bmatrix} x \\\\ y \\\\ 1 \\end{bmatrix}$.\n     *\n     * This is the inverse of transformDelta2().\n     *\n     * @param {Vector2} v\n     * @returns {Vector2}\n     */\n    inverseDelta2: function( v ) {\n      var m = this.getInverse();\n      // m . v - m . Vector2.ZERO\n      return new dot.Vector2( m.m00() * v.x + m.m01() * v.y, m.m10() * v.x + m.m11() * v.y );\n    },\n\n    /**\n     * Transforms a 2-dimensional vector by the inverse of our transform like it is a normal to a curve (so that the\n     * curve is transformed, and the new normal to the curve at the transformed point is returned).\n     * @public\n     *\n     * For an affine matrix $\\begin{bmatrix} a & b & c \\\\ d & e & f \\\\ 0 & 0 & 1 \\end{bmatrix}$,\n     * the result is $\\begin{bmatrix} a & e & 0 \\\\ d & b & 0 \\\\ 0 & 0 & 1 \\end{bmatrix} \\begin{bmatrix} x \\\\ y \\\\ 1 \\end{bmatrix}$.\n     * This is essentially the transposed transform with translation removed.\n     *\n     * This is the inverse of transformNormal2().\n     *\n     * @param {Vector2} v\n     * @returns {Vector2}\n     */\n    inverseNormal2: function( v ) {\n      return this.matrix.timesTransposeVector2( v ).normalize();\n    },\n\n    /**\n     * Returns the resulting x-coordinate of the inverse transformation of all vectors with the initial input x-coordinate. If\n     * this is not well-defined (the x value depends on y), an assertion is thrown (and y is assumed to be 0).\n     * @public\n     *\n     * This is the inverse of transformX().\n     *\n     * @param {number} x\n     * @returns {number}\n     */\n    inverseX: function( x ) {\n      var m = this.getInverse();\n      assert && assert( !m.m01(), 'Inverting an X value with a rotation/shear is ill-defined' );\n      return m.m00() * x + m.m02();\n    },\n\n    /**\n     * Returns the resulting y-coordinate of the inverse transformation of all vectors with the initial input y-coordinate. If\n     * this is not well-defined (the y value depends on x), an assertion is thrown (and x is assumed to be 0).\n     * @public\n     *\n     * This is the inverse of transformY().\n     *\n     * @param {number} y\n     * @returns {number}\n     */\n    inverseY: function( y ) {\n      var m = this.getInverse();\n      assert && assert( !m.m10(), 'Inverting a Y value with a rotation/shear is ill-defined' );\n      return m.m11() * y + m.m12();\n    },\n\n    /**\n     * Returns the x-coordinate difference for two inverse-transformed vectors, which add the x-coordinate difference of the input\n     * x (and same y values) beforehand.\n     * @public\n     *\n     * This is the inverse of transformDeltaX().\n     *\n     * @param {number} x\n     * @returns {number}\n     */\n    inverseDeltaX: function( x ) {\n      var m = this.getInverse();\n      assert && assert( !m.m01(), 'Inverting an X value with a rotation/shear is ill-defined' );\n      // same as this.inverseDelta2( new dot.Vector2( x, 0 ) ).x;\n      return m.m00() * x;\n    },\n\n    /**\n     * Returns the y-coordinate difference for two inverse-transformed vectors, which add the y-coordinate difference of the input\n     * y (and same x values) beforehand.\n     * @public\n     *\n     * This is the inverse of transformDeltaY().\n     *\n     * @param {number} y\n     * @returns {number}\n     */\n    inverseDeltaY: function( y ) {\n      var m = this.getInverse();\n      assert && assert( !m.m10(), 'Inverting a Y value with a rotation/shear is ill-defined' );\n      // same as this.inverseDelta2( new dot.Vector2( 0, y ) ).y;\n      return m.m11() * y;\n    },\n\n    /**\n     * Returns bounds (axis-aligned) that contains the inverse-transformed bounds rectangle.\n     * @pubic\n     *\n     * NOTE: transform.inverseBounds2( transform.transformBounds2( bounds ) ) may be larger than the original box,\n     * if it includes a rotation that isn't a multiple of $\\pi/2$. This is because the returned bounds may expand in\n     * area to cover ALL of the corners of the transformed bounding box.\n     *\n     * @param {Bounds2} bounds\n     * @returns {Bounds2}\n     */\n    inverseBounds2: function( bounds2 ) {\n      return bounds2.transformed( this.getInverse() );\n    },\n\n    /**\n     * Returns an inverse-transformed kite.Shape.\n     * @pubic\n     *\n     * This is the inverse of transformShape()\n     *\n     * @param {Shape} shape\n     * @returns {Shape}\n     */\n    inverseShape: function( shape ) {\n      return shape.transformed( this.getInverse() );\n    },\n\n    /**\n     * Returns an inverse-transformed ray.\n     * @pubic\n     *\n     * This is the inverse of transformRay2()\n     *\n     * @param {Ray2} ray\n     * @returns {Ray2}\n     */\n    inverseRay2: function( ray ) {\n      return new dot.Ray2( this.inversePosition2( ray.position ), this.inverseDelta2( ray.direction ).normalized() );\n    }\n  } );\n\n  return Transform3;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Elliptical arc segment\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'KITE/segments/EllipticalArc',['require','PHET_CORE/inherit','DOT/Vector2','DOT/Bounds2','DOT/Matrix3','DOT/Transform3','DOT/Util','DOT/Util','KITE/kite','KITE/segments/Segment'],function( require ) {\n  'use strict';\n\n  var inherit = require( 'PHET_CORE/inherit' );\n  var Vector2 = require( 'DOT/Vector2' );\n  var Bounds2 = require( 'DOT/Bounds2' );\n  var Matrix3 = require( 'DOT/Matrix3' );\n  var Transform3 = require( 'DOT/Transform3' );\n  var toDegrees = require( 'DOT/Util' ).toDegrees;\n  var DotUtil = require( 'DOT/Util' ); // eslint-disable-line require-statement-match\n\n  var kite = require( 'KITE/kite' );\n  var Segment = require( 'KITE/segments/Segment' );\n\n  // TODO: notes at http://www.w3.org/TR/SVG/implnote.html#PathElementImplementationNotes\n  // Canvas notes were at http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-ellipse\n  // context.ellipse was removed from the Canvas spec\n  function EllipticalArc( center, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise ) {\n    Segment.call( this );\n\n    this._center = center;\n    this._radiusX = radiusX;\n    this._radiusY = radiusY;\n    this._rotation = rotation;\n    this._startAngle = startAngle;\n    this._endAngle = endAngle;\n    this._anticlockwise = anticlockwise;\n\n    this.invalidate();\n  }\n\n  kite.register( 'EllipticalArc', EllipticalArc );\n\n  inherit( Segment, EllipticalArc, {\n\n    // @public - Clears cached information, should be called when any of the 'constructor arguments' are mutated.\n    invalidate: function() {\n      // Lazily-computed derived information\n      this._unitTransform = null; // {Transform3 | null} - Mapping between our ellipse and a unit circle\n      this._start = null; // {Vector2 | null}\n      this._end = null; // {Vector2 | null}\n      this._startTangent = null; // {Vector2 | null}\n      this._endTangent = null; // {Vector2 | null}\n      this._actualEndAngle = null; // {number | null} - End angle in relation to our start angle (can get remapped)\n      this._isFullPerimeter = null; // {boolean | null} - Whether it's a full ellipse (and not just an arc)\n      this._angleDifference = null; // {number | null}\n      this._unitArcSegment = null; // {Arc | null} - Corresponding circular arc for our unit transform.\n      this._bounds = null; // {Bounds2 | null}\n\n      // remapping of negative radii\n      if ( this._radiusX < 0 ) {\n        // support this case since we might actually need to handle it inside of strokes?\n        this._radiusX = -this._radiusX;\n        this._startAngle = Math.PI - this._startAngle;\n        this._endAngle = Math.PI - this._endAngle;\n        this._anticlockwise = !this._anticlockwise;\n      }\n      if ( this._radiusY < 0 ) {\n        // support this case since we might actually need to handle it inside of strokes?\n        this._radiusY = -this._radiusY;\n        this._startAngle = -this._startAngle;\n        this._endAngle = -this._endAngle;\n        this._anticlockwise = !this._anticlockwise;\n      }\n      if ( this._radiusX < this._radiusY ) {\n        // swap radiusX and radiusY internally for consistent Canvas / SVG output\n        this._rotation += Math.PI / 2;\n        this._startAngle -= Math.PI / 2;\n        this._endAngle -= Math.PI / 2;\n\n        // swap radiusX and radiusY\n        var tmpR = this._radiusX;\n        this._radiusX = this._radiusY;\n        this._radiusY = tmpR;\n      }\n\n      if ( this._radiusX < this._radiusY ) {\n        // TODO: check this\n        throw new Error( 'Not verified to work if radiusX < radiusY' );\n      }\n\n      // constraints shared with Arc\n      assert && assert( !( ( !this.anticlockwise && this.endAngle - this.startAngle <= -Math.PI * 2 ) ||\n                           ( this.anticlockwise && this.startAngle - this.endAngle <= -Math.PI * 2 ) ),\n        'Not handling elliptical arcs with start/end angles that show differences in-between browser handling' );\n      assert && assert( !( ( !this.anticlockwise && this.endAngle - this.startAngle > Math.PI * 2 ) ||\n                           ( this.anticlockwise && this.startAngle - this.endAngle > Math.PI * 2 ) ),\n        'Not handling elliptical arcs with start/end angles that show differences in-between browser handling' );\n    },\n\n    getUnitTransform: function() {\n      if ( this._unitTransform === null ) {\n        this._unitTransform = EllipticalArc.computeUnitTransform( this._center, this._radiusX, this._radiusY, this._rotation );\n      }\n      return this._unitTransform;\n    },\n    get unitTransform() { return this.getUnitTransform(); },\n\n    getStart: function() {\n      if ( this._start === null ) {\n        this._start = this.positionAtAngle( this._startAngle );\n      }\n      return this._start;\n    },\n    get start() { return this.getStart(); },\n\n    getEnd: function() {\n      if ( this._end === null ) {\n        this._end = this.positionAtAngle( this._endAngle );\n      }\n      return this._end;\n    },\n    get end() { return this.getEnd(); },\n\n    getStartTangent: function() {\n      if ( this._startTangent === null ) {\n        this._startTangent = this.tangentAtAngle( this._startAngle );\n      }\n      return this._startTangent;\n    },\n    get startTangent() { return this.getStartTangent(); },\n\n    getEndTangent: function() {\n      if ( this._endTangent === null ) {\n        this._endTangent = this.tangentAtAngle( this._endAngle );\n      }\n      return this._endTangent;\n    },\n    get endTangent() { return this.getEndTangent(); },\n\n    getActualEndAngle: function() {\n      if ( this._actualEndAngle === null ) {\n        // compute an actual end angle so that we can smoothly go from this._startAngle to this._actualEndAngle\n        if ( this._anticlockwise ) {\n          // angle is 'decreasing'\n          // -2pi <= end - start < 2pi\n          if ( this._startAngle > this._endAngle ) {\n            this._actualEndAngle = this._endAngle;\n          }\n          else if ( this._startAngle < this._endAngle ) {\n            this._actualEndAngle = this._endAngle - 2 * Math.PI;\n          }\n          else {\n            // equal\n            this._actualEndAngle = this._startAngle;\n          }\n        }\n        else {\n          // angle is 'increasing'\n          // -2pi < end - start <= 2pi\n          if ( this._startAngle < this._endAngle ) {\n            this._actualEndAngle = this._endAngle;\n          }\n          else if ( this._startAngle > this._endAngle ) {\n            this._actualEndAngle = this._endAngle + Math.PI * 2;\n          }\n          else {\n            // equal\n            this._actualEndAngle = this._startAngle;\n          }\n        }\n      }\n      return this._actualEndAngle;\n    },\n    get actualEndAngle() { return this.getActualEndAngle(); },\n\n    getIsFullPerimeter: function() {\n      if ( this._isFullPerimeter === null ) {\n        this._isFullPerimeter = ( !this._anticlockwise && this._endAngle - this._startAngle >= Math.PI * 2 ) || ( this._anticlockwise && this._startAngle - this._endAngle >= Math.PI * 2 );\n      }\n      return this._isFullPerimeter;\n    },\n    get isFullPerimeter() { return this.getIsFullPerimeter(); },\n\n    getAngleDifference: function() {\n      if ( this._angleDifference === null ) {\n        // compute an angle difference that represents how \"much\" of the circle our arc covers\n        this._angleDifference = this._anticlockwise ? this._startAngle - this._endAngle : this._endAngle - this._startAngle;\n        if ( this._angleDifference < 0 ) {\n          this._angleDifference += Math.PI * 2;\n        }\n        assert && assert( this._angleDifference >= 0 ); // now it should always be zero or positive\n      }\n      return this._angleDifference;\n    },\n    get angleDifference() { return this.getAngleDifference(); },\n\n    // a unit arg segment that we can map to our ellipse. useful for hit testing and such.\n    getUnitArcSegment: function() {\n      if ( this._unitArcSegment === null ) {\n        this._unitArcSegment = new kite.Arc( Vector2.ZERO, 1, this._startAngle, this._endAngle, this._anticlockwise );\n      }\n      return this._unitArcSegment;\n    },\n\n    // temporary shims\n    getBounds: function() {\n      if ( this._bounds === null ) {\n        this._bounds = Bounds2.NOTHING.withPoint( this.getStart() )\n          .withPoint( this.getEnd() );\n\n        // if the angles are different, check extrema points\n        if ( this._startAngle !== this._endAngle ) {\n          // solve the mapping from the unit circle, find locations where a coordinate of the gradient is zero.\n          // we find one extrema point for both x and y, since the other two are just rotated by pi from them.\n          var xAngle = Math.atan( -( this._radiusY / this._radiusX ) * Math.tan( this._rotation ) );\n          var yAngle = Math.atan( ( this._radiusY / this._radiusX ) / Math.tan( this._rotation ) );\n\n          // check all of the extrema points\n          this.possibleExtremaAngles = [\n            xAngle,\n            xAngle + Math.PI,\n            yAngle,\n            yAngle + Math.PI\n          ];\n\n          _.each( this.possibleExtremaAngles, this.includeBoundsAtAngle.bind( this ) );\n        }\n      }\n      return this._bounds;\n    },\n    get bounds() { return this.getBounds(); },\n\n    getNondegenerateSegments: function() {\n      if ( this._radiusX <= 0 || this._radiusY <= 0 || this._startAngle === this._endAngle ) {\n        return [];\n      }\n      else if ( this._radiusX === this._radiusY ) {\n        // reduce to an Arc\n        var startAngle = this._startAngle - this._rotation;\n        var endAngle = this._endAngle - this._rotation;\n\n        // preserve full circles\n        if ( Math.abs( this._endAngle - this._startAngle ) === Math.PI * 2 ) {\n          endAngle = this._anticlockwise ? startAngle - Math.PI * 2 : startAngle + Math.PI * 2;\n        }\n        return [ new kite.Arc( this._center, this._radiusX, startAngle, endAngle, this._anticlockwise ) ];\n      }\n      else {\n        return [ this ];\n      }\n    },\n\n    includeBoundsAtAngle: function( angle ) {\n      if ( this.containsAngle( angle ) ) {\n        // the boundary point is in the arc\n        this._bounds = this._bounds.withPoint( this.positionAtAngle( angle ) );\n      }\n    },\n\n    // maps a contained angle to between [startAngle,actualEndAngle), even if the end angle is lower.\n    mapAngle: function( angle ) {\n      // consider an assert that we contain that angle?\n      return ( this._startAngle > this.getActualEndAngle() ) ?\n             DotUtil.moduloBetweenUp( angle, this._startAngle - 2 * Math.PI, this._startAngle ) :\n             DotUtil.moduloBetweenDown( angle, this._startAngle, this._startAngle + 2 * Math.PI );\n    },\n\n    tAtAngle: function( angle ) {\n      return ( this.mapAngle( angle ) - this._startAngle ) / ( this.getActualEndAngle() - this._startAngle );\n    },\n\n    angleAt: function( t ) {\n      return this._startAngle + ( this.getActualEndAngle() - this._startAngle ) * t;\n    },\n\n    positionAt: function( t ) {\n      return this.positionAtAngle( this.angleAt( t ) );\n    },\n\n    tangentAt: function( t ) {\n      return this.tangentAtAngle( this.angleAt( t ) );\n    },\n\n    curvatureAt: function( t ) {\n      // see http://mathworld.wolfram.com/Ellipse.html (59)\n      var angle = this.angleAt( t );\n      var aq = this._radiusX * Math.sin( angle );\n      var bq = this._radiusY * Math.cos( angle );\n      var denominator = Math.pow( bq * bq + aq * aq, 3 / 2 );\n      return ( this._anticlockwise ? -1 : 1 ) * this._radiusX * this._radiusY / denominator;\n    },\n\n    positionAtAngle: function( angle ) {\n      return this.getUnitTransform().transformPosition2( Vector2.createPolar( 1, angle ) );\n    },\n\n    tangentAtAngle: function( angle ) {\n      var normal = this.getUnitTransform().transformNormal2( Vector2.createPolar( 1, angle ) );\n\n      return this._anticlockwise ? normal.perpendicular() : normal.perpendicular().negated();\n    },\n\n    // TODO: refactor? exact same as Arc\n    containsAngle: function( angle ) {\n      // transform the angle into the appropriate coordinate form\n      // TODO: check anticlockwise version!\n      var normalizedAngle = this._anticlockwise ? angle - this._endAngle : angle - this._startAngle;\n\n      // get the angle between 0 and 2pi\n      var positiveMinAngle = normalizedAngle % ( Math.PI * 2 );\n      // check this because modular arithmetic with negative numbers reveal a negative number\n      if ( positiveMinAngle < 0 ) {\n        positiveMinAngle += Math.PI * 2;\n      }\n\n      return positiveMinAngle <= this.getAngleDifference();\n    },\n\n    // discretizes the elliptical arc and returns an offset curve as a list of lineTos\n    offsetTo: function( r, reverse ) {\n      // how many segments to create (possibly make this more adaptive?)\n      var quantity = 32;\n\n      var points = [];\n      var result = [];\n      for ( var i = 0; i < quantity; i++ ) {\n        var ratio = i / ( quantity - 1 );\n        if ( reverse ) {\n          ratio = 1 - ratio;\n        }\n        var angle = this.angleAt( ratio );\n\n        points.push( this.positionAtAngle( angle ).plus( this.tangentAtAngle( angle ).perpendicular().normalized().times( r ) ) );\n        if ( i > 0 ) {\n          result.push( new kite.Line( points[ i - 1 ], points[ i ] ) );\n        }\n      }\n\n      return result;\n    },\n\n    getSVGPathFragment: function() {\n      // see http://www.w3.org/TR/SVG/paths.html#PathDataEllipticalArcCommands for more info\n      // rx ry x-axis-rotation large-arc-flag sweep-flag x y\n      var epsilon = 0.01; // allow some leeway to render things as 'almost circles'\n      var sweepFlag = this._anticlockwise ? '0' : '1';\n      var largeArcFlag;\n      var degreesRotation = toDegrees( this._rotation ); // bleh, degrees?\n      if ( this.getAngleDifference() < Math.PI * 2 - epsilon ) {\n        largeArcFlag = this.getAngleDifference() < Math.PI ? '0' : '1';\n        return 'A ' + kite.svgNumber( this._radiusX ) + ' ' + kite.svgNumber( this._radiusY ) + ' ' + degreesRotation +\n               ' ' + largeArcFlag + ' ' + sweepFlag + ' ' + kite.svgNumber( this.getEnd().x ) + ' ' + kite.svgNumber( this.getEnd().y );\n      }\n      else {\n        // ellipse (or almost-ellipse) case needs to be handled differently\n        // since SVG will not be able to draw (or know how to draw) the correct circle if we just have a start and end, we need to split it into two circular arcs\n\n        // get the angle that is between and opposite of both of the points\n        var splitOppositeAngle = ( this._startAngle + this._endAngle ) / 2; // this _should_ work for the modular case?\n        var splitPoint = this.positionAtAngle( splitOppositeAngle );\n\n        largeArcFlag = '0'; // since we split it in 2, it's always the small arc\n\n        var firstArc = 'A ' + kite.svgNumber( this._radiusX ) + ' ' + kite.svgNumber( this._radiusY ) + ' ' +\n                       degreesRotation + ' ' + largeArcFlag + ' ' + sweepFlag + ' ' +\n                       kite.svgNumber( splitPoint.x ) + ' ' + kite.svgNumber( splitPoint.y );\n        var secondArc = 'A ' + kite.svgNumber( this._radiusX ) + ' ' + kite.svgNumber( this._radiusY ) + ' ' +\n                        degreesRotation + ' ' + largeArcFlag + ' ' + sweepFlag + ' ' +\n                        kite.svgNumber( this.getEnd().x ) + ' ' + kite.svgNumber( this.getEnd().y );\n\n        return firstArc + ' ' + secondArc;\n      }\n    },\n\n    strokeLeft: function( lineWidth ) {\n      return this.offsetTo( -lineWidth / 2, false );\n    },\n\n    strokeRight: function( lineWidth ) {\n      return this.offsetTo( lineWidth / 2, true );\n    },\n\n    // not including 0 and 1\n    getInteriorExtremaTs: function() {\n      var that = this;\n      var result = [];\n      _.each( this.possibleExtremaAngles, function( angle ) {\n        if ( that.containsAngle( angle ) ) {\n          var t = that.tAtAngle( angle );\n          var epsilon = 0.0000000001; // TODO: general kite epsilon?\n          if ( t > epsilon && t < 1 - epsilon ) {\n            result.push( t );\n          }\n        }\n      } );\n      return result.sort(); // modifies original, which is OK\n    },\n\n    subdivided: function( t ) {\n      // TODO: verify that we don't need to switch anticlockwise here, or subtract 2pi off any angles\n      var angle0 = this.angleAt( 0 );\n      var angleT = this.angleAt( t );\n      var angle1 = this.angleAt( 1 );\n      return [\n        new kite.EllipticalArc( this._center, this._radiusX, this._radiusY, this._rotation, angle0, angleT, this._anticlockwise ),\n        new kite.EllipticalArc( this._center, this._radiusX, this._radiusY, this._rotation, angleT, angle1, this._anticlockwise )\n      ];\n    },\n\n    intersection: function( ray ) {\n      // be lazy. transform it into the space of a non-elliptical arc.\n      var unitTransform = this.getUnitTransform();\n      var rayInUnitCircleSpace = unitTransform.inverseRay2( ray );\n      var hits = this.getUnitArcSegment().intersection( rayInUnitCircleSpace );\n\n      return _.map( hits, function( hit ) {\n        var transformedPoint = unitTransform.transformPosition2( hit.point );\n        return {\n          distance: ray.position.distance( transformedPoint ),\n          point: transformedPoint,\n          normal: unitTransform.inverseNormal2( hit.normal ),\n          wind: hit.wind\n        };\n      } );\n    },\n\n    // returns the resultant winding number of this ray intersecting this segment.\n    windingIntersection: function( ray ) {\n      // be lazy. transform it into the space of a non-elliptical arc.\n      var rayInUnitCircleSpace = this.getUnitTransform().inverseRay2( ray );\n      return this.getUnitArcSegment().windingIntersection( rayInUnitCircleSpace );\n    },\n\n    // assumes the current position is at start\n    writeToContext: function( context ) {\n      if ( context.ellipse ) {\n        context.ellipse( this._center.x, this._center.y, this._radiusX, this._radiusY, this._rotation, this._startAngle, this._endAngle, this._anticlockwise );\n      }\n      else {\n        // fake the ellipse call by using transforms\n        this.getUnitTransform().getMatrix().canvasAppendTransform( context );\n        context.arc( 0, 0, 1, this._startAngle, this._endAngle, this._anticlockwise );\n        this.getUnitTransform().getInverse().canvasAppendTransform( context );\n      }\n    },\n\n    transformed: function( matrix ) {\n      var transformedSemiMajorAxis = matrix.timesVector2( Vector2.createPolar( this._radiusX, this._rotation ) ).minus( matrix.timesVector2( Vector2.ZERO ) );\n      var transformedSemiMinorAxis = matrix.timesVector2( Vector2.createPolar( this._radiusY, this._rotation + Math.PI / 2 ) ).minus( matrix.timesVector2( Vector2.ZERO ) );\n      var rotation = transformedSemiMajorAxis.angle();\n      var radiusX = transformedSemiMajorAxis.magnitude();\n      var radiusY = transformedSemiMinorAxis.magnitude();\n\n      var reflected = matrix.getDeterminant() < 0;\n\n      // reverse the 'clockwiseness' if our transform includes a reflection\n      // TODO: check reflections. swapping angle signs should fix clockwiseness\n      var anticlockwise = reflected ? !this._anticlockwise : this._anticlockwise;\n      var startAngle = reflected ? -this._startAngle : this._startAngle;\n      var endAngle = reflected ? -this._endAngle : this._endAngle;\n\n      if ( Math.abs( this._endAngle - this._startAngle ) === Math.PI * 2 ) {\n        endAngle = anticlockwise ? startAngle - Math.PI * 2 : startAngle + Math.PI * 2;\n      }\n\n      return new kite.EllipticalArc( matrix.timesVector2( this._center ), radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise );\n    }\n  } );\n\n  Segment.addInvalidatingGetterSetter( EllipticalArc, 'center' );\n  Segment.addInvalidatingGetterSetter( EllipticalArc, 'radiusX' );\n  Segment.addInvalidatingGetterSetter( EllipticalArc, 'radiusY' );\n  Segment.addInvalidatingGetterSetter( EllipticalArc, 'rotation' );\n  Segment.addInvalidatingGetterSetter( EllipticalArc, 'startAngle' );\n  Segment.addInvalidatingGetterSetter( EllipticalArc, 'endAngle' );\n  Segment.addInvalidatingGetterSetter( EllipticalArc, 'anticlockwise' );\n\n  // adapted from http://www.w3.org/TR/SVG/implnote.html#PathElementImplementationNotes\n  // transforms the unit circle onto our ellipse\n  EllipticalArc.computeUnitTransform = function( center, radiusX, radiusY, rotation ) {\n    return new Transform3( Matrix3.translation( center.x, center.y ) // TODO: convert to Matrix3.translation( this._center) when available\n      .timesMatrix( Matrix3.rotation2( rotation ) )\n      .timesMatrix( Matrix3.scaling( radiusX, radiusY ) ) );\n  };\n\n  return EllipticalArc;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Shape handling\n *\n * Shapes are internally made up of Subpaths, which contain a series of segments, and are optionally closed.\n * Familiarity with how Canvas handles subpaths is helpful for understanding this code.\n *\n * Canvas spec: http://www.w3.org/TR/2dcontext/\n * SVG spec: http://www.w3.org/TR/SVG/expanded-toc.html\n *           http://www.w3.org/TR/SVG/paths.html#PathData (for paths)\n * Notes for elliptical arcs: http://www.w3.org/TR/SVG/implnote.html#PathElementImplementationNotes\n * Notes for painting strokes: https://svgwg.org/svg2-draft/painting.html\n *\n * TODO: add nonzero / evenodd support when browsers support it\n * TODO: docs\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'KITE/Shape',['require','KITE/kite','PHET_CORE/inherit','AXON/Events','DOT/Vector2','DOT/Bounds2','DOT/Ray2','KITE/util/Subpath','KITE/parser/svgPath','KITE/segments/Arc','KITE/segments/Cubic','KITE/segments/EllipticalArc','KITE/segments/Line','KITE/segments/Quadratic'],function( require ) {\n  'use strict';\n\n  var kite = require( 'KITE/kite' );\n\n  var inherit = require( 'PHET_CORE/inherit' );\n  var Events = require( 'AXON/Events' );\n\n  var Vector2 = require( 'DOT/Vector2' );\n  var Bounds2 = require( 'DOT/Bounds2' );\n  var Ray2 = require( 'DOT/Ray2' );\n\n  var Subpath = require( 'KITE/util/Subpath' );\n  var svgPath = require( 'KITE/parser/svgPath' );\n  var Arc = require( 'KITE/segments/Arc' );\n  var Cubic = require( 'KITE/segments/Cubic' );\n  var EllipticalArc = require( 'KITE/segments/EllipticalArc' );\n  var Line = require( 'KITE/segments/Line' );\n  var Quadratic = require( 'KITE/segments/Quadratic' );\n\n  // for brevity\n  function p( x, y ) { return new Vector2( x, y ); }\n\n  function v( x, y ) { return new Vector2( x, y ); } // TODO: use this version in general, it makes more sense and is easier to type\n\n  // The tension parameter controls how smoothly the curve turns through its control points. For a Catmull-Rom\n  // curve, the tension is zero. The tension should range from -1 to 1.\n  function weightedSplineVector( beforeVector, currentVector, afterVector, tension ) {\n    return afterVector.copy()\n      .subtract( beforeVector )\n      .multiplyScalar( ( 1 - tension ) / 6 )\n      .add( currentVector );\n  }\n\n  // a normalized vector for non-zero winding checks\n  // var weirdDir = p( Math.PI, 22 / 7 );\n\n  // all arguments optional, they are for the copy() method. if used, ensure that 'bounds' is consistent with 'subpaths'\n  function Shape( subpaths, bounds ) {\n    var self = this;\n\n    Events.call( this );\n\n    // @public Lower-level piecewise mathematical description using segments, also individually immutable\n    this.subpaths = [];\n\n    // If non-null, computed bounds for all pieces added so far. Lazily computed with getBounds/bounds ES5 getter\n    this._bounds = bounds ? bounds.copy() : null; // {Bounds2 | null}\n\n    this.resetControlPoints();\n\n    this._invalidateListener = this.invalidate.bind( this );\n    this._invalidatingPoints = false; // So we can invalidate all of the points without firing invalidation tons of times\n\n    // Add in subpaths from the constructor (if applicable)\n    if ( typeof subpaths === 'object' ) {\n      // assume it's an array\n      for ( var i = 0; i < subpaths.length; i++ ) {\n        this.addSubpath( subpaths[ i ] );\n      }\n    }\n\n    if ( subpaths && typeof subpaths !== 'object' ) {\n      assert && assert( typeof subpaths === 'string', 'if subpaths is not an object, it must be a string' );\n      // parse the SVG path\n      _.each( svgPath.parse( subpaths ), function( item ) {\n        assert && assert( Shape.prototype[ item.cmd ] !== undefined, 'method ' + item.cmd + ' from parsed SVG does not exist' );\n        self[ item.cmd ].apply( self, item.args );\n      } );\n    }\n\n    // defines _bounds if not already defined (among other things)\n    this.invalidate();\n\n    phetAllocation && phetAllocation( 'Shape' );\n  }\n\n  kite.register( 'Shape', Shape );\n\n  inherit( Events, Shape, {\n\n    // for tracking the last quadratic/cubic control point for smooth* functions\n    // see https://github.com/phetsims/kite/issues/38\n    resetControlPoints: function() {\n      this.lastQuadraticControlPoint = null;\n      this.lastCubicControlPoint = null;\n    },\n    setQuadraticControlPoint: function( point ) {\n      this.lastQuadraticControlPoint = point;\n      this.lastCubicControlPoint = null;\n    },\n    setCubicControlPoint: function( point ) {\n      this.lastQuadraticControlPoint = null;\n      this.lastCubicControlPoint = point;\n    },\n\n    // Adds a new subpath if there have already been draw calls made. Will prevent any line or connection from the last\n    // draw call to future draw calls.\n    subpath: function() {\n      if ( this.hasSubpaths() ) {\n        this.addSubpath( new Subpath() );\n      }\n\n      return this; // for chaining\n    },\n\n    moveTo: function( x, y ) { return this.moveToPoint( v( x, y ) ); },\n    moveToRelative: function( x, y ) { return this.moveToPointRelative( v( x, y ) ); },\n    moveToPointRelative: function( point ) { return this.moveToPoint( this.getRelativePoint().plus( point ) ); },\n    moveToPoint: function( point ) {\n      this.addSubpath( new Subpath().addPoint( point ) );\n      this.resetControlPoints();\n\n      return this;\n    },\n\n    lineTo: function( x, y ) { return this.lineToPoint( v( x, y ) ); },\n    lineToRelative: function( x, y ) { return this.lineToPointRelative( v( x, y ) ); },\n    lineToPointRelative: function( point ) { return this.lineToPoint( this.getRelativePoint().plus( point ) ); },\n    lineToPoint: function( point ) {\n      // see http://www.w3.org/TR/2dcontext/#dom-context-2d-lineto\n      if ( this.hasSubpaths() ) {\n        var start = this.getLastSubpath().getLastPoint();\n        var end = point;\n        var line = new Line( start, end );\n        this.getLastSubpath().addPoint( end );\n        this.addSegmentAndBounds( line );\n      }\n      else {\n        this.ensure( point );\n      }\n      this.resetControlPoints();\n\n      return this;\n    },\n\n    horizontalLineTo: function( x ) { return this.lineTo( x, this.getRelativePoint().y ); },\n    horizontalLineToRelative: function( x ) { return this.lineToRelative( x, 0 ); },\n\n    verticalLineTo: function( y ) { return this.lineTo( this.getRelativePoint().x, y ); },\n    verticalLineToRelative: function( y ) { return this.lineToRelative( 0, y ); },\n\n    quadraticCurveTo: function( cpx, cpy, x, y ) { return this.quadraticCurveToPoint( v( cpx, cpy ), v( x, y ) ); },\n    quadraticCurveToRelative: function( cpx, cpy, x, y ) { return this.quadraticCurveToPointRelative( v( cpx, cpy ), v( x, y ) ); },\n    quadraticCurveToPointRelative: function( controlPoint, point ) {\n      var relativePoint = this.getRelativePoint();\n      return this.quadraticCurveToPoint( relativePoint.plus( controlPoint ), relativePoint.plus( point ) );\n    },\n    // TODO: consider a rename to put 'smooth' farther back?\n    smoothQuadraticCurveTo: function( x, y ) { return this.quadraticCurveToPoint( this.getSmoothQuadraticControlPoint(), v( x, y ) ); },\n    smoothQuadraticCurveToRelative: function( x, y ) { return this.quadraticCurveToPoint( this.getSmoothQuadraticControlPoint(), v( x, y ).plus( this.getRelativePoint() ) ); },\n    quadraticCurveToPoint: function( controlPoint, point ) {\n      var shape = this;\n\n      // see http://www.w3.org/TR/2dcontext/#dom-context-2d-quadraticcurveto\n      this.ensure( controlPoint );\n      var start = this.getLastSubpath().getLastPoint();\n      var quadratic = new Quadratic( start, controlPoint, point );\n      this.getLastSubpath().addPoint( point );\n      var nondegenerateSegments = quadratic.getNondegenerateSegments();\n      _.each( nondegenerateSegments, function( segment ) {\n        // TODO: optimization\n        shape.addSegmentAndBounds( segment );\n      } );\n      this.setQuadraticControlPoint( controlPoint );\n\n      return this;\n    },\n\n    cubicCurveTo: function( cp1x, cp1y, cp2x, cp2y, x, y ) { return this.cubicCurveToPoint( v( cp1x, cp1y ), v( cp2x, cp2y ), v( x, y ) ); },\n    cubicCurveToRelative: function( cp1x, cp1y, cp2x, cp2y, x, y ) { return this.cubicCurveToPointRelative( v( cp1x, cp1y ), v( cp2x, cp2y ), v( x, y ) ); },\n    cubicCurveToPointRelative: function( control1, control2, point ) {\n      var relativePoint = this.getRelativePoint();\n      return this.cubicCurveToPoint( relativePoint.plus( control1 ), relativePoint.plus( control2 ), relativePoint.plus( point ) );\n    },\n    smoothCubicCurveTo: function( cp2x, cp2y, x, y ) { return this.cubicCurveToPoint( this.getSmoothCubicControlPoint(), v( cp2x, cp2y ), v( x, y ) ); },\n    smoothCubicCurveToRelative: function( cp2x, cp2y, x, y ) { return this.cubicCurveToPoint( this.getSmoothCubicControlPoint(), v( cp2x, cp2y ).plus( this.getRelativePoint() ), v( x, y ).plus( this.getRelativePoint() ) ); },\n    cubicCurveToPoint: function( control1, control2, point ) {\n      var shape = this;\n      // see http://www.w3.org/TR/2dcontext/#dom-context-2d-quadraticcurveto\n      this.ensure( control1 );\n      var start = this.getLastSubpath().getLastPoint();\n      var cubic = new Cubic( start, control1, control2, point );\n\n      var nondegenerateSegments = cubic.getNondegenerateSegments();\n      _.each( nondegenerateSegments, function( segment ) {\n        shape.addSegmentAndBounds( segment );\n      } );\n      this.getLastSubpath().addPoint( point );\n\n      this.setCubicControlPoint( control2 );\n\n      return this;\n    },\n\n    arc: function( centerX, centerY, radius, startAngle, endAngle, anticlockwise ) { return this.arcPoint( v( centerX, centerY ), radius, startAngle, endAngle, anticlockwise ); },\n    arcPoint: function( center, radius, startAngle, endAngle, anticlockwise ) {\n      // see http://www.w3.org/TR/2dcontext/#dom-context-2d-arc\n\n      var arc = new Arc( center, radius, startAngle, endAngle, anticlockwise );\n\n      // we are assuming that the normal conditions were already met (or exceptioned out) so that these actually work with canvas\n      var startPoint = arc.getStart();\n      var endPoint = arc.getEnd();\n\n      // if there is already a point on the subpath, and it is different than our starting point, draw a line between them\n      if ( this.hasSubpaths() && this.getLastSubpath().getLength() > 0 && !startPoint.equals( this.getLastSubpath().getLastPoint(), 0 ) ) {\n        this.addSegmentAndBounds( new Line( this.getLastSubpath().getLastPoint(), startPoint ) );\n      }\n\n      if ( !this.hasSubpaths() ) {\n        this.addSubpath( new Subpath() );\n      }\n\n      // technically the Canvas spec says to add the start point, so we do this even though it is probably completely unnecessary (there is no conditional)\n      this.getLastSubpath().addPoint( startPoint );\n      this.getLastSubpath().addPoint( endPoint );\n\n      this.addSegmentAndBounds( arc );\n      this.resetControlPoints();\n\n      return this;\n    },\n\n    ellipticalArc: function( centerX, centerY, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise ) { return this.ellipticalArcPoint( v( centerX, centerY ), radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise ); },\n    ellipticalArcPoint: function( center, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise ) {\n      // see http://www.w3.org/TR/2dcontext/#dom-context-2d-arc\n\n      var ellipticalArc = new EllipticalArc( center, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise );\n\n      // we are assuming that the normal conditions were already met (or exceptioned out) so that these actually work with canvas\n      var startPoint = ellipticalArc.start;\n      var endPoint = ellipticalArc.end;\n\n      // if there is already a point on the subpath, and it is different than our starting point, draw a line between them\n      if ( this.hasSubpaths() && this.getLastSubpath().getLength() > 0 && !startPoint.equals( this.getLastSubpath().getLastPoint(), 0 ) ) {\n        this.addSegmentAndBounds( new Line( this.getLastSubpath().getLastPoint(), startPoint ) );\n      }\n\n      if ( !this.hasSubpaths() ) {\n        this.addSubpath( new Subpath() );\n      }\n\n      // technically the Canvas spec says to add the start point, so we do this even though it is probably completely unnecessary (there is no conditional)\n      this.getLastSubpath().addPoint( startPoint );\n      this.getLastSubpath().addPoint( endPoint );\n\n      this.addSegmentAndBounds( ellipticalArc );\n      this.resetControlPoints();\n\n      return this;\n    },\n\n    close: function() {\n      if ( this.hasSubpaths() ) {\n        var previousPath = this.getLastSubpath();\n        var nextPath = new Subpath();\n\n        previousPath.close();\n        this.addSubpath( nextPath );\n        nextPath.addPoint( previousPath.getFirstPoint() );\n      }\n      this.resetControlPoints();\n      return this;\n    },\n\n    // matches SVG's elliptical arc from http://www.w3.org/TR/SVG/paths.html\n    ellipticalArcToRelative: function( radiusX, radiusY, rotation, largeArc, sweep, x, y ) {\n      var relativePoint = this.getRelativePoint();\n      return this.ellipticalArcTo( radiusX, radiusY, rotation, largeArc, sweep, x + relativePoint.x, y + relativePoint.y );\n    },\n    ellipticalArcTo: function( radiusX, radiusY, rotation, largeArc, sweep, x, y ) {\n      throw new Error( 'ellipticalArcTo unimplemented' );\n    },\n\n    /*\n     * Draws a circle using the arc() call with the following parameters:\n     * circle( center, radius ) // center is a Vector2\n     * circle( centerX, centerY, radius )\n     */\n    circle: function( centerX, centerY, radius ) {\n      if ( typeof centerX === 'object' ) {\n        // circle( center, radius )\n        var center = centerX;\n        radius = centerY;\n        return this.arcPoint( center, radius, 0, Math.PI * 2, false );\n      }\n      else {\n        // circle( centerX, centerY, radius )\n        return this.arcPoint( p( centerX, centerY ), radius, 0, Math.PI * 2, false );\n      }\n    },\n\n    /*\n     * Draws an ellipse using the ellipticalArc() call with the following parameters:\n     * ellipse( center, radiusX, radiusY, rotation ) // center is a Vector2\n     * ellipse( centerX, centerY, radiusX, radiusY, rotation )\n     *\n     * The rotation is about the centerX, centerY.\n     */\n    ellipse: function( centerX, centerY, radiusX, radiusY, rotation ) {\n      // TODO: separate into ellipse() and ellipsePoint()?\n      // TODO: Ellipse/EllipticalArc has a mess of parameters. Consider parameter object, or double-check parameter handling\n      if ( typeof centerX === 'object' ) {\n        // ellipse( center, radiusX, radiusY, rotation )\n        var center = centerX;\n        rotation = radiusY;\n        radiusY = radiusX;\n        radiusX = centerY;\n        return this.ellipticalArcPoint( center, radiusX, radiusY, rotation || 0, 0, Math.PI * 2, false );\n      }\n      else {\n        // ellipse( centerX, centerY, radiusX, radiusY, rotation )\n        return this.ellipticalArcPoint( v( centerX, centerY ), radiusX, radiusY, rotation || 0, 0, Math.PI * 2, false );\n      }\n    },\n\n    rect: function( x, y, width, height ) {\n      var subpath = new Subpath();\n      this.addSubpath( subpath );\n      subpath.addPoint( v( x, y ) );\n      subpath.addPoint( v( x + width, y ) );\n      subpath.addPoint( v( x + width, y + height ) );\n      subpath.addPoint( v( x, y + height ) );\n      this.addSegmentAndBounds( new Line( subpath.points[ 0 ], subpath.points[ 1 ] ) );\n      this.addSegmentAndBounds( new Line( subpath.points[ 1 ], subpath.points[ 2 ] ) );\n      this.addSegmentAndBounds( new Line( subpath.points[ 2 ], subpath.points[ 3 ] ) );\n      subpath.close();\n      this.addSubpath( new Subpath() );\n      this.getLastSubpath().addPoint( v( x, y ) );\n      assert && assert( !isNaN( this.bounds.getX() ) );\n      this.resetControlPoints();\n\n      return this;\n    },\n\n    //Create a round rectangle. All arguments are number.\n    roundRect: function( x, y, width, height, arcw, arch ) {\n      var lowX = x + arcw;\n      var highX = x + width - arcw;\n      var lowY = y + arch;\n      var highY = y + height - arch;\n      // if ( true ) {\n      if ( arcw === arch ) {\n        // we can use circular arcs, which have well defined stroked offsets\n        this\n          .arc( highX, lowY, arcw, -Math.PI / 2, 0, false )\n          .arc( highX, highY, arcw, 0, Math.PI / 2, false )\n          .arc( lowX, highY, arcw, Math.PI / 2, Math.PI, false )\n          .arc( lowX, lowY, arcw, Math.PI, Math.PI * 3 / 2, false )\n          .close();\n      }\n      else {\n        // we have to resort to elliptical arcs\n        this\n          .ellipticalArc( highX, lowY, arcw, arch, 0, -Math.PI / 2, 0, false )\n          .ellipticalArc( highX, highY, arcw, arch, 0, 0, Math.PI / 2, false )\n          .ellipticalArc( lowX, highY, arcw, arch, 0, Math.PI / 2, Math.PI, false )\n          .ellipticalArc( lowX, lowY, arcw, arch, 0, Math.PI, Math.PI * 3 / 2, false )\n          .close();\n      }\n      return this;\n    },\n\n    polygon: function( vertices ) {\n      var length = vertices.length;\n      if ( length > 0 ) {\n        this.moveToPoint( vertices[ 0 ] );\n        for ( var i = 1; i < length; i++ ) {\n          this.lineToPoint( vertices[ i ] );\n        }\n      }\n      return this.close();\n    },\n\n    /**\n     * This is a convenience function that allows to generate Cardinal splines\n     * from a position array. Cardinal spline differs from Bezier curves in that all\n     * defined points on a Cardinal spline are on the path itself.\n     *\n     * It includes a tension parameter to allow the client to specify how tightly\n     * the path interpolates between points. One can think of the tension as the tension in\n     * a rubber band around pegs. however unlike a rubber band the tension can be negative.\n     * the tension ranges from -1 to 1\n     *\n     * @param {Array.<Vector2>} positions\n     * @param {Object} [options] - see documentation below\n     * @returns {Shape}\n     */\n    cardinalSpline: function( positions, options ) {\n      options = _.extend( {\n        // the tension parameter controls how smoothly the curve turns through its\n        // control points. For a Catmull-Rom curve the tension is zero.\n        // the tension should range from  -1 to 1\n        tension: 0,\n\n        // is the resulting shape forming a closed line?\n        isClosedLineSegments: false\n      }, options );\n\n      assert && assert( options.tension < 1 && options.tension > -1, ' the tension goes from -1 to 1 ' );\n\n      var pointNumber = positions.length; // number of points in the array\n\n      // if the line is open, there is one less segments than point vectors\n      var segmentNumber = ( options.isClosedLineSegments ) ? pointNumber : pointNumber - 1;\n\n      for ( var i = 0; i < segmentNumber; i++ ) {\n        var cardinalPoints; // {Array.<Vector2>} cardinal points Array\n        if ( i === 0 && !options.isClosedLineSegments ) {\n          cardinalPoints = [\n            positions[ 0 ],\n            positions[ 0 ],\n            positions[ 1 ],\n            positions[ 2 ] ];\n        }\n        else if ( (i === segmentNumber - 1) && !options.isClosedLineSegments ) {\n          cardinalPoints = [\n            positions[ i - 1 ],\n            positions[ i ],\n            positions[ i + 1 ],\n            positions[ i + 1 ] ];\n        }\n        else {\n          cardinalPoints = [\n            positions[ ( i - 1 + pointNumber ) % pointNumber ],\n            positions[ i % pointNumber ],\n            positions[ ( i + 1 ) % pointNumber ],\n            positions[ ( i + 2 ) % pointNumber ] ];\n        }\n\n        // Cardinal Spline to Cubic Bezier conversion matrix\n        //    0                 1             0            0\n        //  (-1+tension)/6      1      (1-tension)/6       0\n        //    0            (1-tension)/6      1       (-1+tension)/6\n        //    0                 0             1           0\n\n        // {Array.<Vector2>} bezier points Array\n        var bezierPoints = [\n          cardinalPoints[ 1 ],\n          weightedSplineVector( cardinalPoints[ 0 ], cardinalPoints[ 1 ], cardinalPoints[ 2 ], options.tension ),\n          weightedSplineVector( cardinalPoints[ 3 ], cardinalPoints[ 2 ], cardinalPoints[ 1 ], options.tension ),\n          cardinalPoints[ 2 ]\n        ];\n\n        // special operations on the first point\n        if ( i === 0 ) {\n          this.ensure( bezierPoints[ 0 ] );\n          this.getLastSubpath().addPoint( bezierPoints[ 0 ] );\n        }\n\n        this.cubicCurveToPoint( bezierPoints[ 1 ], bezierPoints[ 2 ], bezierPoints[ 3 ] );\n      }\n\n      return this;\n    },\n\n    copy: function() {\n      // copy each individual subpath, so future modifications to either Shape doesn't affect the other one\n      return new Shape( _.map( this.subpaths, function( subpath ) { return subpath.copy(); } ), this.bounds );\n    },\n\n    // write out this shape's path to a canvas 2d context. does NOT include the beginPath()!\n    writeToContext: function( context ) {\n      var len = this.subpaths.length;\n      for ( var i = 0; i < len; i++ ) {\n        this.subpaths[ i ].writeToContext( context );\n      }\n    },\n\n    // returns something like \"M150 0 L75 200 L225 200 Z\" for a triangle\n    getSVGPath: function() {\n      var string = '';\n      var len = this.subpaths.length;\n      for ( var i = 0; i < len; i++ ) {\n        var subpath = this.subpaths[ i ];\n        if ( subpath.isDrawable() ) {\n          // since the commands after this are relative to the previous 'point', we need to specify a move to the initial point\n          var startPoint = subpath.segments[ 0 ].start;\n          assert && assert( startPoint.equalsEpsilon( subpath.getFirstPoint(), 0.00001 ) ); // sanity check\n          string += 'M ' + kite.svgNumber( startPoint.x ) + ' ' + kite.svgNumber( startPoint.y ) + ' ';\n\n          for ( var k = 0; k < subpath.segments.length; k++ ) {\n            string += subpath.segments[ k ].getSVGPathFragment() + ' ';\n          }\n\n          if ( subpath.isClosed() ) {\n            string += 'Z ';\n          }\n        }\n      }\n      return string;\n    },\n\n    // return a new Shape that is transformed by the associated matrix\n    transformed: function( matrix ) {\n      // TODO: allocation reduction\n      var subpaths = _.map( this.subpaths, function( subpath ) { return subpath.transformed( matrix ); } );\n      var bounds = _.reduce( subpaths, function( bounds, subpath ) { return bounds.union( subpath.bounds ); }, Bounds2.NOTHING );\n      return new Shape( subpaths, bounds );\n    },\n\n    /*\n     * Provided options (see Segment.nonlinearTransformed)\n     * - minLevels:                       how many levels to force subdivisions\n     * - maxLevels:                       prevent subdivision past this level\n     * - distanceEpsilon (optional null): controls level of subdivision by attempting to ensure a maximum (squared) deviation from the curve. smaller => more subdivision\n     * - curveEpsilon (optional null):    controls level of subdivision by attempting to ensure a maximum curvature change between segments. smaller => more subdivision\n     * -   OR includeCurvature:           {Boolean}, whether to include a default curveEpsilon (usually off by default)\n     * - pointMap (optional):             function( Vector2 ) : Vector2, represents a (usually non-linear) transformation applied\n     * - methodName (optional):           if the method name is found on the segment, it is called with the expected signature function( options ) : Array[Segment]\n     *                                    instead of using our brute-force logic. Supports optimizations for custom non-linear transforms (like polar coordinates)\n     */\n    nonlinearTransformed: function( options ) {\n      // defaults\n      options = _.extend( {\n        minLevels: 0,\n        maxLevels: 7,\n        distanceEpsilon: 0.16, // NOTE: this will change when the Shape is scaled, since this is a threshold for the square of a distance value\n        curveEpsilon: ( options && options.includeCurvature ) ? 0.002 : null\n      }, options );\n\n      // TODO: allocation reduction\n      var subpaths = _.map( this.subpaths, function( subpath ) { return subpath.nonlinearTransformed( options ); } );\n      var bounds = _.reduce( subpaths, function( bounds, subpath ) { return bounds.union( subpath.bounds ); }, Bounds2.NOTHING );\n      return new Shape( subpaths, bounds );\n    },\n\n    /*\n     * Maps points by treating their x coordinate as polar angle, and y coordinate as polar magnitude.\n     * See http://en.wikipedia.org/wiki/Polar_coordinate_system\n     *\n     * Please see Shape.nonlinearTransformed for more documentation on adaptive discretization options (minLevels, maxLevels, distanceEpsilon, curveEpsilon)\n     *\n     * Example: A line from (0,10) to (pi,10) will be transformed to a circular arc from (10,0) to (-10,0) passing through (0,10).\n     */\n    polarToCartesian: function( options ) {\n      return this.nonlinearTransformed( _.extend( {\n        pointMap: function( p ) {\n          return Vector2.createPolar( p.y, p.x );\n          // return new Vector2( p.y * Math.cos( p.x ), p.y * Math.sin( p.x ) );\n        },\n        methodName: 'polarToCartesian' // this will be called on Segments if it exists to do more optimized conversion (see Line)\n      }, options ) );\n    },\n\n    /*\n     * Converts each segment into lines, using an adaptive (midpoint distance subdivision) method.\n     *\n     * NOTE: uses nonlinearTransformed method internally, but since we don't provide a pointMap or methodName, it won't create anything but line segments.\n     * See nonlinearTransformed for documentation of options\n     */\n    toPiecewiseLinear: function( options ) {\n      assert && assert( !options.pointMap, 'No pointMap for toPiecewiseLinear allowed, since it could create non-linear segments' );\n      assert && assert( !options.methodName, 'No methodName for toPiecewiseLinear allowed, since it could create non-linear segments' );\n      return this.nonlinearTransformed( options );\n    },\n\n    containsPoint: function( point ) {\n      // we pick a ray, and determine the winding number over that ray. if the number of segments crossing it CCW == number of segments crossing it CW, then the point is contained in the shape\n      var ray = new Ray2( point, Vector2.X_UNIT );\n\n      return this.windingIntersection( ray ) !== 0;\n    },\n\n    intersection: function( ray ) {\n      var hits = [];\n      var numSubpaths = this.subpaths.length;\n      for ( var i = 0; i < numSubpaths; i++ ) {\n        var subpath = this.subpaths[ i ];\n\n        if ( subpath.isDrawable() ) {\n          var numSegments = subpath.segments.length;\n          for ( var k = 0; k < numSegments; k++ ) {\n            var segment = subpath.segments[ k ];\n            hits = hits.concat( segment.intersection( ray ) );\n          }\n\n          if ( subpath.hasClosingSegment() ) {\n            hits = hits.concat( subpath.getClosingSegment().intersection( ray ) );\n          }\n        }\n      }\n      return _.sortBy( hits, function( hit ) { return hit.distance; } );\n    },\n\n    windingIntersection: function( ray ) {\n      var wind = 0;\n\n      var numSubpaths = this.subpaths.length;\n      for ( var i = 0; i < numSubpaths; i++ ) {\n        var subpath = this.subpaths[ i ];\n\n        if ( subpath.isDrawable() ) {\n          var numSegments = subpath.segments.length;\n          for ( var k = 0; k < numSegments; k++ ) {\n            wind += subpath.segments[ k ].windingIntersection( ray );\n          }\n\n          // handle the implicit closing line segment\n          if ( subpath.hasClosingSegment() ) {\n            wind += subpath.getClosingSegment().windingIntersection( ray );\n          }\n        }\n      }\n\n      return wind;\n    },\n\n    /**\n     * Whether the path of the Shape intersects (or is contained in) the provided bounding box.\n     * Computed by checking intersections with all four edges of the bounding box, or whether the Shape is totally\n     * contained within the bounding box.\n     *\n     * @param {Bounds2} bounds\n     */\n    intersectsBounds: function( bounds ) {\n      // If the bounding box completely surrounds our shape, it intersects the bounds\n      if ( this.bounds.intersection( bounds ).equals( this.bounds ) ) {\n        return true;\n      }\n\n      // rays for hit testing along the bounding box edges\n      var minHorizontalRay = new Ray2( new Vector2( bounds.minX, bounds.minY ), new Vector2( 1, 0 ) );\n      var minVerticalRay = new Ray2( new Vector2( bounds.minX, bounds.minY ), new Vector2( 0, 1 ) );\n      var maxHorizontalRay = new Ray2( new Vector2( bounds.maxX, bounds.maxY ), new Vector2( -1, 0 ) );\n      var maxVerticalRay = new Ray2( new Vector2( bounds.maxX, bounds.maxY ), new Vector2( 0, -1 ) );\n\n      var hitPoint;\n      var i;\n      // TODO: could optimize to intersect differently so we bail sooner\n      var horizontalRayIntersections = this.intersection( minHorizontalRay ).concat( this.intersection( maxHorizontalRay ) );\n      for ( i = 0; i < horizontalRayIntersections.length; i++ ) {\n        hitPoint = horizontalRayIntersections[ i ].point;\n        if ( hitPoint.x >= bounds.minX && hitPoint.x <= bounds.maxX ) {\n          return true;\n        }\n      }\n\n      var verticalRayIntersections = this.intersection( minVerticalRay ).concat( this.intersection( maxVerticalRay ) );\n      for ( i = 0; i < verticalRayIntersections.length; i++ ) {\n        hitPoint = verticalRayIntersections[ i ].point;\n        if ( hitPoint.y >= bounds.minY && hitPoint.y <= bounds.maxY ) {\n          return true;\n        }\n      }\n\n      // not contained, and no intersections with the sides of the bounding box\n      return false;\n    },\n\n    // returns a new Shape that is an outline of the stroked path of this current Shape. currently not intended to be nested (doesn't do intersection computations yet)\n    // TODO: rename stroked( lineStyles )\n    getStrokedShape: function( lineStyles ) {\n      var subpaths = [];\n      var bounds = Bounds2.NOTHING.copy();\n      var subLen = this.subpaths.length;\n      for ( var i = 0; i < subLen; i++ ) {\n        var subpath = this.subpaths[ i ];\n        var strokedSubpath = subpath.stroked( lineStyles );\n        subpaths = subpaths.concat( strokedSubpath );\n      }\n      subLen = subpaths.length;\n      for ( i = 0; i < subLen; i++ ) {\n        bounds.includeBounds( subpaths[ i ].bounds );\n      }\n      return new Shape( subpaths, bounds );\n    },\n\n    // {experimental!}\n    getOffsetShape: function( distance ) {\n      // TODO: abstract away this type of behavior\n      var subpaths = [];\n      var bounds = Bounds2.NOTHING.copy();\n      var subLen = this.subpaths.length;\n      for ( var i = 0; i < subLen; i++ ) {\n        subpaths.push( this.subpaths[ i ].offset( distance ) );\n      }\n      subLen = subpaths.length;\n      for ( i = 0; i < subLen; i++ ) {\n        bounds.includeBounds( subpaths[ i ].bounds );\n      }\n      return new Shape( subpaths, bounds );\n    },\n\n    getBounds: function() {\n      if ( this._bounds === null ) {\n        var bounds = Bounds2.NOTHING.copy();\n        _.each( this.subpaths, function( subpath ) {\n          bounds.includeBounds( subpath.getBounds() );\n        } );\n        this._bounds = bounds;\n      }\n      return this._bounds;\n    },\n    get bounds() { return this.getBounds(); },\n\n    getStrokedBounds: function( lineStyles ) {\n      // Check if all of our segments end vertically or horizontally AND our drawable subpaths are all closed. If so,\n      // we can apply a bounds dilation.\n      var areStrokedBoundsDilated = true;\n      for ( var i = 0; i < this.subpaths.length; i++ ) {\n        var subpath = this.subpaths[ i ];\n\n        // If a subpath with any segments is NOT closed, line-caps will apply. We can't make the simplification in this\n        // case.\n        if ( subpath.isDrawable() && !subpath.isClosed() ) {\n          areStrokedBoundsDilated = false;\n          break;\n        }\n        for ( var j = 0; j < subpath.segments.length; j++ ) {\n          var segment = subpath.segments[ j ];\n          if ( !segment.areStrokedBoundsDilated() ) {\n            areStrokedBoundsDilated = false;\n            break;\n          }\n        }\n      }\n\n      if ( areStrokedBoundsDilated ) {\n        return this.bounds.dilated( lineStyles.lineWidth / 2 );\n      }\n      else {\n        return this.bounds.union( this.getStrokedShape( lineStyles ).bounds );\n      }\n    },\n\n    getBoundsWithTransform: function( matrix, lineStyles ) {\n      // if we don't need to handle rotation/shear, don't use the extra effort!\n      if ( matrix.isAxisAligned() ) {\n        return this.getStrokedBounds( lineStyles );\n      }\n\n      var bounds = Bounds2.NOTHING.copy();\n\n      var numSubpaths = this.subpaths.length;\n      for ( var i = 0; i < numSubpaths; i++ ) {\n        var subpath = this.subpaths[ i ];\n        bounds.includeBounds( subpath.getBoundsWithTransform( matrix ) );\n      }\n\n      if ( lineStyles ) {\n        bounds.includeBounds( this.getStrokedShape( lineStyles ).getBoundsWithTransform( matrix ) );\n      }\n\n      return bounds;\n    },\n\n    /**\n     * Should be called after mutating the x/y of Vector2 points that were passed in to various Shape calls, so that\n     * derived information computed (bounds, etc.) will be correct, and any clients (e.g. Scenery Paths) will be\n     * notified of the updates.\n     */\n    invalidatePoints: function() {\n      this._invalidatingPoints = true;\n\n      var numSubpaths = this.subpaths.length;\n      for ( var i = 0; i < numSubpaths; i++ ) {\n        this.subpaths[ i ].invalidatePoints();\n      }\n\n      this._invalidatingPoints = false;\n      this.invalidate();\n    },\n\n    toString: function() {\n      // TODO: consider a more verbose but safer way?\n      return 'new kite.Shape( \\'' + this.getSVGPath() + '\\' )';\n    },\n\n    /*---------------------------------------------------------------------------*\n     * Internal subpath computations\n     *----------------------------------------------------------------------------*/\n\n    // @private\n    invalidate: function() {\n      if ( !this._invalidatingPoints ) {\n        this._bounds = null;\n\n        this.trigger0( 'invalidated' );\n      }\n    },\n\n    // @private\n    addSegmentAndBounds: function( segment ) {\n      this.getLastSubpath().addSegment( segment );\n      this.invalidate();\n    },\n\n    // @private\n    ensure: function( point ) {\n      if ( !this.hasSubpaths() ) {\n        this.addSubpath( new Subpath() );\n        this.getLastSubpath().addPoint( point );\n      }\n    },\n\n    // @private\n    addSubpath: function( subpath ) {\n      this.subpaths.push( subpath );\n\n      // listen to when the subpath is invalidated (will cause bounds recomputation here)\n      subpath.onStatic( 'invalidated', this._invalidateListener );\n\n      this.invalidate();\n\n      return this; // allow chaining\n    },\n\n    // @private\n    hasSubpaths: function() {\n      return this.subpaths.length > 0;\n    },\n\n    // @private\n    getLastSubpath: function() {\n      return _.last( this.subpaths );\n    },\n\n    // @private - gets the last point in the last subpath, or null if it doesn't exist\n    getLastPoint: function() {\n      return this.hasSubpaths() ? this.getLastSubpath().getLastPoint() : null;\n    },\n\n    // @private\n    getLastSegment: function() {\n      if ( !this.hasSubpaths() ) { return null; }\n\n      var subpath = this.getLastSubpath();\n      if ( !subpath.isDrawable() ) { return null; }\n\n      return subpath.getLastSegment();\n    },\n\n    // @private - returns the point to be used for smooth quadratic segments\n    getSmoothQuadraticControlPoint: function() {\n      var lastPoint = this.getLastPoint();\n\n      if ( this.lastQuadraticControlPoint ) {\n        return lastPoint.plus( lastPoint.minus( this.lastQuadraticControlPoint ) );\n      }\n      else {\n        return lastPoint;\n      }\n    },\n\n    // @private - returns the point to be used for smooth cubic segments\n    getSmoothCubicControlPoint: function() {\n      var lastPoint = this.getLastPoint();\n\n      if ( this.lastCubicControlPoint ) {\n        return lastPoint.plus( lastPoint.minus( this.lastCubicControlPoint ) );\n      }\n      else {\n        return lastPoint;\n      }\n    },\n\n    // @private\n    getRelativePoint: function() {\n      var lastPoint = this.getLastPoint();\n      return lastPoint ? lastPoint : Vector2.ZERO;\n    }\n  } );\n\n  /*---------------------------------------------------------------------------*\n   * Shape shortcuts\n   *----------------------------------------------------------------------------*/\n\n  Shape.rectangle = function( x, y, width, height ) {\n    return new Shape().rect( x, y, width, height );\n  };\n  Shape.rect = Shape.rectangle;\n\n  // Create a round rectangle {Shape}, with {Number} arguments. Uses circular or elliptical arcs if given.\n  Shape.roundRect = function( x, y, width, height, arcw, arch ) {\n    return new Shape().roundRect( x, y, width, height, arcw, arch );\n  };\n  Shape.roundRectangle = Shape.roundRect;\n\n  /**\n   * Creates a rounded rectangle, where each corner can have a different radius. The radii default to 0, and may be set\n   * using topLeft, topRight, bottomLeft and bottomRight in the options.\n   * @public\n\n   * E.g.:\n   *\n   * var cornerRadius = 20;\n   * var rect = Shape.roundedRectangleWithRadii( 0, 0, 200, 100, {\n   *   topLeft: cornerRadius,\n   *   topRight: cornerRadius\n   * } );\n   *\n   * @param {number} x - Left edge location\n   * @param {number} y - Top edge location\n   * @param {number} width - Width of rectangle\n   * @param {number} height - Height of rectangle\n   * @param {Object] [cornerRadii] - Optional object with potential radii for each corner.\n   */\n  Shape.roundedRectangleWithRadii = function( x, y, width, height, cornerRadii ) {\n    // defaults to 0 (not using _.extends, since we reference each multiple times)\n    var topLeftRadius = cornerRadii && cornerRadii.topLeft || 0;\n    var topRightRadius = cornerRadii && cornerRadii.topRight || 0;\n    var bottomLeftRadius = cornerRadii && cornerRadii.bottomLeft || 0;\n    var bottomRightRadius = cornerRadii && cornerRadii.bottomRight || 0;\n\n    // type and constraint assertions\n    assert && assert( typeof x === 'number' && isFinite( x ), 'Non-finite x' );\n    assert && assert( typeof y === 'number' && isFinite( y ), 'Non-finite y' );\n    assert && assert( typeof width === 'number' && width >= 0 && isFinite( width ), 'Negative or non-finite width' );\n    assert && assert( typeof height === 'number' && height >= 0 && isFinite( height ), 'Negative or non-finite height' );\n    assert && assert( typeof topLeftRadius === 'number' && topLeftRadius >= 0 && isFinite( topLeftRadius ),\n      'Invalid topLeft' );\n    assert && assert( typeof topRightRadius === 'number' && topRightRadius >= 0 && isFinite( topRightRadius ),\n      'Invalid topRight' );\n    assert && assert( typeof bottomLeftRadius === 'number' && bottomLeftRadius >= 0 && isFinite( bottomLeftRadius ),\n      'Invalid bottomLeft' );\n    assert && assert( typeof bottomRightRadius === 'number' && bottomRightRadius >= 0 && isFinite( bottomRightRadius ),\n      'Invalid bottomRight' );\n\n    // verify there is no overlap between corners\n    assert && assert( topLeftRadius + topRightRadius <= width, 'Corner overlap on top edge' );\n    assert && assert( bottomLeftRadius + bottomRightRadius <= width, 'Corner overlap on bottom edge' );\n    assert && assert( topLeftRadius + bottomLeftRadius <= height, 'Corner overlap on left edge' );\n    assert && assert( topRightRadius + bottomRightRadius <= height, 'Corner overlap on right edge' );\n\n    var shape = new kite.Shape();\n    var right = x + width;\n    var bottom = y + height;\n\n    // To draw the rounded rectangle, we use the implicit \"line from last segment to next segment\" and the close() for\n    // all of the straight line edges between arcs, or lineTo the corner.\n\n    if ( bottomRightRadius > 0 ) {\n      shape.arc( right - bottomRightRadius, bottom - bottomRightRadius, bottomRightRadius, 0, Math.PI / 2, false );\n    }\n    else {\n      shape.moveTo( right, bottom );\n    }\n\n    if ( bottomLeftRadius > 0 ) {\n      shape.arc( x + bottomLeftRadius, bottom - bottomLeftRadius, bottomLeftRadius, Math.PI / 2, Math.PI, false );\n    }\n    else {\n      shape.lineTo( x, bottom );\n    }\n\n    if ( topLeftRadius > 0 ) {\n      shape.arc( x + topLeftRadius, y + topLeftRadius, topLeftRadius, Math.PI, 3 * Math.PI / 2, false );\n    }\n    else {\n      shape.lineTo( x, y );\n    }\n\n    if ( topRightRadius > 0 ) {\n      shape.arc( right - topRightRadius, y + topRightRadius, topRightRadius, 3 * Math.PI / 2, 2 * Math.PI, false );\n    }\n    else {\n      shape.lineTo( right, y );\n    }\n\n    shape.close();\n\n    return shape;\n  };\n\n  Shape.polygon = function( vertices ) {\n    return new Shape().polygon( vertices );\n  };\n\n  Shape.bounds = function( bounds ) {\n    return new Shape().rect( bounds.minX, bounds.minY, bounds.maxX - bounds.minX, bounds.maxY - bounds.minY );\n  };\n\n  //Create a line segment, using either (x1,y1,x2,y2) or ({x1,y1},{x2,y2}) arguments\n  Shape.lineSegment = function( a, b, c, d ) {\n    // TODO: add type assertions?\n    if ( typeof a === 'number' ) {\n      return new Shape().moveTo( a, b ).lineTo( c, d );\n    }\n    else {\n      return new Shape().moveToPoint( a ).lineToPoint( b );\n    }\n  };\n\n  Shape.regularPolygon = function( sides, radius ) {\n    var shape = new Shape();\n    _.each( _.range( sides ), function( k ) {\n      var point = Vector2.createPolar( radius, 2 * Math.PI * k / sides );\n      ( k === 0 ) ? shape.moveToPoint( point ) : shape.lineToPoint( point );\n    } );\n    return shape.close();\n  };\n\n  // supports both circle( centerX, centerY, radius ), circle( center, radius ), and circle( radius ) with the center default to 0,0\n  Shape.circle = function( centerX, centerY, radius ) {\n    if ( centerY === undefined ) {\n      // circle( radius ), center = 0,0\n      return new Shape().circle( 0, 0, centerX );\n    }\n    return new Shape().circle( centerX, centerY, radius ).close();\n  };\n\n  /*\n   * Supports ellipse( centerX, centerY, radiusX, radiusY, rotation ), ellipse( center, radiusX, radiusY, rotation ), and ellipse( radiusX, radiusY, rotation )\n   * with the center default to 0,0 and rotation of 0.  The rotation is about the centerX, centerY.\n   */\n  Shape.ellipse = function( centerX, centerY, radiusX, radiusY, rotation ) {\n    // TODO: Ellipse/EllipticalArc has a mess of parameters. Consider parameter object, or double-check parameter handling\n    if ( radiusY === undefined ) {\n      // ellipse( radiusX, radiusY ), center = 0,0\n      return new Shape().ellipse( 0, 0, centerX, centerY, radiusX );\n    }\n    return new Shape().ellipse( centerX, centerY, radiusX, radiusY, rotation ).close();\n  };\n\n  // supports both arc( centerX, centerY, radius, startAngle, endAngle, anticlockwise ) and arc( center, radius, startAngle, endAngle, anticlockwise )\n  Shape.arc = function( centerX, centerY, radius, startAngle, endAngle, anticlockwise ) {\n    return new Shape().arc( centerX, centerY, radius, startAngle, endAngle, anticlockwise );\n  };\n\n  return Shape;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Module that includes all Kite dependencies, so that requiring this module will return an object\n * that consists of the entire exported 'kite' namespace API.\n *\n * The API is actually generated by the 'kite' module, so if this module (or all other modules) are\n * not included, the 'kite' namespace may not be complete.\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'main',[\n  'KITE/kite',\n\n  'KITE/Shape',\n  'KITE/segments/Arc',\n  'KITE/segments/Cubic',\n  'KITE/segments/EllipticalArc',\n  'KITE/segments/Line',\n  'KITE/segments/Quadratic',\n  'KITE/segments/Segment',\n  'KITE/util/LineStyles',\n  'KITE/util/Subpath',\n\n  'KITE/parser/svgPath'\n], function( kite // note: we don't need any of the other parts, we just need to specify them as dependencies so they fill in the kite namespace\n) {\n  'use strict';\n\n  return kite;\n} );\n\n","// Copyright 2015, University of Colorado Boulder\n\n/**\n * Lightweight event & listener abstraction for a single event type.\n *\n * @author Sam Reid (PhET Interactive Simulations)\n */\ndefine( 'AXON/Emitter',['require','PHET_CORE/inherit','AXON/axon'],function( require ) {\n  'use strict';\n\n  // modules\n  var inherit = require( 'PHET_CORE/inherit' );\n  var axon = require( 'AXON/axon' );\n\n  /**\n   *\n   * @constructor\n   */\n  function Emitter() {\n    this.listeners = [];\n\n    // @private - during emit() keep track of which listeners should receive events\n    //            in order to manage removal of listeners during emit()\n    this.listenersToEmitTo = [];\n  }\n\n  axon.register( 'Emitter', Emitter );\n\n  return inherit( Object, Emitter, {\n\n    /**\n     * Adds a listener\n     * @param {function} listener\n     * @public\n     */\n    addListener: function( listener ) {\n\n      // If callbacks are in progress, make a copy of the current list of listeners--the newly added listener\n      // will be available for the next emit() but not the one in progress.  This is to match behavior with removeListener\n      this.defendCallbacks();\n\n      this.listeners.push( listener );\n    },\n\n    /**\n     * Removes a listener\n     * @param {function} listener\n     * @public\n     */\n    removeListener: function( listener ) {\n\n      var index = this.listeners.indexOf( listener );\n      assert && assert( index >= 0, 'tried to removeListener on something that wasnt a listener' );\n\n      // If callbacks are in progress, make a copy of the current list of listeners--the removed listener\n      // will remain in the list and receive a callback for this emit call, see #72\n      this.defendCallbacks();\n\n      this.listeners.splice( index, 1 );\n    },\n\n    /**\n     * Removes all the listeners\n     * @public\n     */\n    removeAllListeners: function() {\n      while ( this.listeners.length > 0 ) {\n        this.removeListener( this.listeners[ 0 ] );\n      }\n    },\n\n    /**\n     * If processing callbacks during an emit() call and addListener/removeListener() is called,\n     * make a defensive copy of the array of listener before changing the array, and use it for\n     * the rest of the callbacks until the emit call has completed.\n     * @private\n     */\n    defendCallbacks: function() {\n\n      for ( var i = this.listenersToEmitTo.length - 1; i >= 0; i-- ) {\n\n        // Once we meet a level that was already defended, we can stop, since all previous levels are also defended\n        if ( this.listenersToEmitTo[ i ].defended ) {\n          break;\n        }\n        else {\n          var defendedListeners = this.listeners.slice();\n\n          // Mark copies as 'defended' so that it will use the original listeners when emit started and not the modified list.\n          defendedListeners.defended = true;\n          this.listenersToEmitTo[ i ] = defendedListeners;\n        }\n      }\n    },\n\n    /**\n     * Emits a single event.\n     * This method is called many times in a simulation and must be well-optimized.\n     * @public\n     */\n    emit: function() {\n      this.listenersToEmitTo.push( this.listeners );\n      var lastEntry = this.listenersToEmitTo.length - 1;\n\n      for ( var i = 0; i < this.listenersToEmitTo[ lastEntry ].length; i++ ) {\n        this.listenersToEmitTo[ lastEntry ][ i ]();\n      }\n\n      this.listenersToEmitTo.pop();\n    },\n\n    /**\n     * Emits a single event with one argument.  This is a copy-paste of emit() for performance reasons.\n     * @param {*} arg1\n     * @public\n     */\n    emit1: function( arg1 ) {\n      this.listenersToEmitTo.push( this.listeners );\n      var lastEntry = this.listenersToEmitTo.length - 1;\n\n      for ( var i = 0; i < this.listenersToEmitTo[ lastEntry ].length; i++ ) {\n        this.listenersToEmitTo[ lastEntry ][ i ]( arg1 );\n      }\n\n      this.listenersToEmitTo.pop();\n    },\n\n    /**\n     * Emits a single event with two arguments.  This is a copy-paste of emit() for performance reasons.\n     * @param {*} arg1\n     * @param {*} arg2\n     * @public\n     */\n    emit2: function( arg1, arg2 ) {\n      this.listenersToEmitTo.push( this.listeners );\n      var lastEntry = this.listenersToEmitTo.length - 1;\n\n      for ( var i = 0; i < this.listenersToEmitTo[ lastEntry ].length; i++ ) {\n        this.listenersToEmitTo[ lastEntry ][ i ]( arg1, arg2 );\n      }\n\n      this.listenersToEmitTo.pop();\n    },\n\n    /**\n     * Checks whether a listener is registered with this Emitter\n     * @param {function} listener\n     * @returns {boolean}\n     * @public\n     */\n    hasListener: function( listener ) {\n      assert && assert( arguments.length === 1, 'Emitter.hasListener should be called with 1 argument' );\n      return this.listeners.indexOf( listener ) >= 0;\n    },\n\n    /**\n     * Returns true if there are any listeners.\n     * @returns {boolean}\n     * @public\n     */\n    hasListeners: function() {\n      assert && assert( arguments.length === 0, 'Emitter.hasListeners should be called without arguments' );\n      return this.listeners.length > 0;\n    }\n  } );\n} );\n","// Copyright 2014-2015, University of Colorado Boulder\n\n/**\n * A Multilink is an instance that can be used to link to multiple properties.  It is very similar to a DerivedProperty,\n * but has no value and does not conform to the Property API because it is intended for use with callbacks that do not\n * compute a value.  Multilink should not be created through calling its constructor directly, but through the\n * Property.multilink and Property.lazyMultilink functions.\n *\n * @author Sam Reid\n */\ndefine( 'AXON/Multilink',['require','AXON/axon','PHET_CORE/inherit'],function( require ) {\n  'use strict';\n\n  // modules\n  var axon = require( 'AXON/axon' );\n  var inherit = require( 'PHET_CORE/inherit' );\n\n  /**\n   * @param {Property[]} dependencies\n   * @param {function} callback function that expects args in the same order as dependencies\n   * @param {boolean} [lazy] Optional parameter that can be set to true if this should be a lazy multilink (no immediate callback)\n   * @constructor\n   */\n  function Multilink( dependencies, callback, lazy ) {\n\n    this.dependencies = dependencies; // @private\n\n    // @private Keep track of each dependency and only update the changed value, for speed\n    this.dependencyValues = dependencies.map( function( property ) {return property.get();} );\n\n    var multilink = this;\n\n    // @private Keep track of listeners so they can be detached\n    this.dependencyListeners = [];\n\n    //When a dependency value changes, update the list of dependencies and call back to the callback\n    for ( var i = 0; i < dependencies.length; i++ ) {\n      var dependency = dependencies[ i ];\n      (function( dependency, i ) {\n        var listener = function( newValue ) {\n          multilink.dependencyValues[ i ] = newValue;\n          callback.apply( null, multilink.dependencyValues );\n        };\n        multilink.dependencyListeners.push( listener );\n        dependency.lazyLink( listener );\n      })( dependency, i );\n    }\n\n    //Send initial call back but only if we are non-lazy\n    if ( !lazy ) {\n      callback.apply( null, this.dependencyValues );\n    }\n  }\n\n  axon.register( 'Multilink', Multilink );\n\n  return inherit( Object, Multilink, {\n\n    // @public\n    dispose: function() {\n      // Unlink from dependent properties\n      for ( var i = 0; i < this.dependencies.length; i++ ) {\n        var dependency = this.dependencies[ i ];\n        dependency.unlink( this.dependencyListeners[ i ] );\n      }\n      this.dependencies = null;\n      this.dependencyListeners = null;\n      this.dependencyValues = null;\n    }\n  } );\n} );\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * An observable property which notifies registered observers when the value changes.\n *\n * @author Sam Reid\n * @author Chris Malley (PixelZoom, Inc.)\n */\ndefine( 'AXON/Property',['require','AXON/axon','PHET_CORE/inherit','AXON/Events','AXON/Emitter','AXON/Multilink'],function( require ) {\n  'use strict';\n\n  // modules\n  var axon = require( 'AXON/axon' );\n  var inherit = require( 'PHET_CORE/inherit' );\n  var Events = require( 'AXON/Events' );\n  var Emitter = require( 'AXON/Emitter' );\n  var Multilink = require( 'AXON/Multilink' );\n\n  /**\n   * @param {*} value - the initial value of the property\n   * @param {Object} [options] - options\n   * @constructor\n   */\n  function Property( value, options ) {\n\n    var property = this;\n\n    // Check duck type for incorrect Tandem argument\n    if ( options && options.isTandem ) {\n      assert && assert( false, 'Options should be an Object, not a Tandem' );\n    }\n\n    options = _.extend( { tandem: null }, options );\n\n    // @private Internal Events for sending startedCallbacksForChanged & endedCallbacksForChanged\n    this.events = new Events();\n\n    // @private - Store the internal value and the initial value\n    this._value = value;\n\n    // @private - Initial value\n    this._initialValue = value;\n\n    // @private (unit-tests) - emit1 is called when the value changes (or on link)\n    // Also used in ShapePlacementBoard.js at the moment\n    this.changedEmitter = new Emitter();\n\n    options.tandem && options.tandem.addInstance( this );\n\n    // @private\n    this.disposeProperty = function() {\n\n      // Make sure there were no remaining observers.  If there are observers at disposal time, there may be a latent\n      // memory leak, see #77\n      assert && assert(\n        property.changedEmitter.listeners.length === 0,\n        'during disposal, expected 0 observers, actual = ' + property.changedEmitter.listeners.length\n      );\n      options.tandem && options.tandem.removeInstance( this );\n    };\n  }\n\n  axon.register( 'Property', Property );\n\n  return inherit( Object, Property, {\n\n      /**\n       * Gets the value.  You can also use the es5 getter (property.value) but this means is provided for inner loops or internal code that must be fast.\n       * @return {*}\n       * @public\n       */\n      get: function() {\n        return this._value;\n      },\n\n      /**\n       * Sets the value and notifies registered observers.  You can also use the es5 getter (property.value) but this means is provided for inner loops or internal code that must be fast.\n       * If the value hasn't changed, this is a no-op.\n       *\n       * @param {*} value\n       * @public\n       */\n      set: function( value ) {\n        if ( !this.equalsValue( value ) ) {\n          this._setAndNotifyObservers( value );\n        }\n        return this;\n      },\n\n      // @public returns true iff the specified value equals the value of this property\n      equalsValue: function( value ) {\n        return this.areValuesEqual( value, this._value );\n      },\n\n      /**\n       * Determines equality semantics for the wrapped type, including whether notifications are sent out when the\n       * wrapped value changes, and whether onValue is triggered.  A different implementation can be provided by\n       * subclasses or instances to change the equals definition. See #10 and #73\n       * @param {Object} a - should have the same type as Property element type\n       * @param {Object} b - should have the same type as Property element type\n       * @returns {boolean}\n       * @public\n       */\n      areValuesEqual: function( a, b ) {\n        return a === b;\n      },\n\n      // @public\n      get initialValue() {\n        return this._initialValue;\n      },\n\n      // @private\n      _setAndNotifyObservers: function( value ) {\n        var oldValue = this.get();\n        this._value = value;\n        this._notifyObservers( oldValue );\n      },\n\n      // @private\n      _notifyObservers: function( oldValue ) {\n\n        // Note the current value, since it will be sent to possibly multiple observers.\n        var value = this.get();\n\n        // TODO: Should Property extend or compose Events?  Would extending Events broaden its interface too much?\n        this.events.trigger2( 'startedCallbacksForChanged', value, oldValue );\n\n        this.changedEmitter.emit2( value, oldValue );\n\n        this.events.trigger0( 'endedCallbacksForChanged' );\n      },\n\n      /**\n       * Use this method when mutating a value (not replacing with a new instance) and you want to send notifications about the change.\n       * This is different from the normal axon strategy, but may be necessary to prevent memory allocations.\n       * This method is unsafe for removing observers because it assumes the observer list not modified, to save another allocation\n       * Only provides the new reference as a callback (no oldvalue)\n       * See https://github.com/phetsims/axon/issues/6\n       * @public\n       */\n      notifyObserversStatic: function() {\n        this.changedEmitter.emit1( this.get() );\n      },\n\n      /**\n       * Resets the value to the initial value.\n       * @public\n       */\n      reset: function() {\n        this.set( this._initialValue );\n      },\n\n      // @public\n      get value() { return this.get(); },\n\n      // @public\n      set value( newValue ) { this.set( newValue ); },\n\n      /**\n       * Adds an observer and notifies it immediately.\n       * If observer is already registered, this is a no-op.\n       * The initial notification provides the current value for newValue and null for oldValue.\n       *\n       * @param {function} observer a function of the form observer(newValue,oldValue)\n       * @public\n       */\n      link: function( observer ) {\n        if ( !this.changedEmitter.hasListener( observer ) ) {\n          this.changedEmitter.addListener( observer );\n          observer( this.get(), null ); // null should be used when an object is expected but unavailable\n        }\n      },\n\n      /**\n       * Add an observer to the Property, without calling it back right away.\n       * This is used when you need to register a observer without an immediate callback.\n       *\n       * @param {function} observer - a function with a single argument, which is the value of the property at the time the function is called.\n       * @public\n       */\n      lazyLink: function( observer ) {\n        this.changedEmitter.addListener( observer );\n      },\n\n      /**\n       * Removes an observer.\n       * If observer is not registered, this is a no-op.\n       *\n       * @param {function} observer\n       * @public\n       */\n      unlink: function( observer ) {\n        if ( this.changedEmitter.hasListener( observer ) ) {\n          this.changedEmitter.removeListener( observer );\n        }\n      },\n\n      /**\n       * Removes all observers.\n       * If no observers are registered, this is a no-op.\n       */\n      unlinkAll: function() {\n        this.changedEmitter.removeAllListeners();\n      },\n\n      /**\n       * Links an object's named attribute to this property.  Returns a handle so it can be removed using Property.unlink();\n       * Example: modelVisibleProperty.linkAttribute(view,'visible');\n       *\n       * @param object\n       * @param attributeName\n       * @public\n       */\n      linkAttribute: function( object, attributeName ) {\n        var handle = function( value ) {object[ attributeName ] = value;};\n        this.link( handle );\n        return handle;\n      },\n\n      /**\n       * Unlink an observer added with linkAttribute.  Note: the args of linkAttribute do not match the args of\n       * unlinkAttribute: here, you must pass the observer handle returned by linkAttribute rather than object and attributeName\n       *\n       * @param observer\n       * @public\n       */\n      unlinkAttribute: function( observer ) {\n        this.unlink( observer );\n      },\n\n      // @public Provide toString for console debugging, see http://stackoverflow.com/questions/2485632/valueof-vs-tostring-in-javascript\n      toString: function() {return 'Property{' + this.get() + '}'; },\n\n      // @public\n      valueOf: function() {return this.toString();},\n\n      /**\n       * Add an observer so that it will only fire once (and not on registration)\n       *\n       * I can see two ways to implement this:\n       * (a) add a field to the observer so after notifications it can be checked and possibly removed. Disadvantage: will make everything slower even if not using 'once'\n       * (b) wrap the observer in a new function which will call the observer and then remove itself.  Disadvantage: cannot remove an observer added using 'once'\n       * To avoid possible performance problems, use a wrapper function, and return it as a handle in case the 'once' observer must be removed before it is called once\n       *\n       * @param observer the observer which should be called back only for one property change (and not on registration)\n       * @returns {function} the wrapper handle in case the wrapped function needs to be removed with 'unlink' before it is called once\n       * @public\n       */\n      once: function( observer ) {\n        var property = this;\n        var wrapper = function( newValue, oldValue ) {\n          property.unlink( wrapper );\n          observer( newValue, oldValue );\n        };\n        this.lazyLink( wrapper );\n        return wrapper;\n      },\n\n      /**\n       * Convenience function for debugging a property values.  It prints the new value on registration and when changed.\n       * @param name debug name to be printed on the console\n       * @returns {function} the handle to the linked observer in case it needs to be removed later\n       * @public\n       */\n      debug: function( name ) {\n        var observer = function( value ) { console.log( name, value ); };\n        this.link( observer );\n        return observer;\n      },\n\n      /**\n       * Returns a function that can be used to toggle the property (using !)\n       * @returns {function}\n       * @public\n       */\n      get toggleFunction() {\n        return this.toggle.bind( this );\n      },\n\n      /**\n       * Modifies the value of this Property with the ! operator.  Works for booleans and non-booleans.\n       * @public\n       */\n      toggle: function() {\n        this.value = !this.value;\n      },\n\n      /**\n       * Adds an observer that is fired when the property takes the specified value.  If the property has the value already,\n       * the observer is called back immediately.  A reference to the observer is returned so that it can be removed.\n       *\n       * @param value the value to match\n       * @param observer the observer that is called when this Property\n       * @public\n       */\n      onValue: function( value, observer ) {\n        var property = this;\n        var onValueObserver = function( v ) {\n          if ( property.areValuesEqual( v, value ) ) {\n            observer();\n          }\n        };\n        this.link( onValueObserver );\n        return onValueObserver;\n      },\n\n      // @public Ensures that the Property is eligible for GC\n      dispose: function() {\n        this.disposeProperty();\n      },\n\n      /**\n       * Returns true if there are any listeners.\n       * @returns {boolean}\n       * @public\n       */\n      hasListeners: function() {\n        assert && assert( arguments.length === 0, 'Property.hasListeners should be called without arguments' );\n        return this.changedEmitter.hasListeners();\n      }\n    },\n\n    //statics\n    {\n\n      /**\n       * Registers an observer with multiple properties, then notifies the observer immediately.\n       * @param {Property[]} properties\n       * @param {function} observer no params, returns nothing\n       * @static\n       */\n      multilink: function( properties, observer ) {\n        return new Multilink( properties, observer, false );\n      },\n\n      lazyMultilink: function( properties, observer ) {\n        return new Multilink( properties, observer, true );\n      },\n\n      /**\n       * Removes the multilinked observer from this Property.\n       * Same as calling dispose() on the handle (which happens to be a DerivedProperty instance)\n       * @param {DerivedProperty} derivedProperty\n       */\n      unmultilink: function( derivedProperty ) {\n        derivedProperty.dispose();\n      },\n\n      /**\n       * Set up a PropertySet-like property on any object (see https://github.com/phetsims/axon/issues/42).\n       *\n       * @param {Object} object - The object that the property will be placed on\n       * @param {string} propertyName - Name of the property\n       * @param {*} initialValue - The initial value of the property\n       */\n      addProperty: function( object, propertyName, initialValue ) {\n        // defines the property\n        var property = object[ propertyName + 'Property' ] = new Property( initialValue );\n\n        // defines ES5 getter/setter\n        Object.defineProperty( object, propertyName, {\n          get: function() { return property.get(); },\n          set: function( value ) { property.set( value ); },\n\n          // Make it configurable and enumerable so it's easy to override...\n          configurable: true,\n          enumerable: true\n        } );\n      }\n    } );\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * A DerivedProperty is computed based on other properties.  This implementation inherits from Property to (a) simplify\n * implementation and (b) ensure it remains consistent. Note that the setters should not be called directly, so the\n * setters (set, reset and es5 setter) throw an error if used directly.\n *\n * @author Sam Reid\n */\n\ndefine( 'AXON/DerivedProperty',['require','AXON/Property','AXON/axon','PHET_CORE/inherit'],function( require ) {\n  'use strict';\n\n  // modules\n  var Property = require( 'AXON/Property' );\n  var axon = require( 'AXON/axon' );\n  var inherit = require( 'PHET_CORE/inherit' );\n\n  function equalsFunction( a, b ) {\n    return a === b;\n  }\n\n  function notFunction( a ) {\n    return !a;\n  }\n\n  function conjunctionWithProperty( value, property ) {\n    return value && property.value;\n  }\n\n  function disjunctionWithProperty( value, property ) {\n    return value || property.value;\n  }\n\n  function addWithProperty( value, property ) {\n    return value + property.value;\n  }\n\n  function multiplyWithProperty( value, property ) {\n    return value * property.value;\n  }\n\n  /**\n   * @param {Property[]} dependencies - properties that this property's value is derived from\n   * @param {function} derivation - function that derives this property's value, expects args in the same order as dependencies\n   * @param {Object} [options] - see Property\n   * @constructor\n   */\n  function DerivedProperty( dependencies, derivation, options ) {\n\n    this.dependencies = dependencies; // @private\n\n    // @private Keep track of each dependency and only update the changed value, for speed\n    this.dependencyValues = dependencies.map( function( property ) {return property.get();} );\n\n    var initialValue = derivation.apply( null, this.dependencyValues );\n    Property.call( this, initialValue, options );\n\n    var derivedProperty = this;\n\n    // @private Keep track of listeners so they can be detached\n    this.dependencyListeners = [];\n\n    for ( var i = 0; i < dependencies.length; i++ ) {\n      var dependency = dependencies[ i ];\n      (function( dependency, i ) {\n        var listener = function( newValue ) {\n          derivedProperty.dependencyValues[ i ] = newValue;\n          Property.prototype.set.call( derivedProperty, derivation.apply( null, derivedProperty.dependencyValues ) );\n        };\n        derivedProperty.dependencyListeners.push( listener );\n        dependency.lazyLink( listener );\n      })( dependency, i );\n    }\n  }\n\n  axon.register( 'DerivedProperty', DerivedProperty );\n\n  return inherit( Property, DerivedProperty, {\n\n    // @public\n    dispose: function() {\n\n      Property.prototype.dispose.call( this );\n\n      // Unlink from dependent properties\n      for ( var i = 0; i < this.dependencies.length; i++ ) {\n        var dependency = this.dependencies[ i ];\n        dependency.unlink( this.dependencyListeners[ i ] );\n      }\n      this.dependencies = null;\n      this.dependencyListeners = null;\n      this.dependencyValues = null;\n    },\n\n    /**\n     * Override the mutators to provide an error message.  These should not be called directly,\n     * the value should only be modified when the dependencies change.\n     * @param value\n     * @override\n     * @public\n     */\n    set: function( value ) { throw new Error( 'Cannot set values directly to a derived property, tried to set: ' + value ); },\n\n    /**\n     * Override the mutators to provide an error message.  These should not be called directly, the value should only be modified\n     * when the dependencies change. Keep the newValue output in the string so the argument won't be stripped by minifier\n     * (which would cause crashes like https://github.com/phetsims/axon/issues/15)\n     * @param newValue\n     * @override\n     * @public\n     */\n    set value( newValue ) { throw new Error( 'Cannot es5-set values directly to a derived property, tried to set: ' + newValue ); },\n\n    /**\n     * Override get value as well to satisfy the linter which wants get/set pairs (even though it just uses the same code as the superclass).\n     * @returns {*}\n     * @override\n     * @public\n     */\n    get value() {return Property.prototype.get.call( this );},\n\n    /**\n     * Override the mutators to provide an error message.  These should not be called directly,\n     * the value should only be modified when the dependencies change.\n     * @override\n     * @public\n     */\n    reset: function() { throw new Error( 'Cannot reset a derived property directly' ); }\n  }, {\n\n    /**\n     * Creates a derived boolean property whose value is true iff firstProperty's value is equal to secondPropert's\n     * value.\n     * @public\n     *\n     * @param {Property.<*>} firstProperty\n     * @param {Property.<*>} secondProperty\n     * @param {Object} [options] - Forwarded to the DerivedProperty\n     * @returns {Property.<boolean>}\n     */\n    valueEquals: function( firstProperty, secondProperty, options ) {\n      return new DerivedProperty( [ firstProperty, secondProperty ], equalsFunction, options );\n    },\n\n    /**\n     * Creates a derived boolean property whose value is true iff every input property value is true.\n     * @public\n     *\n     * @param {Array.<Property.<boolean>>} properties\n     * @param {Object} [options] - Forwarded to the DerivedProperty\n     * @returns {Property.<boolean>}\n     */\n    and: function( properties, options ) {\n      return new DerivedProperty( properties, _.reduce.bind( null, properties, conjunctionWithProperty, true ), options ); // TODO: fix\n    },\n\n    /**\n     * Creates a derived boolean property whose value is true iff any input property value is true.\n     * @public\n     *\n     * @param {Array.<Property.<boolean>>} properties\n     * @param {Object} [options] - Forwarded to the DerivedProperty\n     * @returns {Property.<boolean>}\n     */\n    or: function( properties, options ) {\n      return new DerivedProperty( properties, _.reduce.bind( null, properties, disjunctionWithProperty, false ), options );\n    },\n\n    /**\n     * Creates a derived number property whose value is the sum of all input property values (or 0 if no properties\n     * are specified).\n     * @public\n     *\n     * @param {Array.<Property.<number>>}\n     * @param {Object} [options] - Forwarded to the DerivedProperty\n     * @returns {Property.<number>}\n     */\n    sum: function( properties, options ) {\n      return new DerivedProperty( properties, _.reduce.bind( null, properties, addWithProperty, 0 ), options );\n    },\n\n    /**\n     * Creates a derived number property whose value is the sum of both input property values.\n     * @public\n     *\n     * @param {Property.<number>} firstProperty\n     * @param {Property.<number>} secondProperty\n     * @param {Object} [options] - Forwarded to the DerivedProperty\n     * @returns {Property.<number>}\n     */\n    plus: function( firstProperty, secondProperty, options ) {\n      return DerivedProperty.sum( [ firstProperty, secondProperty ], options );\n    },\n\n    /**\n     * Creates a derived number property whose value is the product of all input property values (or 1 if no properties\n     * are specified).\n     * @public\n     *\n     * @param {Array.<Property.<number>>}\n     * @param {Object} [options] - Forwarded to the DerivedProperty\n     * @returns {Property.<number>}\n     */\n    product: function( properties, options ) {\n      return new DerivedProperty( properties, _.reduce.bind( null, properties, multiplyWithProperty, 1 ), options );\n    },\n\n    /**\n     * Creates a derived number property whose value is the product of both input property values.\n     * @public\n     *\n     * @param {Property.<number>} firstProperty\n     * @param {Property.<number>} secondProperty\n     * @param {Object} [options] - Forwarded to the DerivedProperty\n     * @returns {Property.<number>}\n     */\n    times: function( firstProperty, secondProperty, options ) {\n      return DerivedProperty.product( [ firstProperty, secondProperty ], options );\n    },\n\n    /**\n     * Creates a derived boolean property whose value is true iff firstProperty's value is strictly less than the input\n     * numeric value.\n     * @public\n     *\n     * @param {Property.<number>} property\n     * @param {number} number\n     * @param {Object} [options] - Forwarded to the DerivedProperty\n     * @returns {Property.<boolean>}\n     */\n    lessThanNumber: function( property, number, options ) {\n      return new DerivedProperty( [ property ], function( value ) { return value < number; }, options );\n    },\n\n    /**\n     * Creates a derived boolean property whose value is true iff firstProperty's value is less than or equal to the\n     * input numeric value.\n     * @public\n     *\n     * @param {Property.<number>} property\n     * @param {number} number\n     * @param {Object} [options] - Forwarded to the DerivedProperty\n     * @returns {Property.<boolean>}\n     */\n    lessThanEqualNumber: function( property, number, options ) {\n      return new DerivedProperty( [ property ], function( value ) { return value <= number; }, options );\n    },\n\n    /**\n     * Creates a derived boolean property whose value is true iff firstProperty's value is strictly greater than the\n     * input numeric value.\n     * @public\n     *\n     * @param {Property.<number>} property\n     * @param {number} number\n     * @param {Object} [options] - Forwarded to the DerivedProperty\n     * @returns {Property.<boolean>}\n     */\n    greaterThanNumber: function( property, number, options ) {\n      return new DerivedProperty( [ property ], function( value ) { return value > number; }, options );\n    },\n\n    /**\n     * Creates a derived boolean property whose value is true iff firstProperty's value is greater than or equal to the\n     * input numeric value.\n     * @public\n     *\n     * @param {Property.<number>} property\n     * @param {number} number\n     * @param {Object} [options] - Forwarded to the DerivedProperty\n     * @returns {Property.<boolean>}\n     */\n    greaterThanEqualNumber: function( property, number, options ) {\n      return new DerivedProperty( [ property ], function( value ) { return value >= number; }, options );\n    },\n\n    /**\n     * Creates a derived boolean property whose value is true iff the property's value is falsy.\n     * @public\n     *\n     * @param {Property.<*>} property\n     * @param {Object} [options] - Forwarded to the DerivedProperty\n     * @returns {Property.<boolean>}\n     */\n    derivedNot: function( property, options ) {\n      return new DerivedProperty( [ property ], notFunction, options );\n    },\n\n    /**\n     * Creates a derived property whose value is values[ property.value ].\n     * @public\n     *\n     * @param {Property.<*>} property\n     * @param {Object} values\n     * @param {Object} [options] - Forwarded to the DerivedProperty\n     * @returns {Property.<*>}\n     */\n    mapValues: function( property, values, options ) {\n      return new DerivedProperty( [ property ], function( value ) { return values[ value ]; }, options );\n    }\n  } );\n} );\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * An observable array of items.\n * <p>\n * Because the array is observable, we must be careful about the possibility of concurrent-modification errors.\n * Any time we iterate over the array, we must iterate over a copy, because callback may be modifying the array.\n *\n * @author Sam Reid\n * @author Chris Malley\n */\ndefine( 'AXON/ObservableArray',['require','AXON/Property','AXON/axon','PHET_CORE/inherit','AXON/Emitter'],function( require ) {\n  'use strict';\n\n  // modules\n  var Property = require( 'AXON/Property' );\n  var axon = require( 'AXON/axon' );\n  var inherit = require( 'PHET_CORE/inherit' );\n  var Emitter = require( 'AXON/Emitter' );\n\n  /**\n   * @param {[]} array\n   * @param {Object} [options]\n   * @constructor\n   */\n  function ObservableArray( array, options ) {\n\n    // Special case that the user supplied options but no array\n    if ( array instanceof Object && !(array instanceof Array) ) {\n      options = array;\n      array = null;\n    }\n\n    this._options = _.extend( {\n      allowDuplicates: false, // are duplicate items allowed in the array?\n      tandem: null            // Tandem is supported here.  This line doesn't do anything different than leaving tandem as undefined\n                              // but this entry serves as an indicator that tandem is supported here.\n    }, options );\n\n    this._array = array || []; // @private internal, do not access directly\n    this._addedListeners = []; // @private listeners called when an item is added\n    this._removedListeners = []; // @private listeners called when an item is removed\n\n    this.lengthProperty = new Property( this._array.length ); // @public (read-only) observe this, but don't set it\n\n    // @private Store the initial array, if any, for resetting, see #4\n    this.initialArray = array ? array.slice() : [];\n\n    // @private Event stream for signifying begin/end of callbacks\n    this.startedCallbacksForItemAddedEmitter = new Emitter();\n    this.endedCallbacksForItemAddedEmitter = new Emitter();\n    this.startedCallbacksForItemRemovedEmitter = new Emitter();\n    this.endedCallbacksForItemRemovedEmitter = new Emitter();\n\n    options && options.tandem && options.tandem.addInstance( this );\n    this.disposeObservableArray = function() {\n      options && options.tandem && options.tandem.removeInstance( this );\n    };\n  }\n\n  axon.register( 'ObservableArray', ObservableArray );\n\n  return inherit( Object, ObservableArray, {\n\n    // @public\n    dispose: function() {\n      this.disposeObservableArray();\n    },\n\n    /**\n     * Restore the array back to its initial state\n     * Note: if an item is in the current array and original array, it is removed and added back\n     * This may or may not change in the future, see #4\n     * @public\n     */\n    reset: function() {\n      for ( var i = 0; i < this._array.length; i++ ) {\n        this._fireItemRemoved( this._array[ i ] );\n      }\n      this._array = this.initialArray.slice();\n      for ( i = 0; i < this._array.length; i++ ) {\n        this._fireItemAdded( this._array[ i ] );\n      }\n    },\n\n    // @public\n    get length() { return this._array.length; },\n\n    /**\n     * Adds a listener that will be notified when an item is added to the list.\n     * @param listener function( item, observableArray )\n     * @public\n     */\n    addItemAddedListener: function( listener ) {\n      assert && assert( this._addedListeners.indexOf( listener ) === -1 ); // listener is not already registered\n      this._addedListeners.push( listener );\n    },\n\n    /**\n     * Removes a listener that was added via addItemAddedListener.\n     * @param listener\n     * @public\n     */\n    removeItemAddedListener: function( listener ) {\n      var index = this._addedListeners.indexOf( listener );\n      assert && assert( index !== -1 ); // listener is registered\n      this._addedListeners.splice( index, 1 );\n    },\n\n    /**\n     * Adds a listener that will be notified when an item is removed from the list.\n     * @param listener function( item, observableArray )\n     * @public\n     */\n    addItemRemovedListener: function( listener ) {\n      assert && assert( this._removedListeners.indexOf( listener ) === -1 ); // listener is not already registered\n      this._removedListeners.push( listener );\n    },\n\n    /**\n     * Removes a listener that was added via addItemRemovedListener.\n     * @param listener\n     * @public\n     */\n    removeItemRemovedListener: function( listener ) {\n      var index = this._removedListeners.indexOf( listener );\n      assert && assert( index !== -1 ); // listener is registered\n      this._removedListeners.splice( index, 1 );\n    },\n\n    /**\n     * Convenience function for adding both types of listeners in one shot.\n     * @param itemAddedListener\n     * @param itemRemovedListener\n     * @public\n     */\n    addListeners: function( itemAddedListener, itemRemovedListener ) {\n      this.addItemAddedListener( itemAddedListener );\n      this.addItemRemovedListener( itemRemovedListener );\n    },\n\n    // @private Internal: called when an item is added.\n    _fireItemAdded: function( item ) {\n      this.startedCallbacksForItemAddedEmitter.emit1( item );\n\n      //Signify that an item was added to the list\n      var copy = this._addedListeners.slice( 0 ); // operate on a copy, firing could result in the listeners changing\n      for ( var i = 0; i < copy.length; i++ ) {\n        copy[ i ]( item, this );\n      }\n\n      this.endedCallbacksForItemAddedEmitter.emit();\n    },\n\n    // Internal: called when an item is removed.\n    _fireItemRemoved: function( item ) {\n\n      this.startedCallbacksForItemRemovedEmitter.emit1( item );\n\n      //Signify that an item was removed from the list\n      var copy = this._removedListeners.slice( 0 ); // operate on a copy, firing could result in the listeners changing\n      for ( var i = 0; i < copy.length; i++ ) {\n        copy[ i ]( item, this );\n      }\n\n      this.endedCallbacksForItemRemovedEmitter.emit();\n    },\n\n    /**\n     * Adds an item to the end of the array.\n     * This is a convenience function, and is the same as push.\n     * @param item\n     * @public\n     */\n    add: function( item ) {\n      this.push( item );\n    },\n\n    /**\n     * Add items to the end of the array.\n     * This is a convenience function, and is the same as push.\n     * @param {Array} items\n     * @public\n     */\n    addAll: function( items ) {\n      for ( var i = 0; i < items.length; i++ ) {\n        this.add( items[ i ] );\n      }\n    },\n\n    /**\n     * Removes the first occurrence of an item from the array.\n     * If duplicates are allowed (see options.allowDuplicates) you may need to call this multiple\n     * times to totally purge item from the array.\n     * @param item\n     * @public\n     */\n    remove: function( item ) {\n      var index = this._array.indexOf( item );\n      if ( index !== -1 ) {\n        this._array.splice( index, 1 );\n        this.lengthProperty.set( this._array.length );\n        this._fireItemRemoved( item );\n      }\n    },\n\n    /**\n     * Removes the first occurrence of each item in the specified array.\n     * @param {Array} list a list of items to remove\n     * @see ObservableArray.remove\n     * @public\n     */\n    removeAll: function( list ) {\n      for ( var i = 0; i < list.length; i++ ) {\n        var item = list[ i ];\n        this.remove( item );\n      }\n    },\n\n    /**\n     * Pushes an item onto the end of the array.\n     * @param item\n     * @throws Error if duplicates are not allowed (see options.allowDuplicates) and item is already in the array\n     * @public\n     */\n    push: function( item ) {\n      if ( !this._options.allowDuplicates && this.contains( item ) ) {\n        throw new Error( 'duplicates are not allowed' );\n      }\n      this._array.push( item );\n      this.lengthProperty.set( this._array.length );\n      this._fireItemAdded( item );\n    },\n\n    /**\n     * Removes an item from the end of the array and returns it.\n     * @returns {*}\n     * @public\n     */\n    pop: function() {\n      var item = this._array.pop();\n      if ( item !== undefined ) {\n        this.lengthProperty.set( this._array.length );\n        this._fireItemRemoved( item );\n      }\n      return item;\n    },\n\n    /**\n     * Removes an item from the beginning of the array and returns it.\n     * @returns {*}\n     * @public\n     */\n    shift: function() {\n      var item = this._array.shift();\n      if ( item !== undefined ) {\n        this.lengthProperty.set( this._array.length );\n        this._fireItemRemoved( item );\n      }\n      return item;\n    },\n\n    /**\n     * Does the array contain the specified item?\n     * @param item\n     * @returns {boolean}\n     * @public\n     */\n    contains: function( item ) {\n      return this.indexOf( item ) !== -1;\n    },\n\n    /**\n     * Gets an item at the specified index.\n     * @param index\n     * @returns {*} the item, or undefined if there is no item at the specified index\n     * @public\n     */\n    get: function( index ) {\n      return this._array[ index ];\n    },\n\n    /**\n     * Gets the index of a specified item.\n     * @param item\n     * @returns {*} -1 if item is not in the array\n     * @public\n     */\n    indexOf: function( item ) {\n      return this._array.indexOf( item );\n    },\n\n    /**\n     * Removes all items from the array.\n     * @public\n     */\n    clear: function() {\n      var copy = this._array.slice( 0 );\n      for ( var i = 0; i < copy.length; i++ ) {\n        this.remove( copy[ i ] );\n      }\n    },\n\n    /**\n     * Applies a callback function to each item in the array\n     * @param callback function(item)\n     * @public\n     */\n    forEach: function( callback ) {\n      this._array.slice().forEach( callback ); // do this on a copy of the array, in case callbacks involve array modification\n    },\n\n    /**\n     * Maps the values in this ObservableArray using the specified function, and returns a new ObservableArray for chaining.\n     * @param mapFunction\n     * @returns {axon.ObservableArray}\n     * @public\n     */\n    map: function( mapFunction ) {\n      return new axon.ObservableArray( this._array.map( mapFunction ) );\n    },\n\n    /**\n     * Filters the values in this ObservableArray using the predicate function, and returns a new ObservableArray for chaining.\n     * @param predicate\n     * @returns {axon.ObservableArray}\n     * @public\n     */\n    filter: function( predicate ) {\n      return new axon.ObservableArray( this._array.filter( predicate ) );\n    },\n\n    /**\n     * Starting with the initial value, combine values from this ObservableArray to come up with a composite result.\n     * Same as foldLeft.  In underscore this is called _.reduce aka _.foldl or _.inject\n     * @param value\n     * @param combiner\n     * @returns {*}\n     * @public\n     */\n    reduce: function( value, combiner ) {\n      for ( var i = 0; i < this._array.length; i++ ) {\n        value = combiner( value, this._array[ i ] );\n      }\n      return value;\n    },\n\n    /**\n     * Return the underlying array\n     * @returns {*|Array}\n     * @public\n     */\n    getArray: function() {\n      return this._array;\n    }\n  } );\n} );\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * PropertySet facilitates creation and use of multiple named Property instances.  There are still several API design issues in question, but this\n * class is ready for use.\n *\n * A PropertySet is a set of Property instances that provides support for:\n * -Easily creating several properties using an object literal (hash)\n * -Resetting them as a group\n * -Set multiple values at once, using propertySet.set({x:100,y:200,name:'alice'});\n * -Support for derived properties, which appear with the same interface as basic properties\n * -Convenient toString that prints e.g., PropertySet{name:'larry',age:101,kids:['alice','bob']}\n * -Wiring up to listen to multiple properties simultaneously\n * -Add properties after the PropertySet is created?  Don't forget to add to the key list as well.\n * -Remove properties that were added using addProperty or the constructor\n *\n * Sample usage:\n * var p = new PropertySet( {name: 'larry', age: 100, kids: ['alice', 'bob']} );\n * p.nameProperty.link( function( n ) {console.log( 'hello ' + n );} );\n * p.name = 'jensen';\n * p.age = 101;//Happy Birthday!\n * console.log( p );\n * p.reset();\n * console.log( p );\n * p.set({name:'clark',age:102,kids:['alice','bob','charlie']});\n *\n * How would this be done without PropertySet (for comparison)?\n * //Normally would be created in a class but that is omitted here for brevity.\n * var p ={name: new Property('larry'), age: new Property('age'), kids: new Property(['alice','bob'])}\n * p.reset = function(){\n *   this.name.reset();\n *   this.age.reset();\n *   this.kids.reset();\n * }\n * p.name.set('clark');\n * p.age.set('102');\n * p.kids.set(['alice','bob','charlie']);\n *\n * Note: If a subclass ever substitutes a property like this: person.ageProperty = new Property(person.age), then it would break the getter/setter\n * @author Sam Reid\n */\n\ndefine( 'AXON/PropertySet',['require','AXON/Property','AXON/DerivedProperty','AXON/Multilink','AXON/Events','AXON/axon','PHET_CORE/inherit'],function( require ) {\n  'use strict';\n\n  // modules\n  var Property = require( 'AXON/Property' );\n  var DerivedProperty = require( 'AXON/DerivedProperty' );\n  var Multilink = require( 'AXON/Multilink' );\n  var Events = require( 'AXON/Events' );\n  var axon = require( 'AXON/axon' );\n  var inherit = require( 'PHET_CORE/inherit' );\n\n  // constants\n  var SUFFIX = 'Property';\n\n  /**\n   * PropertySet main constructor\n   * @param {Object} values - a hash: keys are the names of properties, values are initial property values. Eg { name: 'Curly', age: 40 }\n   * @param {Object} [options]\n   * @constructor\n   */\n  function PropertySet( values, options ) {\n\n    options = _.extend( {\n      tandemSet: {} // a hash, keys are a subset of the keys in values, and the value associated with each key is a {Tandem} tandem\n    }, options );\n\n    // Verify that the tandemSet doesn't contain bogus keys. filter should return 0 tandemSet keys that are not in values.\n    assert && assert( _.filter( _.keys( options.tandemSet ), function( key ) {\n        var isBad = !values.hasOwnProperty( key );\n        if ( isBad ) { console.error( 'bad tandem key: ' + key ); }\n        return isBad;\n      } ).length === 0, 'Some tandem keys do not appear in the PropertySet' );\n\n    var propertySet = this;\n\n    Events.call( this );\n\n    // @private Keep track of the keys so we know which to reset\n    this.keys = [];\n\n    Object.getOwnPropertyNames( values ).forEach( function( value ) {\n      propertySet.addProperty( value, values[ value ], options.tandemSet[ value ] );\n    } );\n  }\n\n  axon.register( 'PropertySet', PropertySet );\n\n  return inherit( Events, PropertySet, {\n\n    /**\n     * Adds a new property to this PropertySet\n     * @param {string} propertyName\n     * @param {*} value the property's initial value\n     * @param {Tandem} [tandem]\n     * @public\n     */\n    addProperty: function( propertyName, value, tandem ) {\n      this[ propertyName + SUFFIX ] = new Property( value, { tandem: tandem } );\n      this.addGetterAndSetter( propertyName );\n      this.keys.push( propertyName );\n    },\n\n    /**\n     * Remove any property (whether a derived property or not) that was added to this PropertySet\n     * @param {String} propertyName\n     * @public\n     */\n    removeProperty: function( propertyName ) {\n\n      //Remove from the keys (only for non-derived properties)\n      var index = this.keys.indexOf( propertyName );\n      if ( index !== -1 ) {\n        this.keys.splice( index, 1 );\n      }\n\n      this[ propertyName + SUFFIX ].dispose();\n\n      //Unregister the Property instance from the PropertySet\n      delete this[ propertyName + SUFFIX ];\n\n      //Unregister the getter/setter, if they exist\n      delete this[ propertyName ];\n    },\n\n    /**\n     * Adds a getter and setter using ES5 get/set syntax, similar to https://gist.github.com/dandean/1292057, same as in github/Atlas\n     * @param {string} propertyName\n     * @public\n     */\n    addGetterAndSetter: function( propertyName ) {\n      var property = this[ propertyName + SUFFIX ];\n\n      Object.defineProperty( this, propertyName, {\n\n        // Getter proxies to Model#get()...\n        get: function() { return property.get();},\n\n        // Setter proxies to Model#set(attributes)\n        set: function( value ) { property.set( value );},\n\n        // Make it configurable and enumerable so it's easy to override...\n        configurable: true,\n        enumerable: true\n      } );\n    },\n\n    /**\n     * Adds an ES5 getter to a property.\n     * @param {string} propertyName\n     * @public\n     */\n    addGetter: function( propertyName ) {\n      var property = this[ propertyName + SUFFIX ];\n\n      Object.defineProperty( this, propertyName, {\n\n        get: function() { return property.get();},\n\n        // Make it configurable and enumerable so it's easy to override...\n        configurable: true,\n        enumerable: true\n      } );\n    },\n\n    // @public Resets all of the properties associated with this PropertySet\n    reset: function() {\n      var propertySet = this;\n      this.keys.forEach( function( key ) {\n        propertySet[ key + SUFFIX ].reset();\n      } );\n    },\n\n    /**\n     * Creates a DerivedProperty from the given property property names and derivation.\n     * @param {string[]} propertyNames\n     * @param {function} derivation\n     * @param {Tandem} [tandem]\n     * @returns {DerivedProperty}\n     * @public\n     */\n    toDerivedProperty: function( propertyNames, derivation, tandem ) {\n      return new DerivedProperty( this.getProperties( propertyNames ), derivation, { tandem: tandem } );\n    },\n\n    /**\n     * Adds a derived property to the property set.\n     * @param {string} propertyName name for the derived property\n     * @param {string[]} dependencyNames names of the properties that it depends on\n     * @param {function} derivation function that expects args in the same order as dependencies\n     * @param {Tandem} [tandem]\n     * @public\n     */\n    addDerivedProperty: function( propertyName, dependencyNames, derivation, tandem ) {\n      this[ propertyName + SUFFIX ] = this.toDerivedProperty( dependencyNames, derivation, tandem );\n      this.addGetter( propertyName );\n    },\n\n    /**\n     * Returns an array of the requested properties.\n     * @param propertyNames\n     * @returns {*}\n     * @private\n     */\n    getProperties: function( propertyNames ) {\n      var propertySet = this;\n      return propertyNames.map( function( propertyName ) {\n        var propertyKey = propertyName + SUFFIX;\n        assert && assert( propertySet.hasOwnProperty( propertyKey ) );\n        return propertySet[ propertyKey ];\n      } );\n    },\n\n    /**\n     * Set all of the values specified in the object hash\n     * Allows you to use this form:\n     * puller.set( {x: knot.x, y: knot.y, knot: knot} );\n     *\n     * instead of this:\n     * puller.x.value = knot.x;\n     * puller.y.value = knot.y;\n     * puller.knot.value = knot;\n     *\n     * Throws an error if you try to set a value for which there is no property.\n     *\n     * @param {Object} values - see example above\n     * @public\n     */\n    setValues: function( values ) {\n      var propertySet = this;\n      Object.getOwnPropertyNames( values ).forEach( function( propertyName ) {\n        if ( typeof(propertySet[ propertyName + SUFFIX ] === 'Property') ) {\n          propertySet[ propertyName + SUFFIX ].set( values[ propertyName ] );\n        }\n        else {\n          throw new Error( 'property not found: ' + propertyName );\n        }\n      } );\n    },\n\n    /**\n     * Get a JS object literal with all the current values of the properties in this property set, say for serialization.\n     * @see set\n     * @public\n     * TODO: this works well to serialize numbers, strings, booleans.  How to handle complex state values such as Vector2 or nested Property?  Maybe that must be up to the client code.\n     * TODO: This was named 'get' to mirror the 'set' method above, but I'm concerned this will make them difficult to find/replace and may confuse with real getters & setters.  Maybe setState/getState would be better?\n     */\n    getValues: function() {\n      var state = {};\n      for ( var i = 0; i < this.keys.length; i++ ) {\n        var key = this.keys[ i ];\n        state[ key ] = this.property( key ).value;\n      }\n      return state;\n    },\n\n    /**\n     * Link to a property by name, see https://github.com/phetsims/axon/issues/16\n     * @param {string} propertyName the name of the property to link to\n     * @param {function }observer the callback to link to the property\n     * @public\n     */\n    link: function( propertyName, observer ) {\n      this[ propertyName + SUFFIX ].link( observer );\n    },\n\n    /**\n     * Unlink for a property by name, see https://github.com/phetsims/axon/issues/16\n     * @param {string} propertyName the name of the property to link to\n     * @param {function} observer the callback to link to the property\n     * @public\n     */\n    unlink: function( propertyName, observer ) {\n      this[ propertyName + SUFFIX ].unlink( observer );\n    },\n\n    /**\n     * Link an attribute to a property by name.  Return a handle to the observer so it can be removed using unlink().\n     * @param {string} propertyName the property to link to\n     * @param {Object} object the object for which the attribute will be set\n     * @param {string} attributeName the name of the attribute to set on the object\n     * @public\n     */\n    linkAttribute: function( propertyName, object, attributeName ) {\n      return this.property( propertyName ).linkAttribute( object, attributeName );\n    },\n\n    /**\n     * Unlink an observer added with linkAttribute.  Note: the args of linkAttribute do not match the args of\n     * unlinkAttribute: here, you must pass the observer handle returned by linkAttribute rather than object and attributeName\n     * @param {string} propertyName - the name of the property that the observer will be removed from\n     * @param {function} observer\n     * @public\n     */\n    unlinkAttribute: function( propertyName, observer ) {\n      this.property( propertyName ).unlink( observer );\n    },\n\n    /**\n     * Registers an observer with multiple properties, then notifies the observer immediately.\n     * @param {string[]} propertyNames\n     * @param {function} observer no params, returns nothing\n     * @public\n     */\n    multilink: function( propertyNames, observer ) {\n      return new Multilink( this.getProperties( propertyNames ), observer, false );\n    },\n\n    // @public\n    lazyMultilink: function( propertyNames, observer ) {\n      return new Multilink( this.getProperties( propertyNames ), observer, true );\n    },\n\n    /**\n     * Removes the multilink from this PropertySet.\n     * Same as calling dispose() on the multilink\n     * @param {Multilink} multilink\n     * @public\n     */\n    unmultilink: function( multilink ) {\n      multilink.dispose();\n    },\n\n    // @public\n    toString: function() {\n      var text = 'PropertySet{';\n      var propertySet = this;\n      for ( var i = 0; i < this.keys.length; i++ ) {\n        var key = this.keys[ i ];\n        text = text + key + ':' + propertySet[ key ].toString();\n        if ( i < this.keys.length - 1 ) {\n          text = text + ',';\n        }\n      }\n      return text + '}';\n    },\n\n    /**\n     * Unlinks all observers from all Property instances.\n     * @public\n     */\n    unlinkAll: function() {\n      var propertySet = this;\n      this.keys.forEach( function( key ) {\n        propertySet[ key + SUFFIX ].unlinkAll();\n      } );\n    },\n\n    /**\n     * Get a property by name, see https://github.com/phetsims/axon/issues/16\n     * @param {string} propertyName the name of the property to get\n     * @deprecated see https://github.com/phetsims/axon/issues/43\n     * @public\n     */\n    property: function( propertyName ) {\n      return this[ propertyName + SUFFIX ];\n    },\n\n    /**\n     * When the PropertySet is no longer used by the sim, it can be eliminated.  All Properties are disposed.\n     * @public\n     */\n    dispose: function() {\n      for ( var i = 0; i < this.keys.length; i++ ) {\n        this[ this.keys[ i ] + SUFFIX ].dispose();\n      }\n    }\n  } );\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\ndefine( 'AXON/main',[\n  'AXON/axon',\n  'AXON/Property',\n  'AXON/DerivedProperty',\n  'AXON/Emitter',\n  'AXON/Events',\n  'AXON/ObservableArray',\n  'AXON/PropertySet',\n  'AXON/Multilink'\n], function( axon ) {\n  'use strict';\n  return axon;\n} );\n","// Copyright 2015, University of Colorado Boulder\n\n/**\n * Given a rectangular containing area, takes care of allocating and deallocating smaller rectangular \"bins\" that fit\n * together inside the area and do not overlap. Optimized more for runtime CPU usage than space currently.\n *\n * For example:\n * #begin canvasExample binPacker 256x256\n * #on\n * var binPacker = new dot.BinPacker( new dot.Bounds2( 0, 0, 256, 256 ) );\n * var bins = [];\n * for ( var i = 0; i < 100; i++ ) {\n *   var bin = binPacker.allocate( Math.random() * 64, Math.random() * 64 );\n *   if ( bin ) {\n *     bins.push( bin );\n *   }\n * }\n * #off\n *\n * context.strokeStyle = '#000';\n * bins.forEach( function( bin ) {\n *   var bounds = bin.bounds;\n *   context.strokeRect( bounds.x, bounds.y, bounds.width, bounds.height );\n * } );\n * #end canvasExample\n *\n * @author Sharfudeen Ashraf\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\ndefine( 'DOT/BinPacker',['require','DOT/dot','PHET_CORE/inherit','DOT/Bounds2'],function( require ) {\n  'use strict';\n\n  // modules\n  var dot = require( 'DOT/dot' );\n  var inherit = require( 'PHET_CORE/inherit' );\n  var Bounds2 = require( 'DOT/Bounds2' );\n\n  /**\n   * Creates a BinPacker with the specified containing bounds.\n   * @public\n   * @constructor\n   *\n   * @param {Bounds2} bounds - The available bounds to pack bins inside.\n   */\n  function BinPacker( bounds ) {\n    this.rootBin = new dot.BinPacker.Bin( bounds, null );\n  }\n\n  dot.register( 'BinPacker', BinPacker );\n\n  inherit( Object, BinPacker, {\n    /**\n     * Allocates a bin with the specified width and height if possible (returning a {Bin}), otherwise returns null.\n     * @public\n     *\n     * @param {number} width\n     * @param {number} height\n     * @returns {Bin|null}\n     */\n    allocate: function( width, height ) {\n      // find a leaf bin that has available room (or null)\n      var bin = this.rootBin.findAvailableBin( width, height );\n\n      if ( bin ) {\n        // split it into a sized sub-bin for our purpose that we will use, and other bins for future allocations\n        var sizedBin = bin.split( width, height );\n\n        // mark our bin as used\n        sizedBin.use();\n\n        return sizedBin;\n      }\n      else {\n        return null;\n      }\n    },\n\n    /**\n     * Deallocates a bin, so that its area can be reused by future allocations.\n     * @public\n     *\n     * @param {Bin} bin - The bin that was returned from allocate().\n     */\n    deallocate: function( bin ) {\n      bin.unuse();\n    },\n\n    // @private, for debugging purposes\n    toString: function() {\n      var result = '';\n\n      var padding = '';\n\n      function binTree( bin ) {\n        result += padding + bin.toString() + '\\n';\n        padding = padding + '  ';\n        _.each( bin.children, binTree );\n        padding = padding.substring( 2 );\n      }\n\n      binTree( this.rootBin );\n\n      return result;\n    }\n  } );\n\n  /**\n   * A rectangular bin that can be used itself or split into sub-bins.\n   * @public\n   * @constructor\n   *\n   * @param {Bounds2} bounds\n   * @param {Bin|null} parent\n   */\n  BinPacker.Bin = function Bin( bounds, parent ) {\n    // @public {Bounds2} - Our containing bounds\n    this.bounds = bounds;\n\n    // @private {Bin|null} - Parent bin, if applicable\n    this.parent = parent;\n\n    // @private {boolean} - Whether our children are responsible for our area\n    this.isSplit = false;\n\n    // @private {boolean} - Whether we are marked as a bin that is used\n    this.isUsed = false;\n\n    // @private {Array.<Bin>}\n    this.children = [];\n  };\n  inherit( Object, BinPacker.Bin, {\n\n    /**\n     * Finds an unused bin with open area that is at least width-x-height in size.\n     * @private\n     *\n     * @param {number} width\n     * @param {number} height\n     * @returns {Bin|null}\n     */\n    findAvailableBin: function( width, height ) {\n      assert && assert( width > 0 && height > 0, 'Empty bin requested?' );\n\n      // If we are marked as used ourself, we can't be used\n      if ( this.isUsed ) {\n        return null;\n      }\n      // If our bounds can't fit it, skip this entire sub-tree\n      else if ( this.bounds.width < width || this.bounds.height < height ) {\n        return null;\n      }\n      // If we have been split, check our children\n      else if ( this.isSplit ) {\n        for ( var i = 0; i < this.children.length; i++ ) {\n          var result = this.children[ i ].findAvailableBin( width, height );\n          if ( result ) {\n            return result;\n          }\n        }\n        // No child can fit the area\n        return null;\n      }\n      // Otherwise we are free and our dimensions are compatible (checked above)\n      else {\n        return this;\n      }\n    },\n\n    /**\n     * Splits this bin into multiple child bins, and returns the child with the dimensions (width,height).\n     * @private\n     *\n     * @param {number} width\n     * @param {number} height\n     */\n    split: function( width, height ) {\n      assert && assert( this.bounds.width >= width && this.bounds.height >= height,\n        'Bin does not have space' );\n      assert && assert( !this.isSplit, 'Bin should not be re-split' );\n      assert && assert( !this.isUsed, 'Bin should not be split when used' );\n      assert && assert( width > 0 && height > 0, 'Empty bin requested?' );\n\n      // if our dimensions match exactly, don't split (return ourself)\n      if ( width === this.bounds.width && height === this.bounds.height ) {\n        return this;\n      }\n\n      // mark as split\n      this.isSplit = true;\n\n      // locations of the split\n      var splitX = this.bounds.minX + width;\n      var splitY = this.bounds.minY + height;\n\n      /*\n       * How an area is split (for now). In the future, splitting more after determining what we need to fit next would\n       * potentially be better, but this preserves the width better (which many times we need).\n       *\n       *   ************************************\n       *   *                  *               *\n       *   *                  *               *\n       *   *       main       *     right     *\n       *   * (width x height) *               *\n       *   *                  *               *\n       *   ************************************\n       *   *                                  *\n       *   *              bottom              *\n       *   *                                  *\n       *   ************************************\n       */\n      var mainBounds = new Bounds2( this.bounds.minX, this.bounds.minY, splitX, splitY );\n      var rightBounds = new Bounds2( splitX, this.bounds.minY, this.bounds.maxX, splitY );\n      var bottomBounds = new Bounds2( this.bounds.minX, splitY, this.bounds.maxX, this.bounds.maxY );\n\n      var mainBin = new dot.BinPacker.Bin( mainBounds, this );\n      this.children.push( mainBin );\n\n      // only add right/bottom if they take up area\n      if ( rightBounds.hasNonzeroArea() ) {\n        this.children.push( new dot.BinPacker.Bin( rightBounds, this ) );\n      }\n      if ( bottomBounds.hasNonzeroArea() ) {\n        this.children.push( new dot.BinPacker.Bin( bottomBounds, this ) );\n      }\n\n      return mainBin;\n    },\n\n    /**\n     * Mark this bin as used.\n     * @private\n     */\n    use: function() {\n      assert && assert( !this.isSplit, 'Should not mark a split bin as used' );\n      assert && assert( !this.isUsed, 'Should not mark a used bin as used' );\n\n      this.isUsed = true;\n    },\n\n    /**\n     * Mark this bin as not used, and attempt to collapse split parents if all children are unused.\n     * @private\n     */\n    unuse: function() {\n      assert && assert( this.isUsed, 'Can only unuse a used instance' );\n\n      this.isUsed = false;\n\n      this.parent && this.parent.attemptToCollapse();\n    },\n\n    /**\n     * If our bin can be collapsed (it is split and has children that are not used AND not split), then we will become\n     * not split, and will remove our children. If successful, it will also call this on our parent, fully attempting\n     * to clean up unused data structures.\n     * @private\n     */\n    attemptToCollapse: function() {\n      assert && assert( this.isSplit, 'Should only attempt to collapse split bins' );\n\n      // Bail out if a single child isn't able to be collapsed. If it is not split or used, it won't have any children\n      // or needs.\n      for ( var i = 0; i < this.children.length; i++ ) {\n        var child = this.children[ i ];\n\n        if ( child.isSplit || child.isUsed ) {\n          return;\n        }\n      }\n\n      // We can now collapse ourselves neatly\n      this.children = [];\n      this.isSplit = false;\n\n      // And attempt to collapse our parent\n      this.parent && this.parent.attemptToCollapse();\n    },\n\n    // @private for debugging purposes\n    toString: function() {\n      return this.bounds.toString() + ( this.isUsed ? ' used' : '' );\n    }\n  } );\n\n  return BinPacker;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * A 3D cuboid-shaped bounded area (bounding box).\n *\n * There are a number of convenience functions to get locations and points on the Bounds. Currently we do not\n * store these with the Bounds3 instance, since we want to lower the memory footprint.\n *\n * minX, minY, minZ, maxX, maxY, and maxZ are actually stored. We don't do x,y,z,width,height,depth because this can't properly express\n * semi-infinite bounds (like a half-plane), or easily handle what Bounds3.NOTHING and Bounds3.EVERYTHING do with\n * the constructive solid areas.\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/Bounds3',['require','DOT/dot','PHET_CORE/inherit','PHET_CORE/Poolable','DOT/Vector3'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n  var inherit = require( 'PHET_CORE/inherit' );\n  var Poolable = require( 'PHET_CORE/Poolable' );\n\n  require( 'DOT/Vector3' );\n\n  /**\n   * Creates a 3-dimensional bounds (bounding box).\n   * @constructor\n   * @public\n   *\n   * @param {number} minX - The intial minimum X coordinate of the bounds.\n   * @param {number} minY - The intial minimum Y coordinate of the bounds.\n   * @param {number} minZ - The intial minimum Z coordinate of the bounds.\n   * @param {number} maxX - The intial maximum X coordinate of the bounds.\n   * @param {number} maxY - The intial maximum Y coordinate of the bounds.\n   * @param {number} maxZ - The intial maximum Z coordinate of the bounds.\n   */\n  function Bounds3( minX, minY, minZ, maxX, maxY, maxZ ) {\n    assert && assert( maxY !== undefined, 'Bounds3 requires 4 parameters' );\n\n    // @public {number} - The minimum X coordinate of the bounds.\n    this.minX = minX;\n\n    // @public {number} - The minimum Y coordinate of the bounds.\n    this.minY = minY;\n\n    // @public {number} - The minimum Z coordinate of the bounds.\n    this.minZ = minZ;\n\n    // @public {number} - The maximum X coordinate of the bounds.\n    this.maxX = maxX;\n\n    // @public {number} - The maximum Y coordinate of the bounds.\n    this.maxY = maxY;\n\n    // @public {number} - The maximum Z coordinate of the bounds.\n    this.maxZ = maxZ;\n\n    phetAllocation && phetAllocation( 'Bounds3' );\n  }\n\n  dot.register( 'Bounds3', Bounds3 );\n\n  inherit( Object, Bounds3, {\n    // @public (read-only) - Helps to identify the dimension of the bounds\n    isBounds: true,\n    dimension: 3,\n\n    /*---------------------------------------------------------------------------*\n     * Properties\n     *---------------------------------------------------------------------------*/\n\n    /**\n     * The width of the bounds, defined as maxX - minX.\n     * @public\n     *\n     * @returns {number}\n     */\n    getWidth: function() { return this.maxX - this.minX; },\n    get width() { return this.getWidth(); },\n\n    /**\n     * The height of the bounds, defined as maxY - minY.\n     * @public\n     *\n     * @returns {number}\n     */\n    getHeight: function() { return this.maxY - this.minY; },\n    get height() { return this.getHeight(); },\n\n    /**\n     * The depth of the bounds, defined as maxZ - minZ.\n     * @public\n     *\n     * @returns {number}\n     */\n    getDepth: function() { return this.maxZ - this.minZ; },\n    get depth() { return this.getDepth(); },\n\n    /*\n     * Convenience locations\n     * upper is in terms of the visual layout in Scenery and other programs, so the minY is the \"upper\", and minY is the \"lower\"\n     *\n     *             minX (x)     centerX        maxX\n     *          ---------------------------------------\n     * minY (y) | upperLeft   upperCenter   upperRight\n     * centerY  | centerLeft    center      centerRight\n     * maxY     | lowerLeft   lowerCenter   lowerRight\n     */\n\n    /**\n     * Alias for minX, when thinking of the bounds as an (x,y,z,width,height,depth) cuboid.\n     * @public\n     *\n     * @returns {number}\n     */\n    getX: function() { return this.minX; },\n    get x() { return this.getX(); },\n\n    /**\n     * Alias for minY, when thinking of the bounds as an (x,y,z,width,height,depth) cuboid.\n     * @public\n     *\n     * @returns {number}\n     */\n    getY: function() { return this.minY; },\n    get y() { return this.getY(); },\n\n    /**\n     * Alias for minZ, when thinking of the bounds as an (x,y,z,width,height,depth) cuboid.\n     * @public\n     *\n     * @returns {number}\n     */\n    getZ: function() { return this.minZ; },\n    get z() { return this.getZ(); },\n\n    /**\n     * Alias for minX, supporting the explicit getter function style.\n     * @public\n     *\n     * @returns {number}\n     */\n    getMinX: function() { return this.minX; },\n\n    /**\n     * Alias for minY, supporting the explicit getter function style.\n     * @public\n     *\n     * @returns {number}\n     */\n    getMinY: function() { return this.minY; },\n\n    /**\n     * Alias for minZ, supporting the explicit getter function style.\n     * @public\n     *\n     * @returns {number}\n     */\n    getMinZ: function() { return this.minZ; },\n\n    /**\n     * Alias for maxX, supporting the explicit getter function style.\n     * @public\n     *\n     * @returns {number}\n     */\n    getMaxX: function() { return this.maxX; },\n\n    /**\n     * Alias for maxY, supporting the explicit getter function style.\n     * @public\n     *\n     * @returns {number}\n     */\n    getMaxY: function() { return this.maxY; },\n\n    /**\n     * Alias for maxZ, supporting the explicit getter function style.\n     * @public\n     *\n     * @returns {number}\n     */\n    getMaxZ: function() { return this.maxZ; },\n\n    /**\n     * Alias for minX, when thinking in the UI-layout manner.\n     * @public\n     *\n     * @returns {number}\n     */\n    getLeft: function() { return this.minX; },\n    get left() { return this.minX; },\n\n    /**\n     * Alias for minY, when thinking in the UI-layout manner.\n     * @public\n     *\n     * @returns {number}\n     */\n    getTop: function() { return this.minY; },\n    get top() { return this.minY; },\n\n    /**\n     * Alias for minZ, when thinking in the UI-layout manner.\n     * @public\n     *\n     * @returns {number}\n     */\n    getBack: function() { return this.minZ; },\n    get back() { return this.minZ; },\n\n    /**\n     * Alias for maxX, when thinking in the UI-layout manner.\n     * @public\n     *\n     * @returns {number}\n     */\n    getRight: function() { return this.maxX; },\n    get right() { return this.maxX; },\n\n    /**\n     * Alias for maxY, when thinking in the UI-layout manner.\n     * @public\n     *\n     * @returns {number}\n     */\n    getBottom: function() { return this.maxY; },\n    get bottom() { return this.maxY; },\n\n    /**\n     * Alias for maxZ, when thinking in the UI-layout manner.\n     * @public\n     *\n     * @returns {number}\n     */\n    getFront: function() { return this.maxZ; },\n    get front() { return this.maxZ; },\n\n    /**\n     * The horizontal (X-coordinate) center of the bounds, averaging the minX and maxX.\n     * @public\n     *\n     * @returns {number}\n     */\n    getCenterX: function() { return ( this.maxX + this.minX ) / 2; },\n    get centerX() { return this.getCenterX(); },\n\n    /**\n     * The vertical (Y-coordinate) center of the bounds, averaging the minY and maxY.\n     * @public\n     *\n     * @returns {number}\n     */\n    getCenterY: function() { return ( this.maxY + this.minY ) / 2; },\n    get centerY() { return this.getCenterY(); },\n\n    /**\n     * The depthwise (Z-coordinate) center of the bounds, averaging the minZ and maxZ.\n     * @public\n     *\n     * @returns {number}\n     */\n    getCenterZ: function() { return ( this.maxZ + this.minZ ) / 2; },\n    get centerZ() { return this.getCenterZ(); },\n\n    /**\n     * The point (centerX, centerY, centerZ), in the center of the bounds.\n     * @public\n     *\n     * @returns {Vector3}\n     */\n    getCenter: function() { return new dot.Vector3( this.getCenterX(), this.getCenterY(), this.getCenterZ() ); },\n    get center() { return this.getCenter(); },\n\n    /**\n     * Whether we have negative width, height or depth. Bounds3.NOTHING is a prime example of an empty Bounds3.\n     * Bounds with width = height = depth = 0 are considered not empty, since they include the single (0,0,0) point.\n     * @public\n     *\n     * @returns {boolean}\n     */\n    isEmpty: function() { return this.getWidth() < 0 || this.getHeight() < 0 || this.getDepth() < 0; },\n\n    /**\n     * Whether our minimums and maximums are all finite numbers. This will exclude Bounds3.NOTHING and Bounds3.EVERYTHING.\n     * @public\n     *\n     * @returns {boolean}\n     */\n    isFinite: function() {\n      return isFinite( this.minX ) && isFinite( this.minY ) && isFinite( this.minZ ) && isFinite( this.maxX ) && isFinite( this.maxY ) && isFinite( this.maxZ );\n    },\n\n    /**\n     * Whether this bounds has a non-zero area (non-zero positive width, height and depth).\n     * @public\n     *\n     * @returns {boolean}\n     */\n    hasNonzeroArea: function() {\n      return this.getWidth() > 0 && this.getHeight() > 0 && this.getDepth() > 0;\n    },\n\n    /**\n     * Whether this bounds has a finite and non-negative width, height and depth.\n     * @public\n     *\n     * @returns {boolean}\n     */\n    isValid: function() {\n      return !this.isEmpty() && this.isFinite();\n    },\n\n    /**\n     * Whether the coordinates are contained inside the bounding box, or are on the boundary.\n     * @public\n     *\n     * @param {number} x - X coordinate of the point to check\n     * @param {number} y - Y coordinate of the point to check\n     * @param {number} z - Z coordinate of the point to check\n     * @returns {boolean}\n     */\n    containsCoordinates: function( x, y, z ) {\n      return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY && this.minZ <= z && z <= this.maxZ;\n    },\n\n    /**\n     * Whether the point is contained inside the bounding box, or is on the boundary.\n     * @public\n     *\n     * @param {Vector3} point\n     * @returns {boolean}\n     */\n    containsPoint: function( point ) {\n      return this.containsCoordinates( point.x, point.y, point.z );\n    },\n\n    /**\n     * Whether this bounding box completely contains the bounding box passed as a parameter. The boundary of a box is\n     * considered to be \"contained\".\n     * @public\n     *\n     * @param {Bounds3} bounds\n     * @returns {boolean}\n     */\n    containsBounds: function( bounds ) {\n      return this.minX <= bounds.minX && this.maxX >= bounds.maxX && this.minY <= bounds.minY && this.maxY >= bounds.maxY && this.minZ <= bounds.minZ && this.maxZ >= bounds.maxZ;\n    },\n\n    /**\n     * Whether this and another bounding box have any points of intersection (including touching boundaries).\n     * @public\n     *\n     * @param {Bounds3} bounds\n     * @returns {boolean}\n     */\n    intersectsBounds: function( bounds ) {\n      // TODO: more efficient way of doing this?\n      return !this.intersection( bounds ).isEmpty();\n    },\n\n    /**\n     * Debugging string for the bounds.\n     * @public\n     *\n     * @returns {string}\n     */\n    toString: function() {\n      return '[x:(' + this.minX + ',' + this.maxX + '),y:(' + this.minY + ',' + this.maxY + '),z:(' + this.minZ + ',' + this.maxZ + ')]';\n    },\n\n    /**\n     * Exact equality comparison between this bounds and another bounds.\n     * @public\n     *\n     * @param {Bounds3} other\n     * @returns {boolean} - Whether the two bounds are equal\n     */\n    equals: function( other ) {\n      return this.minX === other.minX && this.minY === other.minY && this.minZ === other.minZ && this.maxX === other.maxX && this.maxY === other.maxY && this.maxZ === other.maxZ;\n    },\n\n    /**\n     * Approximate equality comparison between this bounds and another bounds.\n     * @public\n     *\n     * @param {Bounds3} other\n     * @param {number} epsilon\n     * @returns {boolean} - Whether difference between the two bounds has no min/max with an absolute value greater\n     *                      than epsilon.\n     */\n    equalsEpsilon: function( other, epsilon ) {\n      epsilon = epsilon !== undefined ? epsilon : 0;\n      var thisFinite = this.isFinite();\n      var otherFinite = other.isFinite();\n      if ( thisFinite && otherFinite ) {\n        // both are finite, so we can use Math.abs() - it would fail with non-finite values like Infinity\n        return Math.abs( this.minX - other.minX ) < epsilon &&\n               Math.abs( this.minY - other.minY ) < epsilon &&\n               Math.abs( this.minZ - other.minZ ) < epsilon &&\n               Math.abs( this.maxX - other.maxX ) < epsilon &&\n               Math.abs( this.maxY - other.maxY ) < epsilon &&\n               Math.abs( this.maxZ - other.maxZ ) < epsilon;\n      }\n      else if ( thisFinite !== otherFinite ) {\n        return false; // one is finite, the other is not. definitely not equal\n      }\n      else if ( this === other ) {\n        return true; // exact same instance, must be equal\n      }\n      else {\n        // epsilon only applies on finite dimensions. due to JS's handling of isFinite(), it's faster to check the sum of both\n        return ( isFinite( this.minX + other.minX ) ? ( Math.abs( this.minX - other.minX ) < epsilon ) : ( this.minX === other.minX ) ) &&\n               ( isFinite( this.minY + other.minY ) ? ( Math.abs( this.minY - other.minY ) < epsilon ) : ( this.minY === other.minY ) ) &&\n               ( isFinite( this.minZ + other.minZ ) ? ( Math.abs( this.minZ - other.minZ ) < epsilon ) : ( this.minZ === other.minZ ) ) &&\n               ( isFinite( this.maxX + other.maxX ) ? ( Math.abs( this.maxX - other.maxX ) < epsilon ) : ( this.maxX === other.maxX ) ) &&\n               ( isFinite( this.maxY + other.maxY ) ? ( Math.abs( this.maxY - other.maxY ) < epsilon ) : ( this.maxY === other.maxY ) ) &&\n               ( isFinite( this.maxZ + other.maxZ ) ? ( Math.abs( this.maxZ - other.maxZ ) < epsilon ) : ( this.maxZ === other.maxZ ) );\n      }\n    },\n\n    /*---------------------------------------------------------------------------*\n     * Immutable operations\n     *---------------------------------------------------------------------------*/\n\n    /**\n     * Creates a copy of this bounds, or if a bounds is passed in, set that bounds's values to ours.\n     * @public\n     *\n     * This is the immutable form of the function set(), if a bounds is provided. This will return a new bounds, and\n     * will not modify this bounds.\n     *\n     * @param {Bounds3} [bounds] - If not provided, creates a new Bounds3 with filled in values. Otherwise, fills in the\n     *                             values of the provided bounds so that it equals this bounds.\n     * @returns {Bounds3}\n     */\n    copy: function( bounds ) {\n      if ( bounds ) {\n        return bounds.set( this );\n      }\n      else {\n        return new Bounds3( this.minX, this.minY, this.minZ, this.maxX, this.maxY, this.maxZ );\n      }\n    },\n\n    /**\n     * The smallest bounds that contains both this bounds and the input bounds, returned as a copy.\n     * @public\n     *\n     * This is the immutable form of the function includeBounds(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {Bounds3} bounds\n     * @returns {Bounds3}\n     */\n    union: function( bounds ) {\n      return new Bounds3(\n        Math.min( this.minX, bounds.minX ),\n        Math.min( this.minY, bounds.minY ),\n        Math.min( this.minZ, bounds.minZ ),\n        Math.max( this.maxX, bounds.maxX ),\n        Math.max( this.maxY, bounds.maxY ),\n        Math.max( this.maxZ, bounds.maxZ )\n      );\n    },\n\n    /**\n     * The smallest bounds that is contained by both this bounds and the input bounds, returned as a copy.\n     * @public\n     *\n     * This is the immutable form of the function constrainBounds(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {Bounds3} bounds\n     * @returns {Bounds3}\n     */\n    intersection: function( bounds ) {\n      return new Bounds3(\n        Math.max( this.minX, bounds.minX ),\n        Math.max( this.minY, bounds.minY ),\n        Math.max( this.minZ, bounds.minZ ),\n        Math.min( this.maxX, bounds.maxX ),\n        Math.min( this.maxY, bounds.maxY ),\n        Math.min( this.maxZ, bounds.maxZ )\n      );\n    },\n    // TODO: difference should be well-defined, but more logic is needed to compute\n\n    /**\n     * The smallest bounds that contains this bounds and the point (x,y,z), returned as a copy.\n     * @public\n     *\n     * This is the immutable form of the function addCoordinates(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @returns {Bounds3}\n     */\n    withCoordinates: function( x, y, z ) {\n      return new Bounds3(\n        Math.min( this.minX, x ),\n        Math.min( this.minY, y ),\n        Math.min( this.minZ, z ),\n        Math.max( this.maxX, x ),\n        Math.max( this.maxY, y ),\n        Math.max( this.maxZ, z )\n      );\n    },\n\n    /**\n     * The smallest bounds that contains this bounds and the input point, returned as a copy.\n     * @public\n     *\n     * This is the immutable form of the function addPoint(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {Vector3} point\n     * @returns {Bounds3}\n     */\n    withPoint: function( point ) {\n      return this.withCoordinates( point.x, point.y, point.z );\n    },\n\n    /**\n     * A copy of this bounds, with minX replaced with the input.\n     * @public\n     *\n     * This is the immutable form of the function setMinX(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} minX\n     * @returns {Bounds3}\n     */\n    withMinX: function( minX ) {\n      return new Bounds3( minX, this.minY, this.minZ, this.maxX, this.maxY, this.maxZ );\n    },\n\n    /**\n     * A copy of this bounds, with minY replaced with the input.\n     * @public\n     *\n     * This is the immutable form of the function setMinY(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} minY\n     * @returns {Bounds3}\n     */\n    withMinY: function( minY ) {\n      return new Bounds3( this.minX, minY, this.minZ, this.maxX, this.maxY, this.maxZ );\n    },\n\n    /**\n     * A copy of this bounds, with minZ replaced with the input.\n     * @public\n     *\n     * This is the immutable form of the function setMinZ(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} minZ\n     * @returns {Bounds3}\n     */\n    withMinZ: function( minZ ) {\n      return new Bounds3( this.minX, this.minY, minZ, this.maxX, this.maxY, this.maxZ );\n    },\n\n    /**\n     * A copy of this bounds, with maxX replaced with the input.\n     * @public\n     *\n     * This is the immutable form of the function setMaxX(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} maxX\n     * @returns {Bounds3}\n     */\n    withMaxX: function( maxX ) {\n      return new Bounds3( this.minX, this.minY, this.minZ, maxX, this.maxY, this.maxZ );\n    },\n\n    /**\n     * A copy of this bounds, with maxY replaced with the input.\n     * @public\n     *\n     * This is the immutable form of the function setMaxY(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} maxY\n     * @returns {Bounds3}\n     */\n    withMaxY: function( maxY ) {\n      return new Bounds3( this.minX, this.minY, this.minZ, this.maxX, maxY, this.maxZ );\n    },\n\n    /**\n     * A copy of this bounds, with maxZ replaced with the input.\n     * @public\n     *\n     * This is the immutable form of the function setMaxZ(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} maxZ\n     * @returns {Bounds3}\n     */\n    withMaxZ: function( maxZ ) {\n      return new Bounds3( this.minX, this.minY, this.minZ, this.maxX, this.maxY, maxZ );\n    },\n\n    /**\n     * A copy of this bounds, with the minimum values rounded down to the nearest integer, and the maximum values\n     * rounded up to the nearest integer. This causes the bounds to expand as necessary so that its boundaries\n     * are integer-aligned.\n     * @public\n     *\n     * This is the immutable form of the function roundOut(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @returns {Bounds3}\n     */\n    roundedOut: function() {\n      return new Bounds3(\n        Math.floor( this.minX ),\n        Math.floor( this.minY ),\n        Math.floor( this.minZ ),\n        Math.ceil( this.maxX ),\n        Math.ceil( this.maxY ),\n        Math.ceil( this.maxZ )\n      );\n    },\n\n    /**\n     * A copy of this bounds, with the minimum values rounded up to the nearest integer, and the maximum values\n     * rounded down to the nearest integer. This causes the bounds to contract as necessary so that its boundaries\n     * are integer-aligned.\n     * @public\n     *\n     * This is the immutable form of the function roundIn(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @returns {Bounds3}\n     */\n    roundedIn: function() {\n      return new Bounds3(\n        Math.ceil( this.minX ),\n        Math.ceil( this.minY ),\n        Math.ceil( this.minZ ),\n        Math.floor( this.maxX ),\n        Math.floor( this.maxY ),\n        Math.floor( this.maxZ )\n      );\n    },\n\n    /**\n     * A bounding box (still axis-aligned) that contains the transformed shape of this bounds, applying the matrix as\n     * an affine transformation.\n     * @pubic\n     *\n     * NOTE: bounds.transformed( matrix ).transformed( inverse ) may be larger than the original box, if it includes\n     * a rotation that isn't a multiple of $\\pi/2$. This is because the returned bounds may expand in area to cover\n     * ALL of the corners of the transformed bounding box.\n     *\n     * This is the immutable form of the function transform(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {Matrix4} matrix\n     * @returns {Bounds3}\n     */\n    transformed: function( matrix ) {\n      return this.copy().transform( matrix );\n    },\n\n    /**\n     * A bounding box that is expanded on all sides by the specified amount.)\n     * @public\n     *\n     * This is the immutable form of the function dilate(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} d\n     * @returns {Bounds3}\n     */\n    dilated: function( d ) {\n      return new Bounds3( this.minX - d, this.minY - d, this.minZ - d, this.maxX + d, this.maxY + d, this.maxZ + d );\n    },\n\n    /**\n     * A bounding box that is expanded horizontally (on the left and right) by the specified amount.\n     * @public\n     *\n     * This is the immutable form of the function dilateX(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} x\n     * @returns {Bounds3}\n     */\n    dilatedX: function( x ) {\n      return new Bounds3( this.minX - x, this.minY, this.minZ, this.maxX + x, this.maxY, this.maxZ );\n    },\n\n    /**\n     * A bounding box that is expanded vertically (on the top and bottom) by the specified amount.\n     * @public\n     *\n     * This is the immutable form of the function dilateY(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} y\n     * @returns {Bounds3}\n     */\n    dilatedY: function( y ) {\n      return new Bounds3( this.minX, this.minY - y, this.minZ, this.maxX, this.maxY + y, this.maxZ );\n    },\n\n    /**\n     * A bounding box that is expanded depth-wise (on the front and back) by the specified amount.\n     * @public\n     *\n     * This is the immutable form of the function dilateZ(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} z\n     * @returns {Bounds3}\n     */\n    dilatedZ: function( z ) {\n      return new Bounds3( this.minX, this.minY, this.minZ - z, this.maxX, this.maxY, this.maxZ + z );\n    },\n\n    /**\n     * A bounding box that is expanded on all sides, with different amounts of expansion along each axis.\n     * Will be identical to the bounds returned by calling bounds.dilatedX( x ).dilatedY( y ).dilatedZ( z ).\n     * @public\n     *\n     * This is the immutable form of the function dilateXYZ(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} x - Amount to dilate horizontally (for each side)\n     * @param {number} y - Amount to dilate vertically (for each side)\n     * @param {number} z - Amount to dilate depth-wise (for each side)\n     * @returns {Bounds3}\n     */\n    dilatedXYZ: function( x, y, z ) {\n      return new Bounds3( this.minX - x, this.minY - y, this.minZ - z, this.maxX + x, this.maxY + y, this.maxZ + z );\n    },\n\n    /**\n     * A bounding box that is contracted on all sides by the specified amount.\n     * @public\n     *\n     * This is the immutable form of the function erode(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} amount\n     * @returns {Bounds3}\n     */\n    eroded: function( d ) { return this.dilated( -d ); },\n\n    /**\n     * A bounding box that is contracted horizontally (on the left and right) by the specified amount.\n     * @public\n     *\n     * This is the immutable form of the function erodeX(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} x\n     * @returns {Bounds3}\n     */\n    erodedX: function( x ) { return this.dilatedX( -x ); },\n\n    /**\n     * A bounding box that is contracted vertically (on the top and bottom) by the specified amount.\n     * @public\n     *\n     * This is the immutable form of the function erodeY(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} y\n     * @returns {Bounds3}\n     */\n    erodedY: function( y ) { return this.dilatedY( -y ); },\n\n    /**\n     * A bounding box that is contracted depth-wise (on the front and back) by the specified amount.\n     * @public\n     *\n     * This is the immutable form of the function erodeZ(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} z\n     * @returns {Bounds3}\n     */\n    erodedZ: function( z ) { return this.dilatedZ( -z ); },\n\n    /**\n     * A bounding box that is contracted on all sides, with different amounts of contraction along each axis.\n     * @public\n     *\n     * This is the immutable form of the function erodeXYZ(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} x - Amount to erode horizontally (for each side)\n     * @param {number} y - Amount to erode vertically (for each side)\n     * @param {number} z - Amount to erode depth-wise (for each side)\n     * @returns {Bounds3}\n     */\n    erodedXYZ: function( x, y, z ) { return this.dilatedXYZ( -x, -y, -z ); },\n\n    /**\n     * Our bounds, translated horizontally by x, returned as a copy.\n     * @public\n     *\n     * This is the immutable form of the function shiftX(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} x\n     * @returns {Bounds3}\n     */\n    shiftedX: function( x ) {\n      return new Bounds3( this.minX + x, this.minY, this.minZ, this.maxX + x, this.maxY, this.maxZ );\n    },\n\n    /**\n     * Our bounds, translated vertically by y, returned as a copy.\n     * @public\n     *\n     * This is the immutable form of the function shiftY(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} y\n     * @returns {Bounds3}\n     */\n    shiftedY: function( y ) {\n      return new Bounds3( this.minX, this.minY + y, this.minZ, this.maxX, this.maxY + y, this.maxZ );\n    },\n\n    /**\n     * Our bounds, translated depth-wise by z, returned as a copy.\n     * @public\n     *\n     * This is the immutable form of the function shiftZ(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} z\n     * @returns {Bounds3}\n     */\n    shiftedZ: function( z ) {\n      return new Bounds3( this.minX, this.minY, this.minZ + z, this.maxX, this.maxY, this.maxZ + z );\n    },\n\n    /**\n     * Our bounds, translated by (x,y,z), returned as a copy.\n     * @public\n     *\n     * This is the immutable form of the function shift(). This will return a new bounds, and will not modify\n     * this bounds.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @returns {Bounds3}\n     */\n    shifted: function( x, y, z ) {\n      return new Bounds3( this.minX + x, this.minY + y, this.minZ + z, this.maxX + x, this.maxY + y, this.maxZ + z );\n    },\n\n    /*---------------------------------------------------------------------------*\n     * Mutable operations\n     *\n     * All mutable operations should call one of the following:\n     *   setMinMax, setMinX, setMinY, setMinZ, setMaxX, setMaxY, setMaxZ\n     *---------------------------------------------------------------------------*/\n\n    /**\n     * Sets each value for this bounds, and returns itself.\n     * @public\n     *\n     * @param {number} minX\n     * @param {number} minY\n     * @param {number} minZ\n     * @param {number} maxX\n     * @param {number} maxY\n     * @param {number} maxZ\n     * @returns {Bounds3}\n     */\n    setMinMax: function( minX, minY, minZ, maxX, maxY, maxZ ) {\n      this.minX = minX;\n      this.minY = minY;\n      this.minZ = minZ;\n      this.maxX = maxX;\n      this.maxY = maxY;\n      this.maxZ = maxZ;\n      return this;\n    },\n\n    /**\n     * Sets the value of minX.\n     * @public\n     *\n     * This is the mutable form of the function withMinX(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} minX\n     * @returns {Bounds3}\n     */\n    setMinX: function( minX ) {\n      this.minX = minX;\n      return this;\n    },\n\n    /**\n     * Sets the value of minY.\n     * @public\n     *\n     * This is the mutable form of the function withMinY(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} minY\n     * @returns {Bounds3}\n     */\n    setMinY: function( minY ) {\n      this.minY = minY;\n      return this;\n    },\n\n    /**\n     * Sets the value of minZ.\n     * @public\n     *\n     * This is the mutable form of the function withMinZ(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} minZ\n     * @returns {Bounds3}\n     */\n    setMinZ: function( minZ ) {\n      this.minZ = minZ;\n      return this;\n    },\n\n    /**\n     * Sets the value of maxX.\n     * @public\n     *\n     * This is the mutable form of the function withMaxX(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} maxX\n     * @returns {Bounds3}\n     */\n    setMaxX: function( maxX ) {\n      this.maxX = maxX;\n      return this;\n    },\n\n    /**\n     * Sets the value of maxY.\n     * @public\n     *\n     * This is the mutable form of the function withMaxY(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} maxY\n     * @returns {Bounds3}\n     */\n    setMaxY: function( maxY ) {\n      this.maxY = maxY;\n      return this;\n    },\n\n    /**\n     * Sets the value of maxZ.\n     * @public\n     *\n     * This is the mutable form of the function withMaxZ(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} maxZ\n     * @returns {Bounds3}\n     */\n    setMaxZ: function( maxZ ) {\n      this.maxZ = maxZ;\n      return this;\n    },\n\n    /**\n     * Sets the values of this bounds to be equal to the input bounds.\n     * @public\n     *\n     * This is the mutable form of the function copy(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {Bounds3} bounds\n     * @returns {Bounds3}\n     */\n    set: function( bounds ) {\n      return this.setMinMax( bounds.minX, bounds.minY, bounds.minZ, bounds.maxX, bounds.maxY, bounds.maxZ );\n    },\n\n    /**\n     * Modifies this bounds so that it contains both its original bounds and the input bounds.\n     * @public\n     *\n     * This is the mutable form of the function union(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {Bounds3} bounds\n     * @returns {Bounds3}\n     */\n    includeBounds: function( bounds ) {\n      return this.setMinMax(\n        Math.min( this.minX, bounds.minX ),\n        Math.min( this.minY, bounds.minY ),\n        Math.min( this.minZ, bounds.minZ ),\n        Math.max( this.maxX, bounds.maxX ),\n        Math.max( this.maxY, bounds.maxY ),\n        Math.max( this.maxZ, bounds.maxZ )\n      );\n    },\n\n    /**\n     * Modifies this bounds so that it is the largest bounds contained both in its original bounds and in the input bounds.\n     * @public\n     *\n     * This is the mutable form of the function intersection(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {Bounds3} bounds\n     * @returns {Bounds3}\n     */\n    constrainBounds: function( bounds ) {\n      return this.setMinMax(\n        Math.max( this.minX, bounds.minX ),\n        Math.max( this.minY, bounds.minY ),\n        Math.max( this.minZ, bounds.minZ ),\n        Math.min( this.maxX, bounds.maxX ),\n        Math.min( this.maxY, bounds.maxY ),\n        Math.min( this.maxZ, bounds.maxZ )\n      );\n    },\n\n    /**\n     * Modifies this bounds so that it contains both its original bounds and the input point (x,y,z).\n     * @public\n     *\n     * This is the mutable form of the function withCoordinates(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @returns {Bounds3}\n     */\n    addCoordinates: function( x, y, z ) {\n      return this.setMinMax(\n        Math.min( this.minX, x ),\n        Math.min( this.minY, y ),\n        Math.min( this.minZ, z ),\n        Math.max( this.maxX, x ),\n        Math.max( this.maxY, y ),\n        Math.max( this.maxZ, z )\n      );\n    },\n\n    /**\n     * Modifies this bounds so that it contains both its original bounds and the input point.\n     * @public\n     *\n     * This is the mutable form of the function withPoint(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {Vector3} point\n     * @returns {Bounds3}\n     */\n    addPoint: function( point ) {\n      return this.addCoordinates( point.x, point.y, point.z );\n    },\n\n    /**\n     * Modifies this bounds so that its boundaries are integer-aligned, rounding the minimum boundaries down and the\n     * maximum boundaries up (expanding as necessary).\n     * @public\n     *\n     * This is the mutable form of the function roundedOut(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @returns {Bounds3}\n     */\n    roundOut: function() {\n      return this.setMinMax(\n        Math.floor( this.minX ),\n        Math.floor( this.minY ),\n        Math.floor( this.minZ ),\n        Math.ceil( this.maxX ),\n        Math.ceil( this.maxY ),\n        Math.ceil( this.maxZ )\n      );\n    },\n\n    /**\n     * Modifies this bounds so that its boundaries are integer-aligned, rounding the minimum boundaries up and the\n     * maximum boundaries down (contracting as necessary).\n     * @public\n     *\n     * This is the mutable form of the function roundedIn(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @returns {Bounds3}\n     */\n    roundIn: function() {\n      return this.setMinMax(\n        Math.ceil( this.minX ),\n        Math.ceil( this.minY ),\n        Math.ceil( this.minZ ),\n        Math.floor( this.maxX ),\n        Math.floor( this.maxY ),\n        Math.floor( this.maxZ )\n      );\n    },\n\n    /**\n     * Modifies this bounds so that it would fully contain a transformed version if its previous value, applying the\n     * matrix as an affine transformation.\n     * @pubic\n     *\n     * NOTE: bounds.transform( matrix ).transform( inverse ) may be larger than the original box, if it includes\n     * a rotation that isn't a multiple of $\\pi/2$. This is because the bounds may expand in area to cover\n     * ALL of the corners of the transformed bounding box.\n     *\n     * This is the mutable form of the function transformed(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {Matrix4} matrix\n     * @returns {Bounds3}\n     */\n    transform: function( matrix ) {\n      // do nothing\n      if ( this.isEmpty() ) {\n        return this;\n      }\n\n      // optimization to bail for identity matrices\n      if ( matrix.isIdentity() ) {\n        return this;\n      }\n\n      var minX = Number.POSITIVE_INFINITY;\n      var minY = Number.POSITIVE_INFINITY;\n      var minZ = Number.POSITIVE_INFINITY;\n      var maxX = Number.NEGATIVE_INFINITY;\n      var maxY = Number.NEGATIVE_INFINITY;\n      var maxZ = Number.NEGATIVE_INFINITY;\n\n      // using mutable vector so we don't create excessive instances of Vector2 during this\n      // make sure all 4 corners are inside this transformed bounding box\n      var vector = new dot.Vector3();\n\n      function withIt( vector ) {\n        minX = Math.min( minX, vector.x );\n        minY = Math.min( minY, vector.y );\n        minZ = Math.min( minZ, vector.z );\n        maxX = Math.max( maxX, vector.x );\n        maxY = Math.max( maxY, vector.y );\n        maxZ = Math.max( maxZ, vector.z );\n      }\n\n      withIt( matrix.multiplyVector3( vector.setXYZ( this.minX, this.minY, this.minZ ) ) );\n      withIt( matrix.multiplyVector3( vector.setXYZ( this.minX, this.maxY, this.minZ ) ) );\n      withIt( matrix.multiplyVector3( vector.setXYZ( this.maxX, this.minY, this.minZ ) ) );\n      withIt( matrix.multiplyVector3( vector.setXYZ( this.maxX, this.maxY, this.minZ ) ) );\n      withIt( matrix.multiplyVector3( vector.setXYZ( this.minX, this.minY, this.maxZ ) ) );\n      withIt( matrix.multiplyVector3( vector.setXYZ( this.minX, this.maxY, this.maxZ ) ) );\n      withIt( matrix.multiplyVector3( vector.setXYZ( this.maxX, this.minY, this.maxZ ) ) );\n      withIt( matrix.multiplyVector3( vector.setXYZ( this.maxX, this.maxY, this.maxZ ) ) );\n      return this.setMinMax( minX, minY, minZ, maxX, maxY, maxZ );\n    },\n\n    /**\n     * Expands this bounds on all sides by the specified amount.\n     * @public\n     *\n     * This is the mutable form of the function dilated(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} d\n     * @returns {Bounds3}\n     */\n    dilate: function( d ) {\n      return this.setMinMax( this.minX - d, this.minY - d, this.minZ - d, this.maxX + d, this.maxY + d, this.maxZ + d );\n    },\n\n    /**\n     * Expands this bounds horizontally (left and right) by the specified amount.\n     * @public\n     *\n     * This is the mutable form of the function dilatedX(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} x\n     * @returns {Bounds3}\n     */\n    dilateX: function( x ) {\n      return this.setMinMax( this.minX - x, this.minY, this.minZ, this.maxX + x, this.maxY, this.maxZ );\n    },\n\n    /**\n     * Expands this bounds vertically (top and bottom) by the specified amount.\n     * @public\n     *\n     * This is the mutable form of the function dilatedY(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} y\n     * @returns {Bounds3}\n     */\n    dilateY: function( y ) {\n      return this.setMinMax( this.minX, this.minY - y, this.minZ, this.maxX, this.maxY + y, this.maxZ );\n    },\n\n    /**\n     * Expands this bounds depth-wise (front and back) by the specified amount.\n     * @public\n     *\n     * This is the mutable form of the function dilatedZ(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} z\n     * @returns {Bounds3}\n     */\n    dilateZ: function( z ) {\n      return this.setMinMax( this.minX, this.minY, this.minZ - z, this.maxX, this.maxY, this.maxZ + z );\n    },\n\n    /**\n     * Expands this bounds independently along each axis. Will be equal to calling\n     * bounds.dilateX( x ).dilateY( y ).dilateZ( z ).\n     * @public\n     *\n     * This is the mutable form of the function dilatedXYZ(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @returns {Bounds3}\n     */\n    dilateXYZ: function( x, y, z ) {\n      return this.setMinMax( this.minX - x, this.minY - y, this.minZ - z, this.maxX + x, this.maxY + y, this.maxZ + z );\n    },\n\n    /**\n     * Contracts this bounds on all sides by the specified amount.\n     * @public\n     *\n     * This is the mutable form of the function eroded(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} d\n     * @returns {Bounds3}\n     */\n    erode: function( d ) { return this.dilate( -d ); },\n\n    /**\n     * Contracts this bounds horizontally (left and right) by the specified amount.\n     * @public\n     *\n     * This is the mutable form of the function erodedX(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} x\n     * @returns {Bounds3}\n     */\n    erodeX: function( x ) { return this.dilateX( -x ); },\n\n    /**\n     * Contracts this bounds vertically (top and bottom) by the specified amount.\n     * @public\n     *\n     * This is the mutable form of the function erodedY(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} y\n     * @returns {Bounds3}\n     */\n    erodeY: function( y ) { return this.dilateY( -y ); },\n\n    /**\n     * Contracts this bounds depth-wise (front and back) by the specified amount.\n     * @public\n     *\n     * This is the mutable form of the function erodedZ(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} z\n     * @returns {Bounds3}\n     */\n    erodeZ: function( z ) { return this.dilateZ( -z ); },\n\n    /**\n     * Contracts this bounds independently along each axis. Will be equal to calling\n     * bounds.erodeX( x ).erodeY( y ).erodeZ( z ).\n     * @public\n     *\n     * This is the mutable form of the function erodedXYZ(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @returns {Bounds3}\n     */\n    erodeXYZ: function( x, y, z ) { return this.dilateXYZ( -x, -y, -z ); },\n\n    /**\n     * Translates our bounds horizontally by x.\n     * @public\n     *\n     * This is the mutable form of the function shiftedX(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} x\n     * @returns {Bounds3}\n     */\n    shiftX: function( x ) {\n      return this.setMinMax( this.minX + x, this.minY, this.minZ, this.maxX + x, this.maxY, this.maxZ );\n    },\n\n    /**\n     * Translates our bounds vertically by y.\n     * @public\n     *\n     * This is the mutable form of the function shiftedY(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} y\n     * @returns {Bounds3}\n     */\n    shiftY: function( y ) {\n      return this.setMinMax( this.minX, this.minY + y, this.minZ, this.maxX, this.maxY + y, this.maxZ );\n    },\n\n    /**\n     * Translates our bounds depth-wise by z.\n     * @public\n     *\n     * This is the mutable form of the function shiftedZ(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} z\n     * @returns {Bounds3}\n     */\n    shiftZ: function( z ) {\n      return this.setMinMax( this.minX, this.minY, this.minZ + z, this.maxX, this.maxY, this.maxZ + z );\n    },\n\n    /**\n     * Translates our bounds by (x,y,z).\n     * @public\n     *\n     * This is the mutable form of the function shifted(). This will mutate (change) this bounds, in addition to returning\n     * this bounds itself.\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @returns {Bounds3}\n     */\n    shift: function( x, y, z ) {\n      return this.setMinMax( this.minX + x, this.minY + y, this.minZ + z, this.maxX + x, this.maxY + y, this.maxZ + z );\n    }\n  }, {\n    /**\n     * Returns a new Bounds3 object, with the cuboid (3d rectangle) construction with x, y, z, width, height and depth.\n     * @public\n     *\n     * @param {number} x - The minimum value of X for the bounds.\n     * @param {number} y - The minimum value of Y for the bounds.\n     * @param {number} z - The minimum value of Z for the bounds.\n     * @param {number} width - The width (maxX - minX) of the bounds.\n     * @param {number} height - The height (maxY - minY) of the bounds.\n     * @param {number} depth - The depth (maxZ - minZ) of the bounds.\n     * @returns {Bounds3}\n     */\n    cuboid: function( x, y, z, width, height, depth ) {\n      return new Bounds3( x, y, z, x + width, y + height, z + depth );\n    },\n\n    /**\n     * Returns a new Bounds3 object that only contains the specified point (x,y,z). Useful for being dilated to form a\n     * bounding box around a point. Note that the bounds will not be \"empty\" as it contains (x,y,z), but it will have\n     * zero area.\n     * @public\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @returns {Bounds3}\n     */\n    point: function( x, y, z ) {\n      return new Bounds3( x, y, z, x, y, z );\n    }\n  } );\n\n  Poolable.mixin( Bounds3, {\n    defaultFactory: function() { return Bounds3.NOTHING.copy(); },\n    constructorDuplicateFactory: function( pool ) {\n      return function( minX, minY, minZ, maxX, maxY, maxZ ) {\n        if ( pool.length ) {\n          return pool.pop().setMinMax( minX, minY, minZ, maxX, maxY, maxZ );\n        }\n        else {\n          return new Bounds3( minX, minY, minZ, maxX, maxY, maxZ );\n        }\n      };\n    }\n  } );\n\n  /**\n   * A contant Bounds3 with minimums = $\\infty$, maximums = $-\\infty$, so that it represents \"no bounds whatsoever\".\n   * @public\n   *\n   * This allows us to take the union (union/includeBounds) of this and any other Bounds3 to get the other bounds back,\n   * e.g. Bounds3.NOTHING.union( bounds ).equals( bounds ). This object naturally serves as the base case as a union of\n   * zero bounds objects.\n   *\n   * Additionally, intersections with NOTHING will always return a Bounds3 equivalent to NOTHING.\n   *\n   * @constant {Bounds3} NOTHING\n   */\n  Bounds3.NOTHING = new Bounds3( Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY );\n\n  /**\n   * A contant Bounds3 with minimums = $-\\infty$, maximums = $\\infty$, so that it represents \"all bounds\".\n   * @public\n   *\n   * This allows us to take the intersection (intersection/constrainBounds) of this and any other Bounds3 to get the\n   * other bounds back, e.g. Bounds3.EVERYTHING.intersection( bounds ).equals( bounds ). This object naturally serves as\n   * the base case as an intersection of zero bounds objects.\n   *\n   * Additionally, unions with EVERYTHING will always return a Bounds3 equivalent to EVERYTHING.\n   *\n   * @constant {Bounds3} EVERYTHING\n   */\n  Bounds3.EVERYTHING = new Bounds3( Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY );\n\n  return Bounds3;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * A complex number fhat is immutable. Extends Vector2 for many common operations that need to treat the complex number\n * as a vector $\\begin{bmatrix} a \\\\ b \\end{bmatrix}$ for the real number $a+bi$.\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n * @author Chris Malley\n */\n\ndefine( 'DOT/Complex',['require','DOT/dot','PHET_CORE/inherit','DOT/Vector2'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n\n  var inherit = require( 'PHET_CORE/inherit' );\n  var Vector2 = require( 'DOT/Vector2' );\n\n  /**\n   * Creates a complex number, that has both a real and imaginary part.\n   * @constructor\n   * @public\n   *\n   * @param {number} real - The real part. For a complex number $a+bi$, this should be $a$.\n   * @param {number} imaginary - The imaginary part. For a complex number $a+bi$, this should be $b$.\n   */\n  function Complex( real, imaginary ) {\n    Vector2.call( this, real, imaginary );\n\n    // @public {number} - The real part. For a complex number $a+bi$, this is $a$.\n    this.real = real;\n\n    // @public {number} - The imaginary part. For a complex number $a+bi$, this is $b$.\n    this.imaginary = imaginary;\n  }\n\n  dot.register( 'Complex', Complex );\n\n  // Inheriting Vector2 for now since many times we may want to treat the complex number as a vector\n  // ideally, we should have Vector2-likeness be a mixin?\n  // we also inherit the immutable form since we add 'real' and 'imaginary' properties,\n  // without adding extra logic to mutators in Vector2\n  inherit( Vector2.Immutable, Complex, {\n    /**\n     * The phase / argument of the complex number.\n     * @public\n     *\n     * @returns {number}\n     */\n    phase: Vector2.prototype.angle,\n\n    /**\n     * Complex multiplication.\n     * @public\n     *\n     * @param {Complex} c\n     * @returns {Complex}\n     */\n    times: function( c ) {\n      return new Complex( this.real * c.real - this.imaginary * c.imaginary, this.real * c.imaginary + this.imaginary * c.real );\n    },\n\n    /**\n     * Complex division.\n     * @public\n     *\n     * @param {Complex} c\n     * @returns {Complex}\n     */\n    dividedBy: function( c ) {\n      var cMag = c.magnitudeSquared();\n      return new Complex(\n        ( this.real * c.real + this.imaginary * c.imaginary ) / cMag,\n        ( this.imaginary * c.real - this.real * c.imaginary ) / cMag\n      );\n    },\n\n    /**\n     * Square root.\n     * @public\n     *\n     * @returns {Complex}\n     */\n    sqrt: function() {\n      var mag = this.magnitude();\n      return new Complex( Math.sqrt( ( mag + this.real ) / 2 ),\n        ( this.imaginary >= 0 ? 1 : -1 ) * Math.sqrt( ( mag - this.real ) / 2 ) );\n    },\n\n    /**\n     * Complex conjugate.\n     * @public\n     *\n     * @returns {Complex}\n     */\n    conjugate: function() {\n      return new Complex( this.real, -this.imaginary );\n    },\n\n    /**\n     * Takes e to the power of this complex number. $e^{a+bi}=e^a\\cos b + i\\sin b$.\n     * @public\n     *\n     * @returns {Complex}\n     */\n    exponentiated: function() {\n      return Complex.createPolar( Math.exp( this.real ), this.imaginary );\n    },\n\n    /**\n     * Debugging string for the complex number (provides real and imaginary parts).\n     * @public\n     *\n     * @returns {string}\n     */\n    toString: function() {\n      return 'Complex(' + this.x + ', ' + this.y + ')';\n    }\n  }, {\n    /**\n     * Constructs a complex number from just the real part (assuming the imaginary part is 0).\n     * @public\n     *\n     * @param {number} real\n     * @returns {Complex}\n     */\n    real: function( real ) {\n      return new Complex( real, 0 );\n    },\n\n    /**\n     * Constructs a complex number from just the imaginary part (assuming the real part is 0).\n     * @public\n     *\n     * @param {number} imaginary\n     * @returns {Complex}\n     */\n    imaginary: function( imaginary ) {\n      return new Complex( 0, imaginary );\n    },\n\n    /**\n     * Constructs a complex number from the polar form. For a magnitude $r$ and phase $\\varphi$, this will be\n     * $\\cos\\varphi+i r\\sin\\varphi$.\n     * @public\n     *\n     * @param {number} magnitude\n     * @param {number} phase\n     * @returns {Complex}\n     */\n    createPolar: function( magnitude, phase ) {\n      return new Complex( magnitude * Math.cos( phase ), magnitude * Math.sin( phase ) );\n    }\n  } );\n\n  /**\n   * Immutable constant $0$.\n   * @public\n   *\n   * @constant {Complex} ZERO\n   */\n  Complex.ZERO = new Complex( 0, 0 );\n\n  /**\n   * Immutable constant $1$.\n   * @public\n   *\n   * @constant {Complex} ONE\n   */\n  Complex.ONE = new Complex( 1, 0 );\n\n  /**\n   * Immutable constant $i$, the imaginary unit.\n   * @public\n   *\n   * @constant {Complex} ONE\n   */\n  Complex.I = new Complex( 0, 1 );\n\n  return Complex;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Construction of 2D convex hulls from a list of points.\n *\n * For example:\n * #begin canvasExample grahamScan 256x128\n * #on\n * var points = _.range( 50 ).map( function() {\n *   return new dot.Vector2( 5 + ( 256 - 10 ) * Math.random(), 5 + ( 128 - 10 ) * Math.random() );\n * } );\n * var hullPoints = dot.ConvexHull2.grahamScan( points, false );\n * #off\n * context.beginPath();\n * hullPoints.forEach( function( point ) {\n *   context.lineTo( point.x, point.y );\n * } );\n * context.closePath();\n * context.fillStyle = '#eee';\n * context.fill();\n * context.strokeStyle = '#f00';\n * context.stroke();\n *\n * context.beginPath();\n * points.forEach( function( point ) {\n *   context.arc( point.x, point.y, 2, 0, Math.PI * 2, false );\n *   context.closePath();\n * } );\n * context.fillStyle = '#00f';\n * context.fill();\n * #end canvasExample\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/ConvexHull2',['require','DOT/dot'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n\n  // counter-clockwise turn if > 0, clockwise turn if < 0, collinear if === 0.\n  function ccw( p1, p2, p3 ) {\n    return p2.minus( p1 ).crossScalar( p3.minus( p1 ) );\n  }\n\n  var ConvexHull2 = {\n    // TODO testing: all collinear, multiple ways of having same angle, etc.\n\n    /**\n     * Given multiple points, this performs a Graham Scan (http://en.wikipedia.org/wiki/Graham_scan) to identify an\n     * ordered list of points which define the minimal polygon that contains all of the points.\n     * @public\n     *\n     * @param {Array.<Vector2>} points\n     * @param {boolean} includeCollinear - If a point is along an edge of the convex hull (not at one of its vertices),\n     *                                     should it be included?\n     * @returns {Array.<Vector2>}\n     */\n    grahamScan: function( points, includeCollinear ) {\n      if ( points.length <= 2 ) {\n        return points;\n      }\n\n      // find the point 'p' with the lowest y value\n      var minY = Number.POSITIVE_INFINITY;\n      var p = null;\n      _.each( points, function( point ) {\n        if ( point.y <= minY ) {\n          // if two points have the same y value, take the one with the lowest x\n          if ( point.y === minY && p ) {\n            if ( point.x < p.x ) {\n              p = point;\n            }\n          }\n          else {\n            minY = point.y;\n            p = point;\n          }\n        }\n      } );\n\n      // sorts the points by their angle. Between 0 and PI\n      points = _.sortBy( points, function( point ) {\n        return point.minus( p ).angle();\n      } );\n\n      // remove p from points (relies on the above statement making a defensive copy)\n      points.splice( _.indexOf( points, p ), 1 );\n\n      // our result array\n      var result = [ p ];\n\n      _.each( points, function( point ) {\n        // ignore points equal to our starting point\n        if ( p.x === point.x && p.y === point.y ) { return; }\n\n        function isRightTurn() {\n          if ( result.length < 2 ) {\n            return false;\n          }\n          var cross = ccw( result[ result.length - 2 ], result[ result.length - 1 ], point );\n          return includeCollinear ? ( cross < 0 ) : ( cross <= 0 );\n        }\n\n        while ( isRightTurn() ) {\n          result.pop();\n        }\n        result.push( point );\n      } );\n\n      return result;\n    }\n  };\n\n  dot.register( 'ConvexHull2', ConvexHull2 );\n\n  return ConvexHull2;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Basic width and height, like a Bounds2 but without the location defined.\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/Dimension2',['require','DOT/dot','PHET_CORE/inherit','DOT/Bounds2'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n  var inherit = require( 'PHET_CORE/inherit' );\n  require( 'DOT/Bounds2' );\n\n  /**\n   * Creates a 2-dimensional size with a width and height\n   * @constructor\n   * @public\n   *\n   * @param {number} width\n   * @param {number} height\n   */\n  function Dimension2( width, height ) {\n    // @public {number} - Width of the dimension\n    this.width = width;\n\n    // @public {number} - Height of the dimension\n    this.height = height;\n  }\n\n  dot.register( 'Dimension2', Dimension2 );\n\n  inherit( Object, Dimension2, {\n    /**\n     * Debugging string for the dimension.\n     * @public\n     *\n     * @returns {string}\n     */\n    toString: function() {\n      return '[' + this.width + 'w, ' + this.height + 'h]';\n    },\n\n    /**\n     * Sets this dimension to be a copy of another dimension.\n     * @public\n     *\n     * This is the mutable form of the function copy(). This will mutate (change) this dimension, in addition to returning\n     * this dimension itself.\n     *\n     * @param {Dimension2} dimension\n     * @returns {Dimension2}\n     */\n    set: function( dimension ) {\n      this.width = dimension.width;\n      this.height = dimension.height;\n      return this;\n    },\n\n    /**\n     * Sets the width of the dimension, returning this.\n     * @public\n     *\n     * @param {number} width\n     * @returns {Dimension2}\n     */\n    setWidth: function( width ) {\n      this.width = width;\n      return this;\n    },\n\n    /**\n     * Sets the height of the dimension, returning this.\n     * @public\n     *\n     * @param {number} height\n     * @returns {Dimension2}\n     */\n    setHeight: function( height ) {\n      this.height = height;\n      return this;\n    },\n\n    /**\n     * Creates a copy of this dimension, or if a dimension is passed in, set that dimension's values to ours.\n     * @public\n     *\n     * This is the immutable form of the function set(), if a dimension is provided. This will return a new dimension,\n     * and will not modify this dimension.\n     *\n     * @param {Dimension2} [dimension] - If not provided, creates a new Vector2 with filled in values. Otherwise, fills\n     *                                   in the values of the provided dimension so that it equals this dimension.\n     * @returns {Dimension2}\n     */\n    copy: function( dimension ) {\n      if ( dimension ) {\n        return dimension.set( this );\n      }\n      else {\n        return new Dimension2( this.width, this.height );\n      }\n    },\n\n    /**\n     * Creates a Bounds2 from this dimension based on passing in the minimum (top-left) corner as (x,y).\n     * @public\n     *\n     * @param {number} [x] - Minimum x coordinate of the bounds, or 0 if not provided.\n     * @param {number} [y] - Minimum y coordinate of the bounds, or 0 if not provided.\n     * @returns {Bounds2}\n     */\n    toBounds: function( x, y ) {\n      x = x !== undefined ? x : 0;\n      y = y !== undefined ? y : 0;\n      return new dot.Bounds2( x, y, this.width + x, this.height + y );\n    },\n\n    /**\n     * Exact equality comparison between this dimension and another dimension.\n     * @public\n     *\n     * @param {Dimension2} other\n     * @returns {boolean} - Whether the two dimensions have equal width and height\n     */\n    equals: function( other ) {\n      return this.width === other.width && this.height === other.height;\n    }\n  } );\n\n  return Dimension2;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Eigensystem decomposition, based on Jama (http://math.nist.gov/javanumerics/jama/)\n *\n * Eigenvalues and eigenvectors of a real matrix.\n * <P>\n * If A is symmetric, then A = V*D*V' where the eigenvalue matrix D is\n * diagonal and the eigenvector matrix V is orthogonal.\n * I.e. A = V.times(D.times(V.transpose())) and\n * V.times(V.transpose()) equals the identity matrix.\n * <P>\n * If A is not symmetric, then the eigenvalue matrix D is block diagonal\n * with the real eigenvalues in 1-by-1 blocks and any complex eigenvalues,\n * lambda + i*mu, in 2-by-2 blocks, [lambda, mu; -mu, lambda].  The\n * columns of V represent the eigenvectors in the sense that A*V = V*D,\n * i.e. A.times(V) equals V.times(D).  The matrix V may be badly\n * conditioned, or even singular, so the validity of the equation\n * A = V*D*inverse(V) depends upon V.cond().\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/EigenvalueDecomposition',['require','DOT/dot'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n\n  var Float32Array = window.Float32Array || Array;\n\n  // require( 'DOT/Matrix' ); // commented out so Require.js doesn't complain about the circular dependency\n\n  function EigenvalueDecomposition( matrix ) {\n    var i;\n    var j;\n\n    var A = matrix.entries;\n    this.n = matrix.getColumnDimension(); // Row and column dimension (square matrix).\n    var n = this.n;\n    this.V = new Float32Array( n * n ); // Array for internal storage of eigenvectors.\n\n    // Arrays for internal storage of eigenvalues.\n    this.d = new Float32Array( n );\n    this.e = new Float32Array( n );\n\n    this.issymmetric = true;\n    for ( j = 0; (j < n) && this.issymmetric; j++ ) {\n      for ( i = 0; (i < n) && this.issymmetric; i++ ) {\n        this.issymmetric = (A[ i * this.n + j ] === A[ j * this.n + i ]);\n      }\n    }\n\n    if ( this.issymmetric ) {\n      for ( i = 0; i < n; i++ ) {\n        for ( j = 0; j < n; j++ ) {\n          this.V[ i * this.n + j ] = A[ i * this.n + j ];\n        }\n      }\n\n      // Tridiagonalize.\n      this.tred2();\n\n      // Diagonalize.\n      this.tql2();\n\n    }\n    else {\n      this.H = new Float32Array( n * n ); // Array for internal storage of nonsymmetric Hessenberg form.\n      this.ort = new Float32Array( n ); // // Working storage for nonsymmetric algorithm.\n\n      for ( j = 0; j < n; j++ ) {\n        for ( i = 0; i < n; i++ ) {\n          this.H[ i * this.n + j ] = A[ i * this.n + j ];\n        }\n      }\n\n      // Reduce to Hessenberg form.\n      this.orthes();\n\n      // Reduce Hessenberg to real Schur form.\n      this.hqr2();\n    }\n  }\n\n  dot.register( 'EigenvalueDecomposition', EigenvalueDecomposition );\n\n  EigenvalueDecomposition.prototype = {\n    constructor: EigenvalueDecomposition,\n\n    // Return the eigenvector matrix\n    getV: function() {\n      return this.V.copy();\n    },\n\n    // {Array} Return the real parts of the eigenvalues\n    getRealEigenvalues: function() {\n      return this.d;\n    },\n\n    // {Array} Return the imaginary parts of the eigenvalues\n    getImagEigenvalues: function() {\n      return this.e;\n    },\n\n    // Return the block diagonal eigenvalue matrix\n    getD: function() {\n      var n = this.n;\n      var d = this.d;\n      var e = this.e;\n\n      var X = new dot.Matrix( n, n );\n      var D = X.entries;\n      for ( var i = 0; i < n; i++ ) {\n        for ( var j = 0; j < n; j++ ) {\n          D[ i * this.n + j ] = 0.0;\n        }\n        D[ i * this.n + i ] = d[ i ];\n        if ( e[ i ] > 0 ) {\n          D[ i * this.n + i + 1 ] = e[ i ];\n        }\n        else if ( e[ i ] < 0 ) {\n          D[ i * this.n + i - 1 ] = e[ i ];\n        }\n      }\n      return X;\n    },\n\n    // Symmetric Householder reduction to tridiagonal form.\n    tred2: function() {\n      var n = this.n;\n      var V = this.V;\n      var d = this.d;\n      var e = this.e;\n      var i;\n      var j;\n      var k;\n      var f;\n      var g;\n      var h;\n\n      //  This is derived from the Algol procedures tred2 by\n      //  Bowdler, Martin, Reinsch, and Wilkinson, Handbook for\n      //  Auto. Comp., Vol.ii-Linear Algebra, and the corresponding\n      //  Fortran subroutine in EISPACK.\n\n      for ( j = 0; j < n; j++ ) {\n        d[ j ] = V[ (n - 1) * n + j ];\n      }\n\n      // Householder reduction to tridiagonal form.\n\n      for ( i = n - 1; i > 0; i-- ) {\n\n        // Scale to avoid under/overflow.\n\n        var scale = 0.0;\n        h = 0.0;\n        for ( k = 0; k < i; k++ ) {\n          scale = scale + Math.abs( d[ k ] );\n        }\n        if ( scale === 0.0 ) {\n          e[ i ] = d[ i - 1 ];\n          for ( j = 0; j < i; j++ ) {\n            d[ j ] = V[ (i - 1) * n + j ];\n            V[ i * this.n + j ] = 0.0;\n            V[ j * this.n + i ] = 0.0;\n          }\n        }\n        else {\n\n          // Generate Householder vector.\n\n          for ( k = 0; k < i; k++ ) {\n            d[ k ] /= scale;\n            h += d[ k ] * d[ k ];\n          }\n          f = d[ i - 1 ];\n          g = Math.sqrt( h );\n          if ( f > 0 ) {\n            g = -g;\n          }\n          e[ i ] = scale * g;\n          h = h - f * g;\n          d[ i - 1 ] = f - g;\n          for ( j = 0; j < i; j++ ) {\n            e[ j ] = 0.0;\n          }\n\n          // Apply similarity transformation to remaining columns.\n\n          for ( j = 0; j < i; j++ ) {\n            f = d[ j ];\n            V[ j * this.n + i ] = f;\n            g = e[ j ] + V[ j * n + j ] * f;\n            for ( k = j + 1; k <= i - 1; k++ ) {\n              g += V[ k * n + j ] * d[ k ];\n              e[ k ] += V[ k * n + j ] * f;\n            }\n            e[ j ] = g;\n          }\n          f = 0.0;\n          for ( j = 0; j < i; j++ ) {\n            e[ j ] /= h;\n            f += e[ j ] * d[ j ];\n          }\n          var hh = f / (h + h);\n          for ( j = 0; j < i; j++ ) {\n            e[ j ] -= hh * d[ j ];\n          }\n          for ( j = 0; j < i; j++ ) {\n            f = d[ j ];\n            g = e[ j ];\n            for ( k = j; k <= i - 1; k++ ) {\n              V[ k * n + j ] -= (f * e[ k ] + g * d[ k ]);\n            }\n            d[ j ] = V[ (i - 1) * n + j ];\n            V[ i * this.n + j ] = 0.0;\n          }\n        }\n        d[ i ] = h;\n      }\n\n      // Accumulate transformations.\n\n      for ( i = 0; i < n - 1; i++ ) {\n        V[ (n - 1) * n + i ] = V[ i * n + i ];\n        V[ i * n + i ] = 1.0;\n        h = d[ i + 1 ];\n        if ( h !== 0.0 ) {\n          for ( k = 0; k <= i; k++ ) {\n            d[ k ] = V[ k * n + (i + 1) ] / h;\n          }\n          for ( j = 0; j <= i; j++ ) {\n            g = 0.0;\n            for ( k = 0; k <= i; k++ ) {\n              g += V[ k * n + (i + 1) ] * V[ k * n + j ];\n            }\n            for ( k = 0; k <= i; k++ ) {\n              V[ k * n + j ] -= g * d[ k ];\n            }\n          }\n        }\n        for ( k = 0; k <= i; k++ ) {\n          V[ k * n + (i + 1) ] = 0.0;\n        }\n      }\n      for ( j = 0; j < n; j++ ) {\n        d[ j ] = V[ (n - 1) * n + j ];\n        V[ (n - 1) * n + j ] = 0.0;\n      }\n      V[ (n - 1) * n + (n - 1) ] = 1.0;\n      e[ 0 ] = 0.0;\n    },\n\n    // Symmetric tridiagonal QL algorithm.\n    tql2: function() {\n      var n = this.n;\n      var V = this.V;\n      var d = this.d;\n      var e = this.e;\n      var i;\n      var j;\n      var k;\n      var l;\n      var g;\n      var p;\n      var iter;\n\n      //  This is derived from the Algol procedures tql2, by\n      //  Bowdler, Martin, Reinsch, and Wilkinson, Handbook for\n      //  Auto. Comp., Vol.ii-Linear Algebra, and the corresponding\n      //  Fortran subroutine in EISPACK.\n\n      for ( i = 1; i < n; i++ ) {\n        e[ i - 1 ] = e[ i ];\n      }\n      e[ n - 1 ] = 0.0;\n\n      var f = 0.0;\n      var tst1 = 0.0;\n      var eps = Math.pow( 2.0, -52.0 );\n      for ( l = 0; l < n; l++ ) {\n\n        // Find small subdiagonal element\n\n        tst1 = Math.max( tst1, Math.abs( d[ l ] ) + Math.abs( e[ l ] ) );\n        var m = l;\n        while ( m < n ) {\n          if ( Math.abs( e[ m ] ) <= eps * tst1 ) {\n            break;\n          }\n          m++;\n        }\n\n        // If m === l, d[l] is an eigenvalue,\n        // otherwise, iterate.\n\n        if ( m > l ) {\n          iter = 0;\n          do {\n            iter = iter + 1;  // (Could check iteration count here.)\n\n            // Compute implicit shift\n\n            g = d[ l ];\n            p = (d[ l + 1 ] - g) / (2.0 * e[ l ]);\n            var r = dot.Matrix.hypot( p, 1.0 );\n            if ( p < 0 ) {\n              r = -r;\n            }\n            d[ l ] = e[ l ] / (p + r);\n            d[ l + 1 ] = e[ l ] * (p + r);\n            var dl1 = d[ l + 1 ];\n            var h = g - d[ l ];\n            for ( i = l + 2; i < n; i++ ) {\n              d[ i ] -= h;\n            }\n            f = f + h;\n\n            // Implicit QL transformation.\n\n            p = d[ m ];\n            var c = 1.0;\n            var c2 = c;\n            var c3 = c;\n            var el1 = e[ l + 1 ];\n            var s = 0.0;\n            var s2 = 0.0;\n            for ( i = m - 1; i >= l; i-- ) {\n              c3 = c2;\n              c2 = c;\n              s2 = s;\n              g = c * e[ i ];\n              h = c * p;\n              r = dot.Matrix.hypot( p, e[ i ] );\n              e[ i + 1 ] = s * r;\n              s = e[ i ] / r;\n              c = p / r;\n              p = c * d[ i ] - s * g;\n              d[ i + 1 ] = h + s * (c * g + s * d[ i ]);\n\n              // Accumulate transformation.\n\n              for ( k = 0; k < n; k++ ) {\n                h = V[ k * n + (i + 1) ];\n                V[ k * n + (i + 1) ] = s * V[ k * n + i ] + c * h;\n                V[ k * n + i ] = c * V[ k * n + i ] - s * h;\n              }\n            }\n            p = -s * s2 * c3 * el1 * e[ l ] / dl1;\n            e[ l ] = s * p;\n            d[ l ] = c * p;\n\n            // Check for convergence.\n\n          } while ( Math.abs( e[ l ] ) > eps * tst1 );\n        }\n        d[ l ] = d[ l ] + f;\n        e[ l ] = 0.0;\n      }\n\n      // Sort eigenvalues and corresponding vectors.\n\n      for ( i = 0; i < n - 1; i++ ) {\n        k = i;\n        p = d[ i ];\n        for ( j = i + 1; j < n; j++ ) {\n          if ( d[ j ] < p ) {\n            k = j;\n            p = d[ j ];\n          }\n        }\n        if ( k !== i ) {\n          d[ k ] = d[ i ];\n          d[ i ] = p;\n          for ( j = 0; j < n; j++ ) {\n            p = V[ j * this.n + i ];\n            V[ j * this.n + i ] = V[ j * n + k ];\n            V[ j * n + k ] = p;\n          }\n        }\n      }\n    },\n\n    // Nonsymmetric reduction to Hessenberg form.\n    orthes: function() {\n      var n = this.n;\n      var V = this.V;\n      var H = this.H;\n      var ort = this.ort;\n      var i;\n      var j;\n      var m;\n      var f;\n      var g;\n\n      //  This is derived from the Algol procedures orthes and ortran,\n      //  by Martin and Wilkinson, Handbook for Auto. Comp.,\n      //  Vol.ii-Linear Algebra, and the corresponding\n      //  Fortran subroutines in EISPACK.\n\n      var low = 0;\n      var high = n - 1;\n\n      for ( m = low + 1; m <= high - 1; m++ ) {\n\n        // Scale column.\n\n        var scale = 0.0;\n        for ( i = m; i <= high; i++ ) {\n          scale = scale + Math.abs( H[ i * n + (m - 1) ] );\n        }\n        if ( scale !== 0.0 ) {\n\n          // Compute Householder transformation.\n\n          var h = 0.0;\n          for ( i = high; i >= m; i-- ) {\n            ort[ i ] = H[ i * n + (m - 1) ] / scale;\n            h += ort[ i ] * ort[ i ];\n          }\n          g = Math.sqrt( h );\n          if ( ort[ m ] > 0 ) {\n            g = -g;\n          }\n          h = h - ort[ m ] * g;\n          ort[ m ] = ort[ m ] - g;\n\n          // Apply Householder similarity transformation\n          // H = (I-u*u'/h)*H*(I-u*u')/h)\n\n          for ( j = m; j < n; j++ ) {\n            f = 0.0;\n            for ( i = high; i >= m; i-- ) {\n              f += ort[ i ] * H[ i * this.n + j ];\n            }\n            f = f / h;\n            for ( i = m; i <= high; i++ ) {\n              H[ i * this.n + j ] -= f * ort[ i ];\n            }\n          }\n\n          for ( i = 0; i <= high; i++ ) {\n            f = 0.0;\n            for ( j = high; j >= m; j-- ) {\n              f += ort[ j ] * H[ i * this.n + j ];\n            }\n            f = f / h;\n            for ( j = m; j <= high; j++ ) {\n              H[ i * this.n + j ] -= f * ort[ j ];\n            }\n          }\n          ort[ m ] = scale * ort[ m ];\n          H[ m * n + (m - 1) ] = scale * g;\n        }\n      }\n\n      // Accumulate transformations (Algol's ortran).\n\n      for ( i = 0; i < n; i++ ) {\n        for ( j = 0; j < n; j++ ) {\n          V[ i * this.n + j ] = (i === j ? 1.0 : 0.0);\n        }\n      }\n\n      for ( m = high - 1; m >= low + 1; m-- ) {\n        if ( H[ m * n + (m - 1) ] !== 0.0 ) {\n          for ( i = m + 1; i <= high; i++ ) {\n            ort[ i ] = H[ i * n + (m - 1) ];\n          }\n          for ( j = m; j <= high; j++ ) {\n            g = 0.0;\n            for ( i = m; i <= high; i++ ) {\n              g += ort[ i ] * V[ i * this.n + j ];\n            }\n            // Double division avoids possible underflow\n            g = (g / ort[ m ]) / H[ m * n + (m - 1) ];\n            for ( i = m; i <= high; i++ ) {\n              V[ i * this.n + j ] += g * ort[ i ];\n            }\n          }\n        }\n      }\n    },\n\n    // Complex scalar division.\n    cdiv: function( xr, xi, yr, yi ) {\n      var r;\n      var d;\n      if ( Math.abs( yr ) > Math.abs( yi ) ) {\n        r = yi / yr;\n        d = yr + r * yi;\n        this.cdivr = (xr + r * xi) / d;\n        this.cdivi = (xi - r * xr) / d;\n      }\n      else {\n        r = yr / yi;\n        d = yi + r * yr;\n        this.cdivr = (r * xr + xi) / d;\n        this.cdivi = (r * xi - xr) / d;\n      }\n    },\n\n    // Nonsymmetric reduction from Hessenberg to real Schur form.\n    hqr2: function() {\n      var n;\n      var V = this.V;\n      var d = this.d;\n      var e = this.e;\n      var H = this.H;\n      var i;\n      var j;\n      var k;\n      var l;\n      var m;\n      var iter;\n\n      //  This is derived from the Algol procedure hqr2,\n      //  by Martin and Wilkinson, Handbook for Auto. Comp.,\n      //  Vol.ii-Linear Algebra, and the corresponding\n      //  Fortran subroutine in EISPACK.\n\n      // Initialize\n\n      var nn = this.n;\n      n = nn - 1;\n      var low = 0;\n      var high = nn - 1;\n      var eps = Math.pow( 2.0, -52.0 );\n      var exshift = 0.0;\n      var p = 0;\n      var q = 0;\n      var r = 0;\n      var s = 0;\n      var z = 0;\n      var t;\n      var w;\n      var x;\n      var y;\n\n      // Store roots isolated by balanc and compute matrix norm\n\n      var norm = 0.0;\n      for ( i = 0; i < nn; i++ ) {\n        if ( i < low || i > high ) {\n          d[ i ] = H[ i * n + i ];\n          e[ i ] = 0.0;\n        }\n        for ( j = Math.max( i - 1, 0 ); j < nn; j++ ) {\n          norm = norm + Math.abs( H[ i * this.n + j ] );\n        }\n      }\n\n      // Outer loop over eigenvalue index\n\n      iter = 0;\n      while ( n >= low ) {\n\n        // Look for single small sub-diagonal element\n\n        l = n;\n        while ( l > low ) {\n          s = Math.abs( H[ (l - 1) * n + (l - 1) ] ) + Math.abs( H[ l * n + l ] );\n          if ( s === 0.0 ) {\n            s = norm;\n          }\n          if ( Math.abs( H[ l * n + (l - 1) ] ) < eps * s ) {\n            break;\n          }\n          l--;\n        }\n\n        // Check for convergence\n        // One root found\n\n        if ( l === n ) {\n          H[ n * n + n ] = H[ n * n + n ] + exshift;\n          d[ n ] = H[ n * n + n ];\n          e[ n ] = 0.0;\n          n--;\n          iter = 0;\n\n          // Two roots found\n\n        }\n        else if ( l === n - 1 ) {\n          w = H[ n * n + n - 1 ] * H[ (n - 1) * n + n ];\n          p = (H[ (n - 1) * n + (n - 1) ] - H[ n * n + n ]) / 2.0;\n          q = p * p + w;\n          z = Math.sqrt( Math.abs( q ) );\n          H[ n * n + n ] = H[ n * n + n ] + exshift;\n          H[ (n - 1) * n + (n - 1) ] = H[ (n - 1) * n + (n - 1) ] + exshift;\n          x = H[ n * n + n ];\n\n          // Real pair\n\n          if ( q >= 0 ) {\n            if ( p >= 0 ) {\n              z = p + z;\n            }\n            else {\n              z = p - z;\n            }\n            d[ n - 1 ] = x + z;\n            d[ n ] = d[ n - 1 ];\n            if ( z !== 0.0 ) {\n              d[ n ] = x - w / z;\n            }\n            e[ n - 1 ] = 0.0;\n            e[ n ] = 0.0;\n            x = H[ n * n + n - 1 ];\n            s = Math.abs( x ) + Math.abs( z );\n            p = x / s;\n            q = z / s;\n            r = Math.sqrt( p * p + q * q );\n            p = p / r;\n            q = q / r;\n\n            // Row modification\n\n            for ( j = n - 1; j < nn; j++ ) {\n              z = H[ (n - 1) * n + j ];\n              H[ (n - 1) * n + j ] = q * z + p * H[ n * n + j ];\n              H[ n * n + j ] = q * H[ n * n + j ] - p * z;\n            }\n\n            // Column modification\n\n            for ( i = 0; i <= n; i++ ) {\n              z = H[ i * n + n - 1 ];\n              H[ i * n + n - 1 ] = q * z + p * H[ i * n + n ];\n              H[ i * n + n ] = q * H[ i * n + n ] - p * z;\n            }\n\n            // Accumulate transformations\n\n            for ( i = low; i <= high; i++ ) {\n              z = V[ i * n + n - 1 ];\n              V[ i * n + n - 1 ] = q * z + p * V[ i * n + n ];\n              V[ i * n + n ] = q * V[ i * n + n ] - p * z;\n            }\n\n            // Complex pair\n\n          }\n          else {\n            d[ n - 1 ] = x + p;\n            d[ n ] = x + p;\n            e[ n - 1 ] = z;\n            e[ n ] = -z;\n          }\n          n = n - 2;\n          iter = 0;\n\n          // No convergence yet\n\n        }\n        else {\n\n          // Form shift\n\n          x = H[ n * n + n ];\n          y = 0.0;\n          w = 0.0;\n          if ( l < n ) {\n            y = H[ (n - 1) * n + (n - 1) ];\n            w = H[ n * n + n - 1 ] * H[ (n - 1) * n + n ];\n          }\n\n          // Wilkinson's original ad hoc shift\n\n          if ( iter === 10 ) {\n            exshift += x;\n            for ( i = low; i <= n; i++ ) {\n              H[ i * n + i ] -= x;\n            }\n            s = Math.abs( H[ n * n + n - 1 ] ) + Math.abs( H[ (n - 1) * n + n - 2 ] );\n            x = y = 0.75 * s;\n            w = -0.4375 * s * s;\n          }\n\n          // MATLAB's new ad hoc shift\n\n          if ( iter === 30 ) {\n            s = (y - x) / 2.0;\n            s = s * s + w;\n            if ( s > 0 ) {\n              s = Math.sqrt( s );\n              if ( y < x ) {\n                s = -s;\n              }\n              s = x - w / ((y - x) / 2.0 + s);\n              for ( i = low; i <= n; i++ ) {\n                H[ i * n + i ] -= s;\n              }\n              exshift += s;\n              x = y = w = 0.964;\n            }\n          }\n\n          iter = iter + 1;   // (Could check iteration count here.)\n\n          // Look for two consecutive small sub-diagonal elements\n\n          m = n - 2;\n          while ( m >= l ) {\n            z = H[ m * n + m ];\n            r = x - z;\n            s = y - z;\n            p = (r * s - w) / H[ (m + 1) * n + m ] + H[ m * n + m + 1 ];\n            q = H[ (m + 1) * n + m + 1 ] - z - r - s;\n            r = H[ (m + 2) * n + m + 1 ];\n            s = Math.abs( p ) + Math.abs( q ) + Math.abs( r );\n            p = p / s;\n            q = q / s;\n            r = r / s;\n            if ( m === l ) {\n              break;\n            }\n            if ( Math.abs( H[ m * n + (m - 1) ] ) * (Math.abs( q ) + Math.abs( r )) <\n                 eps * (Math.abs( p ) * (Math.abs( H[ (m - 1) * n + m - 1 ] ) + Math.abs( z ) +\n                                         Math.abs( H[ (m + 1) * n + m + 1 ] ))) ) {\n              break;\n            }\n            m--;\n          }\n\n          for ( i = m + 2; i <= n; i++ ) {\n            H[ i * n + i - 2 ] = 0.0;\n            if ( i > m + 2 ) {\n              H[ i * n + i - 3 ] = 0.0;\n            }\n          }\n\n          // Double QR step involving rows l:n and columns m:n\n\n          for ( k = m; k <= n - 1; k++ ) {\n            var notlast = (k !== n - 1);\n            if ( k !== m ) {\n              p = H[ k * n + k - 1 ];\n              q = H[ (k + 1) * n + k - 1 ];\n              r = (notlast ? H[ (k + 2) * n + k - 1 ] : 0.0);\n              x = Math.abs( p ) + Math.abs( q ) + Math.abs( r );\n              if ( x !== 0.0 ) {\n                p = p / x;\n                q = q / x;\n                r = r / x;\n              }\n            }\n            if ( x === 0.0 ) {\n              break;\n            }\n            s = Math.sqrt( p * p + q * q + r * r );\n            if ( p < 0 ) {\n              s = -s;\n            }\n            if ( s !== 0 ) {\n              if ( k !== m ) {\n                H[ k * n + k - 1 ] = -s * x;\n              }\n              else if ( l !== m ) {\n                H[ k * n + k - 1 ] = -H[ k * n + k - 1 ];\n              }\n              p = p + s;\n              x = p / s;\n              y = q / s;\n              z = r / s;\n              q = q / p;\n              r = r / p;\n\n              // Row modification\n\n              for ( j = k; j < nn; j++ ) {\n                p = H[ k * n + j ] + q * H[ (k + 1) * n + j ];\n                if ( notlast ) {\n                  p = p + r * H[ (k + 2) * n + j ];\n                  H[ (k + 2) * n + j ] = H[ (k + 2) * n + j ] - p * z;\n                }\n                H[ k * n + j ] = H[ k * n + j ] - p * x;\n                H[ (k + 1) * n + j ] = H[ (k + 1) * n + j ] - p * y;\n              }\n\n              // Column modification\n\n              for ( i = 0; i <= Math.min( n, k + 3 ); i++ ) {\n                p = x * H[ i * n + k ] + y * H[ i * n + k + 1 ];\n                if ( notlast ) {\n                  p = p + z * H[ i * n + k + 2 ];\n                  H[ i * n + k + 2 ] = H[ i * n + k + 2 ] - p * r;\n                }\n                H[ i * n + k ] = H[ i * n + k ] - p;\n                H[ i * n + k + 1 ] = H[ i * n + k + 1 ] - p * q;\n              }\n\n              // Accumulate transformations\n\n              for ( i = low; i <= high; i++ ) {\n                p = x * V[ i * n + k ] + y * V[ i * n + k + 1 ];\n                if ( notlast ) {\n                  p = p + z * V[ i * n + k + 2 ];\n                  V[ i * n + k + 2 ] = V[ i * n + k + 2 ] - p * r;\n                }\n                V[ i * n + k ] = V[ i * n + k ] - p;\n                V[ i * n + k + 1 ] = V[ i * n + k + 1 ] - p * q;\n              }\n            }  // (s !== 0)\n          }  // k loop\n        }  // check convergence\n      }  // while (n >= low)\n\n      // Backsubstitute to find vectors of upper triangular form\n\n      if ( norm === 0.0 ) {\n        return;\n      }\n\n      for ( n = nn - 1; n >= 0; n-- ) {\n        p = d[ n ];\n        q = e[ n ];\n\n        // Real vector\n\n        if ( q === 0 ) {\n          l = n;\n          H[ n * n + n ] = 1.0;\n          for ( i = n - 1; i >= 0; i-- ) {\n            w = H[ i * n + i ] - p;\n            r = 0.0;\n            for ( j = l; j <= n; j++ ) {\n              r = r + H[ i * this.n + j ] * H[ j * n + n ];\n            }\n            if ( e[ i ] < 0.0 ) {\n              z = w;\n              s = r;\n            }\n            else {\n              l = i;\n              if ( e[ i ] === 0.0 ) {\n                if ( w !== 0.0 ) {\n                  H[ i * n + n ] = -r / w;\n                }\n                else {\n                  H[ i * n + n ] = -r / (eps * norm);\n                }\n\n                // Solve real equations\n\n              }\n              else {\n                x = H[ i * n + i + 1 ];\n                y = H[ (i + 1) * n + i ];\n                q = (d[ i ] - p) * (d[ i ] - p) + e[ i ] * e[ i ];\n                t = (x * s - z * r) / q;\n                H[ i * n + n ] = t;\n                if ( Math.abs( x ) > Math.abs( z ) ) {\n                  H[ (i + 1) * n + n ] = (-r - w * t) / x;\n                }\n                else {\n                  H[ (i + 1) * n + n ] = (-s - y * t) / z;\n                }\n              }\n\n              // Overflow control\n\n              t = Math.abs( H[ i * n + n ] );\n              if ( (eps * t) * t > 1 ) {\n                for ( j = i; j <= n; j++ ) {\n                  H[ j * n + n ] = H[ j * n + n ] / t;\n                }\n              }\n            }\n          }\n\n          // Complex vector\n\n        }\n        else if ( q < 0 ) {\n          l = n - 1;\n\n          // Last vector component imaginary so matrix is triangular\n\n          if ( Math.abs( H[ n * n + n - 1 ] ) > Math.abs( H[ (n - 1) * n + n ] ) ) {\n            H[ (n - 1) * n + (n - 1) ] = q / H[ n * n + n - 1 ];\n            H[ (n - 1) * n + n ] = -(H[ n * n + n ] - p) / H[ n * n + n - 1 ];\n          }\n          else {\n            this.cdiv( 0.0, -H[ (n - 1) * n + n ], H[ (n - 1) * n + (n - 1) ] - p, q );\n            H[ (n - 1) * n + (n - 1) ] = this.cdivr;\n            H[ (n - 1) * n + n ] = this.cdivi;\n          }\n          H[ n * n + n - 1 ] = 0.0;\n          H[ n * n + n ] = 1.0;\n          for ( i = n - 2; i >= 0; i-- ) {\n            var ra;\n            var sa;\n            var vr;\n            var vi;\n            ra = 0.0;\n            sa = 0.0;\n            for ( j = l; j <= n; j++ ) {\n              ra = ra + H[ i * this.n + j ] * H[ j * n + n - 1 ];\n              sa = sa + H[ i * this.n + j ] * H[ j * n + n ];\n            }\n            w = H[ i * n + i ] - p;\n\n            if ( e[ i ] < 0.0 ) {\n              z = w;\n              r = ra;\n              s = sa;\n            }\n            else {\n              l = i;\n              if ( e[ i ] === 0 ) {\n                this.cdiv( -ra, -sa, w, q );\n                H[ i * n + n - 1 ] = this.cdivr;\n                H[ i * n + n ] = this.cdivi;\n              }\n              else {\n\n                // Solve complex equations\n\n                x = H[ i * n + i + 1 ];\n                y = H[ (i + 1) * n + i ];\n                vr = (d[ i ] - p) * (d[ i ] - p) + e[ i ] * e[ i ] - q * q;\n                vi = (d[ i ] - p) * 2.0 * q;\n                if ( vr === 0.0 && vi === 0.0 ) {\n                  vr = eps * norm * (Math.abs( w ) + Math.abs( q ) +\n                                     Math.abs( x ) + Math.abs( y ) + Math.abs( z ));\n                }\n                this.cdiv( x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi );\n                H[ i * n + n - 1 ] = this.cdivr;\n                H[ i * n + n ] = this.cdivi;\n                if ( Math.abs( x ) > (Math.abs( z ) + Math.abs( q )) ) {\n                  H[ (i + 1) * n + n - 1 ] = (-ra - w * H[ i * n + n - 1 ] + q * H[ i * n + n ]) / x;\n                  H[ (i + 1) * n + n ] = (-sa - w * H[ i * n + n ] - q * H[ i * n + n - 1 ]) / x;\n                }\n                else {\n                  this.cdiv( -r - y * H[ i * n + n - 1 ], -s - y * H[ i * n + n ], z, q );\n                  H[ (i + 1) * n + n - 1 ] = this.cdivr;\n                  H[ (i + 1) * n + n ] = this.cdivi;\n                }\n              }\n\n              // Overflow control\n              t = Math.max( Math.abs( H[ i * n + n - 1 ] ), Math.abs( H[ i * n + n ] ) );\n              if ( (eps * t) * t > 1 ) {\n                for ( j = i; j <= n; j++ ) {\n                  H[ j * n + n - 1 ] = H[ j * n + n - 1 ] / t;\n                  H[ j * n + n ] = H[ j * n + n ] / t;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      // Vectors of isolated roots\n      for ( i = 0; i < nn; i++ ) {\n        if ( i < low || i > high ) {\n          for ( j = i; j < nn; j++ ) {\n            V[ i * this.n + j ] = H[ i * this.n + j ];\n          }\n        }\n      }\n\n      // Back transformation to get eigenvectors of original matrix\n      for ( j = nn - 1; j >= low; j-- ) {\n        for ( i = low; i <= high; i++ ) {\n          z = 0.0;\n          for ( k = low; k <= Math.min( j, high ); k++ ) {\n            z = z + V[ i * n + k ] * H[ k * n + j ];\n          }\n          V[ i * this.n + j ] = z;\n        }\n      }\n    }\n  };\n\n  return EigenvalueDecomposition;\n} );\n\n","// Copyright 2013-2014, University of Colorado Boulder\n\n/**\n * Function for doing a linear mapping between two domains ('a' and 'b').\n * <p>\n * Example usage:\n * <code>\n * var f = new dot.LinearFunction( 0, 100, 0, 200 );\n * f( 50 ); // 100\n * f.inverse( 100 ); // 50\n * </code>\n *\n * @author Chris Malley (PixelZoom, Inc.)\n */\ndefine( 'DOT/LinearFunction',['require','DOT/dot','DOT/Util'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n\n  // modules\n  require( 'DOT/Util' );\n\n  /**\n   * @param {Number} a1\n   * @param {Number} a2\n   * @param {Number} b1\n   * @param {Number} b2\n   * @param {Boolean} clamp clamp the result to the provided ranges, false by default\n   * @constructor\n   */\n  function LinearFunction( a1, a2, b1, b2, clamp ) {\n\n    clamp = _.isUndefined( clamp ) ? false : clamp;\n\n    /*\n     * Linearly interpolate two points and evaluate the line equation for a third point.\n     * f( a1 ) = b1, f( a2 ) = b2, f( a3 ) = <linear mapped value>\n     * Optionally clamp the result to the range [b1,b2].\n     */\n    var map = function( a1, a2, b1, b2, a3, clamp ) {\n      var b3 = dot.Util.linear( a1, a2, b1, b2, a3 );\n      if ( clamp ) {\n        var max = Math.max( b1, b2 );\n        var min = Math.min( b1, b2 );\n        b3 = dot.Util.clamp( b3, min, max );\n      }\n      return b3;\n    };\n\n    // Maps from a to b.\n    var evaluate = function( a3 ) {\n      return map( a1, a2, b1, b2, a3, clamp );\n    };\n\n    // Maps from b to a.\n    evaluate.inverse = function( b3 ) {\n      return map( b1, b2, a1, a2, b3, clamp );\n    };\n\n    return evaluate; // return the evaluation function, so we use sites look like: f(a) f.inverse(b)\n  }\n\n  dot.register( 'LinearFunction', LinearFunction );\n\n  return LinearFunction;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * LU decomposition, based on Jama (http://math.nist.gov/javanumerics/jama/)\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/LUDecomposition',['require','DOT/dot'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n\n  var Float32Array = window.Float32Array || Array;\n\n  // require( 'DOT/Matrix' ); // commented out so Require.js doesn't complain about the circular dependency\n\n  function LUDecomposition( matrix ) {\n    var i;\n    var j;\n    var k;\n\n    this.matrix = matrix;\n\n    // TODO: size!\n    this.LU = matrix.getArrayCopy();\n    var LU = this.LU;\n    this.m = matrix.getRowDimension();\n    var m = this.m;\n    this.n = matrix.getColumnDimension();\n    var n = this.n;\n    this.piv = new Uint32Array( m );\n    for ( i = 0; i < m; i++ ) {\n      this.piv[ i ] = i;\n    }\n    this.pivsign = 1;\n    var LUcolj = new Float32Array( m );\n\n    // Outer loop.\n\n    for ( j = 0; j < n; j++ ) {\n\n      // Make a copy of the j-th column to localize references.\n      for ( i = 0; i < m; i++ ) {\n        LUcolj[ i ] = LU[ matrix.index( i, j ) ];\n      }\n\n      // Apply previous transformations.\n\n      for ( i = 0; i < m; i++ ) {\n        // Most of the time is spent in the following dot product.\n        var kmax = Math.min( i, j );\n        var s = 0.0;\n        for ( k = 0; k < kmax; k++ ) {\n          var ik = matrix.index( i, k );\n          s += LU[ ik ] * LUcolj[ k ];\n        }\n\n        LUcolj[ i ] -= s;\n        LU[ matrix.index( i, j ) ] = LUcolj[ i ];\n      }\n\n      // Find pivot and exchange if necessary.\n\n      var p = j;\n      for ( i = j + 1; i < m; i++ ) {\n        if ( Math.abs( LUcolj[ i ] ) > Math.abs( LUcolj[ p ] ) ) {\n          p = i;\n        }\n      }\n      if ( p !== j ) {\n        for ( k = 0; k < n; k++ ) {\n          var pk = matrix.index( p, k );\n          var jk = matrix.index( j, k );\n          var t = LU[ pk ];\n          LU[ pk ] = LU[ jk ];\n          LU[ jk ] = t;\n        }\n        k = this.piv[ p ];\n        this.piv[ p ] = this.piv[ j ];\n        this.piv[ j ] = k;\n        this.pivsign = -this.pivsign;\n      }\n\n      // Compute multipliers.\n\n      if ( j < m && LU[ this.matrix.index( j, j ) ] !== 0.0 ) {\n        for ( i = j + 1; i < m; i++ ) {\n          LU[ matrix.index( i, j ) ] /= LU[ matrix.index( j, j ) ];\n        }\n      }\n    }\n  }\n\n  dot.register( 'LUDecomposition', LUDecomposition );\n\n  LUDecomposition.prototype = {\n    constructor: LUDecomposition,\n\n    isNonsingular: function() {\n      for ( var j = 0; j < this.n; j++ ) {\n        var index = this.matrix.index( j, j );\n        if ( this.LU[ index ] === 0 ) {\n          return false;\n        }\n      }\n      return true;\n    },\n\n    getL: function() {\n      var result = new dot.Matrix( this.m, this.n );\n      for ( var i = 0; i < this.m; i++ ) {\n        for ( var j = 0; j < this.n; j++ ) {\n          if ( i > j ) {\n            result.entries[ result.index( i, j ) ] = this.LU[ this.matrix.index( i, j ) ];\n          }\n          else if ( i === j ) {\n            result.entries[ result.index( i, j ) ] = 1.0;\n          }\n          else {\n            result.entries[ result.index( i, j ) ] = 0.0;\n          }\n        }\n      }\n      return result;\n    },\n\n    getU: function() {\n      var result = new dot.Matrix( this.n, this.n );\n      for ( var i = 0; i < this.n; i++ ) {\n        for ( var j = 0; j < this.n; j++ ) {\n          if ( i <= j ) {\n            result.entries[ result.index( i, j ) ] = this.LU[ this.matrix.index( i, j ) ];\n          }\n          else {\n            result.entries[ result.index( i, j ) ] = 0.0;\n          }\n        }\n      }\n      return result;\n    },\n\n    getPivot: function() {\n      var p = new Uint32Array( this.m );\n      for ( var i = 0; i < this.m; i++ ) {\n        p[ i ] = this.piv[ i ];\n      }\n      return p;\n    },\n\n    getDoublePivot: function() {\n      var vals = new Float32Array( this.m );\n      for ( var i = 0; i < this.m; i++ ) {\n        vals[ i ] = this.piv[ i ];\n      }\n      return vals;\n    },\n\n    det: function() {\n      if ( this.m !== this.n ) {\n        throw new Error( 'Matrix must be square.' );\n      }\n      var d = this.pivsign;\n      for ( var j = 0; j < this.n; j++ ) {\n        d *= this.LU[ this.matrix.index( j, j ) ];\n      }\n      return d;\n    },\n\n    solve: function( matrix ) {\n      var i;\n      var j;\n      var k;\n      if ( matrix.getRowDimension() !== this.m ) {\n        throw new Error( 'Matrix row dimensions must agree.' );\n      }\n      if ( !this.isNonsingular() ) {\n        throw new Error( 'Matrix is singular.' );\n      }\n\n      // Copy right hand side with pivoting\n      var nx = matrix.getColumnDimension();\n      var Xmat = matrix.getArrayRowMatrix( this.piv, 0, nx - 1 );\n\n      // Solve L*Y = B(piv,:)\n      for ( k = 0; k < this.n; k++ ) {\n        for ( i = k + 1; i < this.n; i++ ) {\n          for ( j = 0; j < nx; j++ ) {\n            Xmat.entries[ Xmat.index( i, j ) ] -= Xmat.entries[ Xmat.index( k, j ) ] * this.LU[ this.matrix.index( i, k ) ];\n          }\n        }\n      }\n\n      // Solve U*X = Y;\n      for ( k = this.n - 1; k >= 0; k-- ) {\n        for ( j = 0; j < nx; j++ ) {\n          Xmat.entries[ Xmat.index( k, j ) ] /= this.LU[ this.matrix.index( k, k ) ];\n        }\n        for ( i = 0; i < k; i++ ) {\n          for ( j = 0; j < nx; j++ ) {\n            Xmat.entries[ Xmat.index( i, j ) ] -= Xmat.entries[ Xmat.index( k, j ) ] * this.LU[ this.matrix.index( i, k ) ];\n          }\n        }\n      }\n      return Xmat;\n    }\n  };\n\n  return LUDecomposition;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Tests whether a reference is to an array.\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'PHET_CORE/isArray',['require','PHET_CORE/phetCore'],function( require ) {\n  'use strict';\n\n  var phetCore = require( 'PHET_CORE/phetCore' );\n\n  function isArray( array ) {\n    // yes, this is actually how to do this. see http://stackoverflow.com/questions/4775722/javascript-check-if-object-is-array\n    return Object.prototype.toString.call( array ) === '[object Array]';\n  }\n\n  phetCore.register( 'isArray', isArray );\n\n  return isArray;\n} );\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * SVD decomposition, based on Jama (http://math.nist.gov/javanumerics/jama/)\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/SingularValueDecomposition',['require','DOT/dot'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n\n  var Float32Array = window.Float32Array || Array;\n\n  // require( 'DOT/Matrix' ); // commented out so Require.js doesn't complain about the circular dependency\n\n  function SingularValueDecomposition( matrix ) {\n    this.matrix = matrix;\n\n    var Arg = matrix;\n\n    // Derived from LINPACK code.\n    // Initialize.\n    var A = Arg.getArrayCopy();\n    this.m = Arg.getRowDimension();\n    this.n = Arg.getColumnDimension();\n    var m = this.m;\n    var n = this.n;\n\n    var min = Math.min;\n    var max = Math.max;\n    var pow = Math.pow;\n    var abs = Math.abs;\n\n    /* Apparently the failing cases are only a proper subset of (m<n),\n     so let's not throw error.  Correct fix to come later?\n     if (m<n) {\n     throw new IllegalArgumentException(\"Jama SVD only works for m >= n\"); }\n     */\n    var nu = min( m, n );\n    this.s = new Float32Array( min( m + 1, n ) );\n    var s = this.s;\n    this.U = new Float32Array( m * nu );\n    var U = this.U;\n    this.V = new Float32Array( n * n );\n    var V = this.V;\n    var e = new Float32Array( n );\n    var work = new Float32Array( m );\n    var wantu = true;\n    var wantv = true;\n\n    var i;\n    var j;\n    var k;\n    var t;\n    var f;\n\n    var cs;\n    var sn;\n\n    var hypot = dot.Matrix.hypot;\n\n    // Reduce A to bidiagonal form, storing the diagonal elements\n    // in s and the super-diagonal elements in e.\n\n    var nct = min( m - 1, n );\n    var nrt = max( 0, min( n - 2, m ) );\n    for ( k = 0; k < max( nct, nrt ); k++ ) {\n      if ( k < nct ) {\n\n        // Compute the transformation for the k-th column and\n        // place the k-th diagonal in s[k].\n        // Compute 2-norm of k-th column without under/overflow.\n        s[ k ] = 0;\n        for ( i = k; i < m; i++ ) {\n          s[ k ] = hypot( s[ k ], A[ i * n + k ] );\n        }\n        if ( s[ k ] !== 0.0 ) {\n          if ( A[ k * n + k ] < 0.0 ) {\n            s[ k ] = -s[ k ];\n          }\n          for ( i = k; i < m; i++ ) {\n            A[ i * n + k ] /= s[ k ];\n          }\n          A[ k * n + k ] += 1.0;\n        }\n        s[ k ] = -s[ k ];\n      }\n      for ( j = k + 1; j < n; j++ ) {\n        if ( (k < nct) && (s[ k ] !== 0.0) ) {\n\n          // Apply the transformation.\n\n          t = 0;\n          for ( i = k; i < m; i++ ) {\n            t += A[ i * n + k ] * A[ i * n + j ];\n          }\n          t = -t / A[ k * n + k ];\n          for ( i = k; i < m; i++ ) {\n            A[ i * n + j ] += t * A[ i * n + k ];\n          }\n        }\n\n        // Place the k-th row of A into e for the\n        // subsequent calculation of the row transformation.\n\n        e[ j ] = A[ k * n + j ];\n      }\n      if ( wantu && (k < nct) ) {\n\n        // Place the transformation in U for subsequent back\n        // multiplication.\n\n        for ( i = k; i < m; i++ ) {\n          U[ i * nu + k ] = A[ i * n + k ];\n        }\n      }\n      if ( k < nrt ) {\n\n        // Compute the k-th row transformation and place the\n        // k-th super-diagonal in e[k].\n        // Compute 2-norm without under/overflow.\n        e[ k ] = 0;\n        for ( i = k + 1; i < n; i++ ) {\n          e[ k ] = hypot( e[ k ], e[ i ] );\n        }\n        if ( e[ k ] !== 0.0 ) {\n          if ( e[ k + 1 ] < 0.0 ) {\n            e[ k ] = -e[ k ];\n          }\n          for ( i = k + 1; i < n; i++ ) {\n            e[ i ] /= e[ k ];\n          }\n          e[ k + 1 ] += 1.0;\n        }\n        e[ k ] = -e[ k ];\n        if ( (k + 1 < m) && (e[ k ] !== 0.0) ) {\n\n          // Apply the transformation.\n\n          for ( i = k + 1; i < m; i++ ) {\n            work[ i ] = 0.0;\n          }\n          for ( j = k + 1; j < n; j++ ) {\n            for ( i = k + 1; i < m; i++ ) {\n              work[ i ] += e[ j ] * A[ i * n + j ];\n            }\n          }\n          for ( j = k + 1; j < n; j++ ) {\n            t = -e[ j ] / e[ k + 1 ];\n            for ( i = k + 1; i < m; i++ ) {\n              A[ i * n + j ] += t * work[ i ];\n            }\n          }\n        }\n        if ( wantv ) {\n\n          // Place the transformation in V for subsequent\n          // back multiplication.\n\n          for ( i = k + 1; i < n; i++ ) {\n            V[ i * n + k ] = e[ i ];\n          }\n        }\n      }\n    }\n\n    // Set up the final bidiagonal matrix or order p.\n\n    var p = min( n, m + 1 );\n    if ( nct < n ) {\n      s[ nct ] = A[ nct * n + nct ];\n    }\n    if ( m < p ) {\n      s[ p - 1 ] = 0.0;\n    }\n    if ( nrt + 1 < p ) {\n      e[ nrt ] = A[ nrt * n + p - 1 ];\n    }\n    e[ p - 1 ] = 0.0;\n\n    // If required, generate U.\n\n    if ( wantu ) {\n      for ( j = nct; j < nu; j++ ) {\n        for ( i = 0; i < m; i++ ) {\n          U[ i * nu + j ] = 0.0;\n        }\n        U[ j * nu + j ] = 1.0;\n      }\n      for ( k = nct - 1; k >= 0; k-- ) {\n        if ( s[ k ] !== 0.0 ) {\n          for ( j = k + 1; j < nu; j++ ) {\n            t = 0;\n            for ( i = k; i < m; i++ ) {\n              t += U[ i * nu + k ] * U[ i * nu + j ];\n            }\n            t = -t / U[ k * nu + k ];\n            for ( i = k; i < m; i++ ) {\n              U[ i * nu + j ] += t * U[ i * nu + k ];\n            }\n          }\n          for ( i = k; i < m; i++ ) {\n            U[ i * nu + k ] = -U[ i * nu + k ];\n          }\n          U[ k * nu + k ] = 1.0 + U[ k * nu + k ];\n          for ( i = 0; i < k - 1; i++ ) {\n            U[ i * nu + k ] = 0.0;\n          }\n        }\n        else {\n          for ( i = 0; i < m; i++ ) {\n            U[ i * nu + k ] = 0.0;\n          }\n          U[ k * nu + k ] = 1.0;\n        }\n      }\n    }\n\n    // If required, generate V.\n\n    if ( wantv ) {\n      for ( k = n - 1; k >= 0; k-- ) {\n        if ( (k < nrt) && (e[ k ] !== 0.0) ) {\n          for ( j = k + 1; j < nu; j++ ) {\n            t = 0;\n            for ( i = k + 1; i < n; i++ ) {\n              t += V[ i * n + k ] * V[ i * n + j ];\n            }\n            t = -t / V[ (k + 1) * n + k ];\n            for ( i = k + 1; i < n; i++ ) {\n              V[ i * n + j ] += t * V[ i * n + k ];\n            }\n          }\n        }\n        for ( i = 0; i < n; i++ ) {\n          V[ i * n + k ] = 0.0;\n        }\n        V[ k * n + k ] = 1.0;\n      }\n    }\n\n    // Main iteration loop for the singular values.\n\n    var pp = p - 1;\n    var iter = 0;\n    var eps = pow( 2.0, -52.0 );\n    var tiny = pow( 2.0, -966.0 );\n    while ( p > 0 ) {\n      var kase;\n\n      // Here is where a test for too many iterations would go.\n      if ( iter > 500 ) {\n        break;\n      }\n\n      // This section of the program inspects for\n      // negligible elements in the s and e arrays.  On\n      // completion the variables kase and k are set as follows.\n\n      // kase = 1   if s(p) and e[k-1] are negligible and k<p\n      // kase = 2   if s(k) is negligible and k<p\n      // kase = 3   if e[k-1] is negligible, k<p, and\n      //        s(k), ..., s(p) are not negligible (qr step).\n      // kase = 4   if e(p-1) is negligible (convergence).\n\n      for ( k = p - 2; k >= -1; k-- ) {\n        if ( k === -1 ) {\n          break;\n        }\n        if ( abs( e[ k ] ) <=\n             tiny + eps * (abs( s[ k ] ) + abs( s[ k + 1 ] )) ) {\n          e[ k ] = 0.0;\n          break;\n        }\n      }\n      if ( k === p - 2 ) {\n        kase = 4;\n      }\n      else {\n        var ks;\n        for ( ks = p - 1; ks >= k; ks-- ) {\n          if ( ks === k ) {\n            break;\n          }\n          t = (ks !== p ? abs( e[ ks ] ) : 0) +\n              (ks !== k + 1 ? abs( e[ ks - 1 ] ) : 0);\n          if ( abs( s[ ks ] ) <= tiny + eps * t ) {\n            s[ ks ] = 0.0;\n            break;\n          }\n        }\n        if ( ks === k ) {\n          kase = 3;\n        }\n        else if ( ks === p - 1 ) {\n          kase = 1;\n        }\n        else {\n          kase = 2;\n          k = ks;\n        }\n      }\n      k++;\n\n      // Perform the task indicated by kase.\n\n      switch( kase ) {\n\n        // Deflate negligible s(p).\n\n        case 1:\n        {\n          f = e[ p - 2 ];\n          e[ p - 2 ] = 0.0;\n          for ( j = p - 2; j >= k; j-- ) {\n            t = hypot( s[ j ], f );\n            cs = s[ j ] / t;\n            sn = f / t;\n            s[ j ] = t;\n            if ( j !== k ) {\n              f = -sn * e[ j - 1 ];\n              e[ j - 1 ] = cs * e[ j - 1 ];\n            }\n            if ( wantv ) {\n              for ( i = 0; i < n; i++ ) {\n                t = cs * V[ i * n + j ] + sn * V[ i * n + p - 1 ];\n                V[ i * n + p - 1 ] = -sn * V[ i * n + j ] + cs * V[ i * n + p - 1 ];\n                V[ i * n + j ] = t;\n              }\n            }\n          }\n        }\n          break;\n\n        // Split at negligible s(k).\n\n        case 2:\n        {\n          f = e[ k - 1 ];\n          e[ k - 1 ] = 0.0;\n          for ( j = k; j < p; j++ ) {\n            t = hypot( s[ j ], f );\n            cs = s[ j ] / t;\n            sn = f / t;\n            s[ j ] = t;\n            f = -sn * e[ j ];\n            e[ j ] = cs * e[ j ];\n            if ( wantu ) {\n              for ( i = 0; i < m; i++ ) {\n                t = cs * U[ i * nu + j ] + sn * U[ i * nu + k - 1 ];\n                U[ i * nu + k - 1 ] = -sn * U[ i * nu + j ] + cs * U[ i * nu + k - 1 ];\n                U[ i * nu + j ] = t;\n              }\n            }\n          }\n        }\n          break;\n\n        // Perform one qr step.\n\n        case 3:\n        {\n\n          // Calculate the shift.\n\n          var scale = max( max( max( max( abs( s[ p - 1 ] ), abs( s[ p - 2 ] ) ), abs( e[ p - 2 ] ) ), abs( s[ k ] ) ), abs( e[ k ] ) );\n          var sp = s[ p - 1 ] / scale;\n          var spm1 = s[ p - 2 ] / scale;\n          var epm1 = e[ p - 2 ] / scale;\n          var sk = s[ k ] / scale;\n          var ek = e[ k ] / scale;\n          var b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2.0;\n          var c = (sp * epm1) * (sp * epm1);\n          var shift = 0.0;\n          if ( (b !== 0.0) || (c !== 0.0) ) {\n            shift = Math.sqrt( b * b + c );\n            if ( b < 0.0 ) {\n              shift = -shift;\n            }\n            shift = c / (b + shift);\n          }\n          f = (sk + sp) * (sk - sp) + shift;\n          var g = sk * ek;\n\n          // Chase zeros.\n\n          for ( j = k; j < p - 1; j++ ) {\n            t = hypot( f, g );\n            cs = f / t;\n            sn = g / t;\n            if ( j !== k ) {\n              e[ j - 1 ] = t;\n            }\n            f = cs * s[ j ] + sn * e[ j ];\n            e[ j ] = cs * e[ j ] - sn * s[ j ];\n            g = sn * s[ j + 1 ];\n            s[ j + 1 ] = cs * s[ j + 1 ];\n            if ( wantv ) {\n              for ( i = 0; i < n; i++ ) {\n                t = cs * V[ i * n + j ] + sn * V[ i * n + j + 1 ];\n                V[ i * n + j + 1 ] = -sn * V[ i * n + j ] + cs * V[ i * n + j + 1 ];\n                V[ i * n + j ] = t;\n              }\n            }\n            t = hypot( f, g );\n            cs = f / t;\n            sn = g / t;\n            s[ j ] = t;\n            f = cs * e[ j ] + sn * s[ j + 1 ];\n            s[ j + 1 ] = -sn * e[ j ] + cs * s[ j + 1 ];\n            g = sn * e[ j + 1 ];\n            e[ j + 1 ] = cs * e[ j + 1 ];\n            if ( wantu && (j < m - 1) ) {\n              for ( i = 0; i < m; i++ ) {\n                t = cs * U[ i * nu + j ] + sn * U[ i * nu + j + 1 ];\n                U[ i * nu + j + 1 ] = -sn * U[ i * nu + j ] + cs * U[ i * nu + j + 1 ];\n                U[ i * nu + j ] = t;\n              }\n            }\n          }\n          e[ p - 2 ] = f;\n          iter = iter + 1;\n        }\n          break;\n\n        // Convergence.\n\n        case 4:\n        {\n\n          // Make the singular values positive.\n\n          if ( s[ k ] <= 0.0 ) {\n            s[ k ] = (s[ k ] < 0.0 ? -s[ k ] : 0.0);\n            if ( wantv ) {\n              for ( i = 0; i <= pp; i++ ) {\n                V[ i * n + k ] = -V[ i * n + k ];\n              }\n            }\n          }\n\n          // Order the singular values.\n\n          while ( k < pp ) {\n            if ( s[ k ] >= s[ k + 1 ] ) {\n              break;\n            }\n            t = s[ k ];\n            s[ k ] = s[ k + 1 ];\n            s[ k + 1 ] = t;\n            if ( wantv && (k < n - 1) ) {\n              for ( i = 0; i < n; i++ ) {\n                t = V[ i * n + k + 1 ];\n                V[ i * n + k + 1 ] = V[ i * n + k ];\n                V[ i * n + k ] = t;\n              }\n            }\n            if ( wantu && (k < m - 1) ) {\n              for ( i = 0; i < m; i++ ) {\n                t = U[ i * nu + k + 1 ];\n                U[ i * nu + k + 1 ] = U[ i * nu + k ];\n                U[ i * nu + k ] = t;\n              }\n            }\n            k++;\n          }\n          iter = 0;\n          p--;\n        }\n          break;\n      }\n    }\n  }\n\n  dot.register( 'SingularValueDecomposition', SingularValueDecomposition );\n\n  SingularValueDecomposition.prototype = {\n    constructor: SingularValueDecomposition,\n\n    getU: function() {\n      return new dot.Matrix( this.m, Math.min( this.m + 1, this.n ), this.U, true ); // the \"fast\" flag added, since U is Float32Array\n    },\n\n    getV: function() {\n      return new dot.Matrix( this.n, this.n, this.V, true );\n    },\n\n    getSingularValues: function() {\n      return this.s;\n    },\n\n    getS: function() {\n      var result = new dot.Matrix( this.n, this.n );\n      for ( var i = 0; i < this.n; i++ ) {\n        for ( var j = 0; j < this.n; j++ ) {\n          result.entries[ result.index( i, j ) ] = 0.0;\n        }\n        result.entries[ result.index( i, i ) ] = this.s[ i ];\n      }\n      return result;\n    },\n\n    norm2: function() {\n      return this.s[ 0 ];\n    },\n\n    cond: function() {\n      return this.s[ 0 ] / this.s[ Math.min( this.m, this.n ) - 1 ];\n    },\n\n    rank: function() {\n      // changed to 23 from 52 (bits of mantissa), since we are using floats here!\n      var eps = Math.pow( 2.0, -23.0 );\n      var tol = Math.max( this.m, this.n ) * this.s[ 0 ] * eps;\n      var r = 0;\n      for ( var i = 0; i < this.s.length; i++ ) {\n        if ( this.s[ i ] > tol ) {\n          r++;\n        }\n      }\n      return r;\n    }\n  };\n\n  return SingularValueDecomposition;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * QR decomposition, based on Jama (http://math.nist.gov/javanumerics/jama/)\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/QRDecomposition',['require','DOT/dot'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n\n  var Float32Array = window.Float32Array || Array;\n\n  // require( 'DOT/Matrix' ); // commented out so Require.js doesn't complain about the circular dependency\n\n  dot.QRDecomposition = function QRDecomposition( matrix ) {\n    this.matrix = matrix;\n\n    // TODO: size!\n    this.QR = matrix.getArrayCopy();\n    var QR = this.QR;\n    this.m = matrix.getRowDimension();\n    var m = this.m;\n    this.n = matrix.getColumnDimension();\n    var n = this.n;\n\n    this.Rdiag = new Float32Array( n );\n\n    var i;\n    var j;\n    var k;\n\n    // Main loop.\n    for ( k = 0; k < n; k++ ) {\n      // Compute 2-norm of k-th column without under/overflow.\n      var nrm = 0;\n      for ( i = k; i < m; i++ ) {\n        nrm = dot.Matrix.hypot( nrm, QR[ this.matrix.index( i, k ) ] );\n      }\n\n      if ( nrm !== 0.0 ) {\n        // Form k-th Householder vector.\n        if ( QR[ this.matrix.index( k, k ) ] < 0 ) {\n          nrm = -nrm;\n        }\n        for ( i = k; i < m; i++ ) {\n          QR[ this.matrix.index( i, k ) ] /= nrm;\n        }\n        QR[ this.matrix.index( k, k ) ] += 1.0;\n\n        // Apply transformation to remaining columns.\n        for ( j = k + 1; j < n; j++ ) {\n          var s = 0.0;\n          for ( i = k; i < m; i++ ) {\n            s += QR[ this.matrix.index( i, k ) ] * QR[ this.matrix.index( i, j ) ];\n          }\n          s = -s / QR[ this.matrix.index( k, k ) ];\n          for ( i = k; i < m; i++ ) {\n            QR[ this.matrix.index( i, j ) ] += s * QR[ this.matrix.index( i, k ) ];\n          }\n        }\n      }\n      this.Rdiag[ k ] = -nrm;\n    }\n  };\n  var QRDecomposition = dot.QRDecomposition;\n\n  QRDecomposition.prototype = {\n    constructor: QRDecomposition,\n\n    isFullRank: function() {\n      for ( var j = 0; j < this.n; j++ ) {\n        if ( this.Rdiag[ j ] === 0 ) {\n          return false;\n        }\n      }\n      return true;\n    },\n\n    getH: function() {\n      var result = new dot.Matrix( this.m, this.n );\n      for ( var i = 0; i < this.m; i++ ) {\n        for ( var j = 0; j < this.n; j++ ) {\n          if ( i >= j ) {\n            result.entries[ result.index( i, j ) ] = this.QR[ this.matrix.index( i, j ) ];\n          }\n          else {\n            result.entries[ result.index( i, j ) ] = 0.0;\n          }\n        }\n      }\n      return result;\n    },\n\n    getR: function() {\n      var result = new dot.Matrix( this.n, this.n );\n      for ( var i = 0; i < this.n; i++ ) {\n        for ( var j = 0; j < this.n; j++ ) {\n          if ( i < j ) {\n            result.entries[ result.index( i, j ) ] = this.QR[ this.matrix.index( i, j ) ];\n          }\n          else if ( i === j ) {\n            result.entries[ result.index( i, j ) ] = this.Rdiag[ i ];\n          }\n          else {\n            result.entries[ result.index( i, j ) ] = 0.0;\n          }\n        }\n      }\n      return result;\n    },\n\n    getQ: function() {\n      var i;\n      var j;\n      var k;\n      var result = new dot.Matrix( this.m, this.n );\n      for ( k = this.n - 1; k >= 0; k-- ) {\n        for ( i = 0; i < this.m; i++ ) {\n          result.entries[ result.index( i, k ) ] = 0.0;\n        }\n        result.entries[ result.index( k, k ) ] = 1.0;\n        for ( j = k; j < this.n; j++ ) {\n          if ( this.QR[ this.matrix.index( k, k ) ] !== 0 ) {\n            var s = 0.0;\n            for ( i = k; i < this.m; i++ ) {\n              s += this.QR[ this.matrix.index( i, k ) ] * result.entries[ result.index( i, j ) ];\n            }\n            s = -s / this.QR[ this.matrix.index( k, k ) ];\n            for ( i = k; i < this.m; i++ ) {\n              result.entries[ result.index( i, j ) ] += s * this.QR[ this.matrix.index( i, k ) ];\n            }\n          }\n        }\n      }\n      return result;\n    },\n\n    solve: function( matrix ) {\n      if ( matrix.getRowDimension() !== this.m ) {\n        throw new Error( 'Matrix row dimensions must agree.' );\n      }\n      if ( !this.isFullRank() ) {\n        throw new Error( 'Matrix is rank deficient.' );\n      }\n\n      var i;\n      var j;\n      var k;\n\n      // Copy right hand side\n      var nx = matrix.getColumnDimension();\n      var X = matrix.getArrayCopy();\n\n      // Compute Y = transpose(Q)*matrix\n      for ( k = 0; k < this.n; k++ ) {\n        for ( j = 0; j < nx; j++ ) {\n          var s = 0.0;\n          for ( i = k; i < this.m; i++ ) {\n            s += this.QR[ this.matrix.index( i, k ) ] * X[ matrix.index( i, j ) ];\n          }\n          s = -s / this.QR[ this.matrix.index( k, k ) ];\n          for ( i = k; i < this.m; i++ ) {\n            X[ matrix.index( i, j ) ] += s * this.QR[ this.matrix.index( i, k ) ];\n          }\n        }\n      }\n\n      // Solve R*X = Y;\n      for ( k = this.n - 1; k >= 0; k-- ) {\n        for ( j = 0; j < nx; j++ ) {\n          X[ matrix.index( k, j ) ] /= this.Rdiag[ k ];\n        }\n        for ( i = 0; i < k; i++ ) {\n          for ( j = 0; j < nx; j++ ) {\n            X[ matrix.index( i, j ) ] -= X[ matrix.index( k, j ) ] * this.QR[ this.matrix.index( i, k ) ];\n          }\n        }\n      }\n      return new dot.Matrix( this.n, nx, X, true ).getMatrix( 0, this.n - 1, 0, nx - 1 );\n    }\n  };\n\n  return QRDecomposition;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Arbitrary-dimensional matrix, based on Jama (http://math.nist.gov/javanumerics/jama/)\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/Matrix',['require','DOT/dot','PHET_CORE/isArray','DOT/SingularValueDecomposition','DOT/LUDecomposition','DOT/QRDecomposition','DOT/EigenvalueDecomposition','DOT/Vector2','DOT/Vector3','DOT/Vector4'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n\n  var Float32Array = window.Float32Array || Array;\n\n  var isArray = require( 'PHET_CORE/isArray' );\n\n  require( 'DOT/SingularValueDecomposition' );\n  require( 'DOT/LUDecomposition' );\n  require( 'DOT/QRDecomposition' );\n  require( 'DOT/EigenvalueDecomposition' );\n  require( 'DOT/Vector2' );\n  require( 'DOT/Vector3' );\n  require( 'DOT/Vector4' );\n\n  function Matrix( m, n, filler, fast ) {\n    this.m = m;\n    this.n = n;\n\n    var size = m * n;\n    this.size = size;\n    var i;\n\n    if ( fast ) {\n      this.entries = filler;\n    }\n    else {\n      if ( !filler ) {\n        filler = 0;\n      }\n\n      // entries stored in row-major format\n      this.entries = new Float32Array( size );\n\n      if ( isArray( filler ) ) {\n        assert && assert( filler.length === size );\n\n        for ( i = 0; i < size; i++ ) {\n          this.entries[ i ] = filler[ i ];\n        }\n      }\n      else {\n        for ( i = 0; i < size; i++ ) {\n          this.entries[ i ] = filler;\n        }\n      }\n    }\n  }\n\n  dot.register( 'Matrix', Matrix );\n\n  /** sqrt(a^2 + b^2) without under/overflow. **/\n  Matrix.hypot = function hypot( a, b ) {\n    var r;\n    if ( Math.abs( a ) > Math.abs( b ) ) {\n      r = b / a;\n      r = Math.abs( a ) * Math.sqrt( 1 + r * r );\n    }\n    else if ( b !== 0 ) {\n      r = a / b;\n      r = Math.abs( b ) * Math.sqrt( 1 + r * r );\n    }\n    else {\n      r = 0.0;\n    }\n    return r;\n  };\n\n  Matrix.prototype = {\n    constructor: Matrix,\n\n    copy: function() {\n      var result = new Matrix( this.m, this.n );\n      for ( var i = 0; i < this.size; i++ ) {\n        result.entries[ i ] = this.entries[ i ];\n      }\n      return result;\n    },\n\n    getArray: function() {\n      return this.entries;\n    },\n\n    getArrayCopy: function() {\n      return new Float32Array( this.entries );\n    },\n\n    getRowDimension: function() {\n      return this.m;\n    },\n\n    getColumnDimension: function() {\n      return this.n;\n    },\n\n    // TODO: inline this places if we aren't using an inlining compiler! (check performance)\n    index: function( i, j ) {\n      return i * this.n + j;\n    },\n\n    get: function( i, j ) {\n      return this.entries[ this.index( i, j ) ];\n    },\n\n    set: function( i, j, s ) {\n      this.entries[ this.index( i, j ) ] = s;\n    },\n\n    getMatrix: function( i0, i1, j0, j1 ) {\n      var result = new Matrix( i1 - i0 + 1, j1 - j0 + 1 );\n      for ( var i = i0; i <= i1; i++ ) {\n        for ( var j = j0; j <= j1; j++ ) {\n          result.entries[ result.index( i - i0, j - j0 ) ] = this.entries[ this.index( i, j ) ];\n        }\n      }\n      return result;\n    },\n\n    // getMatrix (int[] r, int j0, int j1)\n    getArrayRowMatrix: function( r, j0, j1 ) {\n      var result = new Matrix( r.length, j1 - j0 + 1 );\n      for ( var i = 0; i < r.length; i++ ) {\n        for ( var j = j0; j <= j1; j++ ) {\n          result.entries[ result.index( i, j - j0 ) ] = this.entries[ this.index( r[ i ], j ) ];\n        }\n      }\n      return result;\n    },\n\n    // allow passing in a pre-constructed matrix\n    transpose: function( result ) {\n      result = result || new Matrix( this.n, this.m );\n      assert && assert( result.m === this.n );\n      assert && assert( result.n === this.m );\n      for ( var i = 0; i < this.m; i++ ) {\n        for ( var j = 0; j < this.n; j++ ) {\n          result.entries[ result.index( j, i ) ] = this.entries[ this.index( i, j ) ];\n        }\n      }\n      return result;\n    },\n\n    norm1: function() {\n      var f = 0;\n      for ( var j = 0; j < this.n; j++ ) {\n        var s = 0;\n        for ( var i = 0; i < this.m; i++ ) {\n          s += Math.abs( this.entries[ this.index( i, j ) ] );\n        }\n        f = Math.max( f, s );\n      }\n      return f;\n    },\n\n    norm2: function() {\n      return (new dot.SingularValueDecomposition( this ).norm2());\n    },\n\n    normInf: function() {\n      var f = 0;\n      for ( var i = 0; i < this.m; i++ ) {\n        var s = 0;\n        for ( var j = 0; j < this.n; j++ ) {\n          s += Math.abs( this.entries[ this.index( i, j ) ] );\n        }\n        f = Math.max( f, s );\n      }\n      return f;\n    },\n\n    normF: function() {\n      var f = 0;\n      for ( var i = 0; i < this.m; i++ ) {\n        for ( var j = 0; j < this.n; j++ ) {\n          f = Matrix.hypot( f, this.entries[ this.index( i, j ) ] );\n        }\n      }\n      return f;\n    },\n\n    uminus: function() {\n      var result = new Matrix( this.m, this.n );\n      for ( var i = 0; i < this.m; i++ ) {\n        for ( var j = 0; j < this.n; j++ ) {\n          result.entries[ result.index( i, j ) ] = -this.entries[ this.index( i, j ) ];\n        }\n      }\n      return result;\n    },\n\n    plus: function( matrix ) {\n      this.checkMatrixDimensions( matrix );\n      var result = new Matrix( this.m, this.n );\n      for ( var i = 0; i < this.m; i++ ) {\n        for ( var j = 0; j < this.n; j++ ) {\n          var index = result.index( i, j );\n          result.entries[ index ] = this.entries[ index ] + matrix.entries[ index ];\n        }\n      }\n      return result;\n    },\n\n    plusEquals: function( matrix ) {\n      this.checkMatrixDimensions( matrix );\n      var result = new Matrix( this.m, this.n );\n      for ( var i = 0; i < this.m; i++ ) {\n        for ( var j = 0; j < this.n; j++ ) {\n          var index = result.index( i, j );\n          this.entries[ index ] = this.entries[ index ] + matrix.entries[ index ];\n        }\n      }\n      return this;\n    },\n\n    minus: function( matrix ) {\n      this.checkMatrixDimensions( matrix );\n      var result = new Matrix( this.m, this.n );\n      for ( var i = 0; i < this.m; i++ ) {\n        for ( var j = 0; j < this.n; j++ ) {\n          var index = this.index( i, j );\n          result.entries[ index ] = this.entries[ index ] - matrix.entries[ index ];\n        }\n      }\n      return result;\n    },\n\n    minusEquals: function( matrix ) {\n      this.checkMatrixDimensions( matrix );\n      for ( var i = 0; i < this.m; i++ ) {\n        for ( var j = 0; j < this.n; j++ ) {\n          var index = this.index( i, j );\n          this.entries[ index ] = this.entries[ index ] - matrix.entries[ index ];\n        }\n      }\n      return this;\n    },\n\n    arrayTimes: function( matrix ) {\n      this.checkMatrixDimensions( matrix );\n      var result = new Matrix( this.m, this.n );\n      for ( var i = 0; i < this.m; i++ ) {\n        for ( var j = 0; j < this.n; j++ ) {\n          var index = result.index( i, j );\n          result.entries[ index ] = this.entries[ index ] * matrix.entries[ index ];\n        }\n      }\n      return result;\n    },\n\n    arrayTimesEquals: function( matrix ) {\n      this.checkMatrixDimensions( matrix );\n      for ( var i = 0; i < this.m; i++ ) {\n        for ( var j = 0; j < this.n; j++ ) {\n          var index = this.index( i, j );\n          this.entries[ index ] = this.entries[ index ] * matrix.entries[ index ];\n        }\n      }\n      return this;\n    },\n\n    arrayRightDivide: function( matrix ) {\n      this.checkMatrixDimensions( matrix );\n      var result = new Matrix( this.m, this.n );\n      for ( var i = 0; i < this.m; i++ ) {\n        for ( var j = 0; j < this.n; j++ ) {\n          var index = this.index( i, j );\n          result.entries[ index ] = this.entries[ index ] / matrix.entries[ index ];\n        }\n      }\n      return result;\n    },\n\n    arrayRightDivideEquals: function( matrix ) {\n      this.checkMatrixDimensions( matrix );\n      for ( var i = 0; i < this.m; i++ ) {\n        for ( var j = 0; j < this.n; j++ ) {\n          var index = this.index( i, j );\n          this.entries[ index ] = this.entries[ index ] / matrix.entries[ index ];\n        }\n      }\n      return this;\n    },\n\n    arrayLeftDivide: function( matrix ) {\n      this.checkMatrixDimensions( matrix );\n      var result = new Matrix( this.m, this.n );\n      for ( var i = 0; i < this.m; i++ ) {\n        for ( var j = 0; j < this.n; j++ ) {\n          var index = this.index( i, j );\n          result.entries[ index ] = matrix.entries[ index ] / this.entries[ index ];\n        }\n      }\n      return result;\n    },\n\n    arrayLeftDivideEquals: function( matrix ) {\n      this.checkMatrixDimensions( matrix );\n      for ( var i = 0; i < this.m; i++ ) {\n        for ( var j = 0; j < this.n; j++ ) {\n          var index = this.index( i, j );\n          this.entries[ index ] = matrix.entries[ index ] / this.entries[ index ];\n        }\n      }\n      return this;\n    },\n\n    times: function( matrixOrScalar ) {\n      var result;\n      var i;\n      var j;\n      var k;\n      var s;\n      var matrix;\n      if ( matrixOrScalar.isMatrix ) {\n        matrix = matrixOrScalar;\n        if ( matrix.m !== this.n ) {\n          throw new Error( 'Matrix inner dimensions must agree.' );\n        }\n        result = new Matrix( this.m, matrix.n );\n        var matrixcolj = new Float32Array( this.n );\n        for ( j = 0; j < matrix.n; j++ ) {\n          for ( k = 0; k < this.n; k++ ) {\n            matrixcolj[ k ] = matrix.entries[ matrix.index( k, j ) ];\n          }\n          for ( i = 0; i < this.m; i++ ) {\n            s = 0;\n            for ( k = 0; k < this.n; k++ ) {\n              s += this.entries[ this.index( i, k ) ] * matrixcolj[ k ];\n            }\n            result.entries[ result.index( i, j ) ] = s;\n          }\n        }\n        return result;\n      }\n      else {\n        s = matrixOrScalar;\n        result = new Matrix( this.m, this.n );\n        for ( i = 0; i < this.m; i++ ) {\n          for ( j = 0; j < this.n; j++ ) {\n            result.entries[ result.index( i, j ) ] = s * this.entries[ this.index( i, j ) ];\n          }\n        }\n        return result;\n      }\n    },\n\n    timesEquals: function( s ) {\n      for ( var i = 0; i < this.m; i++ ) {\n        for ( var j = 0; j < this.n; j++ ) {\n          var index = this.index( i, j );\n          this.entries[ index ] = s * this.entries[ index ];\n        }\n      }\n      return this;\n    },\n\n    solve: function( matrix ) {\n      return (this.m === this.n ? (new dot.LUDecomposition( this )).solve( matrix ) :\n              (new dot.QRDecomposition( this )).solve( matrix ));\n    },\n\n    solveTranspose: function( matrix ) {\n      return this.transpose().solve( matrix.transpose() );\n    },\n\n    inverse: function() {\n      return this.solve( Matrix.identity( this.m, this.m ) );\n    },\n\n    det: function() {\n      return new dot.LUDecomposition( this ).det();\n    },\n\n    rank: function() {\n      return new dot.SingularValueDecomposition( this ).rank();\n    },\n\n    cond: function() {\n      return new dot.SingularValueDecomposition( this ).cond();\n    },\n\n    trace: function() {\n      var t = 0;\n      for ( var i = 0; i < Math.min( this.m, this.n ); i++ ) {\n        t += this.entries[ this.index( i, i ) ];\n      }\n      return t;\n    },\n\n    checkMatrixDimensions: function( matrix ) {\n      if ( matrix.m !== this.m || matrix.n !== this.n ) {\n        throw new Error( 'Matrix dimensions must agree.' );\n      }\n    },\n\n    toString: function() {\n      var result = '';\n      result += 'dim: ' + this.getRowDimension() + 'x' + this.getColumnDimension() + '\\n';\n      for ( var row = 0; row < this.getRowDimension(); row++ ) {\n        for ( var col = 0; col < this.getColumnDimension(); col++ ) {\n          result += this.get( row, col ) + ' ';\n        }\n        result += '\\n';\n      }\n      return result;\n    },\n\n    // returns a vector that is contained in the specified column\n    extractVector2: function( column ) {\n      assert && assert( this.m === 2 ); // rows should match vector dimension\n      return new dot.Vector2( this.get( 0, column ), this.get( 1, column ) );\n    },\n\n    // returns a vector that is contained in the specified column\n    extractVector3: function( column ) {\n      assert && assert( this.m === 3 ); // rows should match vector dimension\n      return new dot.Vector3( this.get( 0, column ), this.get( 1, column ), this.get( 2, column ) );\n    },\n\n    // returns a vector that is contained in the specified column\n    extractVector4: function( column ) {\n      assert && assert( this.m === 4 ); // rows should match vector dimension\n      return new dot.Vector4( this.get( 0, column ), this.get( 1, column ), this.get( 2, column ), this.get( 3, column ) );\n    },\n\n    // Sets the current matrix to the values of the listed column vectors (Vector3).\n    setVectors3: function( vectors ) {\n      var m = 3;\n      var n = vectors.length;\n\n      assert && assert( this.m === m );\n      assert && assert( this.n === n );\n\n      for ( var i = 0; i < n; i++ ) {\n        var vector = vectors[ i ];\n        this.entries[ i ] = vector.x;\n        this.entries[ i + n ] = vector.y;\n        this.entries[ i + 2 * n ] = vector.z;\n      }\n\n      return this;\n    },\n\n    isMatrix: true\n  };\n\n  Matrix.identity = function( m, n ) {\n    var result = new Matrix( m, n );\n    for ( var i = 0; i < m; i++ ) {\n      for ( var j = 0; j < n; j++ ) {\n        result.entries[ result.index( i, j ) ] = (i === j ? 1.0 : 0.0);\n      }\n    }\n    return result;\n  };\n\n  Matrix.rowVector2 = function( vector ) {\n    return new Matrix( 1, 2, [ vector.x, vector.y ] );\n  };\n\n  Matrix.rowVector3 = function( vector ) {\n    return new Matrix( 1, 3, [ vector.x, vector.y, vector.z ] );\n  };\n\n  Matrix.rowVector4 = function( vector ) {\n    return new Matrix( 1, 4, [ vector.x, vector.y, vector.z, vector.w ] );\n  };\n\n  Matrix.rowVector = function( vector ) {\n    if ( vector.isVector2 ) {\n      return Matrix.rowVector2( vector );\n    }\n    else if ( vector.isVector3 ) {\n      return Matrix.rowVector3( vector );\n    }\n    else if ( vector.isVector4 ) {\n      return Matrix.rowVector4( vector );\n    }\n    else {\n      throw new Error( 'undetected type of vector: ' + vector.toString() );\n    }\n  };\n\n  Matrix.columnVector2 = function( vector ) {\n    return new Matrix( 2, 1, [ vector.x, vector.y ] );\n  };\n\n  Matrix.columnVector3 = function( vector ) {\n    return new Matrix( 3, 1, [ vector.x, vector.y, vector.z ] );\n  };\n\n  Matrix.columnVector4 = function( vector ) {\n    return new Matrix( 4, 1, [ vector.x, vector.y, vector.z, vector.w ] );\n  };\n\n  Matrix.columnVector = function( vector ) {\n    if ( vector.isVector2 ) {\n      return Matrix.columnVector2( vector );\n    }\n    else if ( vector.isVector3 ) {\n      return Matrix.columnVector3( vector );\n    }\n    else if ( vector.isVector4 ) {\n      return Matrix.columnVector4( vector );\n    }\n    else {\n      throw new Error( 'undetected type of vector: ' + vector.toString() );\n    }\n  };\n\n  /**\n   * Create a Matrix where each column is a vector\n   */\n\n  Matrix.fromVectors2 = function( vectors ) {\n    var dimension = 2;\n    var n = vectors.length;\n    var data = new Float32Array( dimension * n );\n\n    for ( var i = 0; i < n; i++ ) {\n      var vector = vectors[ i ];\n      data[ i ] = vector.x;\n      data[ i + n ] = vector.y;\n    }\n\n    return new Matrix( dimension, n, data, true );\n  };\n\n  Matrix.fromVectors3 = function( vectors ) {\n    var dimension = 3;\n    var n = vectors.length;\n    var data = new Float32Array( dimension * n );\n\n    for ( var i = 0; i < n; i++ ) {\n      var vector = vectors[ i ];\n      data[ i ] = vector.x;\n      data[ i + n ] = vector.y;\n      data[ i + 2 * n ] = vector.z;\n    }\n\n    return new Matrix( dimension, n, data, true );\n  };\n\n  Matrix.fromVectors4 = function( vectors ) {\n    var dimension = 4;\n    var n = vectors.length;\n    var data = new Float32Array( dimension * n );\n\n    for ( var i = 0; i < n; i++ ) {\n      var vector = vectors[ i ];\n      data[ i ] = vector.x;\n      data[ i + n ] = vector.y;\n      data[ i + 2 * n ] = vector.z;\n      data[ i + 3 * n ] = vector.w;\n    }\n\n    return new Matrix( dimension, n, data, true );\n  };\n\n  return Matrix;\n} );\n\n","// Copyright 2015, University of Colorado Boulder\n\n/**\n * Fast 3x3 matrix computations at the lower level, including an SVD implementation that is fully stable.\n * Overall, it uses a heavily mutable style, passing in the object where the result(s) will be stored.\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/MatrixOps3',['require','DOT/dot'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n\n  /*\n   * Matrices are stored as flat typed arrays with row-major indices. For example, for a 3x3:\n   * [0] [1] [2]\n   * [3] [4] [5]\n   * [6] [7] [8]\n   *\n   * NOTE: We assume the typed arrays are AT LEAST as long as necessary (but could be longer). This allows us to use\n   * an array as big as the largest one we'll need.\n   */\n\n  // constants\n  var SQRT_HALF = Math.sqrt( 0.5 );\n\n  var MatrixOps3 = {\n    // use typed arrays if possible\n    Array: dot.FastArray,\n\n    /*---------------------------------------------------------------------------*\n     * 3x3 matrix math\n     *----------------------------------------------------------------------------*/\n\n    /*\n     * From 0-indexed row and column indices, returns the index into the flat array\n     *\n     * @param {number} row\n     * @param {number} col\n     */\n    index3: function( row, col ) {\n      assert && assert( row >= 0 && row < 3 );\n      assert && assert( col >= 0 && col < 3 );\n      return 3 * row + col;\n    },\n\n    /*\n     * Copies one matrix into another\n     *\n     * @param {FastMath.Array} matrix - [input] 3x3 Matrix\n     * @param {FastMath.Array} result - [output] 3x3 Matrix\n     */\n    set3: function( matrix, result ) {\n      assert && assert( matrix.length >= 9 );\n      assert && assert( result.length >= 9 );\n      result[ 0 ] = matrix[ 0 ];\n      result[ 1 ] = matrix[ 1 ];\n      result[ 2 ] = matrix[ 2 ];\n      result[ 3 ] = matrix[ 3 ];\n      result[ 4 ] = matrix[ 4 ];\n      result[ 5 ] = matrix[ 5 ];\n      result[ 6 ] = matrix[ 6 ];\n      result[ 7 ] = matrix[ 7 ];\n      result[ 8 ] = matrix[ 8 ];\n    },\n\n    /*\n     * Writes the transpose of the input matrix into the result matrix (in-place modification is OK)\n     *\n     * @param {FastMath.Array} matrix - [input] 3x3 Matrix\n     * @param {FastMath.Array} result - [output] 3x3 Matrix\n     */\n    transpose3: function( matrix, result ) {\n      assert && assert( matrix.length >= 9 );\n      assert && assert( result.length >= 9 );\n      var m1 = matrix[ 3 ];\n      var m2 = matrix[ 6 ];\n      var m3 = matrix[ 1 ];\n      var m5 = matrix[ 7 ];\n      var m6 = matrix[ 2 ];\n      var m7 = matrix[ 5 ];\n      result[ 0 ] = matrix[ 0 ];\n      result[ 1 ] = m1;\n      result[ 2 ] = m2;\n      result[ 3 ] = m3;\n      result[ 4 ] = matrix[ 4 ];\n      result[ 5 ] = m5;\n      result[ 6 ] = m6;\n      result[ 7 ] = m7;\n      result[ 8 ] = matrix[ 8 ];\n    },\n\n    /*\n     * The determinant of a 3x3 matrix\n     *\n     * @param {FastMath.Array} matrix - [input] 3x3 Matrix\n     * @returns {number} - The determinant. 0 indicates a singular (non-invertible) matrix.\n     */\n    det3: function( matrix ) {\n      assert && assert( matrix.length >= 9 );\n      return matrix[ 0 ] * matrix[ 4 ] * matrix[ 8 ] + matrix[ 1 ] * matrix[ 5 ] * matrix[ 6 ] +\n             matrix[ 2 ] * matrix[ 3 ] * matrix[ 7 ] - matrix[ 2 ] * matrix[ 4 ] * matrix[ 6 ] -\n             matrix[ 1 ] * matrix[ 3 ] * matrix[ 8 ] - matrix[ 0 ] * matrix[ 5 ] * matrix[ 7 ];\n    },\n\n    /*\n     * Writes the matrix multiplication ( left * right ) into result. (in-place modification is OK)\n     *\n     * @param {FastMath.Array} left - [input] 3x3 Matrix\n     * @param {FastMath.Array} right - [input] 3x3 Matrix\n     * @param {FastMath.Array} result - [output] 3x3 Matrix\n     */\n    mult3: function( left, right, result ) {\n      assert && assert( left.length >= 9 );\n      assert && assert( right.length >= 9 );\n      assert && assert( result.length >= 9 );\n      var m0 = left[ 0 ] * right[ 0 ] + left[ 1 ] * right[ 3 ] + left[ 2 ] * right[ 6 ];\n      var m1 = left[ 0 ] * right[ 1 ] + left[ 1 ] * right[ 4 ] + left[ 2 ] * right[ 7 ];\n      var m2 = left[ 0 ] * right[ 2 ] + left[ 1 ] * right[ 5 ] + left[ 2 ] * right[ 8 ];\n      var m3 = left[ 3 ] * right[ 0 ] + left[ 4 ] * right[ 3 ] + left[ 5 ] * right[ 6 ];\n      var m4 = left[ 3 ] * right[ 1 ] + left[ 4 ] * right[ 4 ] + left[ 5 ] * right[ 7 ];\n      var m5 = left[ 3 ] * right[ 2 ] + left[ 4 ] * right[ 5 ] + left[ 5 ] * right[ 8 ];\n      var m6 = left[ 6 ] * right[ 0 ] + left[ 7 ] * right[ 3 ] + left[ 8 ] * right[ 6 ];\n      var m7 = left[ 6 ] * right[ 1 ] + left[ 7 ] * right[ 4 ] + left[ 8 ] * right[ 7 ];\n      var m8 = left[ 6 ] * right[ 2 ] + left[ 7 ] * right[ 5 ] + left[ 8 ] * right[ 8 ];\n      result[ 0 ] = m0;\n      result[ 1 ] = m1;\n      result[ 2 ] = m2;\n      result[ 3 ] = m3;\n      result[ 4 ] = m4;\n      result[ 5 ] = m5;\n      result[ 6 ] = m6;\n      result[ 7 ] = m7;\n      result[ 8 ] = m8;\n    },\n\n    /*\n     * Writes the matrix multiplication ( transpose( left ) * right ) into result. (in-place modification is OK)\n     *\n     * @param {FastMath.Array} left - [input] 3x3 Matrix\n     * @param {FastMath.Array} right - [input] 3x3 Matrix\n     * @param {FastMath.Array} result - [output] 3x3 Matrix\n     */\n    mult3LeftTranspose: function( left, right, result ) {\n      assert && assert( left.length >= 9 );\n      assert && assert( right.length >= 9 );\n      assert && assert( result.length >= 9 );\n      var m0 = left[ 0 ] * right[ 0 ] + left[ 3 ] * right[ 3 ] + left[ 6 ] * right[ 6 ];\n      var m1 = left[ 0 ] * right[ 1 ] + left[ 3 ] * right[ 4 ] + left[ 6 ] * right[ 7 ];\n      var m2 = left[ 0 ] * right[ 2 ] + left[ 3 ] * right[ 5 ] + left[ 6 ] * right[ 8 ];\n      var m3 = left[ 1 ] * right[ 0 ] + left[ 4 ] * right[ 3 ] + left[ 7 ] * right[ 6 ];\n      var m4 = left[ 1 ] * right[ 1 ] + left[ 4 ] * right[ 4 ] + left[ 7 ] * right[ 7 ];\n      var m5 = left[ 1 ] * right[ 2 ] + left[ 4 ] * right[ 5 ] + left[ 7 ] * right[ 8 ];\n      var m6 = left[ 2 ] * right[ 0 ] + left[ 5 ] * right[ 3 ] + left[ 8 ] * right[ 6 ];\n      var m7 = left[ 2 ] * right[ 1 ] + left[ 5 ] * right[ 4 ] + left[ 8 ] * right[ 7 ];\n      var m8 = left[ 2 ] * right[ 2 ] + left[ 5 ] * right[ 5 ] + left[ 8 ] * right[ 8 ];\n      result[ 0 ] = m0;\n      result[ 1 ] = m1;\n      result[ 2 ] = m2;\n      result[ 3 ] = m3;\n      result[ 4 ] = m4;\n      result[ 5 ] = m5;\n      result[ 6 ] = m6;\n      result[ 7 ] = m7;\n      result[ 8 ] = m8;\n    },\n\n    /*\n     * Writes the matrix multiplication ( left * transpose( right ) ) into result. (in-place modification is OK)\n     *\n     * @param {FastMath.Array} left - [input] 3x3 Matrix\n     * @param {FastMath.Array} right - [input] 3x3 Matrix\n     * @param {FastMath.Array} result - [output] 3x3 Matrix\n     */\n    mult3RightTranspose: function( left, right, result ) {\n      assert && assert( left.length >= 9 );\n      assert && assert( right.length >= 9 );\n      assert && assert( result.length >= 9 );\n      var m0 = left[ 0 ] * right[ 0 ] + left[ 1 ] * right[ 1 ] + left[ 2 ] * right[ 2 ];\n      var m1 = left[ 0 ] * right[ 3 ] + left[ 1 ] * right[ 4 ] + left[ 2 ] * right[ 5 ];\n      var m2 = left[ 0 ] * right[ 6 ] + left[ 1 ] * right[ 7 ] + left[ 2 ] * right[ 8 ];\n      var m3 = left[ 3 ] * right[ 0 ] + left[ 4 ] * right[ 1 ] + left[ 5 ] * right[ 2 ];\n      var m4 = left[ 3 ] * right[ 3 ] + left[ 4 ] * right[ 4 ] + left[ 5 ] * right[ 5 ];\n      var m5 = left[ 3 ] * right[ 6 ] + left[ 4 ] * right[ 7 ] + left[ 5 ] * right[ 8 ];\n      var m6 = left[ 6 ] * right[ 0 ] + left[ 7 ] * right[ 1 ] + left[ 8 ] * right[ 2 ];\n      var m7 = left[ 6 ] * right[ 3 ] + left[ 7 ] * right[ 4 ] + left[ 8 ] * right[ 5 ];\n      var m8 = left[ 6 ] * right[ 6 ] + left[ 7 ] * right[ 7 ] + left[ 8 ] * right[ 8 ];\n      result[ 0 ] = m0;\n      result[ 1 ] = m1;\n      result[ 2 ] = m2;\n      result[ 3 ] = m3;\n      result[ 4 ] = m4;\n      result[ 5 ] = m5;\n      result[ 6 ] = m6;\n      result[ 7 ] = m7;\n      result[ 8 ] = m8;\n    },\n\n    /*\n     * Writes the matrix multiplication ( transpose( left ) * transpose( right ) ) into result.\n     * (in-place modification is OK)\n     * NOTE: This is equivalent to transpose( right * left ).\n     *\n     * @param {FastMath.Array} left - [input] 3x3 Matrix\n     * @param {FastMath.Array} right - [input] 3x3 Matrix\n     * @param {FastMath.Array} result - [output] 3x3 Matrix\n     */\n    mult3BothTranspose: function( left, right, result ) {\n      assert && assert( left.length >= 9 );\n      assert && assert( right.length >= 9 );\n      assert && assert( result.length >= 9 );\n      var m0 = left[ 0 ] * right[ 0 ] + left[ 3 ] * right[ 1 ] + left[ 6 ] * right[ 2 ];\n      var m1 = left[ 0 ] * right[ 3 ] + left[ 3 ] * right[ 4 ] + left[ 6 ] * right[ 5 ];\n      var m2 = left[ 0 ] * right[ 6 ] + left[ 3 ] * right[ 7 ] + left[ 6 ] * right[ 8 ];\n      var m3 = left[ 1 ] * right[ 0 ] + left[ 4 ] * right[ 1 ] + left[ 7 ] * right[ 2 ];\n      var m4 = left[ 1 ] * right[ 3 ] + left[ 4 ] * right[ 4 ] + left[ 7 ] * right[ 5 ];\n      var m5 = left[ 1 ] * right[ 6 ] + left[ 4 ] * right[ 7 ] + left[ 7 ] * right[ 8 ];\n      var m6 = left[ 2 ] * right[ 0 ] + left[ 5 ] * right[ 1 ] + left[ 8 ] * right[ 2 ];\n      var m7 = left[ 2 ] * right[ 3 ] + left[ 5 ] * right[ 4 ] + left[ 8 ] * right[ 5 ];\n      var m8 = left[ 2 ] * right[ 6 ] + left[ 5 ] * right[ 7 ] + left[ 8 ] * right[ 8 ];\n      result[ 0 ] = m0;\n      result[ 1 ] = m1;\n      result[ 2 ] = m2;\n      result[ 3 ] = m3;\n      result[ 4 ] = m4;\n      result[ 5 ] = m5;\n      result[ 6 ] = m6;\n      result[ 7 ] = m7;\n      result[ 8 ] = m8;\n    },\n\n    /*\n     * Writes the product ( matrix * vector ) into result. (in-place modification is OK)\n     *\n     * @param {FastMath.Array} matrix - [input] 3x3 Matrix\n     * @param {Vector3} vector - [input]\n     * @param {Vector3} result - [output]\n     */\n    mult3Vector3: function( matrix, vector, result ) {\n      assert && assert( matrix.length >= 9 );\n      var x = matrix[ 0 ] * vector.x + matrix[ 1 ] * vector.y + matrix[ 2 ] * vector.z;\n      var y = matrix[ 3 ] * vector.x + matrix[ 4 ] * vector.y + matrix[ 5 ] * vector.z;\n      var z = matrix[ 6 ] * vector.x + matrix[ 7 ] * vector.y + matrix[ 8 ] * vector.z;\n      result.x = x;\n      result.y = y;\n      result.z = z;\n    },\n\n    /*\n     * Swaps two columns in a matrix, negating one of them to maintain the sign of the determinant.\n     *\n     * @param {FastMath.Array} matrix - [input] 3x3 Matrix\n     * @param {number} idx0 - In the range [0,2]\n     * @param {number} idx1 - In the range [0,2]\n     */\n    swapNegateColumn: function( matrix, idx0, idx1 ) {\n      assert && assert( matrix.length >= 9 );\n      var tmp0 = matrix[ idx0 ];\n      var tmp1 = matrix[ idx0 + 3 ];\n      var tmp2 = matrix[ idx0 + 6 ];\n\n      matrix[ idx0 ] = matrix[ idx1 ];\n      matrix[ idx0 + 3 ] = matrix[ idx1 + 3 ];\n      matrix[ idx0 + 6 ] = matrix[ idx1 + 6 ];\n\n      matrix[ idx1 ] = -tmp0;\n      matrix[ idx1 + 3 ] = -tmp1;\n      matrix[ idx1 + 6 ] = -tmp2;\n    },\n\n    /*\n     * Sets the result matrix to the identity.\n     *\n     * @param {FastMath.Array} result - [output] 3x3 Matrix\n     */\n    setIdentity3: function( result ) {\n      result[ 0 ] = result[ 4 ] = result[ 8 ] = 1; // diagonal\n      result[ 1 ] = result[ 2 ] = result[ 3 ] = result[ 5 ] = result[ 6 ] = result[ 7 ] = 0; // non-diagonal\n    },\n\n    /*\n     * Sets the result matrix to the Givens rotation (performs a rotation between two components). Instead of an angle,\n     * the 'cos' and 'sin' values are passed in directly since we skip the trigonometry almost everywhere we can.\n     *\n     * See http://en.wikipedia.org/wiki/Givens_rotation (note that we use the other sign convention for the sin)\n     *\n     * @param {FastMath.Array} result - [output] 3x3 Matrix\n     * @param {number} cos - [input] The cosine of the Givens rotation angle\n     * @param {number} sin - [input] The sine of the Givens rotation angle\n     * @param {number} idx0 - [input] The smaller row/column index\n     * @param {number} idx1 - [input] The larger row/column index\n     */\n    setGivens3: function( result, cos, sin, idx0, idx1 ) {\n      assert && assert( idx0 < idx1 );\n      this.setIdentity3( result );\n      result[ this.index3( idx0, idx0 ) ] = cos;\n      result[ this.index3( idx1, idx1 ) ] = cos;\n      result[ this.index3( idx0, idx1 ) ] = sin;\n      result[ this.index3( idx1, idx0 ) ] = -sin;\n    },\n\n    /*\n     * Efficiently pre-multiples the matrix in-place by the specified Givens rotation (matrix <= rotation * matrix).\n     * Equivalent to using setGivens3 and mult3.\n     *\n     * @param {FastMath.Array} result - [input AND output] 3x3 Matrix\n     * @param {number} cos - [input] The cosine of the Givens rotation angle\n     * @param {number} sin - [input] The sine of the Givens rotation angle\n     * @param {number} idx0 - [input] The smaller row/column index\n     * @param {number} idx1 - [input] The larger row/column index\n     */\n    preMult3Givens: function( matrix, cos, sin, idx0, idx1 ) {\n      var baseA = idx0 * 3;\n      var baseB = idx1 * 3;\n      // lexicographically in column-major order for \"affine\" section\n      var a = cos * matrix[ baseA + 0 ] + sin * matrix[ baseB + 0 ];\n      var b = cos * matrix[ baseB + 0 ] - sin * matrix[ baseA + 0 ];\n      var c = cos * matrix[ baseA + 1 ] + sin * matrix[ baseB + 1 ];\n      var d = cos * matrix[ baseB + 1 ] - sin * matrix[ baseA + 1 ];\n      var e = cos * matrix[ baseA + 2 ] + sin * matrix[ baseB + 2 ];\n      var f = cos * matrix[ baseB + 2 ] - sin * matrix[ baseA + 2 ];\n      matrix[ baseA + 0 ] = a;\n      matrix[ baseB + 0 ] = b;\n      matrix[ baseA + 1 ] = c;\n      matrix[ baseB + 1 ] = d;\n      matrix[ baseA + 2 ] = e;\n      matrix[ baseB + 2 ] = f;\n    },\n\n    /*\n     * Efficiently post-multiples the matrix in-place by the transpose of the specified Givens rotation\n     * (matrix <= matrix * rotation^T).\n     * Equivalent to using setGivens3 and mult3RightTranspose.\n     *\n     * @param {FastMath.Array} result - [input AND output] 3x3 Matrix\n     * @param {number} cos - [input] The cosine of the Givens rotation angle\n     * @param {number} sin - [input] The sine of the Givens rotation angle\n     * @param {number} idx0 - [input] The smaller row/column index\n     * @param {number} idx1 - [input] The larger row/column index\n     */\n    postMult3Givens: function( matrix, cos, sin, idx0, idx1 ) {\n      // lexicographically in row-major order for the \"transposed affine\" section\n      var a = cos * matrix[ idx0 + 0 ] + sin * matrix[ idx1 + 0 ];\n      var b = cos * matrix[ idx1 + 0 ] - sin * matrix[ idx0 + 0 ];\n      var c = cos * matrix[ idx0 + 3 ] + sin * matrix[ idx1 + 3 ];\n      var d = cos * matrix[ idx1 + 3 ] - sin * matrix[ idx0 + 3 ];\n      var e = cos * matrix[ idx0 + 6 ] + sin * matrix[ idx1 + 6 ];\n      var f = cos * matrix[ idx1 + 6 ] - sin * matrix[ idx0 + 6 ];\n      matrix[ idx0 + 0 ] = a;\n      matrix[ idx1 + 0 ] = b;\n      matrix[ idx0 + 3 ] = c;\n      matrix[ idx1 + 3 ] = d;\n      matrix[ idx0 + 6 ] = e;\n      matrix[ idx1 + 6 ] = f;\n    },\n\n    /*\n     * Zeros out the [idx0,idx1] and [idx1,idx0] entries of the matrix mS by applying a Givens rotation as part of the\n     * Jacobi iteration. In addition, the Givens rotation is prepended to mQ so we can track the accumulated rotations\n     * applied (this is how we get V in the SVD).\n     *\n     * @param {FastMath.Array} mS - [input AND output] Symmetric 3x3 Matrix\n     * @param {FastMath.Array} mQ - [input AND output] Unitary 3x3 Matrix\n     * @param {number} idx0 - [input] The smaller row/column index\n     * @param {number} idx1 - [input] The larger row/column index\n     */\n    applyJacobi3: function( mS, mQ, idx0, idx1 ) {\n      // submatrix entries for idx0,idx1\n      var a11 = mS[ 3 * idx0 + idx0 ];\n      var a12 = mS[ 3 * idx0 + idx1 ]; // we assume mS is symmetric, so we don't need a21\n      var a22 = mS[ 3 * idx1 + idx1 ];\n\n      // Approximate givens angle, see https://graphics.cs.wisc.edu/Papers/2011/MSTTS11/SVD_TR1690.pdf (section 2.3)\n      // \"Computing the Singular Value Decomposition of 3x3 matrices with minimal branching and elementary floating point operations\"\n      // Aleka McAdams, Andrew Selle, Rasmus Tamstorf, Joseph Teran, Eftychios Sifakis\n      var lhs = a12 * a12;\n      var rhs = a11 - a22;\n      rhs = rhs * rhs;\n      var useAngle = lhs < rhs;\n      var w = 1 / Math.sqrt( lhs + rhs );\n      // NOTE: exact Givens angle is 0.5 * Math.atan( 2 * a12 / ( a11 - a22 ) ), but clamped to withing +-Math.PI / 4\n      var cos = useAngle ? ( w * ( a11 - a22 ) ) : SQRT_HALF;\n      var sin = useAngle ? ( w * a12 ) : SQRT_HALF;\n\n      // S' = Q * S * transpose( Q )\n      this.preMult3Givens( mS, cos, sin, idx0, idx1 );\n      this.postMult3Givens( mS, cos, sin, idx0, idx1 );\n\n      // Q' = Q * mQ\n      this.preMult3Givens( mQ, cos, sin, idx0, idx1 );\n    },\n\n    /*\n     * The Jacobi method, which in turn zeros out all the non-diagonal entries repeatedly until mS converges into\n     * a diagonal matrix. We track the applied Givens rotations in mQ, so that when given mS and mQ=identity, we will\n     * maintain the value mQ * mS * mQ^T\n     *\n     * @param {FastMath.Array} mS - [input AND output] Symmetric 3x3 Matrix\n     * @param {FastMath.Array} mQ - [input AND output] Unitary 3x3 Matrix\n     * @param {number} n - [input] The number of iterations to run\n     */\n    jacobiIteration3: function( mS, mQ, n ) {\n      // for 3x3, we eliminate non-diagonal entries iteratively\n      for ( var i = 0; i < n; i++ ) {\n        this.applyJacobi3( mS, mQ, 0, 1 );\n        this.applyJacobi3( mS, mQ, 0, 2 );\n        this.applyJacobi3( mS, mQ, 1, 2 );\n      }\n    },\n\n    /*\n     * One step in computing the QR decomposition. Zeros out the (row,col) entry in 'r', while maintaining the\n     * value of (q * r). We will end up with an orthogonal Q and upper-triangular R (or in the SVD case,\n     * R will be diagonal)\n     *\n     * @param {FastMath.Array} q - [input AND ouput] 3x3 Matrix\n     * @param {FastMath.Array} r - [input AND ouput] 3x3 Matrix\n     * @param {number} row - [input] The row of the entry to zero out\n     * @param {number} col - [input] The column of the entry to zero out\n     */\n    qrAnnihilate3: function( q, r, row, col ) {\n      assert && assert( row > col ); // only in the lower-triangular area\n\n      var epsilon = 0.0000000001;\n      var cos;\n      var sin;\n\n      var diagonalValue = r[ this.index3( col, col ) ];\n      var targetValue = r[ this.index3( row, col ) ];\n      var diagonalSquared = diagonalValue * diagonalValue;\n      var targetSquared = targetValue * targetValue;\n\n      // handle the case where both (row,col) and (col,col) are very small (would cause instabilities)\n      if ( diagonalSquared + targetSquared < epsilon ) {\n        cos = diagonalValue > 0 ? 1 : 0;\n        sin = 0;\n      }\n      else {\n        var rsqr = 1 / Math.sqrt( diagonalSquared + targetSquared );\n        cos = rsqr * diagonalValue;\n        sin = rsqr * targetValue;\n      }\n\n      this.preMult3Givens( r, cos, sin, col, row );\n      this.postMult3Givens( q, cos, sin, col, row );\n    },\n\n    /*\n     * 3x3 Singular Value Decomposition, handling singular cases.\n     * Based on https://graphics.cs.wisc.edu/Papers/2011/MSTTS11/SVD_TR1690.pdf\n     * \"Computing the Singular Value Decomposition of 3x3 matrices with minimal branching and elementary floating point operations\"\n     * Aleka McAdams, Andrew Selle, Rasmus Tamstorf, Joseph Teran, Eftychios Sifakis\n     *\n     * @param {FastMath.Array} a - [input] 3x3 Matrix that we want the SVD of.\n     * @param {number} jacobiIterationCount - [input] How many Jacobi iterations to run (larger is more accurate to a point)\n     * @param {FastMath.Array} resultU - [output] 3x3 U matrix (unitary)\n     * @param {FastMath.Array} resultSigma - [output] 3x3 diagonal matrix of singular values\n     * @param {FastMath.Array} resultV - [output] 3x3 V matrix (unitary)\n     */\n    svd3: function( a, jacobiIterationCount, resultU, resultSigma, resultV ) {\n      // shorthands\n      var q = resultU;\n      var v = resultV;\n      var r = resultSigma;\n\n      // for now, use 'r' as our S == transpose( A ) * A, so we don't have to use scratch matrices\n      this.mult3LeftTranspose( a, a, r );\n      // we'll accumulate into 'q' == transpose( V ) during the Jacobi iteration\n      this.setIdentity3( q );\n\n      // Jacobi iteration turns Q into V^T and R into Sigma^2 (we'll ditch R since the QR decomposition will be beter)\n      this.jacobiIteration3( r, q, jacobiIterationCount );\n      // final determination of V\n      this.transpose3( q, v ); // done with this 'q' until we reuse the scratch matrix later below for the QR decomposition\n\n      this.mult3( a, v, r ); // R = AV\n\n      // Sort columns of R and V based on singular values (needed for the QR step, and useful anyways).\n      // Their product will remain unchanged.\n      var mag0 = r[ 0 ] * r[ 0 ] + r[ 3 ] * r[ 3 ] + r[ 6 ] * r[ 6 ]; // column vector magnitudes\n      var mag1 = r[ 1 ] * r[ 1 ] + r[ 4 ] * r[ 4 ] + r[ 7 ] * r[ 7 ];\n      var mag2 = r[ 2 ] * r[ 2 ] + r[ 5 ] * r[ 5 ] + r[ 8 ] * r[ 8 ];\n      var tmpMag;\n      if ( mag0 < mag1 ) {\n        // swap magnitudes\n        tmpMag = mag0;\n        mag0 = mag1;\n        mag1 = tmpMag;\n        this.swapNegateColumn( r, 0, 1 );\n        this.swapNegateColumn( v, 0, 1 );\n      }\n      if ( mag0 < mag2 ) {\n        // swap magnitudes\n        tmpMag = mag0;\n        mag0 = mag2;\n        mag2 = tmpMag;\n        this.swapNegateColumn( r, 0, 2 );\n        this.swapNegateColumn( v, 0, 2 );\n      }\n      if ( mag1 < mag2 ) {\n        this.swapNegateColumn( r, 1, 2 );\n        this.swapNegateColumn( v, 1, 2 );\n      }\n\n      // QR decomposition\n      this.setIdentity3( q ); // reusing Q now for the QR\n      // Zero out all three strictly lower-triangular values. Should turn the matrix diagonal\n      this.qrAnnihilate3( q, r, 1, 0 );\n      this.qrAnnihilate3( q, r, 2, 0 );\n      this.qrAnnihilate3( q, r, 2, 1 );\n\n      // checks for a singular U value, we'll add in the needed 1 entries to make sure our U is orthogonal\n      var bigEpsilon = 0.001; // they really should be around 1\n      if ( q[ 0 ] * q[ 0 ] + q[ 1 ] * q[ 1 ] + q[ 2 ] * q[ 2 ] < bigEpsilon ) {\n        q[ 0 ] = 1;\n      }\n      if ( q[ 3 ] * q[ 3 ] + q[ 4 ] * q[ 4 ] + q[ 5 ] * q[ 5 ] < bigEpsilon ) {\n        q[ 4 ] = 1;\n      }\n      if ( q[ 6 ] * q[ 6 ] + q[ 7 ] * q[ 7 ] + q[ 8 ] * q[ 8 ] < bigEpsilon ) {\n        q[ 8 ] = 1;\n      }\n    },\n\n    /*---------------------------------------------------------------------------*\n     * 3xN matrix math\n     *----------------------------------------------------------------------------*/\n\n    /*\n     * Sets the 3xN result matrix to be made out of column vectors\n     *\n     * @param {Array.<Vector3>} columnVectors - [input] List of 3D column vectors\n     * @param {FastMath.Array} result - [output] 3xN Matrix, where N is the number of column vectors\n     */\n    setVectors3: function( columnVectors, result ) {\n      var m = 3;\n      var n = columnVectors.length;\n\n      assert && assert( result.length >= m * n, 'Array length check' );\n\n      for ( var i = 0; i < n; i++ ) {\n        var vector = columnVectors[ i ];\n        result[ i ] = vector.x;\n        result[ i + n ] = vector.y;\n        result[ i + 2 * n ] = vector.z;\n      }\n    },\n\n    /*\n     * Retrieves column vector values from a 3xN matrix.\n     *\n     * @param {number} m - [input] The number of rows in the matrix (sanity check, should always be 3)\n     * @param {number} n - [input] The number of columns in the matrix\n     * @param {FastMath.Array} matrix - [input] 3xN Matrix\n     * @param {number} columnIndex - [input] 3xN Matrix\n     * @param {Vector3} result - [output] Vector to store the x,y,z\n     */\n    getColumnVector3: function( m, n, matrix, columnIndex, result ) {\n      assert && assert( m === 3 && columnIndex < n );\n\n      result.x = matrix[ columnIndex ];\n      result.y = matrix[ columnIndex + n ];\n      result.z = matrix[ columnIndex + 2 * n ];\n    },\n\n    /*---------------------------------------------------------------------------*\n     * Arbitrary dimension matrix math\n     *----------------------------------------------------------------------------*/\n\n    /*\n     * From 0-indexed row and column indices, returns the index into the flat array\n     *\n     * @param {number} m - Number of rows in the matrix\n     * @param {number} n - Number of columns in the matrix\n     * @param {number} row\n     * @param {number} col\n     */\n    index: function( m, n, row, col ) {\n      return n * row + col;\n    },\n\n    /*\n     * Writes the transpose of the matrix into the result.\n     *\n     * @param {number} m - Number of rows in the original matrix\n     * @param {number} n - Number of columns in the original matrix\n     * @param {FastMath.Array} matrix - [input] MxN Matrix\n     * @param {FastMath.Array} result - [output] NxM Matrix\n     */\n    transpose: function( m, n, matrix, result ) {\n      assert && assert( matrix.length >= m * n );\n      assert && assert( result.length >= n * m );\n      assert && assert( matrix !== result, 'In-place modification not implemented yet' );\n\n      for ( var row = 0; row < m; row++ ) {\n        for ( var col = 0; col < n; col++ ) {\n          result[ m * col + row ] = matrix[ n * row + col ];\n        }\n      }\n    },\n\n    /*\n     * Writes the matrix multiplication of ( left * right ) into result\n     *\n     * @param {number} m - Number of rows in the left matrix\n     * @param {number} n - Number of columns in the left matrix, number of rows in the right matrix\n     * @param {number} p - Number of columns in the right matrix\n     * @param {FastMath.Array} left - [input] MxN Matrix\n     * @param {FastMath.Array} right - [input] NxP Matrix\n     * @param {FastMath.Array} result - [output] MxP Matrix\n     */\n    mult: function( m, n, p, left, right, result ) {\n      assert && assert( left.length >= m * n );\n      assert && assert( right.length >= n * p );\n      assert && assert( result.length >= m * p );\n      assert && assert( left !== result && right !== result, 'In-place modification not implemented yet' );\n\n      for ( var row = 0; row < m; row++ ) {\n        for ( var col = 0; col < p; col++ ) {\n          var x = 0;\n          for ( var k = 0; k < n; k++ ) {\n            x += left[ this.index( m, n, row, k ) ] * right[ this.index( n, p, k, col ) ];\n          }\n          result[ this.index( m, p, row, col ) ] = x;\n        }\n      }\n    },\n\n    /*\n     * Writes the matrix multiplication of ( left * transpose( right ) ) into result\n     *\n     * @param {number} m - Number of rows in the left matrix\n     * @param {number} n - Number of columns in the left matrix, number of columns in the right matrix\n     * @param {number} p - Number of rows in the right matrix\n     * @param {FastMath.Array} left - [input] MxN Matrix\n     * @param {FastMath.Array} right - [input] PxN Matrix\n     * @param {FastMath.Array} result - [output] MxP Matrix\n     */\n    multRightTranspose: function( m, n, p, left, right, result ) {\n      assert && assert( left.length >= m * n );\n      assert && assert( right.length >= n * p );\n      assert && assert( result.length >= m * p );\n      assert && assert( left !== result && right !== result, 'In-place modification not implemented yet' );\n\n      for ( var row = 0; row < m; row++ ) {\n        for ( var col = 0; col < p; col++ ) {\n          var x = 0;\n          for ( var k = 0; k < n; k++ ) {\n            x += left[ this.index( m, n, row, k ) ] * right[ this.index( p, n, col, k ) ];\n          }\n          result[ this.index( m, p, row, col ) ] = x;\n        }\n      }\n    },\n\n    /*\n     * Writes the matrix into the result, permuting the columns.\n     *\n     * @param {number} m - Number of rows in the original matrix\n     * @param {number} n - Number of columns in the original matrix\n     * @param {FastMath.Array} matrix - [input] MxN Matrix\n     * @param {Permutation} permutation - [input] Permutation\n     * @param {FastMath.Array} result - [output] MxN Matrix\n     */\n    permuteColumns: function( m, n, matrix, permutation, result ) {\n      assert && assert( matrix !== result, 'In-place modification not implemented yet' );\n      assert && assert( matrix.length >= m * n );\n      assert && assert( result.length >= m * n );\n\n      for ( var col = 0; col < n; col++ ) {\n        var permutedColumnIndex = permutation.indices[ col ];\n        for ( var row = 0; row < m; row++ ) {\n          result[ this.index( m, n, row, col ) ] = matrix[ this.index( m, n, row, permutedColumnIndex ) ];\n        }\n      }\n    }\n  };\n  dot.register( 'MatrixOps3', MatrixOps3 );\n\n  return MatrixOps3;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * An immutable permutation that can permute an array\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/Permutation',['require','DOT/dot','PHET_CORE/isArray','DOT/Util'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n\n  var isArray = require( 'PHET_CORE/isArray' );\n  require( 'DOT/Util' ); // for rangeInclusive\n\n  // Creates a permutation that will rearrange a list so that newList[i] = oldList[permutation[i]]\n  function Permutation( indices ) {\n    this.indices = indices;\n  }\n\n  dot.register( 'Permutation', Permutation );\n\n  // An identity permutation with a specific number of elements\n  Permutation.identity = function( size ) {\n    assert && assert( size >= 0 );\n    var indices = new Array( size );\n    for ( var i = 0; i < size; i++ ) {\n      indices[ i ] = i;\n    }\n    return new Permutation( indices );\n  };\n\n  // lists all permutations that have a given size\n  Permutation.permutations = function( size ) {\n    var result = [];\n    Permutation.forEachPermutation( dot.rangeInclusive( 0, size - 1 ), function( integers ) {\n      result.push( new Permutation( integers ) );\n    } );\n    return result;\n  };\n\n  /**\n   * Call our function with each permutation of the provided list PREFIXED by prefix, in lexicographic order\n   *\n   * @param array   List to generate permutations of\n   * @param prefix   Elements that should be inserted at the front of each list before each call\n   * @param callback Function to call\n   */\n  function recursiveForEachPermutation( array, prefix, callback ) {\n    if ( array.length === 0 ) {\n      callback( prefix );\n    }\n    else {\n      for ( var i = 0; i < array.length; i++ ) {\n        var element = array[ i ];\n\n        // remove the element from the array\n        var nextArray = array.slice( 0 );\n        nextArray.splice( i, 1 );\n\n        // add it into the prefix\n        var nextPrefix = prefix.slice( 0 );\n        nextPrefix.push( element );\n\n        recursiveForEachPermutation( nextArray, nextPrefix, callback );\n      }\n    }\n  }\n\n  Permutation.forEachPermutation = function( array, callback ) {\n    recursiveForEachPermutation( array, [], callback );\n  };\n\n  Permutation.prototype = {\n    constructor: Permutation,\n\n    size: function() {\n      return this.indices.length;\n    },\n\n    apply: function( arrayOrInt ) {\n      if ( isArray( arrayOrInt ) ) {\n        if ( arrayOrInt.length !== this.size() ) {\n          throw new Error( 'Permutation length ' + this.size() + ' not equal to list length ' + arrayOrInt.length );\n        }\n\n        // permute it as an array\n        var result = new Array( arrayOrInt.length );\n        for ( var i = 0; i < arrayOrInt.length; i++ ) {\n          result[ i ] = arrayOrInt[ this.indices[ i ] ];\n        }\n        return result;\n      }\n      else {\n        // permute a single index\n        return this.indices[ arrayOrInt ];\n      }\n    },\n\n    // The inverse of this permutation\n    inverted: function() {\n      var newPermutation = new Array( this.size() );\n      for ( var i = 0; i < this.size(); i++ ) {\n        newPermutation[ this.indices[ i ] ] = i;\n      }\n      return new Permutation( newPermutation );\n    },\n\n    withIndicesPermuted: function( indices ) {\n      var result = [];\n      var that = this;\n      Permutation.forEachPermutation( indices, function( integers ) {\n        var oldIndices = that.indices;\n        var newPermutation = oldIndices.slice( 0 );\n\n        for ( var i = 0; i < indices.length; i++ ) {\n          newPermutation[ indices[ i ] ] = oldIndices[ integers[ i ] ];\n        }\n        result.push( new Permutation( newPermutation ) );\n      } );\n      return result;\n    },\n\n    toString: function() {\n      return 'P[' + this.indices.join( ', ' ) + ']';\n    }\n  };\n\n  Permutation.testMe = function( console ) {\n    var a = new Permutation( [ 1, 4, 3, 2, 0 ] );\n    console.log( a.toString() );\n\n    var b = a.inverted();\n    console.log( b.toString() );\n\n    console.log( b.withIndicesPermuted( [ 0, 3, 4 ] ).toString() );\n\n    console.log( Permutation.permutations( 4 ).toString() );\n  };\n\n  return Permutation;\n} );\n\n","// Copyright 2014, University of Colorado Boulder\n\n/**\n * A mathematical plane in 3 dimensions determined by a normal vector to the plane and the distance to the closest\n * point on the plane to the origin\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/Plane3',['require','DOT/dot','DOT/Vector3'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n  var Vector3 = require( 'DOT/Vector3' );\n\n  /*\n   * @constructor\n   * @param {Vector3} normal - A normal vector (perpendicular) to the plane\n   * @param {number} distance - The signed distance to the plane from the origin, so that normal.times( distance )\n   *                            will be a point on the plane.\n   */\n  function Plane3( normal, distance ) {\n    this.normal = normal;\n    this.distance = distance;\n\n    assert && assert( Math.abs( normal.magnitude() - 1 ) < 0.01 );\n\n    phetAllocation && phetAllocation( 'Plane3' );\n  }\n\n  dot.register( 'Plane3', Plane3 );\n\n  Plane3.prototype = {\n    constructor: Plane3,\n\n    /*\n     * @param {Ray3} ray\n     * @returns The intersection {Vector3} of the ray with the plane\n     */\n    intersectWithRay: function( ray ) {\n      return ray.pointAtDistance( ray.distanceToPlane( this ) );\n    }\n  };\n\n  Plane3.XY = new Plane3( new Vector3( 0, 0, 1 ), 0 );\n  Plane3.XZ = new Plane3( new Vector3( 0, 1, 0 ), 0 );\n  Plane3.YZ = new Plane3( new Vector3( 1, 0, 0 ), 0 );\n\n  /*\n   * @param {Vector3} a - first point\n   * @param {Vector3} b - second point\n   * @param {Vector3} c - third point\n   */\n  Plane3.fromTriangle = function( a, b, c ) {\n    var normal = ( c.minus( a ) ).cross( b.minus( a ) );\n    if ( normal.magnitude() === 0 ) {\n      return null;\n    }\n    normal.normalize();\n\n    return new Plane3( normal, normal.dot( a ) );\n  };\n\n  return Plane3;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Quaternion, see http://en.wikipedia.org/wiki/Quaternion\n *\n * TODO: convert from JME-style parameterization into classical mathematical description?\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/Quaternion',['require','DOT/dot','PHET_CORE/Poolable','DOT/Vector3','DOT/Matrix3','DOT/Util'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n\n  var Poolable = require( 'PHET_CORE/Poolable' );\n  require( 'DOT/Vector3' );\n  require( 'DOT/Matrix3' );\n  require( 'DOT/Util' );\n\n  function Quaternion( x, y, z, w ) {\n    this.setXYZW( x, y, z, w );\n\n    phetAllocation && phetAllocation( 'Quaternion' );\n  }\n\n  dot.register( 'Quaternion', Quaternion );\n\n  Quaternion.prototype = {\n    constructor: Quaternion,\n\n    isQuaternion: true,\n\n    setXYZW: function( x, y, z, w ) {\n      this.x = x !== undefined ? x : 0;\n      this.y = y !== undefined ? y : 0;\n      this.z = z !== undefined ? z : 0;\n      this.w = w !== undefined ? w : 1;\n    },\n\n    /*---------------------------------------------------------------------------*\n     * Immutables\n     *----------------------------------------------------------------------------*/\n\n    plus: function( quat ) {\n      return new Quaternion( this.x + quat.x, this.y + quat.y, this.z + quat.z, this.w + quat.w );\n    },\n\n    timesScalar: function( s ) {\n      return new Quaternion( this.x * s, this.y * s, this.z * s, this.w * s );\n    },\n\n    // standard quaternion multiplication (hamilton product)\n    timesQuaternion: function( quat ) {\n      // TODO: note why this is the case? product noted everywhere is the other one mentioned!\n      // mathematica-style\n//        return new Quaternion(\n//                this.x * quat.x - this.y * quat.y - this.z * quat.z - this.w * quat.w,\n//                this.x * quat.y + this.y * quat.x + this.z * quat.w - this.w * quat.z,\n//                this.x * quat.z - this.y * quat.w + this.z * quat.x + this.w * quat.y,\n//                this.x * quat.w + this.y * quat.z - this.z * quat.y + this.w * quat.x\n//        );\n\n      // JME-style\n      return new Quaternion(\n        this.x * quat.w - this.z * quat.y + this.y * quat.z + this.w * quat.x,\n        -this.x * quat.z + this.y * quat.w + this.z * quat.x + this.w * quat.y,\n        this.x * quat.y - this.y * quat.x + this.z * quat.w + this.w * quat.z,\n        -this.x * quat.x - this.y * quat.y - this.z * quat.z + this.w * quat.w\n      );\n\n      /*\n       Mathematica!\n       In[13]:= Quaternion[-0.0, -0.0024999974, 0.0, 0.9999969] ** Quaternion[-0.9864071, 0.0016701065, -0.0050373166, 0.16423558]\n       Out[13]= Quaternion[-0.164231, 0.00750332, 0.00208069, -0.986391]\n\n       In[17]:= Quaternion[-0.0024999974, 0.0, 0.9999969, 0] ** Quaternion[0.0016701065, -0.0050373166, 0.16423558, -0.9864071]\n       Out[17]= Quaternion[-0.164239, -0.986391, 0.00125951, 0.00750332]\n\n       JME contains the rearrangement of what is typically called {w,x,y,z}\n       */\n    },\n\n    timesVector3: function( v ) {\n      if ( v.magnitude() === 0 ) {\n        return new dot.Vector3();\n      }\n\n      // TODO: optimization?\n      return new dot.Vector3(\n        this.w * this.w * v.x + 2 * this.y * this.w * v.z - 2 * this.z * this.w * v.y + this.x * this.x * v.x + 2 * this.y * this.x * v.y + 2 * this.z * this.x * v.z - this.z * this.z * v.x - this.y * this.y * v.x,\n        2 * this.x * this.y * v.x + this.y * this.y * v.y + 2 * this.z * this.y * v.z + 2 * this.w * this.z * v.x - this.z * this.z * v.y + this.w * this.w * v.y - 2 * this.x * this.w * v.z - this.x * this.x * v.y,\n        2 * this.x * this.z * v.x + 2 * this.y * this.z * v.y + this.z * this.z * v.z - 2 * this.w * this.y * v.x - this.y * this.y * v.z + 2 * this.w * this.x * v.y - this.x * this.x * v.z + this.w * this.w * v.z\n      );\n    },\n\n    magnitude: function() {\n      return Math.sqrt( this.magnitudeSquared() );\n    },\n\n    magnitudeSquared: function() {\n      return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n    },\n\n    normalized: function() {\n      var magnitude = this.magnitude();\n      assert && assert( magnitude !== 0, 'Cannot normalize a zero-magnitude quaternion' );\n      return this.timesScalar( 1 / magnitude );\n    },\n\n    negated: function() {\n      return new Quaternion( -this.x, -this.y, -this.z, -this.w );\n    },\n\n    toRotationMatrix: function() {\n      // see http://en.wikipedia.org/wiki/Rotation_matrix#Quaternion\n\n      var norm = this.magnitudeSquared();\n      var flip = ( norm === 1 ) ? 2 : ( norm > 0 ) ? 2 / norm : 0;\n\n      var xx = this.x * this.x * flip;\n      var xy = this.x * this.y * flip;\n      var xz = this.x * this.z * flip;\n      var xw = this.w * this.x * flip;\n      var yy = this.y * this.y * flip;\n      var yz = this.y * this.z * flip;\n      var yw = this.w * this.y * flip;\n      var zz = this.z * this.z * flip;\n      var zw = this.w * this.z * flip;\n\n      return dot.Matrix3.dirtyFromPool().columnMajor(\n        1 - ( yy + zz ),\n        ( xy + zw ),\n        ( xz - yw ),\n        ( xy - zw ),\n        1 - ( xx + zz ),\n        ( yz + xw ),\n        ( xz + yw ),\n        ( yz - xw ),\n        1 - ( xx + yy )\n      );\n    }\n  };\n\n  Quaternion.fromEulerAngles = function( yaw, roll, pitch ) {\n    var sinPitch = Math.sin( pitch * 0.5 );\n    var cosPitch = Math.cos( pitch * 0.5 );\n    var sinRoll = Math.sin( roll * 0.5 );\n    var cosRoll = Math.cos( roll * 0.5 );\n    var sinYaw = Math.sin( yaw * 0.5 );\n    var cosYaw = Math.cos( yaw * 0.5 );\n\n    var a = cosRoll * cosPitch;\n    var b = sinRoll * sinPitch;\n    var c = cosRoll * sinPitch;\n    var d = sinRoll * cosPitch;\n\n    return new Quaternion(\n      a * sinYaw + b * cosYaw,\n      d * cosYaw + c * sinYaw,\n      c * cosYaw - d * sinYaw,\n      a * cosYaw - b * sinYaw\n    );\n  };\n\n  Quaternion.fromRotationMatrix = function( matrix ) {\n    var v00 = matrix.m00();\n    var v01 = matrix.m01();\n    var v02 = matrix.m02();\n    var v10 = matrix.m10();\n    var v11 = matrix.m11();\n    var v12 = matrix.m12();\n    var v20 = matrix.m20();\n    var v21 = matrix.m21();\n    var v22 = matrix.m22();\n\n    // from graphics gems code\n    var trace = v00 + v11 + v22;\n    var sqt;\n\n    // we protect the division by s by ensuring that s>=1\n    if ( trace >= 0 ) {\n      sqt = Math.sqrt( trace + 1 );\n      return new Quaternion(\n        ( v21 - v12 ) * 0.5 / sqt,\n        ( v02 - v20 ) * 0.5 / sqt,\n        ( v10 - v01 ) * 0.5 / sqt,\n        0.5 * sqt\n      );\n    }\n    else if ( ( v00 > v11 ) && ( v00 > v22 ) ) {\n      sqt = Math.sqrt( 1 + v00 - v11 - v22 );\n      return new Quaternion(\n        sqt * 0.5,\n        ( v10 + v01 ) * 0.5 / sqt,\n        ( v02 + v20 ) * 0.5 / sqt,\n        ( v21 - v12 ) * 0.5 / sqt\n      );\n    }\n    else if ( v11 > v22 ) {\n      sqt = Math.sqrt( 1 + v11 - v00 - v22 );\n      return new Quaternion(\n        ( v10 + v01 ) * 0.5 / sqt,\n        sqt * 0.5,\n        ( v21 + v12 ) * 0.5 / sqt,\n        ( v02 - v20 ) * 0.5 / sqt\n      );\n    }\n    else {\n      sqt = Math.sqrt( 1 + v22 - v00 - v11 );\n      return new Quaternion(\n        ( v02 + v20 ) * 0.5 / sqt,\n        ( v21 + v12 ) * 0.5 / sqt,\n        sqt * 0.5,\n        ( v10 - v01 ) * 0.5 / sqt\n      );\n    }\n  };\n\n  /**\n   * Find a quaternion that transforms a unit vector A into a unit vector B. There\n   * are technically multiple solutions, so this only picks one.\n   *\n   * @param a Unit vector A\n   * @param b Unit vector B\n   * @return A quaternion s.t. Q * A = B\n   */\n  Quaternion.getRotationQuaternion = function( a, b ) {\n    return Quaternion.fromRotationMatrix( dot.Matrix3.rotateAToB( a, b ) );\n  };\n\n  // spherical linear interpolation - blending two quaternions\n  Quaternion.slerp = function( a, b, t ) {\n    // if they are identical, just return one of them\n    if ( a.x === b.x && a.y === b.y && a.z === b.z && a.w === b.w ) {\n      return a;\n    }\n\n    var dot = a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;\n\n    if ( dot < 0 ) {\n      b = b.negated();\n      dot = -dot;\n    }\n\n    // how much of each quaternion should be contributed\n    var ratioA = 1 - t;\n    var ratioB = t;\n\n    // tweak them if necessary\n    if ( ( 1 - dot ) > 0.1 ) {\n      var theta = Math.acos( dot );\n      var invSinTheta = ( 1 / Math.sin( theta ) );\n\n      ratioA = ( Math.sin( ( 1 - t ) * theta ) * invSinTheta );\n      ratioB = ( Math.sin( ( t * theta ) ) * invSinTheta );\n    }\n\n    return new Quaternion(\n      ratioA * a.x + ratioB * b.x,\n      ratioA * a.y + ratioB * b.y,\n      ratioA * a.z + ratioB * b.z,\n      ratioA * a.w + ratioB * b.w\n    );\n  };\n\n  Poolable.mixin( Quaternion, {\n    defaultFactory: function() { return new Quaternion(); },\n    constructorDuplicateFactory: function( pool ) {\n      return function( x, y, z, w ) {\n        if ( pool.length ) {\n          return pool.pop().set( x, y, z, w );\n        }\n        else {\n          return new Quaternion( x, y, z, w );\n        }\n      };\n    }\n  } );\n\n  return Quaternion;\n} );\n\n","// Copyright 2015, University of Colorado Boulder\n\n/**\n * Random number generator with an optional seed.\n *\n * @author John Blanco\n * @author Mohamed Safi\n * @author Aaron Davis\n * @author Sam Reid\n */\ndefine( 'DOT/Random',['require','DOT/Util','DOT/dot'],function( require ) {\n  'use strict';\n\n  // modules\n  var Util = require( 'DOT/Util' );\n  var dot = require( 'DOT/dot' );\n\n  function Random( options ) {\n    options = _.extend( {\n\n      // {Tandem} for deterministic playback in randomized sims\n      tandem: null,\n\n      // {number|null} seed for the random number generator.\n      //               when seed is null, Math.random() is used\n      seed: null,\n\n      // {boolean} if true, use the seed specified statically in the preloads for replicable playback in phet-io\n      // this is a convenience option since it will be a common occurrence to use the replicable playback seed\n      // if staticSeed and seed are both specified, there will be an assertion error.\n      staticSeed: false\n\n    }, options );\n\n    if ( options.seed !== null && options.staticSeed ) {\n      assert && assert( false, 'cannot specify seed and useChipperSeed, use one or the other' );\n    }\n\n    var seed = options.staticSeed ? window.phet.chipper.randomSeed : options.seed;\n    this.setSeed( seed );\n\n    options.tandem && options.tandem.addInstance( this );\n  }\n\n  dot.register( 'Random', Random );\n\n  Random.prototype = {\n\n    constructor: Random,\n\n    /**\n     * Re-seed the random number generator, or null to use Math.random()\n     * @param seed\n     */\n    setSeed: function( seed ) {\n      this.seed = seed;\n\n      // Use \"new\" to create a local prng without altering Math.random.\n      this.seedrandom = this.seed !== null ? new Math.seedrandom( this.seed + '' ) : null;\n    },\n\n    getSeed: function() {\n      return this.seed;\n    },\n\n    random: function() {\n      return this.seed === null ? Math.random() : this.seedrandom();\n    },\n\n    nextBoolean: function() {\n      return this.random() >= 0.5;\n    },\n\n    nextInt: function( n ) {\n      var value = this.random() * n;\n      return value | 0; // convert to int\n    },\n\n    nextDouble: function() {\n      var vv = this.random();\n      return vv;\n    },\n\n    /**\n     * @public\n     * @returns {number}\n     * // TODO: Seed this\n     */\n    nextGaussian: function() {\n      // random gaussian with mean = 0 and standard deviation = 1\n      return Util.boxMullerTransform( 0, 1 );\n    }\n  };\n\n  return Random;\n} );\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * 3-dimensional ray\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/Ray3',['require','DOT/dot'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n\n  function Ray3( position, direction ) {\n    this.position = position;\n    this.direction = direction;\n  }\n\n  dot.register( 'Ray3', Ray3 );\n\n  Ray3.prototype = {\n    constructor: Ray3,\n\n    shifted: function( distance ) {\n      return new Ray3( this.pointAtDistance( distance ), this.direction );\n    },\n\n    pointAtDistance: function( distance ) {\n      return this.position.plus( this.direction.timesScalar( distance ) );\n    },\n\n    // @param {Plane3} plane\n    distanceToPlane: function( plane ) {\n      return ( plane.distance - this.position.dot( plane.normal ) ) / this.direction.dot( plane.normal );\n    },\n\n    toString: function() {\n      return this.position.toString() + ' => ' + this.direction.toString();\n    }\n  };\n\n  return Ray3;\n} );\n\n","// Copyright 2013-2014, University of Colorado Boulder\n\n/**\n * A 2D rectangle-shaped bounded area, with a convenience name and constructor. Totally functionally\n * equivalent to Bounds2, but with a different constructor.\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/Rectangle',['require','DOT/dot','PHET_CORE/inherit','DOT/Bounds2'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n  var inherit = require( 'PHET_CORE/inherit' );\n  var Bounds2 = require( 'DOT/Bounds2' );\n\n  function Rectangle( x, y, width, height ) {\n    assert && assert( height !== undefined, 'Rectangle requires 4 parameters' );\n    Bounds2.call( this, x, y, x + width, y + height );\n  }\n\n  dot.register( 'Rectangle', Rectangle );\n\n  inherit( Bounds2, Rectangle );\n\n  return Rectangle;\n} );\n\n","// Copyright 2014-2015, University of Colorado Boulder\n\n/**\n * A sphere in 3 dimensions (NOT a 3-sphere).\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/Sphere3',['require','DOT/dot'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n\n  /*\n   * @constructor\n   * @param {Vector3} center - The center of the sphere\n   * @param {number} radius - The radius of the sphere\n   */\n  function Sphere3( center, radius ) {\n    this.center = center;\n    this.radius = radius;\n\n    assert && assert( radius >= 0 );\n\n    phetAllocation && phetAllocation( 'Sphere3' );\n  }\n\n  dot.register( 'Sphere3', Sphere3 );\n\n  Sphere3.prototype = {\n    constructor: Sphere3,\n\n    /*\n     * @param {Ray3} ray - The ray to intersect with the sphere\n     * @param {number} epsilon - A small varing-point value to be used to handle intersections tangent to the sphere\n     * @returns An intersection result { distance, hitPoint, normal, fromOutside }, or null if the sphere is behind the ray\n     */\n    intersect: function( ray, epsilon ) {\n      var raydir = ray.direction;\n      var pos = ray.position;\n      var centerToRay = pos.minus( this.center );\n\n      // basically, we can use the quadratic equation to solve for both possible hit points (both +- roots are the hit points)\n      var tmp = raydir.dot( centerToRay );\n      var centerToRayDistSq = centerToRay.magnitudeSquared();\n      var det = 4 * tmp * tmp - 4 * ( centerToRayDistSq - this.radius * this.radius );\n      if ( det < epsilon ) {\n        // ray misses sphere entirely\n        return null;\n      }\n\n      var base = raydir.dot( this.center ) - raydir.dot( pos );\n      var sqt = Math.sqrt( det ) / 2;\n\n      // the \"first\" entry point distance into the sphere. if we are inside the sphere, it is behind us\n      var ta = base - sqt;\n\n      // the \"second\" entry point distance\n      var tb = base + sqt;\n\n      if ( tb < epsilon ) {\n        // sphere is behind ray, so don't return an intersection\n        return null;\n      }\n\n      var hitPositionB = ray.pointAtDistance( tb );\n      var normalB = hitPositionB.minus( this.center ).normalized();\n\n      if ( ta < epsilon ) {\n        // we are inside the sphere\n        // in => out\n        return {\n          distance: tb,\n          hitPoint: hitPositionB,\n          normal: normalB.negated(),\n          fromOutside: false\n        };\n      }\n      else {\n        // two possible hits\n        var hitPositionA = ray.pointAtDistance( ta );\n        var normalA = hitPositionA.minus( this.center ).normalized();\n\n        // close hit, we have out => in\n        return {\n          distance: ta,\n          hitPoint: hitPositionA,\n          normal: normalA,\n          fromOutside: true\n        };\n      }\n    },\n\n    /*\n     * @param {Ray3} ray - The ray to intersect with the sphere\n     * @param {number} epsilon - A small varing-point value to be used to handle intersections tangent to the sphere\n     * @returns An array of intersection results like { distance, hitPoint, normal, fromOutside }. Will be 0 or 2, with\n     *          the \"proper\" intersection first, if applicable (closest in front of the ray).\n     */\n    intersections: function( ray, epsilon ) {\n      var raydir = ray.direction;\n      var pos = ray.position;\n      var centerToRay = pos.minus( this.center );\n\n      // basically, we can use the quadratic equation to solve for both possible hit points (both +- roots are the hit points)\n      var tmp = raydir.dot( centerToRay );\n      var centerToRayDistSq = centerToRay.magnitudeSquared();\n      var det = 4 * tmp * tmp - 4 * ( centerToRayDistSq - this.radius * this.radius );\n      if ( det < epsilon ) {\n        // ray misses sphere entirely\n        return [];\n      }\n\n      var base = raydir.dot( this.center ) - raydir.dot( pos );\n      var sqt = Math.sqrt( det ) / 2;\n\n      // the \"first\" entry point distance into the sphere. if we are inside the sphere, it is behind us\n      var ta = base - sqt;\n\n      // the \"second\" entry point distance\n      var tb = base + sqt;\n\n      if ( tb < epsilon ) {\n        // sphere is behind ray, so don't return an intersection\n        return [];\n      }\n\n      var hitPositionB = ray.pointAtDistance( tb );\n      var normalB = hitPositionB.minus( this.center ).normalized();\n\n      var hitPositionA = ray.pointAtDistance( ta );\n      var normalA = hitPositionA.minus( this.center ).normalized();\n\n      var resultB = {\n        distance: tb,\n        hitPoint: hitPositionB,\n        normal: normalB.negated(),\n        fromOutside: false\n      };\n      var resultA = {\n        distance: ta,\n        hitPoint: hitPositionA,\n        normal: normalA,\n        fromOutside: true\n      };\n      if ( ta < epsilon ) {\n        // we are inside the sphere\n        // in => out\n\n        return [ resultB, resultA ];\n      }\n      else {\n        // two possible hits\n\n        // close hit, we have out => in\n        return [ resultA, resultB ];\n      }\n    }\n  };\n\n  return Sphere3;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Forward and inverse transforms with 4x4 matrices, allowing flexibility including affine and perspective transformations.\n *\n * Methods starting with 'transform' will apply the transform from our\n * primary matrix, while methods starting with 'inverse' will apply the transform from the inverse of our matrix.\n *\n * Generally, this means transform.inverseThing( transform.transformThing( thing ) ).equals( thing ).\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'DOT/Transform4',['require','DOT/dot','AXON/Events','PHET_CORE/inherit','DOT/Matrix4','DOT/Vector3','DOT/Ray3'],function( require ) {\n  'use strict';\n\n  var dot = require( 'DOT/dot' );\n  var Events = require( 'AXON/Events' );\n  var inherit = require( 'PHET_CORE/inherit' );\n\n  require( 'DOT/Matrix4' );\n  require( 'DOT/Vector3' );\n  require( 'DOT/Ray3' );\n\n  var scratchMatrix = new dot.Matrix4();\n\n  function checkMatrix( matrix ) {\n    return ( matrix instanceof dot.Matrix4 ) && matrix.isFinite();\n  }\n\n  /**\n   * Creates a transform based around an initial matrix.\n   * @constructor\n   * @public\n   *\n   * @param {Matrix4} matrix\n   */\n  function Transform4( matrix ) {\n    Events.call( this );\n\n    // @private {Matrix4} - The primary matrix used for the transform\n    this.matrix = dot.Matrix4.IDENTITY.copy();\n\n    // @private {Matrix4} - The inverse of the primary matrix, computed lazily\n    this.inverse = dot.Matrix4.IDENTITY.copy();\n\n    // @private {Matrix4} - The transpose of the primary matrix, computed lazily\n    this.matrixTransposed = dot.Matrix4.IDENTITY.copy();\n\n    // @private {Matrix4} - The inverse of the transposed primary matrix, computed lazily\n    this.inverseTransposed = dot.Matrix4.IDENTITY.copy();\n\n\n    // @private {boolean} - Whether this.inverse has been computed based on the latest primary matrix\n    this.inverseValid = true;\n\n    // @private {boolean} - Whether this.matrixTransposed has been computed based on the latest primary matrix\n    this.transposeValid = true;\n\n    // @private {boolean} - Whether this.inverseTransposed has been computed based on the latest primary matrix\n    this.inverseTransposeValid = true;\n\n    if ( matrix ) {\n      this.setMatrix( matrix );\n    }\n\n    phetAllocation && phetAllocation( 'Transform4' );\n  }\n\n  dot.register( 'Transform4', Transform4 );\n\n  inherit( Events, Transform4, {\n    /*---------------------------------------------------------------------------*\n     * mutators\n     *---------------------------------------------------------------------------*/\n\n    /**\n     * Sets the value of the primary matrix directly from a Matrix4. Does not change the Matrix4 instance of this\n     * Transform4.\n     * @public\n     *\n     * @param {Matrix4} matrix\n     */\n    setMatrix: function( matrix ) {\n      assert && assert( checkMatrix( matrix ), 'Matrix has NaNs, non-finite values, or isn\\'t a matrix!' );\n\n      // copy the matrix over to our matrix\n      this.matrix.set( matrix );\n\n      // set flags and notify\n      this.invalidate();\n    },\n\n    /**\n     * This should be called after our internal matrix is changed. It marks the other dependent matrices as invalid,\n     * and sends out notifications of the change.\n     * @private\n     */\n    invalidate: function() {\n      // sanity check\n      assert && assert( this.matrix.isFinite() );\n\n      // dependent matrices now invalid\n      this.inverseValid = false;\n      this.transposeValid = false;\n      this.inverseTransposeValid = false;\n\n      this.trigger0( 'change' );\n    },\n\n    /**\n     * Modifies the primary matrix such that: this.matrix = matrix * this.matrix.\n     * @public\n     *\n     * @param {Matrix4} matrix\n     */\n    prepend: function( matrix ) {\n      assert && assert( checkMatrix( matrix ), 'Matrix has NaNs, non-finite values, or isn\\'t a matrix!' );\n\n      // In the absence of a prepend-multiply function in Matrix4, copy over to a scratch matrix instead\n      // TODO: implement a prepend-multiply directly in Matrix4 for a performance increase\n      scratchMatrix.set( this.matrix );\n      this.matrix.set( matrix );\n      this.matrix.multiplyMatrix( scratchMatrix );\n\n      // set flags and notify\n      this.invalidate();\n    },\n\n    /**\n     * Modifies the primary matrix such that: this.matrix = this.matrix * matrix\n     * @public\n     *\n     * @param {Matrix4} matrix\n     */\n    append: function( matrix ) {\n      assert && assert( checkMatrix( matrix ), 'Matrix has NaNs, non-finite values, or isn\\'t a matrix!' );\n\n      this.matrix.multiplyMatrix( matrix );\n\n      // set flags and notify\n      this.invalidate();\n    },\n\n    /**\n     * Like prepend(), but prepends the other transform's matrix.\n     * @public\n     *\n     * @param {Transform4} transform\n     */\n    prependTransform: function( transform ) {\n      this.prepend( transform.matrix );\n    },\n\n    /**\n     * Like append(), but appends the other transform's matrix.\n     * @public\n     *\n     * @param {Transform4} transform\n     */\n    appendTransform: function( transform ) {\n      this.append( transform.matrix );\n    },\n\n    /**\n     * Sets the transform of a Canvas context to be equivalent to the 2D affine part of this transform.\n     * @public\n     *\n     * @param {CanvasRenderingContext2D} context\n     */\n    applyToCanvasContext: function( context ) {\n      context.setTransform( this.matrix.m00(), this.matrix.m10(), this.matrix.m01(), this.matrix.m11(), this.matrix.m03(), this.matrix.m13() );\n    },\n\n    /*---------------------------------------------------------------------------*\n     * getters\n     *---------------------------------------------------------------------------*/\n\n    /**\n     * Creates a copy of this transform.\n     * @public\n     *\n     * @returns {Transform4}\n     */\n    copy: function() {\n      var transform = new Transform4( this.matrix );\n\n      transform.inverse = this.inverse;\n      transform.matrixTransposed = this.matrixTransposed;\n      transform.inverseTransposed = this.inverseTransposed;\n\n      transform.inverseValid = this.inverseValid;\n      transform.transposeValid = this.transposeValid;\n      transform.inverseTransposeValid = this.inverseTransposeValid;\n    },\n\n    /**\n     * Returns the primary matrix of this transform.\n     * @public\n     *\n     * @returns {Matrix4}\n     */\n    getMatrix: function() {\n      return this.matrix;\n    },\n\n    /**\n     * Returns the inverse of the primary matrix of this transform.\n     * @public\n     *\n     * @returns {Matrix4}\n     */\n    getInverse: function() {\n      if ( !this.inverseValid ) {\n        this.inverseValid = true;\n\n        this.inverse.set( this.matrix );\n        this.inverse.invert();\n      }\n      return this.inverse;\n    },\n\n    /**\n     * Returns the transpose of the primary matrix of this transform.\n     * @public\n     *\n     * @returns {Matrix4}\n     */\n    getMatrixTransposed: function() {\n      if ( !this.transposeValid ) {\n        this.transposeValid = true;\n\n        this.matrixTransposed.set( this.matrix );\n        this.matrixTransposed.transpose();\n      }\n      return this.matrixTransposed;\n    },\n\n    /**\n     * Returns the inverse of the transpose of matrix of this transform.\n     * @public\n     *\n     * @returns {Matrix4}\n     */\n    getInverseTransposed: function() {\n      if ( !this.inverseTransposeValid ) {\n        this.inverseTransposeValid = true;\n\n        this.inverseTransposed.set( this.getInverse() ); // triggers inverse to be valid\n        this.inverseTransposed.transpose();\n      }\n      return this.inverseTransposed;\n    },\n\n    /**\n     * Returns whether our primary matrix is known to be an identity matrix. If false is returned, it doesn't necessarily\n     * mean our matrix isn't an identity matrix, just that it is unlikely in normal usage.\n     * @public\n     *\n     * @returns {boolean}\n     */\n    isIdentity: function() {\n      return this.matrix.type === dot.Matrix4.Types.IDENTITY;\n    },\n\n    /**\n     * Returns whether any components of our primary matrix are either infinite or NaN.\n     * @public\n     *\n     * @returns {boolean}\n     */\n    isFinite: function() {\n      return this.matrix.isFinite();\n    },\n\n    /*---------------------------------------------------------------------------*\n     * forward transforms (for Vector3 or scalar)\n     *---------------------------------------------------------------------------*/\n\n    /**\n     * Transforms a 3-dimensional vector like it is a point with a position (translation is applied).\n     * @public\n     *\n     * For an affine matrix $M$, the result is the homogeneous multiplication $M\\begin{bmatrix} x \\\\ y \\\\ z \\\\ 1 \\end{bmatrix}$.\n     *\n     * @param {Vector3} v\n     * @returns {Vector3}\n     */\n    transformPosition3: function( v ) {\n      return this.matrix.timesVector3( v );\n    },\n\n    /**\n     * Transforms a 3-dimensional vector like position is irrelevant (translation is not applied).\n     * @public\n     *\n     * @param {Vector3} v\n     * @returns {Vector3}\n     */\n    transformDelta3: function( v ) {\n      return this.matrix.timesRelativeVector3( v );\n    },\n\n    /**\n     * Transforms a 3-dimensional vector like it is a normal to a surface (so that the surface is transformed, and the new\n     * normal to the surface at the transformed point is returned).\n     * @public\n     *\n     * @param {Vector3} v\n     * @returns {Vector3}\n     */\n    transformNormal3: function( v ) {\n      return this.getInverse().timesTransposeVector3( v );\n    },\n\n    /**\n     * Returns the x-coordinate difference for two transformed vectors, which add the x-coordinate difference of the input\n     * x (and same y,z values) beforehand.\n     * @public\n     *\n     * @param {number} x\n     * @returns {number}\n     */\n    transformDeltaX: function( x ) {\n      return this.transformDelta3( new dot.Vector3( x, 0, 0 ) ).x;\n    },\n\n    /**\n     * Returns the y-coordinate difference for two transformed vectors, which add the y-coordinate difference of the input\n     * y (and same x,z values) beforehand.\n     * @public\n     *\n     * @param {number} y\n     * @returns {number}\n     */\n    transformDeltaY: function( y ) {\n      return this.transformDelta3( new dot.Vector3( 0, y, 0 ) ).y;\n    },\n\n    /**\n     * Returns the z-coordinate difference for two transformed vectors, which add the z-coordinate difference of the input\n     * z (and same x,y values) beforehand.\n     * @public\n     *\n     * @param {number} z\n     * @returns {number}\n     */\n    transformDeltaZ: function( z ) {\n      return this.transformDelta3( new dot.Vector3( 0, 0, z ) ).z;\n    },\n\n    /**\n     * Returns a transformed ray.\n     * @pubic\n     *\n     * @param {Ray3} ray\n     * @returns {Ray3}\n     */\n    transformRay: function( ray ) {\n      return new dot.Ray3(\n        this.transformPosition3( ray.position ),\n        this.transformPosition3( ray.position.plus( ray.direction ) ).minus( this.transformPosition3( ray.position ) ) );\n    },\n\n    /*---------------------------------------------------------------------------*\n     * inverse transforms (for Vector3 or scalar)\n     *---------------------------------------------------------------------------*/\n\n    /**\n     * Transforms a 3-dimensional vector by the inverse of our transform like it is a point with a position (translation is applied).\n     * @public\n     *\n     * For an affine matrix $M$, the result is the homogeneous multiplication $M^{-1}\\begin{bmatrix} x \\\\ y \\\\ z \\\\ 1 \\end{bmatrix}$.\n     *\n     * This is the inverse of transformPosition3().\n     *\n     * @param {Vector3} v\n     * @returns {Vector3}\n     */\n    inversePosition3: function( v ) {\n      return this.getInverse().timesVector3( v );\n    },\n\n    /**\n     * Transforms a 3-dimensional vector by the inverse of our transform like position is irrelevant (translation is not applied).\n     * @public\n     *\n     * This is the inverse of transformDelta3().\n     *\n     * @param {Vector3} v\n     * @returns {Vector3}\n     */\n    inverseDelta3: function( v ) {\n      // inverse actually has the translation rolled into the other coefficients, so we have to make this longer\n      return this.inversePosition3( v ).minus( this.inversePosition3( dot.Vector3.ZERO ) );\n    },\n\n    /**\n     * Transforms a 3-dimensional vector by the inverse of our transform like it is a normal to a curve (so that the\n     * curve is transformed, and the new normal to the curve at the transformed point is returned).\n     * @public\n     *\n     * This is the inverse of transformNormal3().\n     *\n     * @param {Vector3} v\n     * @returns {Vector3}\n     */\n    inverseNormal3: function( v ) {\n      return this.matrix.timesTransposeVector3( v );\n    },\n\n    /**\n     * Returns the x-coordinate difference for two inverse-transformed vectors, which add the x-coordinate difference of the input\n     * x (and same y,z values) beforehand.\n     * @public\n     *\n     * This is the inverse of transformDeltaX().\n     *\n     * @param {number} x\n     * @returns {number}\n     */\n    inverseDeltaX: function( x ) {\n      return this.inverseDelta3( new dot.Vector3( x, 0, 0 ) ).x;\n    },\n\n    /**\n     * Returns the y-coordinate difference for two inverse-transformed vectors, which add the y-coordinate difference of the input\n     * y (and same x,z values) beforehand.\n     * @public\n     *\n     * This is the inverse of transformDeltaY().\n     *\n     * @param {number} y\n     * @returns {number}\n     */\n    inverseDeltaY: function( y ) {\n      return this.inverseDelta3( new dot.Vector3( 0, y, 0 ) ).y;\n    },\n\n    /**\n     * Returns the z-coordinate difference for two inverse-transformed vectors, which add the z-coordinate difference of the input\n     * z (and same x,y values) beforehand.\n     * @public\n     *\n     * This is the inverse of transformDeltaZ().\n     *\n     * @param {number} z\n     * @returns {number}\n     */\n    inverseDeltaZ: function( z ) {\n      return this.inverseDelta3( new dot.Vector3( 0, 0, z ) ).z;\n    },\n\n    /**\n     * Returns an inverse-transformed ray.\n     * @pubic\n     *\n     * This is the inverse of transformRay()\n     *\n     * @param {Ray3} ray\n     * @returns {Ray3}\n     */\n    inverseRay: function( ray ) {\n      return new dot.Ray3(\n        this.inversePosition3( ray.position ),\n        this.inversePosition3( ray.position.plus( ray.direction ) ).minus( this.inversePosition3( ray.position ) )\n      );\n    }\n  } );\n\n  return Transform4;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\ndefine( 'DOT/main',[\n  'DOT/dot',\n  'DOT/BinPacker',\n  'DOT/Bounds2',\n  'DOT/Bounds3',\n  'DOT/Complex',\n  'DOT/ConvexHull2',\n  'DOT/Dimension2',\n  'DOT/EigenvalueDecomposition',\n  'DOT/LinearFunction',\n  'DOT/LUDecomposition',\n  'DOT/Matrix',\n  'DOT/Matrix3',\n  'DOT/Matrix4',\n  'DOT/MatrixOps3',\n  'DOT/Permutation',\n  'DOT/Plane3',\n  'DOT/QRDecomposition',\n  'DOT/Quaternion',\n  'DOT/Random',\n  'DOT/Ray2',\n  'DOT/Ray3',\n  'DOT/Rectangle',\n  'DOT/SingularValueDecomposition',\n  'DOT/Sphere3',\n  'DOT/Transform3',\n  'DOT/Transform4',\n  'DOT/Util',\n  'DOT/Vector2',\n  'DOT/Vector3',\n  'DOT/Vector4'\n], function( dot ) {\n  'use strict';\n  return dot;\n} );\n\n","// Copyright 2014-2015, University of Colorado Boulder\n\n/**\n * Removes a single (the first) matching object from an Array.\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'PHET_CORE/arrayRemove',['require','PHET_CORE/phetCore'],function( require ) {\n  'use strict';\n\n  var phetCore = require( 'PHET_CORE/phetCore' );\n\n  /*\n   * @param {Array} arr\n   * @param {*} item - The item to remove from the array\n   */\n  function arrayRemove( arr, item ) {\n    assert && assert( arr instanceof Array, 'arrayRemove either takes an Array' );\n\n    var index = _.indexOf( arr, item );\n    assert && assert( index >= 0, 'item not found in Array' );\n\n    arr.splice( index, 1 );\n  }\n\n  phetCore.register( 'arrayRemove', arrayRemove );\n\n  return arrayRemove;\n} );\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Creates an array of results from an iterator that takes a callback.\n *\n * For instance, if calling a function f( g ) will call g( 1 ), g( 2 ), and g( 3 ),\n * collect( function( callback ) { f( callback ); } );\n * will return [1,2,3].\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'PHET_CORE/collect',['require','PHET_CORE/phetCore'],function( require ) {\n  'use strict';\n\n  var phetCore = require( 'PHET_CORE/phetCore' );\n\n  function collect( iterate ) {\n    assert && assert( typeof iterate === 'function' );\n    var result = [];\n    iterate( function( ob ) {\n      result.push( ob );\n    } );\n    return result;\n  }\n\n  phetCore.register( 'collect', collect );\n\n  return collect;\n} );\n","// Copyright 2014-2015, University of Colorado Boulder\n\n/**\n * Scans through potential properties on an object to detect prefixed forms, and returns the first match.\n *\n * E.g. currently:\n * phetCore.detectPrefix( document.createElement( 'div' ).style, 'transform' ) === 'webkitTransform'\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'PHET_CORE/detectPrefix',['require','PHET_CORE/phetCore'],function( require ) {\n  'use strict';\n\n  var phetCore = require( 'PHET_CORE/phetCore' );\n\n  // @returns the best String str where obj[str] !== undefined, or returns undefined if that is not available\n  function detectPrefix( obj, name ) {\n    if ( obj[ name ] !== undefined ) { return name; }\n\n    // prepare for camelCase\n    name = name.charAt( 0 ).toUpperCase() + name.slice( 1 );\n\n    // Chrome planning to not introduce prefixes in the future, hopefully we will be safe\n    if ( obj[ 'moz' + name ] !== undefined ) { return 'moz' + name; }\n    if ( obj[ 'Moz' + name ] !== undefined ) { return 'Moz' + name; } // some prefixes seem to have all-caps?\n    if ( obj[ 'webkit' + name ] !== undefined ) { return 'webkit' + name; }\n    if ( obj[ 'ms' + name ] !== undefined ) { return 'ms' + name; }\n    if ( obj[ 'o' + name ] !== undefined ) { return 'o' + name; }\n    return undefined;\n  }\n\n  phetCore.register( 'detectPrefix', detectPrefix );\n\n  return detectPrefix;\n} );\n","// Copyright 2014-2015, University of Colorado Boulder\n\n/**\n * Scans through potential event properties on an object to detect prefixed forms, and returns the first match.\n *\n * E.g. currently:\n * phetCore.detectPrefixEvent( document, 'fullscreenchange' ) === 'webkitfullscreenchange'\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'PHET_CORE/detectPrefixEvent',['require','PHET_CORE/phetCore'],function( require ) {\n  'use strict';\n\n  var phetCore = require( 'PHET_CORE/phetCore' );\n\n  // @returns the best String str where obj['on'+str] !== undefined, or returns undefined if that is not available\n  function detectPrefixEvent( obj, name, isEvent ) {\n    if ( obj[ 'on' + name ] !== undefined ) { return name; }\n\n    // Chrome planning to not introduce prefixes in the future, hopefully we will be safe\n    if ( obj[ 'on' + 'moz' + name ] !== undefined ) { return 'moz' + name; }\n    if ( obj[ 'on' + 'Moz' + name ] !== undefined ) { return 'Moz' + name; } // some prefixes seem to have all-caps?\n    if ( obj[ 'on' + 'webkit' + name ] !== undefined ) { return 'webkit' + name; }\n    if ( obj[ 'on' + 'ms' + name ] !== undefined ) { return 'ms' + name; }\n    if ( obj[ 'on' + 'o' + name ] !== undefined ) { return 'o' + name; }\n    return undefined;\n  }\n\n  phetCore.register( 'detectPrefixEvent', detectPrefixEvent );\n\n  return detectPrefixEvent;\n} );\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Escaping of HTML content that will be placed in the body, inside an element as a node.\n *\n * This is NOT for escaping something in other HTML contexts, for example as an attribute value\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\ndefine( 'PHET_CORE/escapeHTML',['require','PHET_CORE/phetCore'],function( require ) {\n  'use strict';\n\n  var phetCore = require( 'PHET_CORE/phetCore' );\n\n  function escapeHTML( str ) {\n    // see https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\n    // HTML Entity Encoding\n    return str\n      .replace( /&/g, '&amp;' )\n      .replace( /</g, '&lt;' )\n      .replace( />/g, '&gt;' )\n      .replace( /\\\"/g, '&quot;' )\n      .replace( /\\'/g, '&#x27;' )\n      .replace( /\\//g, '&#x2F;' );\n  }\n\n  phetCore.register( 'escapeHTML', escapeHTML );\n\n  return escapeHTML;\n} );\n","// Copyright 2014-2015, University of Colorado Boulder\n\n/**\n * Abstraction for timed-event series that helps with variable frame-rates. Useful for things that need to happen at a\n * specific rate real-time regardless of the frame-rate.\n *\n * An EventTimer is created with a specific event \"model\" that determines when events occur, and a callback that will\n * be triggered for each event (with its time elapsed since it should have occurred).\n *\n * To run the EventTimer, call step( realTimeElapsed ), and it will call your callback for every event that would have\n * occurred over that time-frame (possibly zero).\n *\n * For example, create a timer with a constant rate that it will fire events every 1 time units:\n *\n * var timer = new phetCore.EventTimer( new phetCore.EventTimer.ConstantEventModel( 1 ), function( timeElapsed ) {\n *   console.log( 'event with timeElapsed: ' + timeElapsed );\n * } );\n *\n * Stepping once for 1.5 time units will fire once (0.5 seconds since the \"end\" of the step), and will be 0.5 seconds\n * from the next step:\n *\n * timer.step( 1.5 );\n * > event with timeElapsed: 0.5\n *\n * Stepping for a longer time will result in more events:\n *\n * timer.step( 6 );\n * > event with timeElapsed: 5.5\n * > event with timeElapsed: 4.5\n * > event with timeElapsed: 3.5\n * > event with timeElapsed: 2.5\n * > event with timeElapsed: 1.5\n * > event with timeElapsed: 0.5\n *\n * A step with zero time will trigger no events:\n *\n * timer.step( 0 );\n *\n * The timer will fire an event once it reaches the exact point in time:\n *\n * timer.step( 1.5 );\n * > event with timeElapsed: 1\n * > event with timeElapsed: 0\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'PHET_CORE/EventTimer',['require','PHET_CORE/phetCore','PHET_CORE/inherit'],function( require ) {\n  'use strict';\n\n  var phetCore = require( 'PHET_CORE/phetCore' );\n  var inherit = require( 'PHET_CORE/inherit' );\n\n  /*\n   * Create an event timer with a specific model (determines the time between events), and a callback to be called\n   * for events.\n   * @public\n   *\n   * @param {Object with getPeriodBeforeNextEvent(): Number} eventModel: getPeriodBeforeNextEvent() will be called at\n   *    the start and after every event to determine the time required to pass by before the next event occurs.\n   * @param {function} eventCallback( timeElapsed ): Will be called for every event. The timeElapsed passed in as the\n   *    only argument denotes the time elapsed since the event would have occurred. E.g. if we step for 5 seconds and\n   *    our event would have occurred 1 second into that step, the timeElapsed will be 4 seconds, since after the end\n   *    of the 5 seconds the event would have happened 4 seconds ago.\n   */\n  function EventTimer( eventModel, eventCallback ) {\n    assert && assert( typeof eventCallback === 'function', 'EventTimer requires a callback' );\n\n    // @private\n    this.eventModel = eventModel;\n    this.eventCallback = eventCallback;\n\n    // @private\n    this.timeBeforeNextEvent = this.eventModel.getPeriodBeforeNextEvent();\n  }\n\n  phetCore.register( 'EventTimer', EventTimer );\n\n  inherit( Object, EventTimer, {\n    /**\n     * Steps the timer forward by a certain amount of time. This may cause 0 or more events to actually occur.\n     * @public\n     *\n     * @param {number} dt\n     */\n    step: function( dt ) {\n      while ( dt >= this.timeBeforeNextEvent ) {\n        dt -= this.timeBeforeNextEvent;\n        this.timeBeforeNextEvent = this.eventModel.getPeriodBeforeNextEvent();\n\n        // how much time has elapsed since this event began\n        this.eventCallback( dt );\n      }\n\n      // use up the remaining DT\n      this.timeBeforeNextEvent -= dt;\n    }\n  } );\n\n  /*\n   * Event model that will fire events at a constant rate. An event will occur every 1/rate time units.\n   * @public\n   *\n   * @param {number} rate\n   */\n  EventTimer.ConstantEventModel = inherit( Object, function ConstantEventRate( rate ) {\n    assert && assert( typeof rate === 'number',\n      'The rate should be a number' );\n    assert && assert( rate > 0,\n      'We need to have a strictly positive rate in order to prevent infinite loops.' );\n\n    this.rate = rate;\n  }, {\n    // @public\n    getPeriodBeforeNextEvent: function() {\n      return 1 / this.rate;\n    }\n  } );\n\n  /*\n   * Event model that will fire events averaging a certain rate, but with the time between events being uniformly\n   * random.\n   * @public\n   *\n   * The pseudoRandomNumberSource, when called, should generate uniformly distributed random numbers in the range [0,1).\n   *\n   * @param {number} rate\n   * @param {function} pseudoRandomNumberSource() : Number\n   */\n  EventTimer.UniformEventModel = inherit( Object, function UniformEventModel( rate, pseudoRandomNumberSource ) {\n    assert && assert( typeof rate === 'number',\n      'The rate should be a number' );\n    assert && assert( typeof pseudoRandomNumberSource === 'function',\n      'The pseudo-random number source should be a function' );\n    assert && assert( rate > 0,\n      'We need to have a strictly positive rate in order to prevent infinite loops.' );\n\n    this.rate = rate;\n    this.pseudoRandomNumberSource = pseudoRandomNumberSource;\n  }, {\n    // @public\n    getPeriodBeforeNextEvent: function() {\n      var uniformRandomNumber = this.pseudoRandomNumberSource();\n      assert && assert( typeof uniformRandomNumber === 'number' &&\n      uniformRandomNumber >= 0 && uniformRandomNumber < 1,\n        'Our uniform random number is outside of its expected range with a value of ' + uniformRandomNumber );\n\n      // sample the exponential distribution\n      return uniformRandomNumber * 2 / this.rate;\n    }\n  } );\n\n  /*\n   * Event model that will fire events corresponding to a Poisson process with the specified rate.\n   * The pseudoRandomNumberSource, when called, should generate uniformly distributed random numbers in the range [0,1).\n   * @public\n   *\n   * @param {number} rate\n   * @param {function} pseudoRandomNumberSource() : number\n   */\n  EventTimer.PoissonEventModel = inherit( Object, function PoissonEventModel( rate, pseudoRandomNumberSource ) {\n    assert && assert( typeof rate === 'number',\n      'The time between events should be a number' );\n    assert && assert( typeof pseudoRandomNumberSource === 'function',\n      'The pseudo-random number source should be a function' );\n    assert && assert( rate > 0,\n      'We need to have a strictly positive poisson rate in order to prevent infinite loops.' );\n\n    this.rate = rate;\n    this.pseudoRandomNumberSource = pseudoRandomNumberSource;\n  }, {\n    // @public\n    getPeriodBeforeNextEvent: function() {\n      // A poisson process can be described as having an independent exponential distribution for the time between\n      // consecutive events.\n      // see http://en.wikipedia.org/wiki/Exponential_distribution#Generating_exponential_variates and\n      // http://en.wikipedia.org/wiki/Poisson_process\n\n      var uniformRandomNumber = this.pseudoRandomNumberSource();\n      assert && assert( typeof uniformRandomNumber === 'number' &&\n      uniformRandomNumber >= 0 && uniformRandomNumber < 1,\n        'Our uniform random number is outside of its expected range with a value of ' + uniformRandomNumber );\n\n      // sample the exponential distribution\n      return -Math.log( uniformRandomNumber ) / this.rate;\n    }\n  } );\n\n  return EventTimer;\n} );\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Loads a script\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'PHET_CORE/loadScript',['require','PHET_CORE/phetCore'],function( require ) {\n  'use strict';\n\n  var phetCore = require( 'PHET_CORE/phetCore' );\n\n  /*\n   * Load a script. The only required argument is src, and can be specified either as\n   * loadScript( \"<url>\" ) or loadScript( { src: \"<url>\", ... other options ... } ).\n   *\n   * Arguments:\n   *   src:         The source of the script to load\n   *   callback:    A callback to call (with no arguments) once the script is loaded and has been executed\n   *   async:       Whether the script should be loaded asynchronously. Defaults to true\n   *   cacheBuster: Whether the URL should have an appended query string to work around caches\n   */\n  function loadScript( args ) {\n    // handle a string argument\n    if ( typeof args === 'string' ) {\n      args = { src: args };\n    }\n\n    var src = args.src;\n    var callback = args.callback;\n    var async = args.async === undefined ? true : args.async;\n    var cacheBuster = args.cacheBuster === undefined ? false : args.cacheBuster;\n\n    var called = false;\n\n    var script = document.createElement( 'script' );\n    script.type = 'text/javascript';\n    script.async = async;\n    script.onload = script.onreadystatechange = function() {\n      var state = this.readyState;\n      if ( state && state !== 'complete' && state !== 'loaded' ) {\n        return;\n      }\n\n      if ( !called ) {\n        called = true;\n\n        if ( callback ) {\n          callback();\n        }\n      }\n    };\n\n    // make sure things aren't cached, just in case\n    script.src = src + ( cacheBuster ? '?random=' + Math.random().toFixed( 10 ) : '' );\n\n    var other = document.getElementsByTagName( 'script' )[ 0 ];\n    other.parentNode.insertBefore( script, other );\n  }\n\n  phetCore.register( 'loadScript', loadScript );\n\n  return loadScript;\n} );\n","// Copyright 2014-2015, University of Colorado Boulder\n\n/**\n * Creates an array of arrays, which consists of pairs of objects from the input array without duplication.\n *\n * For example, phetCore.pairs( [ 'a', 'b', 'c' ] ) will return:\n * [ [ 'a', 'b' ], [ 'a', 'c' ], [ 'b', 'c' ] ]\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'PHET_CORE/pairs',['require','PHET_CORE/phetCore'],function( require ) {\n  'use strict';\n\n  var phetCore = require( 'PHET_CORE/phetCore' );\n\n  function pairs( array ) {\n    var result = [];\n    var length = array.length;\n    if ( length > 1 ) {\n      for ( var i = 0; i < length - 1; i++ ) {\n        var first = array[ i ];\n        for ( var j = i + 1; j < length; j++ ) {\n          result.push( [ first, array[ j ] ] );\n        }\n      }\n    }\n    return result;\n  }\n\n  phetCore.register( 'pairs', pairs );\n\n  return pairs;\n} );\n\n","// Copyright 2014-2015, University of Colorado Boulder\n\n/**\n * Partitions an array into two arrays: the first contains all elements that satisfy the predicate, and the second\n * contains all the (other) elements that do not satisfy the predicate.\n *\n * e.g. partition( [1,2,3,4], function( n ) { return n % 2 === 0; } ) will return [[2,4],[1,3]]\n *\n * @author Jonathan Olson <jonathan.olson@colorado.edu>\n */\n\ndefine( 'PHET_CORE/partition',['require','PHET_CORE/phetCore'],function( require ) {\n  'use strict';\n\n  var phetCore = require( 'PHET_CORE/phetCore' );\n\n  function partition( array, predicate ) {\n    assert && assert( array instanceof Array );\n    assert && assert( typeof predicate === 'function' );\n\n    var satisfied = [];\n    var unsatisfied = [];\n    var length = array.length;\n    for ( var i = 0; i < length; i++ ) {\n      if ( predicate( array[ i ] ) ) {\n        satisfied.push( array[ i ] );\n      }\n      else {\n        unsatisfied.push( array[ i ] );\n      }\n    }\n\n    return [ satisfied, unsatisfied ];\n  }\n\n  phetCore.register( 'partition', partition );\n\n  return partition;\n} );\n","// Copyright 2013-2015, University of Colorado Boulder\n\n/**\n * Code for testing which platform is running.  Use sparingly, if at all!\n *\n * Sample usage:\n * if (platform.firefox) {node.renderer = 'canvas';}\n *\n * @author Sam Reid\n */\ndefine( 'PHET_CORE/platform',['require','PHET_CORE/phetCore'],function( require ) {\n  'use strict';\n\n  var phetCore = require( 'PHET_CORE/phetCore' );\n\n  var ua = navigator.userAgent;\n\n  // Checks to see whether we are IE, and if so whether the version matches.\n  function isIE( version ) {\n    return getInternetExplorerVersion() === version;\n  }\n\n  //IE11 no longer reports MSIE in the user agent string, see https://github.com/phetsims/phet-core/issues/12\n  //This code is adapted from http://stackoverflow.com/questions/17907445/how-to-detect-ie11\n  function getInternetExplorerVersion() {\n    var rv = -1;\n    var re = null;\n    if ( navigator.appName === 'Microsoft Internet Explorer' ) {\n      re = new RegExp( 'MSIE ([0-9]{1,}[.0-9]{0,})' );\n      if ( re.exec( ua ) !== null ) {\n        rv = parseFloat( RegExp.$1 );\n      }\n    }\n    else if ( navigator.appName === 'Netscape' ) {\n      re = new RegExp( 'Trident/.*rv:([0-9]{1,}[.0-9]{0,})' );\n      if ( re.exec( ua ) !== null ) {\n        rv = parseFloat( RegExp.$1 );\n      }\n    }\n    return rv;\n  }\n\n  var platform = {\n    // Whether the browser is most likely Firefox\n    firefox: ua.toLowerCase().indexOf( 'firefox' ) > -1,\n\n    // Whether the browser is most likely Safari running on iOS\n    // See http://stackoverflow.com/questions/3007480/determine-if-user-navigated-from-mobile-safari\n    mobileSafari: !!( ua.match( /(iPod|iPhone|iPad)/ ) && ua.match( /AppleWebKit/ ) ),\n\n    // Whether the browser is a matching version of Safari running on OS X\n    safari5: !!( ua.match( /Version\\/5\\./ ) && ua.match( /Safari\\// ) && ua.match( /AppleWebKit/ ) ),\n    safari6: !!( ua.match( /Version\\/6\\./ ) && ua.match( /Safari\\// ) && ua.match( /AppleWebKit/ ) ),\n    safari7: !!( ua.match( /Version\\/7\\./ ) && ua.match( /Safari\\// ) && ua.match( /AppleWebKit/ ) ),\n\n    // Whether the browser is some type of IE (Internet Explorer)\n    ie: getInternetExplorerVersion() !== -1,\n\n    // Whether the browser is a specific version of IE (Internet Explorer)\n    ie9: isIE( 9 ),\n    ie10: isIE( 10 ),\n    ie11: isIE( 11 ),\n\n    // Whether the browser has Android in its user agent\n    android: ua.indexOf( 'Android' ) > 0,\n\n    // Whether the browser is Microsoft Edge\n    edge: !!ua.match( /Edge\\// ),\n\n    // Whether the browser is Chromium-based (usually Chrome)\n    chromium: (/chrom(e|ium)/).test( ua.toLowerCase() ) && !ua.match( /Edge\\// )\n  };\n  phetCore.register( 'platform', platform );\n\n  return platform;\n} );\n","// Copyright 2013-2015, University of Colorado Boulder\n\ndefine( 'PHET_CORE/main',[\n  'PHET_CORE/phetCore',\n  'PHET_CORE/arrayRemove',\n  'PHET_CORE/cleanArray',\n  'PHET_CORE/collect',\n  'PHET_CORE/detectPrefix',\n  'PHET_CORE/detectPrefixEvent',\n  'PHET_CORE/escapeHTML',\n  'PHET_CORE/EventTimer',\n  'PHET_CORE/extend',\n  'PHET_CORE/inherit',\n  'PHET_CORE/isArray',\n  'PHET_CORE/loadScript',\n  'PHET_CORE/pairs',\n  'PHET_CORE/partition',\n  'PHET_CORE/phetAllocation',\n  'PHET_CORE/platform',\n  'PHET_CORE/Poolable'\n], function( phetCore ) {\n  'use strict';\n  return phetCore;\n} );\n\n","// Copyright 2013-2015, University of Colorado Boulder\n\nrequire.config( {\n  deps: [ 'main', 'AXON/main', 'DOT/main', 'PHET_CORE/main' ],\n\n  paths: {\n    KITE: '.',\n    DOT: '../../dot/js',\n    PHET_CORE: '../../phet-core/js',\n    AXON: '../../axon/js'\n  },\n\n  // optional cache buster to make browser refresh load all included scripts, can be disabled with ?cacheBuster=false\n  urlArgs: Date.now()\n} );\n\ndefine(\"config\", function(){});\n\n"]}