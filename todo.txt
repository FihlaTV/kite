
Should the tangent return a unit vector?
windingIntersection in segment base class?

Bugs:
  Why did the following not work for Ellipse tangent:
    return this.unitTransform.transformDelta2( Vector2.createPolar( 1, angle + ( this.anticlockwise ? Math.PI / 2 : -Math.PI / 2 ) ) );
    Is transformDelta2 off? Or conceptual error?
  Arc/EllipticalArc shear transform seems broken
  Intersection on ray parallel to 'lines' can cause false positives, possibly false negatives?
    Need to handle intersection at endpoints solidly
  arc2/arc3 examples seem to trigger canvas bug? verify.
  Circle transform seems to break
  Stroking miterlimit on shear-transformed shape seems to not happen. normal-shear a rectangle

Testing:
  Create a simple way to do the comparisons that we already have in Scenery's tests
  Interactive visualization tests to check:
    positionAt
    tangentAt
    curvatureAt (use 1/curvature as the radius of curvature, and confirm the correct sign)
    bounds
    stroked paths
    transformations (+reflections and shears)
    hit testing (compute for every pixel and shade)

Performance:
  Consider eval to build a function that can render the shape to canvas, without all of the indirection, etc.

Intersection:
  see http://cagd.cs.byu.edu/~557/text/ch7.pdf
  Sweep-line handling: http://www.lems.brown.edu/~wq/projects/cs252.html

Shapes:
  lineDash stroking
  Add curvatureAt( t ), since this will be necessary for determining regions (if multiple segments have the same tangent at the same endpoint)
  Move some computations to Dot if they are somewhat general-purpose
  Finiteness checks a la WebKit?
  Investigate shear / scale effects on stroking -- important for bounds
  Quadratic curve offsets need implementation improvement (32 sub-quadratics is too costly)
    Consider a more abstract segment like QuadraticOffset, CubicOffset, EllipticalArcOffset.
      Transforming + offsets are easy
      Can discretize later
  Precise intersection with bounding box (not just intersection of bounds)
  Nonzero/evenodd support (not yet implemented in browsers)
  Region support:
    Edge cases (literally):
      Multiple curves intersect at same point with same tangent, but have different curvatures
      Overlapping segments (like a circle and a circular arc)
    Break into regions that can test for nonzero/evenodd, then combine adjacent ones so we can have efficient segments without the 'stroked region' overlap
    Fixes self-intersection in 'stroked' path
    Allows Constructive Solid Geometry
      Intersection of each type of segment - how to handle endpoint intersections in general
  WebGL support? Probably just export a discretization with vertices. Region handling is important for this.
  Function for higher-performance possibly-expanded bounds for redraw?
  Consider bounding box handling for an arbitrary transform, for use with Node's isInGlobalBounds( globalBounds, currentTransform ).
